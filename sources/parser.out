Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_EQUAL
    BINARY_AND_OP
    BINARY_LEFT_EQUAL
    BINARY_RIGHT_EQUAL
    BINARY_RIGHT_SHIFT_OP
    BINARY_XOR_OP
    CASE_EQUALITY
    COMBINED_COMPARISON_OP
    COMPLEMENT_OP
    DEFINED
    EXPONENT_AND
    FALSE
    MATCHED_STRINGS_OP
    NIL
    OPTIONAL_SYMBOL
    OR_EQUAL
    OVERLOAD_MINUS
    OVERLOAD_PLUS
    POW
    SELF
    SINGLE_AND_EQUAL
    SINGLE_OR_EQUAL
    SYMBOL
    TERM
    TRUE
    UNARY_OP
    XOR_EQUAL
    _FILE_
    _LINE_

Grammar

Rule 0     S' -> program
Rule 1     program -> expression
Rule 2     expression -> string_literals
Rule 3     expression -> prints
Rule 4     expression -> variable
Rule 5     expression -> array
Rule 6     expression -> hash
Rule 7     expression -> method_invocation
Rule 8     expression -> super
Rule 9     expression -> assignment
Rule 10    expression -> expression_operations
Rule 11    expression -> control_structure
Rule 12    expression -> class_definitions
Rule 13    expression -> singleton_class_definitions
Rule 14    expression -> module_definitions
Rule 15    expression -> method_definitions
Rule 16    expression -> singleton_method_definitions
Rule 17    expression -> alias
Rule 18    expression -> undef
Rule 19    expression -> defined
Rule 20    variable -> VAR_GLOBAL
Rule 21    variable -> VAR_INSTANCE
Rule 22    variable -> VAR_CLASS
Rule 23    variable -> VAR_LOCAL
Rule 24    variable -> VAR_SYSTEM
Rule 25    variable -> VAR_CONSTANT
Rule 26    string_literals -> STRING
Rule 27    string_literals -> string_concat
Rule 28    string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
Rule 29    string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
Rule 30    concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY
Rule 31    prints -> print
Rule 32    prints -> puts
Rule 33    print -> PRINT expression
Rule 34    print -> PRINT LPAREN expression RPAREN
Rule 35    puts -> PUTS expression
Rule 36    puts -> PUTS LPAREN expression RPAREN
Rule 37    array -> LBRACKET args_array RBRACKET
Rule 38    array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET
Rule 39    args_array -> data
Rule 40    args_array -> data COMMA args_array
Rule 41    hash -> LKEY args_hash RKEY
Rule 42    args_hash -> data HASH_ROCKET data
Rule 43    args_hash -> data HASH_ROCKET data COMMA args_hash
Rule 44    function -> IDENTIFIER LPAREN RPAREN
Rule 45    function -> IDENTIFIER LPAREN args_method RPAREN
Rule 46    super -> SUPER LPAREN RPAREN
Rule 47    super -> SUPER LPAREN args_method RPAREN
Rule 48    method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
Rule 49    method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
Rule 50    method_invocation -> IDENTIFIER DOT IDENTIFIER
Rule 51    args_method -> data
Rule 52    args_method -> data COMMA args_method
Rule 53    assignment -> variable EQUAL_SYMBOL data
Rule 54    assignment -> array_data EQUAL_SYMBOL data
Rule 55    assignment -> method_invocation EQUAL_SYMBOL data
Rule 56    assignment -> self_assigment
Rule 57    assignment -> mult_assigment
Rule 58    self_assigment -> variable op_assigment data
Rule 59    op_assigment -> PLUS_EQUAL
Rule 60    op_assigment -> MINUS_EQUAL
Rule 61    op_assigment -> TIMES_EQUAL
Rule 62    op_assigment -> DIVIDE_EQUAL
Rule 63    op_assigment -> MOD_EQUAL
Rule 64    op_assigment -> POW_EQUAL
Rule 65    mult_assigment -> list_var EQUAL_SYMBOL args_method
Rule 66    list_var -> variable COMMA
Rule 67    list_var -> variable COMMA list_var
Rule 68    list_var -> variable
Rule 69    control_structure -> if
Rule 70    control_structure -> if_modifier
Rule 71    control_structure -> unless
Rule 72    control_structure -> unless_modifier
Rule 73    control_structure -> and
Rule 74    control_structure -> or
Rule 75    control_structure -> not
Rule 76    control_structure -> range_expressions
Rule 77    control_structure -> while
Rule 78    control_structure -> while_modifier
Rule 79    control_structure -> until
Rule 80    control_structure -> until_modifier
Rule 81    control_structure -> iterator
Rule 82    control_structure -> for
Rule 83    control_structure -> yield
Rule 84    control_structure -> begin_expression
Rule 85    control_structure -> retry
Rule 86    control_structure -> return
Rule 87    control_structure -> break
Rule 88    control_structure -> next
Rule 89    control_structure -> redo
Rule 90    control_structure -> BEGIN
Rule 91    control_structure -> END
Rule 92    control_structure -> case
Rule 93    if -> IF expression expression END
Rule 94    if -> IF expression THEN expression END
Rule 95    if -> IF expression expression elsif END
Rule 96    if -> IF expression THEN expression elsif END
Rule 97    if -> IF expression expression else END
Rule 98    if -> IF expression THEN expression else END
Rule 99    if -> IF expression expression elsif else END
Rule 100   if -> IF expression THEN expression elsif else END
Rule 101   elsif -> ELSIF expression expression END
Rule 102   elsif -> ELSIF expression THEN expression END
Rule 103   else -> ELSE expression
Rule 104   if_modifier -> expression IF expression
Rule 105   unless -> UNLESS expression expression END
Rule 106   unless -> UNLESS expression THEN expression END
Rule 107   unless -> UNLESS expression THEN expression else END
Rule 108   unless_modifier -> expression UNLESS expression
Rule 109   case -> CASE expression END
Rule 110   case -> CASE expression when END
Rule 111   case -> CASE expression else END
Rule 112   case -> CASE expression when else END
Rule 113   when -> WHEN it_expression THEN expression
Rule 114   when -> WHEN it_expression THEN expression when
Rule 115   when -> WHEN it_expression expression
Rule 116   when -> WHEN it_expression expression when
Rule 117   it_expression -> expression
Rule 118   it_expression -> expression it_expression
Rule 119   and -> expression AND expression
Rule 120   or -> expression OR expression
Rule 121   not -> NOT expression
Rule 122   not -> NOT_SYMBOL expression
Rule 123   not -> expression NOTEQUAL expression
Rule 124   not -> expression OPPOSITE_MATCHED_STRINGS_OP expression
Rule 125   range_expressions -> expression RANGE_INCLUSIVE expression
Rule 126   range_expressions -> expression RANGE_EXCLUSIVE expression
Rule 127   while -> WHILE expression expression END
Rule 128   while -> WHILE expression DO expression END
Rule 129   while_modifier -> expression WHILE expression
Rule 130   until -> UNTIL expression DO expression END
Rule 131   until -> UNTIL expression expression END
Rule 132   until_modifier -> expression UNTIL expression
Rule 133   iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END
Rule 134   iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
Rule 135   for -> FOR IDENTIFIER IN expression DO expression END
Rule 136   for -> FOR IDENTIFIER IN expression expression END
Rule 137   yield -> YIELD LPAREN expression RPAREN
Rule 138   yield -> YIELD expression
Rule 139   begin_expression -> BEGIN expression END
Rule 140   begin_expression -> BEGIN expression RESCUE expression END
Rule 141   begin_expression -> BEGIN expression ENSURE expression END
Rule 142   begin_expression -> BEGIN expression RESCUE expression ENSURE expression END
Rule 143   begin_expression -> BEGIN expression RESCUE expression ELSE expression END
Rule 144   begin_expression -> BEGIN expression ELSE expression ENSURE expression END
Rule 145   begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END
Rule 146   retry -> RETRY
Rule 147   return -> RETURN
Rule 148   return -> RETURN args_method
Rule 149   break -> BREAK
Rule 150   next -> NEXT
Rule 151   redo -> REDO
Rule 152   begin -> BEGIN LKEY expression RKEY
Rule 153   end -> END RKEY expression LKEY
Rule 154   class_definitions -> CLASS IDENTIFIER expression END
Rule 155   class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END
Rule 156   singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END
Rule 157   module_definitions -> MODULE IDENTIFIER expression END
Rule 158   method_definitions -> DEF function expression END
Rule 159   singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END
Rule 160   singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
Rule 161   alias -> ALIAS expression expression
Rule 162   undef -> UNDEF expression
Rule 163   defined -> DEFINED_OP expression
Rule 164   expression_operations -> opmate
Rule 165   expression_operations -> LPAREN opmate RPAREN
Rule 166   expression_operations -> expression_operations op expression_operations
Rule 167   expression_operations -> expression_operations op opmate
Rule 168   expression_operations -> LPAREN opmate RPAREN op expression_operations
Rule 169   expression_operations -> expression_operations op LPAREN opmate RPAREN
Rule 170   opmate -> data op data
Rule 171   op -> PLUS
Rule 172   op -> MINUS
Rule 173   op -> TIMES
Rule 174   op -> DIVIDE
Rule 175   op -> MOD
Rule 176   op -> EQUAL
Rule 177   op -> NOTEQUAL
Rule 178   op -> GREATERTHAN
Rule 179   op -> GREATERTHANEQUAL
Rule 180   op -> LESSERTHAN
Rule 181   op -> LESSERTHANEQUAL
Rule 182   data -> NUMBER
Rule 183   data -> STRING
Rule 184   data -> variable

Terminals, with rules where they appear

ALIAS                : 161
AND                  : 119
AND_EQUAL            : 
BEGIN                : 90 139 140 141 142 143 144 145 152
BINARY_AND_OP        : 
BINARY_LEFT_EQUAL    : 
BINARY_LEFT_SHIFT_OP : 156
BINARY_RIGHT_EQUAL   : 
BINARY_RIGHT_SHIFT_OP : 
BINARY_XOR_OP        : 
BREAK                : 149
CASE                 : 109 110 111 112
CASE_EQUALITY        : 
CLASS                : 154 155 156
COMBINED_COMPARISON_OP : 
COMMA                : 40 43 52 66 67
COMPLEMENT_OP        : 
DEF                  : 158 159 160
DEFINED              : 
DEFINED_OP           : 163
DIVIDE               : 174
DIVIDE_EQUAL         : 62
DO                   : 128 130 133 135
DOT                  : 48 49 50 159 160
DOUBLE_QUOTED        : 28 28 29 29
ELSE                 : 103 143 144 145
ELSIF                : 101 102
END                  : 91 93 94 95 96 97 98 99 100 101 102 105 106 107 109 110 111 112 127 128 130 131 133 135 136 139 140 141 142 143 144 145 153 154 155 156 157 158 159 160
ENSURE               : 141 142 144 145
EQUAL                : 176
EQUAL_SYMBOL         : 53 54 55 65
EXPONENT_AND         : 
FALSE                : 
FOR                  : 135 136
GREATERTHAN          : 178
GREATERTHANEQUAL     : 179
HASH_ROCKET          : 42 43
IDENTIFIER           : 28 29 29 30 38 44 45 48 48 49 49 50 50 135 136 154 155 157 159 160
IF                   : 93 94 95 96 97 98 99 100 104
IN                   : 135 136
LBRACKET             : 37 38
LESSERTHAN           : 155 180
LESSERTHANEQUAL      : 181
LKEY                 : 30 41 134 152 153
LPAREN               : 34 36 44 45 46 47 48 49 137 160 165 168 169
MATCHED_STRINGS_OP   : 
MINUS                : 172
MINUS_EQUAL          : 60
MOD                  : 175
MODULE               : 157
MOD_EQUAL            : 63
NEXT                 : 150
NIL                  : 
NOT                  : 121
NOTEQUAL             : 123 177
NOT_SYMBOL           : 122
NUMBER               : 38 182
NUMBER_SIGN          : 30
OPPOSITE_MATCHED_STRINGS_OP : 124
OPTIONAL_SYMBOL      : 
OR                   : 120
OR_EQUAL             : 
OR_SYMBOL            : 133 133 134 134
OVERLOAD_MINUS       : 
OVERLOAD_PLUS        : 
PLUS                 : 171
PLUS_EQUAL           : 59
POW                  : 
POW_EQUAL            : 64
PRINT                : 33 34
PUTS                 : 35 36
RANGE_EXCLUSIVE      : 126
RANGE_INCLUSIVE      : 125
RBRACKET             : 37 38
REDO                 : 151
RESCUE               : 140 142 143 145
RETRY                : 146
RETURN               : 147 148
RKEY                 : 30 41 134 152 153
RPAREN               : 34 36 44 45 46 47 48 49 137 160 165 168 169
SELF                 : 
SINGLE_AND_EQUAL     : 
SINGLE_OR_EQUAL      : 
STRING               : 26 183
SUPER                : 46 47 155
SYMBOL               : 
TERM                 : 
THEN                 : 94 96 98 100 102 106 107 113 114
TIMES                : 173
TIMES_EQUAL          : 61
TRUE                 : 
UNARY_OP             : 
UNDEF                : 162
UNLESS               : 105 106 107 108
UNTIL                : 130 131 132
VAR_CLASS            : 22
VAR_CONSTANT         : 25
VAR_GLOBAL           : 20
VAR_INSTANCE         : 21
VAR_LOCAL            : 23
VAR_SYSTEM           : 24
WHEN                 : 113 114 115 116
WHILE                : 127 128 129
XOR_EQUAL            : 
YIELD                : 137 138
_FILE_               : 
_LINE_               : 
error                : 

Nonterminals, with rules where they appear

alias                : 17
and                  : 73
args_array           : 37 40
args_hash            : 41 43
args_method          : 45 47 49 52 65 148 160
array                : 5
array_data           : 54
assignment           : 9
begin                : 
begin_expression     : 84
break                : 87
case                 : 92
class_definitions    : 12
concat               : 28 29
control_structure    : 11
data                 : 39 40 42 42 43 43 51 52 53 54 55 58 170 170
defined              : 19
else                 : 97 98 99 100 107 111 112
elsif                : 95 96 99 100
end                  : 
expression           : 1 33 34 35 36 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 104 104 105 105 106 106 107 107 108 108 109 110 111 112 113 114 115 116 117 118 119 119 120 120 121 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 133 134 134 134 135 135 136 136 137 138 139 140 140 141 141 142 142 142 143 143 143 144 144 144 145 145 145 145 152 153 154 155 156 156 157 158 159 159 160 160 161 161 162 163
expression_operations : 10 166 166 167 168 169
for                  : 82
function             : 158
hash                 : 6
if                   : 69
if_modifier          : 70
it_expression        : 113 114 115 116 118
iterator             : 81
list_var             : 65 67
method_definitions   : 15
method_invocation    : 7 55
module_definitions   : 14
mult_assigment       : 57
next                 : 88
not                  : 75
op                   : 166 167 168 169 170
op_assigment         : 58
opmate               : 164 165 167 168 169
or                   : 74
print                : 31
prints               : 3
program              : 0
puts                 : 32
range_expressions    : 76
redo                 : 89
retry                : 85
return               : 86
self_assigment       : 56
singleton_class_definitions : 13
singleton_method_definitions : 16
string_concat        : 27
string_literals      : 2
super                : 8
undef                : 18
unless               : 71
unless_modifier      : 72
until                : 79
until_modifier       : 80
variable             : 4 53 58 66 67 68 184
when                 : 110 112 114 116
while                : 77
while_modifier       : 78
yield                : 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    program                        shift and go to state 1
    expression                     shift and go to state 2
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 1

    (0) S' -> program .



state 2

    (1) program -> expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    $end            reduce using rule 1 (program -> expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 3

    (2) expression -> string_literals .

    IF              reduce using rule 2 (expression -> string_literals .)
    UNLESS          reduce using rule 2 (expression -> string_literals .)
    AND             reduce using rule 2 (expression -> string_literals .)
    OR              reduce using rule 2 (expression -> string_literals .)
    NOTEQUAL        reduce using rule 2 (expression -> string_literals .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 2 (expression -> string_literals .)
    RANGE_INCLUSIVE reduce using rule 2 (expression -> string_literals .)
    RANGE_EXCLUSIVE reduce using rule 2 (expression -> string_literals .)
    WHILE           reduce using rule 2 (expression -> string_literals .)
    UNTIL           reduce using rule 2 (expression -> string_literals .)
    DO              reduce using rule 2 (expression -> string_literals .)
    LKEY            reduce using rule 2 (expression -> string_literals .)
    $end            reduce using rule 2 (expression -> string_literals .)
    END             reduce using rule 2 (expression -> string_literals .)
    RESCUE          reduce using rule 2 (expression -> string_literals .)
    ENSURE          reduce using rule 2 (expression -> string_literals .)
    ELSE            reduce using rule 2 (expression -> string_literals .)
    DOT             reduce using rule 2 (expression -> string_literals .)
    STRING          reduce using rule 2 (expression -> string_literals .)
    VAR_GLOBAL      reduce using rule 2 (expression -> string_literals .)
    VAR_INSTANCE    reduce using rule 2 (expression -> string_literals .)
    VAR_CLASS       reduce using rule 2 (expression -> string_literals .)
    VAR_LOCAL       reduce using rule 2 (expression -> string_literals .)
    VAR_SYSTEM      reduce using rule 2 (expression -> string_literals .)
    VAR_CONSTANT    reduce using rule 2 (expression -> string_literals .)
    LBRACKET        reduce using rule 2 (expression -> string_literals .)
    IDENTIFIER      reduce using rule 2 (expression -> string_literals .)
    SUPER           reduce using rule 2 (expression -> string_literals .)
    LPAREN          reduce using rule 2 (expression -> string_literals .)
    BEGIN           reduce using rule 2 (expression -> string_literals .)
    CLASS           reduce using rule 2 (expression -> string_literals .)
    MODULE          reduce using rule 2 (expression -> string_literals .)
    DEF             reduce using rule 2 (expression -> string_literals .)
    ALIAS           reduce using rule 2 (expression -> string_literals .)
    UNDEF           reduce using rule 2 (expression -> string_literals .)
    DEFINED_OP      reduce using rule 2 (expression -> string_literals .)
    DOUBLE_QUOTED   reduce using rule 2 (expression -> string_literals .)
    PRINT           reduce using rule 2 (expression -> string_literals .)
    PUTS            reduce using rule 2 (expression -> string_literals .)
    NOT             reduce using rule 2 (expression -> string_literals .)
    NOT_SYMBOL      reduce using rule 2 (expression -> string_literals .)
    FOR             reduce using rule 2 (expression -> string_literals .)
    YIELD           reduce using rule 2 (expression -> string_literals .)
    RETRY           reduce using rule 2 (expression -> string_literals .)
    RETURN          reduce using rule 2 (expression -> string_literals .)
    BREAK           reduce using rule 2 (expression -> string_literals .)
    NEXT            reduce using rule 2 (expression -> string_literals .)
    REDO            reduce using rule 2 (expression -> string_literals .)
    CASE            reduce using rule 2 (expression -> string_literals .)
    NUMBER          reduce using rule 2 (expression -> string_literals .)
    THEN            reduce using rule 2 (expression -> string_literals .)
    WHEN            reduce using rule 2 (expression -> string_literals .)
    RPAREN          reduce using rule 2 (expression -> string_literals .)
    ELSIF           reduce using rule 2 (expression -> string_literals .)
    OR_SYMBOL       reduce using rule 2 (expression -> string_literals .)
    RKEY            reduce using rule 2 (expression -> string_literals .)


state 4

    (3) expression -> prints .

    IF              reduce using rule 3 (expression -> prints .)
    UNLESS          reduce using rule 3 (expression -> prints .)
    AND             reduce using rule 3 (expression -> prints .)
    OR              reduce using rule 3 (expression -> prints .)
    NOTEQUAL        reduce using rule 3 (expression -> prints .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 3 (expression -> prints .)
    RANGE_INCLUSIVE reduce using rule 3 (expression -> prints .)
    RANGE_EXCLUSIVE reduce using rule 3 (expression -> prints .)
    WHILE           reduce using rule 3 (expression -> prints .)
    UNTIL           reduce using rule 3 (expression -> prints .)
    DO              reduce using rule 3 (expression -> prints .)
    LKEY            reduce using rule 3 (expression -> prints .)
    $end            reduce using rule 3 (expression -> prints .)
    END             reduce using rule 3 (expression -> prints .)
    RESCUE          reduce using rule 3 (expression -> prints .)
    ENSURE          reduce using rule 3 (expression -> prints .)
    ELSE            reduce using rule 3 (expression -> prints .)
    DOT             reduce using rule 3 (expression -> prints .)
    STRING          reduce using rule 3 (expression -> prints .)
    VAR_GLOBAL      reduce using rule 3 (expression -> prints .)
    VAR_INSTANCE    reduce using rule 3 (expression -> prints .)
    VAR_CLASS       reduce using rule 3 (expression -> prints .)
    VAR_LOCAL       reduce using rule 3 (expression -> prints .)
    VAR_SYSTEM      reduce using rule 3 (expression -> prints .)
    VAR_CONSTANT    reduce using rule 3 (expression -> prints .)
    LBRACKET        reduce using rule 3 (expression -> prints .)
    IDENTIFIER      reduce using rule 3 (expression -> prints .)
    SUPER           reduce using rule 3 (expression -> prints .)
    LPAREN          reduce using rule 3 (expression -> prints .)
    BEGIN           reduce using rule 3 (expression -> prints .)
    CLASS           reduce using rule 3 (expression -> prints .)
    MODULE          reduce using rule 3 (expression -> prints .)
    DEF             reduce using rule 3 (expression -> prints .)
    ALIAS           reduce using rule 3 (expression -> prints .)
    UNDEF           reduce using rule 3 (expression -> prints .)
    DEFINED_OP      reduce using rule 3 (expression -> prints .)
    DOUBLE_QUOTED   reduce using rule 3 (expression -> prints .)
    PRINT           reduce using rule 3 (expression -> prints .)
    PUTS            reduce using rule 3 (expression -> prints .)
    NOT             reduce using rule 3 (expression -> prints .)
    NOT_SYMBOL      reduce using rule 3 (expression -> prints .)
    FOR             reduce using rule 3 (expression -> prints .)
    YIELD           reduce using rule 3 (expression -> prints .)
    RETRY           reduce using rule 3 (expression -> prints .)
    RETURN          reduce using rule 3 (expression -> prints .)
    BREAK           reduce using rule 3 (expression -> prints .)
    NEXT            reduce using rule 3 (expression -> prints .)
    REDO            reduce using rule 3 (expression -> prints .)
    CASE            reduce using rule 3 (expression -> prints .)
    NUMBER          reduce using rule 3 (expression -> prints .)
    THEN            reduce using rule 3 (expression -> prints .)
    WHEN            reduce using rule 3 (expression -> prints .)
    RPAREN          reduce using rule 3 (expression -> prints .)
    ELSIF           reduce using rule 3 (expression -> prints .)
    OR_SYMBOL       reduce using rule 3 (expression -> prints .)
    RKEY            reduce using rule 3 (expression -> prints .)


state 5

    (4) expression -> variable .
    (53) assignment -> variable . EQUAL_SYMBOL data
    (58) self_assigment -> variable . op_assigment data
    (66) list_var -> variable . COMMA
    (67) list_var -> variable . COMMA list_var
    (68) list_var -> variable .
    (184) data -> variable .
    (59) op_assigment -> . PLUS_EQUAL
    (60) op_assigment -> . MINUS_EQUAL
    (61) op_assigment -> . TIMES_EQUAL
    (62) op_assigment -> . DIVIDE_EQUAL
    (63) op_assigment -> . MOD_EQUAL
    (64) op_assigment -> . POW_EQUAL

  ! shift/reduce conflict for EQUAL_SYMBOL resolved as shift
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 4 (expression -> variable .)
    IF              reduce using rule 4 (expression -> variable .)
    UNLESS          reduce using rule 4 (expression -> variable .)
    AND             reduce using rule 4 (expression -> variable .)
    OR              reduce using rule 4 (expression -> variable .)
    NOTEQUAL        reduce using rule 4 (expression -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 4 (expression -> variable .)
    RANGE_INCLUSIVE reduce using rule 4 (expression -> variable .)
    RANGE_EXCLUSIVE reduce using rule 4 (expression -> variable .)
    WHILE           reduce using rule 4 (expression -> variable .)
    UNTIL           reduce using rule 4 (expression -> variable .)
    DO              reduce using rule 4 (expression -> variable .)
    LKEY            reduce using rule 4 (expression -> variable .)
    $end            reduce using rule 4 (expression -> variable .)
    END             reduce using rule 4 (expression -> variable .)
    RESCUE          reduce using rule 4 (expression -> variable .)
    ENSURE          reduce using rule 4 (expression -> variable .)
    ELSE            reduce using rule 4 (expression -> variable .)
    DOT             reduce using rule 4 (expression -> variable .)
    STRING          reduce using rule 4 (expression -> variable .)
    VAR_GLOBAL      reduce using rule 4 (expression -> variable .)
    VAR_INSTANCE    reduce using rule 4 (expression -> variable .)
    VAR_CLASS       reduce using rule 4 (expression -> variable .)
    VAR_LOCAL       reduce using rule 4 (expression -> variable .)
    VAR_SYSTEM      reduce using rule 4 (expression -> variable .)
    VAR_CONSTANT    reduce using rule 4 (expression -> variable .)
    LBRACKET        reduce using rule 4 (expression -> variable .)
    IDENTIFIER      reduce using rule 4 (expression -> variable .)
    SUPER           reduce using rule 4 (expression -> variable .)
    LPAREN          reduce using rule 4 (expression -> variable .)
    BEGIN           reduce using rule 4 (expression -> variable .)
    CLASS           reduce using rule 4 (expression -> variable .)
    MODULE          reduce using rule 4 (expression -> variable .)
    DEF             reduce using rule 4 (expression -> variable .)
    ALIAS           reduce using rule 4 (expression -> variable .)
    UNDEF           reduce using rule 4 (expression -> variable .)
    DEFINED_OP      reduce using rule 4 (expression -> variable .)
    DOUBLE_QUOTED   reduce using rule 4 (expression -> variable .)
    PRINT           reduce using rule 4 (expression -> variable .)
    PUTS            reduce using rule 4 (expression -> variable .)
    NOT             reduce using rule 4 (expression -> variable .)
    NOT_SYMBOL      reduce using rule 4 (expression -> variable .)
    FOR             reduce using rule 4 (expression -> variable .)
    YIELD           reduce using rule 4 (expression -> variable .)
    RETRY           reduce using rule 4 (expression -> variable .)
    RETURN          reduce using rule 4 (expression -> variable .)
    BREAK           reduce using rule 4 (expression -> variable .)
    NEXT            reduce using rule 4 (expression -> variable .)
    REDO            reduce using rule 4 (expression -> variable .)
    CASE            reduce using rule 4 (expression -> variable .)
    NUMBER          reduce using rule 4 (expression -> variable .)
    THEN            reduce using rule 4 (expression -> variable .)
    WHEN            reduce using rule 4 (expression -> variable .)
    RPAREN          reduce using rule 4 (expression -> variable .)
    ELSIF           reduce using rule 4 (expression -> variable .)
    OR_SYMBOL       reduce using rule 4 (expression -> variable .)
    RKEY            reduce using rule 4 (expression -> variable .)
    EQUAL_SYMBOL    shift and go to state 102
    COMMA           shift and go to state 104
    PLUS            reduce using rule 184 (data -> variable .)
    MINUS           reduce using rule 184 (data -> variable .)
    TIMES           reduce using rule 184 (data -> variable .)
    DIVIDE          reduce using rule 184 (data -> variable .)
    MOD             reduce using rule 184 (data -> variable .)
    EQUAL           reduce using rule 184 (data -> variable .)
    GREATERTHAN     reduce using rule 184 (data -> variable .)
    GREATERTHANEQUAL reduce using rule 184 (data -> variable .)
    LESSERTHAN      reduce using rule 184 (data -> variable .)
    LESSERTHANEQUAL reduce using rule 184 (data -> variable .)
    PLUS_EQUAL      shift and go to state 105
    MINUS_EQUAL     shift and go to state 106
    TIMES_EQUAL     shift and go to state 107
    DIVIDE_EQUAL    shift and go to state 108
    MOD_EQUAL       shift and go to state 109
    POW_EQUAL       shift and go to state 110

  ! EQUAL_SYMBOL    [ reduce using rule 68 (list_var -> variable .) ]
  ! NOTEQUAL        [ reduce using rule 184 (data -> variable .) ]

    op_assigment                   shift and go to state 103

state 6

    (5) expression -> array .

    IF              reduce using rule 5 (expression -> array .)
    UNLESS          reduce using rule 5 (expression -> array .)
    AND             reduce using rule 5 (expression -> array .)
    OR              reduce using rule 5 (expression -> array .)
    NOTEQUAL        reduce using rule 5 (expression -> array .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 5 (expression -> array .)
    RANGE_INCLUSIVE reduce using rule 5 (expression -> array .)
    RANGE_EXCLUSIVE reduce using rule 5 (expression -> array .)
    WHILE           reduce using rule 5 (expression -> array .)
    UNTIL           reduce using rule 5 (expression -> array .)
    DO              reduce using rule 5 (expression -> array .)
    LKEY            reduce using rule 5 (expression -> array .)
    $end            reduce using rule 5 (expression -> array .)
    END             reduce using rule 5 (expression -> array .)
    RESCUE          reduce using rule 5 (expression -> array .)
    ENSURE          reduce using rule 5 (expression -> array .)
    ELSE            reduce using rule 5 (expression -> array .)
    DOT             reduce using rule 5 (expression -> array .)
    STRING          reduce using rule 5 (expression -> array .)
    VAR_GLOBAL      reduce using rule 5 (expression -> array .)
    VAR_INSTANCE    reduce using rule 5 (expression -> array .)
    VAR_CLASS       reduce using rule 5 (expression -> array .)
    VAR_LOCAL       reduce using rule 5 (expression -> array .)
    VAR_SYSTEM      reduce using rule 5 (expression -> array .)
    VAR_CONSTANT    reduce using rule 5 (expression -> array .)
    LBRACKET        reduce using rule 5 (expression -> array .)
    IDENTIFIER      reduce using rule 5 (expression -> array .)
    SUPER           reduce using rule 5 (expression -> array .)
    LPAREN          reduce using rule 5 (expression -> array .)
    BEGIN           reduce using rule 5 (expression -> array .)
    CLASS           reduce using rule 5 (expression -> array .)
    MODULE          reduce using rule 5 (expression -> array .)
    DEF             reduce using rule 5 (expression -> array .)
    ALIAS           reduce using rule 5 (expression -> array .)
    UNDEF           reduce using rule 5 (expression -> array .)
    DEFINED_OP      reduce using rule 5 (expression -> array .)
    DOUBLE_QUOTED   reduce using rule 5 (expression -> array .)
    PRINT           reduce using rule 5 (expression -> array .)
    PUTS            reduce using rule 5 (expression -> array .)
    NOT             reduce using rule 5 (expression -> array .)
    NOT_SYMBOL      reduce using rule 5 (expression -> array .)
    FOR             reduce using rule 5 (expression -> array .)
    YIELD           reduce using rule 5 (expression -> array .)
    RETRY           reduce using rule 5 (expression -> array .)
    RETURN          reduce using rule 5 (expression -> array .)
    BREAK           reduce using rule 5 (expression -> array .)
    NEXT            reduce using rule 5 (expression -> array .)
    REDO            reduce using rule 5 (expression -> array .)
    CASE            reduce using rule 5 (expression -> array .)
    NUMBER          reduce using rule 5 (expression -> array .)
    THEN            reduce using rule 5 (expression -> array .)
    WHEN            reduce using rule 5 (expression -> array .)
    RPAREN          reduce using rule 5 (expression -> array .)
    ELSIF           reduce using rule 5 (expression -> array .)
    OR_SYMBOL       reduce using rule 5 (expression -> array .)
    RKEY            reduce using rule 5 (expression -> array .)


state 7

    (6) expression -> hash .

    IF              reduce using rule 6 (expression -> hash .)
    UNLESS          reduce using rule 6 (expression -> hash .)
    AND             reduce using rule 6 (expression -> hash .)
    OR              reduce using rule 6 (expression -> hash .)
    NOTEQUAL        reduce using rule 6 (expression -> hash .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 6 (expression -> hash .)
    RANGE_INCLUSIVE reduce using rule 6 (expression -> hash .)
    RANGE_EXCLUSIVE reduce using rule 6 (expression -> hash .)
    WHILE           reduce using rule 6 (expression -> hash .)
    UNTIL           reduce using rule 6 (expression -> hash .)
    DO              reduce using rule 6 (expression -> hash .)
    LKEY            reduce using rule 6 (expression -> hash .)
    $end            reduce using rule 6 (expression -> hash .)
    END             reduce using rule 6 (expression -> hash .)
    RESCUE          reduce using rule 6 (expression -> hash .)
    ENSURE          reduce using rule 6 (expression -> hash .)
    ELSE            reduce using rule 6 (expression -> hash .)
    DOT             reduce using rule 6 (expression -> hash .)
    STRING          reduce using rule 6 (expression -> hash .)
    VAR_GLOBAL      reduce using rule 6 (expression -> hash .)
    VAR_INSTANCE    reduce using rule 6 (expression -> hash .)
    VAR_CLASS       reduce using rule 6 (expression -> hash .)
    VAR_LOCAL       reduce using rule 6 (expression -> hash .)
    VAR_SYSTEM      reduce using rule 6 (expression -> hash .)
    VAR_CONSTANT    reduce using rule 6 (expression -> hash .)
    LBRACKET        reduce using rule 6 (expression -> hash .)
    IDENTIFIER      reduce using rule 6 (expression -> hash .)
    SUPER           reduce using rule 6 (expression -> hash .)
    LPAREN          reduce using rule 6 (expression -> hash .)
    BEGIN           reduce using rule 6 (expression -> hash .)
    CLASS           reduce using rule 6 (expression -> hash .)
    MODULE          reduce using rule 6 (expression -> hash .)
    DEF             reduce using rule 6 (expression -> hash .)
    ALIAS           reduce using rule 6 (expression -> hash .)
    UNDEF           reduce using rule 6 (expression -> hash .)
    DEFINED_OP      reduce using rule 6 (expression -> hash .)
    DOUBLE_QUOTED   reduce using rule 6 (expression -> hash .)
    PRINT           reduce using rule 6 (expression -> hash .)
    PUTS            reduce using rule 6 (expression -> hash .)
    NOT             reduce using rule 6 (expression -> hash .)
    NOT_SYMBOL      reduce using rule 6 (expression -> hash .)
    FOR             reduce using rule 6 (expression -> hash .)
    YIELD           reduce using rule 6 (expression -> hash .)
    RETRY           reduce using rule 6 (expression -> hash .)
    RETURN          reduce using rule 6 (expression -> hash .)
    BREAK           reduce using rule 6 (expression -> hash .)
    NEXT            reduce using rule 6 (expression -> hash .)
    REDO            reduce using rule 6 (expression -> hash .)
    CASE            reduce using rule 6 (expression -> hash .)
    NUMBER          reduce using rule 6 (expression -> hash .)
    THEN            reduce using rule 6 (expression -> hash .)
    WHEN            reduce using rule 6 (expression -> hash .)
    RPAREN          reduce using rule 6 (expression -> hash .)
    ELSIF           reduce using rule 6 (expression -> hash .)
    OR_SYMBOL       reduce using rule 6 (expression -> hash .)
    RKEY            reduce using rule 6 (expression -> hash .)


state 8

    (7) expression -> method_invocation .
    (55) assignment -> method_invocation . EQUAL_SYMBOL data

    IF              reduce using rule 7 (expression -> method_invocation .)
    UNLESS          reduce using rule 7 (expression -> method_invocation .)
    AND             reduce using rule 7 (expression -> method_invocation .)
    OR              reduce using rule 7 (expression -> method_invocation .)
    NOTEQUAL        reduce using rule 7 (expression -> method_invocation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 7 (expression -> method_invocation .)
    RANGE_INCLUSIVE reduce using rule 7 (expression -> method_invocation .)
    RANGE_EXCLUSIVE reduce using rule 7 (expression -> method_invocation .)
    WHILE           reduce using rule 7 (expression -> method_invocation .)
    UNTIL           reduce using rule 7 (expression -> method_invocation .)
    DO              reduce using rule 7 (expression -> method_invocation .)
    LKEY            reduce using rule 7 (expression -> method_invocation .)
    $end            reduce using rule 7 (expression -> method_invocation .)
    END             reduce using rule 7 (expression -> method_invocation .)
    RESCUE          reduce using rule 7 (expression -> method_invocation .)
    ENSURE          reduce using rule 7 (expression -> method_invocation .)
    ELSE            reduce using rule 7 (expression -> method_invocation .)
    DOT             reduce using rule 7 (expression -> method_invocation .)
    STRING          reduce using rule 7 (expression -> method_invocation .)
    VAR_GLOBAL      reduce using rule 7 (expression -> method_invocation .)
    VAR_INSTANCE    reduce using rule 7 (expression -> method_invocation .)
    VAR_CLASS       reduce using rule 7 (expression -> method_invocation .)
    VAR_LOCAL       reduce using rule 7 (expression -> method_invocation .)
    VAR_SYSTEM      reduce using rule 7 (expression -> method_invocation .)
    VAR_CONSTANT    reduce using rule 7 (expression -> method_invocation .)
    LBRACKET        reduce using rule 7 (expression -> method_invocation .)
    IDENTIFIER      reduce using rule 7 (expression -> method_invocation .)
    SUPER           reduce using rule 7 (expression -> method_invocation .)
    LPAREN          reduce using rule 7 (expression -> method_invocation .)
    BEGIN           reduce using rule 7 (expression -> method_invocation .)
    CLASS           reduce using rule 7 (expression -> method_invocation .)
    MODULE          reduce using rule 7 (expression -> method_invocation .)
    DEF             reduce using rule 7 (expression -> method_invocation .)
    ALIAS           reduce using rule 7 (expression -> method_invocation .)
    UNDEF           reduce using rule 7 (expression -> method_invocation .)
    DEFINED_OP      reduce using rule 7 (expression -> method_invocation .)
    DOUBLE_QUOTED   reduce using rule 7 (expression -> method_invocation .)
    PRINT           reduce using rule 7 (expression -> method_invocation .)
    PUTS            reduce using rule 7 (expression -> method_invocation .)
    NOT             reduce using rule 7 (expression -> method_invocation .)
    NOT_SYMBOL      reduce using rule 7 (expression -> method_invocation .)
    FOR             reduce using rule 7 (expression -> method_invocation .)
    YIELD           reduce using rule 7 (expression -> method_invocation .)
    RETRY           reduce using rule 7 (expression -> method_invocation .)
    RETURN          reduce using rule 7 (expression -> method_invocation .)
    BREAK           reduce using rule 7 (expression -> method_invocation .)
    NEXT            reduce using rule 7 (expression -> method_invocation .)
    REDO            reduce using rule 7 (expression -> method_invocation .)
    CASE            reduce using rule 7 (expression -> method_invocation .)
    NUMBER          reduce using rule 7 (expression -> method_invocation .)
    THEN            reduce using rule 7 (expression -> method_invocation .)
    WHEN            reduce using rule 7 (expression -> method_invocation .)
    RPAREN          reduce using rule 7 (expression -> method_invocation .)
    ELSIF           reduce using rule 7 (expression -> method_invocation .)
    OR_SYMBOL       reduce using rule 7 (expression -> method_invocation .)
    RKEY            reduce using rule 7 (expression -> method_invocation .)
    EQUAL_SYMBOL    shift and go to state 111


state 9

    (8) expression -> super .

    IF              reduce using rule 8 (expression -> super .)
    UNLESS          reduce using rule 8 (expression -> super .)
    AND             reduce using rule 8 (expression -> super .)
    OR              reduce using rule 8 (expression -> super .)
    NOTEQUAL        reduce using rule 8 (expression -> super .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 8 (expression -> super .)
    RANGE_INCLUSIVE reduce using rule 8 (expression -> super .)
    RANGE_EXCLUSIVE reduce using rule 8 (expression -> super .)
    WHILE           reduce using rule 8 (expression -> super .)
    UNTIL           reduce using rule 8 (expression -> super .)
    DO              reduce using rule 8 (expression -> super .)
    LKEY            reduce using rule 8 (expression -> super .)
    $end            reduce using rule 8 (expression -> super .)
    END             reduce using rule 8 (expression -> super .)
    RESCUE          reduce using rule 8 (expression -> super .)
    ENSURE          reduce using rule 8 (expression -> super .)
    ELSE            reduce using rule 8 (expression -> super .)
    DOT             reduce using rule 8 (expression -> super .)
    STRING          reduce using rule 8 (expression -> super .)
    VAR_GLOBAL      reduce using rule 8 (expression -> super .)
    VAR_INSTANCE    reduce using rule 8 (expression -> super .)
    VAR_CLASS       reduce using rule 8 (expression -> super .)
    VAR_LOCAL       reduce using rule 8 (expression -> super .)
    VAR_SYSTEM      reduce using rule 8 (expression -> super .)
    VAR_CONSTANT    reduce using rule 8 (expression -> super .)
    LBRACKET        reduce using rule 8 (expression -> super .)
    IDENTIFIER      reduce using rule 8 (expression -> super .)
    SUPER           reduce using rule 8 (expression -> super .)
    LPAREN          reduce using rule 8 (expression -> super .)
    BEGIN           reduce using rule 8 (expression -> super .)
    CLASS           reduce using rule 8 (expression -> super .)
    MODULE          reduce using rule 8 (expression -> super .)
    DEF             reduce using rule 8 (expression -> super .)
    ALIAS           reduce using rule 8 (expression -> super .)
    UNDEF           reduce using rule 8 (expression -> super .)
    DEFINED_OP      reduce using rule 8 (expression -> super .)
    DOUBLE_QUOTED   reduce using rule 8 (expression -> super .)
    PRINT           reduce using rule 8 (expression -> super .)
    PUTS            reduce using rule 8 (expression -> super .)
    NOT             reduce using rule 8 (expression -> super .)
    NOT_SYMBOL      reduce using rule 8 (expression -> super .)
    FOR             reduce using rule 8 (expression -> super .)
    YIELD           reduce using rule 8 (expression -> super .)
    RETRY           reduce using rule 8 (expression -> super .)
    RETURN          reduce using rule 8 (expression -> super .)
    BREAK           reduce using rule 8 (expression -> super .)
    NEXT            reduce using rule 8 (expression -> super .)
    REDO            reduce using rule 8 (expression -> super .)
    CASE            reduce using rule 8 (expression -> super .)
    NUMBER          reduce using rule 8 (expression -> super .)
    THEN            reduce using rule 8 (expression -> super .)
    WHEN            reduce using rule 8 (expression -> super .)
    RPAREN          reduce using rule 8 (expression -> super .)
    ELSIF           reduce using rule 8 (expression -> super .)
    OR_SYMBOL       reduce using rule 8 (expression -> super .)
    RKEY            reduce using rule 8 (expression -> super .)


state 10

    (9) expression -> assignment .

    IF              reduce using rule 9 (expression -> assignment .)
    UNLESS          reduce using rule 9 (expression -> assignment .)
    AND             reduce using rule 9 (expression -> assignment .)
    OR              reduce using rule 9 (expression -> assignment .)
    NOTEQUAL        reduce using rule 9 (expression -> assignment .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 9 (expression -> assignment .)
    RANGE_INCLUSIVE reduce using rule 9 (expression -> assignment .)
    RANGE_EXCLUSIVE reduce using rule 9 (expression -> assignment .)
    WHILE           reduce using rule 9 (expression -> assignment .)
    UNTIL           reduce using rule 9 (expression -> assignment .)
    DO              reduce using rule 9 (expression -> assignment .)
    LKEY            reduce using rule 9 (expression -> assignment .)
    $end            reduce using rule 9 (expression -> assignment .)
    END             reduce using rule 9 (expression -> assignment .)
    RESCUE          reduce using rule 9 (expression -> assignment .)
    ENSURE          reduce using rule 9 (expression -> assignment .)
    ELSE            reduce using rule 9 (expression -> assignment .)
    DOT             reduce using rule 9 (expression -> assignment .)
    STRING          reduce using rule 9 (expression -> assignment .)
    VAR_GLOBAL      reduce using rule 9 (expression -> assignment .)
    VAR_INSTANCE    reduce using rule 9 (expression -> assignment .)
    VAR_CLASS       reduce using rule 9 (expression -> assignment .)
    VAR_LOCAL       reduce using rule 9 (expression -> assignment .)
    VAR_SYSTEM      reduce using rule 9 (expression -> assignment .)
    VAR_CONSTANT    reduce using rule 9 (expression -> assignment .)
    LBRACKET        reduce using rule 9 (expression -> assignment .)
    IDENTIFIER      reduce using rule 9 (expression -> assignment .)
    SUPER           reduce using rule 9 (expression -> assignment .)
    LPAREN          reduce using rule 9 (expression -> assignment .)
    BEGIN           reduce using rule 9 (expression -> assignment .)
    CLASS           reduce using rule 9 (expression -> assignment .)
    MODULE          reduce using rule 9 (expression -> assignment .)
    DEF             reduce using rule 9 (expression -> assignment .)
    ALIAS           reduce using rule 9 (expression -> assignment .)
    UNDEF           reduce using rule 9 (expression -> assignment .)
    DEFINED_OP      reduce using rule 9 (expression -> assignment .)
    DOUBLE_QUOTED   reduce using rule 9 (expression -> assignment .)
    PRINT           reduce using rule 9 (expression -> assignment .)
    PUTS            reduce using rule 9 (expression -> assignment .)
    NOT             reduce using rule 9 (expression -> assignment .)
    NOT_SYMBOL      reduce using rule 9 (expression -> assignment .)
    FOR             reduce using rule 9 (expression -> assignment .)
    YIELD           reduce using rule 9 (expression -> assignment .)
    RETRY           reduce using rule 9 (expression -> assignment .)
    RETURN          reduce using rule 9 (expression -> assignment .)
    BREAK           reduce using rule 9 (expression -> assignment .)
    NEXT            reduce using rule 9 (expression -> assignment .)
    REDO            reduce using rule 9 (expression -> assignment .)
    CASE            reduce using rule 9 (expression -> assignment .)
    NUMBER          reduce using rule 9 (expression -> assignment .)
    THEN            reduce using rule 9 (expression -> assignment .)
    WHEN            reduce using rule 9 (expression -> assignment .)
    RPAREN          reduce using rule 9 (expression -> assignment .)
    ELSIF           reduce using rule 9 (expression -> assignment .)
    OR_SYMBOL       reduce using rule 9 (expression -> assignment .)
    RKEY            reduce using rule 9 (expression -> assignment .)


state 11

    (10) expression -> expression_operations .
    (166) expression_operations -> expression_operations . op expression_operations
    (167) expression_operations -> expression_operations . op opmate
    (169) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for NOTEQUAL resolved as shift
    IF              reduce using rule 10 (expression -> expression_operations .)
    UNLESS          reduce using rule 10 (expression -> expression_operations .)
    AND             reduce using rule 10 (expression -> expression_operations .)
    OR              reduce using rule 10 (expression -> expression_operations .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 10 (expression -> expression_operations .)
    RANGE_INCLUSIVE reduce using rule 10 (expression -> expression_operations .)
    RANGE_EXCLUSIVE reduce using rule 10 (expression -> expression_operations .)
    WHILE           reduce using rule 10 (expression -> expression_operations .)
    UNTIL           reduce using rule 10 (expression -> expression_operations .)
    DO              reduce using rule 10 (expression -> expression_operations .)
    LKEY            reduce using rule 10 (expression -> expression_operations .)
    $end            reduce using rule 10 (expression -> expression_operations .)
    END             reduce using rule 10 (expression -> expression_operations .)
    RESCUE          reduce using rule 10 (expression -> expression_operations .)
    ENSURE          reduce using rule 10 (expression -> expression_operations .)
    ELSE            reduce using rule 10 (expression -> expression_operations .)
    DOT             reduce using rule 10 (expression -> expression_operations .)
    STRING          reduce using rule 10 (expression -> expression_operations .)
    VAR_GLOBAL      reduce using rule 10 (expression -> expression_operations .)
    VAR_INSTANCE    reduce using rule 10 (expression -> expression_operations .)
    VAR_CLASS       reduce using rule 10 (expression -> expression_operations .)
    VAR_LOCAL       reduce using rule 10 (expression -> expression_operations .)
    VAR_SYSTEM      reduce using rule 10 (expression -> expression_operations .)
    VAR_CONSTANT    reduce using rule 10 (expression -> expression_operations .)
    LBRACKET        reduce using rule 10 (expression -> expression_operations .)
    IDENTIFIER      reduce using rule 10 (expression -> expression_operations .)
    SUPER           reduce using rule 10 (expression -> expression_operations .)
    LPAREN          reduce using rule 10 (expression -> expression_operations .)
    BEGIN           reduce using rule 10 (expression -> expression_operations .)
    CLASS           reduce using rule 10 (expression -> expression_operations .)
    MODULE          reduce using rule 10 (expression -> expression_operations .)
    DEF             reduce using rule 10 (expression -> expression_operations .)
    ALIAS           reduce using rule 10 (expression -> expression_operations .)
    UNDEF           reduce using rule 10 (expression -> expression_operations .)
    DEFINED_OP      reduce using rule 10 (expression -> expression_operations .)
    DOUBLE_QUOTED   reduce using rule 10 (expression -> expression_operations .)
    PRINT           reduce using rule 10 (expression -> expression_operations .)
    PUTS            reduce using rule 10 (expression -> expression_operations .)
    NOT             reduce using rule 10 (expression -> expression_operations .)
    NOT_SYMBOL      reduce using rule 10 (expression -> expression_operations .)
    FOR             reduce using rule 10 (expression -> expression_operations .)
    YIELD           reduce using rule 10 (expression -> expression_operations .)
    RETRY           reduce using rule 10 (expression -> expression_operations .)
    RETURN          reduce using rule 10 (expression -> expression_operations .)
    BREAK           reduce using rule 10 (expression -> expression_operations .)
    NEXT            reduce using rule 10 (expression -> expression_operations .)
    REDO            reduce using rule 10 (expression -> expression_operations .)
    CASE            reduce using rule 10 (expression -> expression_operations .)
    NUMBER          reduce using rule 10 (expression -> expression_operations .)
    THEN            reduce using rule 10 (expression -> expression_operations .)
    WHEN            reduce using rule 10 (expression -> expression_operations .)
    RPAREN          reduce using rule 10 (expression -> expression_operations .)
    ELSIF           reduce using rule 10 (expression -> expression_operations .)
    OR_SYMBOL       reduce using rule 10 (expression -> expression_operations .)
    RKEY            reduce using rule 10 (expression -> expression_operations .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

  ! NOTEQUAL        [ reduce using rule 10 (expression -> expression_operations .) ]

    op                             shift and go to state 112

state 12

    (11) expression -> control_structure .

    IF              reduce using rule 11 (expression -> control_structure .)
    UNLESS          reduce using rule 11 (expression -> control_structure .)
    AND             reduce using rule 11 (expression -> control_structure .)
    OR              reduce using rule 11 (expression -> control_structure .)
    NOTEQUAL        reduce using rule 11 (expression -> control_structure .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 11 (expression -> control_structure .)
    RANGE_INCLUSIVE reduce using rule 11 (expression -> control_structure .)
    RANGE_EXCLUSIVE reduce using rule 11 (expression -> control_structure .)
    WHILE           reduce using rule 11 (expression -> control_structure .)
    UNTIL           reduce using rule 11 (expression -> control_structure .)
    DO              reduce using rule 11 (expression -> control_structure .)
    LKEY            reduce using rule 11 (expression -> control_structure .)
    $end            reduce using rule 11 (expression -> control_structure .)
    END             reduce using rule 11 (expression -> control_structure .)
    RESCUE          reduce using rule 11 (expression -> control_structure .)
    ENSURE          reduce using rule 11 (expression -> control_structure .)
    ELSE            reduce using rule 11 (expression -> control_structure .)
    DOT             reduce using rule 11 (expression -> control_structure .)
    STRING          reduce using rule 11 (expression -> control_structure .)
    VAR_GLOBAL      reduce using rule 11 (expression -> control_structure .)
    VAR_INSTANCE    reduce using rule 11 (expression -> control_structure .)
    VAR_CLASS       reduce using rule 11 (expression -> control_structure .)
    VAR_LOCAL       reduce using rule 11 (expression -> control_structure .)
    VAR_SYSTEM      reduce using rule 11 (expression -> control_structure .)
    VAR_CONSTANT    reduce using rule 11 (expression -> control_structure .)
    LBRACKET        reduce using rule 11 (expression -> control_structure .)
    IDENTIFIER      reduce using rule 11 (expression -> control_structure .)
    SUPER           reduce using rule 11 (expression -> control_structure .)
    LPAREN          reduce using rule 11 (expression -> control_structure .)
    BEGIN           reduce using rule 11 (expression -> control_structure .)
    CLASS           reduce using rule 11 (expression -> control_structure .)
    MODULE          reduce using rule 11 (expression -> control_structure .)
    DEF             reduce using rule 11 (expression -> control_structure .)
    ALIAS           reduce using rule 11 (expression -> control_structure .)
    UNDEF           reduce using rule 11 (expression -> control_structure .)
    DEFINED_OP      reduce using rule 11 (expression -> control_structure .)
    DOUBLE_QUOTED   reduce using rule 11 (expression -> control_structure .)
    PRINT           reduce using rule 11 (expression -> control_structure .)
    PUTS            reduce using rule 11 (expression -> control_structure .)
    NOT             reduce using rule 11 (expression -> control_structure .)
    NOT_SYMBOL      reduce using rule 11 (expression -> control_structure .)
    FOR             reduce using rule 11 (expression -> control_structure .)
    YIELD           reduce using rule 11 (expression -> control_structure .)
    RETRY           reduce using rule 11 (expression -> control_structure .)
    RETURN          reduce using rule 11 (expression -> control_structure .)
    BREAK           reduce using rule 11 (expression -> control_structure .)
    NEXT            reduce using rule 11 (expression -> control_structure .)
    REDO            reduce using rule 11 (expression -> control_structure .)
    CASE            reduce using rule 11 (expression -> control_structure .)
    NUMBER          reduce using rule 11 (expression -> control_structure .)
    THEN            reduce using rule 11 (expression -> control_structure .)
    WHEN            reduce using rule 11 (expression -> control_structure .)
    RPAREN          reduce using rule 11 (expression -> control_structure .)
    ELSIF           reduce using rule 11 (expression -> control_structure .)
    OR_SYMBOL       reduce using rule 11 (expression -> control_structure .)
    RKEY            reduce using rule 11 (expression -> control_structure .)


state 13

    (12) expression -> class_definitions .

    IF              reduce using rule 12 (expression -> class_definitions .)
    UNLESS          reduce using rule 12 (expression -> class_definitions .)
    AND             reduce using rule 12 (expression -> class_definitions .)
    OR              reduce using rule 12 (expression -> class_definitions .)
    NOTEQUAL        reduce using rule 12 (expression -> class_definitions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 12 (expression -> class_definitions .)
    RANGE_INCLUSIVE reduce using rule 12 (expression -> class_definitions .)
    RANGE_EXCLUSIVE reduce using rule 12 (expression -> class_definitions .)
    WHILE           reduce using rule 12 (expression -> class_definitions .)
    UNTIL           reduce using rule 12 (expression -> class_definitions .)
    DO              reduce using rule 12 (expression -> class_definitions .)
    LKEY            reduce using rule 12 (expression -> class_definitions .)
    $end            reduce using rule 12 (expression -> class_definitions .)
    END             reduce using rule 12 (expression -> class_definitions .)
    RESCUE          reduce using rule 12 (expression -> class_definitions .)
    ENSURE          reduce using rule 12 (expression -> class_definitions .)
    ELSE            reduce using rule 12 (expression -> class_definitions .)
    DOT             reduce using rule 12 (expression -> class_definitions .)
    STRING          reduce using rule 12 (expression -> class_definitions .)
    VAR_GLOBAL      reduce using rule 12 (expression -> class_definitions .)
    VAR_INSTANCE    reduce using rule 12 (expression -> class_definitions .)
    VAR_CLASS       reduce using rule 12 (expression -> class_definitions .)
    VAR_LOCAL       reduce using rule 12 (expression -> class_definitions .)
    VAR_SYSTEM      reduce using rule 12 (expression -> class_definitions .)
    VAR_CONSTANT    reduce using rule 12 (expression -> class_definitions .)
    LBRACKET        reduce using rule 12 (expression -> class_definitions .)
    IDENTIFIER      reduce using rule 12 (expression -> class_definitions .)
    SUPER           reduce using rule 12 (expression -> class_definitions .)
    LPAREN          reduce using rule 12 (expression -> class_definitions .)
    BEGIN           reduce using rule 12 (expression -> class_definitions .)
    CLASS           reduce using rule 12 (expression -> class_definitions .)
    MODULE          reduce using rule 12 (expression -> class_definitions .)
    DEF             reduce using rule 12 (expression -> class_definitions .)
    ALIAS           reduce using rule 12 (expression -> class_definitions .)
    UNDEF           reduce using rule 12 (expression -> class_definitions .)
    DEFINED_OP      reduce using rule 12 (expression -> class_definitions .)
    DOUBLE_QUOTED   reduce using rule 12 (expression -> class_definitions .)
    PRINT           reduce using rule 12 (expression -> class_definitions .)
    PUTS            reduce using rule 12 (expression -> class_definitions .)
    NOT             reduce using rule 12 (expression -> class_definitions .)
    NOT_SYMBOL      reduce using rule 12 (expression -> class_definitions .)
    FOR             reduce using rule 12 (expression -> class_definitions .)
    YIELD           reduce using rule 12 (expression -> class_definitions .)
    RETRY           reduce using rule 12 (expression -> class_definitions .)
    RETURN          reduce using rule 12 (expression -> class_definitions .)
    BREAK           reduce using rule 12 (expression -> class_definitions .)
    NEXT            reduce using rule 12 (expression -> class_definitions .)
    REDO            reduce using rule 12 (expression -> class_definitions .)
    CASE            reduce using rule 12 (expression -> class_definitions .)
    NUMBER          reduce using rule 12 (expression -> class_definitions .)
    THEN            reduce using rule 12 (expression -> class_definitions .)
    WHEN            reduce using rule 12 (expression -> class_definitions .)
    RPAREN          reduce using rule 12 (expression -> class_definitions .)
    ELSIF           reduce using rule 12 (expression -> class_definitions .)
    OR_SYMBOL       reduce using rule 12 (expression -> class_definitions .)
    RKEY            reduce using rule 12 (expression -> class_definitions .)


state 14

    (13) expression -> singleton_class_definitions .

    IF              reduce using rule 13 (expression -> singleton_class_definitions .)
    UNLESS          reduce using rule 13 (expression -> singleton_class_definitions .)
    AND             reduce using rule 13 (expression -> singleton_class_definitions .)
    OR              reduce using rule 13 (expression -> singleton_class_definitions .)
    NOTEQUAL        reduce using rule 13 (expression -> singleton_class_definitions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 13 (expression -> singleton_class_definitions .)
    RANGE_INCLUSIVE reduce using rule 13 (expression -> singleton_class_definitions .)
    RANGE_EXCLUSIVE reduce using rule 13 (expression -> singleton_class_definitions .)
    WHILE           reduce using rule 13 (expression -> singleton_class_definitions .)
    UNTIL           reduce using rule 13 (expression -> singleton_class_definitions .)
    DO              reduce using rule 13 (expression -> singleton_class_definitions .)
    LKEY            reduce using rule 13 (expression -> singleton_class_definitions .)
    $end            reduce using rule 13 (expression -> singleton_class_definitions .)
    END             reduce using rule 13 (expression -> singleton_class_definitions .)
    RESCUE          reduce using rule 13 (expression -> singleton_class_definitions .)
    ENSURE          reduce using rule 13 (expression -> singleton_class_definitions .)
    ELSE            reduce using rule 13 (expression -> singleton_class_definitions .)
    DOT             reduce using rule 13 (expression -> singleton_class_definitions .)
    STRING          reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_GLOBAL      reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_INSTANCE    reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_CLASS       reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_LOCAL       reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_SYSTEM      reduce using rule 13 (expression -> singleton_class_definitions .)
    VAR_CONSTANT    reduce using rule 13 (expression -> singleton_class_definitions .)
    LBRACKET        reduce using rule 13 (expression -> singleton_class_definitions .)
    IDENTIFIER      reduce using rule 13 (expression -> singleton_class_definitions .)
    SUPER           reduce using rule 13 (expression -> singleton_class_definitions .)
    LPAREN          reduce using rule 13 (expression -> singleton_class_definitions .)
    BEGIN           reduce using rule 13 (expression -> singleton_class_definitions .)
    CLASS           reduce using rule 13 (expression -> singleton_class_definitions .)
    MODULE          reduce using rule 13 (expression -> singleton_class_definitions .)
    DEF             reduce using rule 13 (expression -> singleton_class_definitions .)
    ALIAS           reduce using rule 13 (expression -> singleton_class_definitions .)
    UNDEF           reduce using rule 13 (expression -> singleton_class_definitions .)
    DEFINED_OP      reduce using rule 13 (expression -> singleton_class_definitions .)
    DOUBLE_QUOTED   reduce using rule 13 (expression -> singleton_class_definitions .)
    PRINT           reduce using rule 13 (expression -> singleton_class_definitions .)
    PUTS            reduce using rule 13 (expression -> singleton_class_definitions .)
    NOT             reduce using rule 13 (expression -> singleton_class_definitions .)
    NOT_SYMBOL      reduce using rule 13 (expression -> singleton_class_definitions .)
    FOR             reduce using rule 13 (expression -> singleton_class_definitions .)
    YIELD           reduce using rule 13 (expression -> singleton_class_definitions .)
    RETRY           reduce using rule 13 (expression -> singleton_class_definitions .)
    RETURN          reduce using rule 13 (expression -> singleton_class_definitions .)
    BREAK           reduce using rule 13 (expression -> singleton_class_definitions .)
    NEXT            reduce using rule 13 (expression -> singleton_class_definitions .)
    REDO            reduce using rule 13 (expression -> singleton_class_definitions .)
    CASE            reduce using rule 13 (expression -> singleton_class_definitions .)
    NUMBER          reduce using rule 13 (expression -> singleton_class_definitions .)
    THEN            reduce using rule 13 (expression -> singleton_class_definitions .)
    WHEN            reduce using rule 13 (expression -> singleton_class_definitions .)
    RPAREN          reduce using rule 13 (expression -> singleton_class_definitions .)
    ELSIF           reduce using rule 13 (expression -> singleton_class_definitions .)
    OR_SYMBOL       reduce using rule 13 (expression -> singleton_class_definitions .)
    RKEY            reduce using rule 13 (expression -> singleton_class_definitions .)


state 15

    (14) expression -> module_definitions .

    IF              reduce using rule 14 (expression -> module_definitions .)
    UNLESS          reduce using rule 14 (expression -> module_definitions .)
    AND             reduce using rule 14 (expression -> module_definitions .)
    OR              reduce using rule 14 (expression -> module_definitions .)
    NOTEQUAL        reduce using rule 14 (expression -> module_definitions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 14 (expression -> module_definitions .)
    RANGE_INCLUSIVE reduce using rule 14 (expression -> module_definitions .)
    RANGE_EXCLUSIVE reduce using rule 14 (expression -> module_definitions .)
    WHILE           reduce using rule 14 (expression -> module_definitions .)
    UNTIL           reduce using rule 14 (expression -> module_definitions .)
    DO              reduce using rule 14 (expression -> module_definitions .)
    LKEY            reduce using rule 14 (expression -> module_definitions .)
    $end            reduce using rule 14 (expression -> module_definitions .)
    END             reduce using rule 14 (expression -> module_definitions .)
    RESCUE          reduce using rule 14 (expression -> module_definitions .)
    ENSURE          reduce using rule 14 (expression -> module_definitions .)
    ELSE            reduce using rule 14 (expression -> module_definitions .)
    DOT             reduce using rule 14 (expression -> module_definitions .)
    STRING          reduce using rule 14 (expression -> module_definitions .)
    VAR_GLOBAL      reduce using rule 14 (expression -> module_definitions .)
    VAR_INSTANCE    reduce using rule 14 (expression -> module_definitions .)
    VAR_CLASS       reduce using rule 14 (expression -> module_definitions .)
    VAR_LOCAL       reduce using rule 14 (expression -> module_definitions .)
    VAR_SYSTEM      reduce using rule 14 (expression -> module_definitions .)
    VAR_CONSTANT    reduce using rule 14 (expression -> module_definitions .)
    LBRACKET        reduce using rule 14 (expression -> module_definitions .)
    IDENTIFIER      reduce using rule 14 (expression -> module_definitions .)
    SUPER           reduce using rule 14 (expression -> module_definitions .)
    LPAREN          reduce using rule 14 (expression -> module_definitions .)
    BEGIN           reduce using rule 14 (expression -> module_definitions .)
    CLASS           reduce using rule 14 (expression -> module_definitions .)
    MODULE          reduce using rule 14 (expression -> module_definitions .)
    DEF             reduce using rule 14 (expression -> module_definitions .)
    ALIAS           reduce using rule 14 (expression -> module_definitions .)
    UNDEF           reduce using rule 14 (expression -> module_definitions .)
    DEFINED_OP      reduce using rule 14 (expression -> module_definitions .)
    DOUBLE_QUOTED   reduce using rule 14 (expression -> module_definitions .)
    PRINT           reduce using rule 14 (expression -> module_definitions .)
    PUTS            reduce using rule 14 (expression -> module_definitions .)
    NOT             reduce using rule 14 (expression -> module_definitions .)
    NOT_SYMBOL      reduce using rule 14 (expression -> module_definitions .)
    FOR             reduce using rule 14 (expression -> module_definitions .)
    YIELD           reduce using rule 14 (expression -> module_definitions .)
    RETRY           reduce using rule 14 (expression -> module_definitions .)
    RETURN          reduce using rule 14 (expression -> module_definitions .)
    BREAK           reduce using rule 14 (expression -> module_definitions .)
    NEXT            reduce using rule 14 (expression -> module_definitions .)
    REDO            reduce using rule 14 (expression -> module_definitions .)
    CASE            reduce using rule 14 (expression -> module_definitions .)
    NUMBER          reduce using rule 14 (expression -> module_definitions .)
    THEN            reduce using rule 14 (expression -> module_definitions .)
    WHEN            reduce using rule 14 (expression -> module_definitions .)
    RPAREN          reduce using rule 14 (expression -> module_definitions .)
    ELSIF           reduce using rule 14 (expression -> module_definitions .)
    OR_SYMBOL       reduce using rule 14 (expression -> module_definitions .)
    RKEY            reduce using rule 14 (expression -> module_definitions .)


state 16

    (15) expression -> method_definitions .

    IF              reduce using rule 15 (expression -> method_definitions .)
    UNLESS          reduce using rule 15 (expression -> method_definitions .)
    AND             reduce using rule 15 (expression -> method_definitions .)
    OR              reduce using rule 15 (expression -> method_definitions .)
    NOTEQUAL        reduce using rule 15 (expression -> method_definitions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 15 (expression -> method_definitions .)
    RANGE_INCLUSIVE reduce using rule 15 (expression -> method_definitions .)
    RANGE_EXCLUSIVE reduce using rule 15 (expression -> method_definitions .)
    WHILE           reduce using rule 15 (expression -> method_definitions .)
    UNTIL           reduce using rule 15 (expression -> method_definitions .)
    DO              reduce using rule 15 (expression -> method_definitions .)
    LKEY            reduce using rule 15 (expression -> method_definitions .)
    $end            reduce using rule 15 (expression -> method_definitions .)
    END             reduce using rule 15 (expression -> method_definitions .)
    RESCUE          reduce using rule 15 (expression -> method_definitions .)
    ENSURE          reduce using rule 15 (expression -> method_definitions .)
    ELSE            reduce using rule 15 (expression -> method_definitions .)
    DOT             reduce using rule 15 (expression -> method_definitions .)
    STRING          reduce using rule 15 (expression -> method_definitions .)
    VAR_GLOBAL      reduce using rule 15 (expression -> method_definitions .)
    VAR_INSTANCE    reduce using rule 15 (expression -> method_definitions .)
    VAR_CLASS       reduce using rule 15 (expression -> method_definitions .)
    VAR_LOCAL       reduce using rule 15 (expression -> method_definitions .)
    VAR_SYSTEM      reduce using rule 15 (expression -> method_definitions .)
    VAR_CONSTANT    reduce using rule 15 (expression -> method_definitions .)
    LBRACKET        reduce using rule 15 (expression -> method_definitions .)
    IDENTIFIER      reduce using rule 15 (expression -> method_definitions .)
    SUPER           reduce using rule 15 (expression -> method_definitions .)
    LPAREN          reduce using rule 15 (expression -> method_definitions .)
    BEGIN           reduce using rule 15 (expression -> method_definitions .)
    CLASS           reduce using rule 15 (expression -> method_definitions .)
    MODULE          reduce using rule 15 (expression -> method_definitions .)
    DEF             reduce using rule 15 (expression -> method_definitions .)
    ALIAS           reduce using rule 15 (expression -> method_definitions .)
    UNDEF           reduce using rule 15 (expression -> method_definitions .)
    DEFINED_OP      reduce using rule 15 (expression -> method_definitions .)
    DOUBLE_QUOTED   reduce using rule 15 (expression -> method_definitions .)
    PRINT           reduce using rule 15 (expression -> method_definitions .)
    PUTS            reduce using rule 15 (expression -> method_definitions .)
    NOT             reduce using rule 15 (expression -> method_definitions .)
    NOT_SYMBOL      reduce using rule 15 (expression -> method_definitions .)
    FOR             reduce using rule 15 (expression -> method_definitions .)
    YIELD           reduce using rule 15 (expression -> method_definitions .)
    RETRY           reduce using rule 15 (expression -> method_definitions .)
    RETURN          reduce using rule 15 (expression -> method_definitions .)
    BREAK           reduce using rule 15 (expression -> method_definitions .)
    NEXT            reduce using rule 15 (expression -> method_definitions .)
    REDO            reduce using rule 15 (expression -> method_definitions .)
    CASE            reduce using rule 15 (expression -> method_definitions .)
    NUMBER          reduce using rule 15 (expression -> method_definitions .)
    THEN            reduce using rule 15 (expression -> method_definitions .)
    WHEN            reduce using rule 15 (expression -> method_definitions .)
    RPAREN          reduce using rule 15 (expression -> method_definitions .)
    ELSIF           reduce using rule 15 (expression -> method_definitions .)
    OR_SYMBOL       reduce using rule 15 (expression -> method_definitions .)
    RKEY            reduce using rule 15 (expression -> method_definitions .)


state 17

    (16) expression -> singleton_method_definitions .

    IF              reduce using rule 16 (expression -> singleton_method_definitions .)
    UNLESS          reduce using rule 16 (expression -> singleton_method_definitions .)
    AND             reduce using rule 16 (expression -> singleton_method_definitions .)
    OR              reduce using rule 16 (expression -> singleton_method_definitions .)
    NOTEQUAL        reduce using rule 16 (expression -> singleton_method_definitions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 16 (expression -> singleton_method_definitions .)
    RANGE_INCLUSIVE reduce using rule 16 (expression -> singleton_method_definitions .)
    RANGE_EXCLUSIVE reduce using rule 16 (expression -> singleton_method_definitions .)
    WHILE           reduce using rule 16 (expression -> singleton_method_definitions .)
    UNTIL           reduce using rule 16 (expression -> singleton_method_definitions .)
    DO              reduce using rule 16 (expression -> singleton_method_definitions .)
    LKEY            reduce using rule 16 (expression -> singleton_method_definitions .)
    $end            reduce using rule 16 (expression -> singleton_method_definitions .)
    END             reduce using rule 16 (expression -> singleton_method_definitions .)
    RESCUE          reduce using rule 16 (expression -> singleton_method_definitions .)
    ENSURE          reduce using rule 16 (expression -> singleton_method_definitions .)
    ELSE            reduce using rule 16 (expression -> singleton_method_definitions .)
    DOT             reduce using rule 16 (expression -> singleton_method_definitions .)
    STRING          reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_GLOBAL      reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_INSTANCE    reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_CLASS       reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_LOCAL       reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_SYSTEM      reduce using rule 16 (expression -> singleton_method_definitions .)
    VAR_CONSTANT    reduce using rule 16 (expression -> singleton_method_definitions .)
    LBRACKET        reduce using rule 16 (expression -> singleton_method_definitions .)
    IDENTIFIER      reduce using rule 16 (expression -> singleton_method_definitions .)
    SUPER           reduce using rule 16 (expression -> singleton_method_definitions .)
    LPAREN          reduce using rule 16 (expression -> singleton_method_definitions .)
    BEGIN           reduce using rule 16 (expression -> singleton_method_definitions .)
    CLASS           reduce using rule 16 (expression -> singleton_method_definitions .)
    MODULE          reduce using rule 16 (expression -> singleton_method_definitions .)
    DEF             reduce using rule 16 (expression -> singleton_method_definitions .)
    ALIAS           reduce using rule 16 (expression -> singleton_method_definitions .)
    UNDEF           reduce using rule 16 (expression -> singleton_method_definitions .)
    DEFINED_OP      reduce using rule 16 (expression -> singleton_method_definitions .)
    DOUBLE_QUOTED   reduce using rule 16 (expression -> singleton_method_definitions .)
    PRINT           reduce using rule 16 (expression -> singleton_method_definitions .)
    PUTS            reduce using rule 16 (expression -> singleton_method_definitions .)
    NOT             reduce using rule 16 (expression -> singleton_method_definitions .)
    NOT_SYMBOL      reduce using rule 16 (expression -> singleton_method_definitions .)
    FOR             reduce using rule 16 (expression -> singleton_method_definitions .)
    YIELD           reduce using rule 16 (expression -> singleton_method_definitions .)
    RETRY           reduce using rule 16 (expression -> singleton_method_definitions .)
    RETURN          reduce using rule 16 (expression -> singleton_method_definitions .)
    BREAK           reduce using rule 16 (expression -> singleton_method_definitions .)
    NEXT            reduce using rule 16 (expression -> singleton_method_definitions .)
    REDO            reduce using rule 16 (expression -> singleton_method_definitions .)
    CASE            reduce using rule 16 (expression -> singleton_method_definitions .)
    NUMBER          reduce using rule 16 (expression -> singleton_method_definitions .)
    THEN            reduce using rule 16 (expression -> singleton_method_definitions .)
    WHEN            reduce using rule 16 (expression -> singleton_method_definitions .)
    RPAREN          reduce using rule 16 (expression -> singleton_method_definitions .)
    ELSIF           reduce using rule 16 (expression -> singleton_method_definitions .)
    OR_SYMBOL       reduce using rule 16 (expression -> singleton_method_definitions .)
    RKEY            reduce using rule 16 (expression -> singleton_method_definitions .)


state 18

    (17) expression -> alias .

    IF              reduce using rule 17 (expression -> alias .)
    UNLESS          reduce using rule 17 (expression -> alias .)
    AND             reduce using rule 17 (expression -> alias .)
    OR              reduce using rule 17 (expression -> alias .)
    NOTEQUAL        reduce using rule 17 (expression -> alias .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 17 (expression -> alias .)
    RANGE_INCLUSIVE reduce using rule 17 (expression -> alias .)
    RANGE_EXCLUSIVE reduce using rule 17 (expression -> alias .)
    WHILE           reduce using rule 17 (expression -> alias .)
    UNTIL           reduce using rule 17 (expression -> alias .)
    DO              reduce using rule 17 (expression -> alias .)
    LKEY            reduce using rule 17 (expression -> alias .)
    $end            reduce using rule 17 (expression -> alias .)
    END             reduce using rule 17 (expression -> alias .)
    RESCUE          reduce using rule 17 (expression -> alias .)
    ENSURE          reduce using rule 17 (expression -> alias .)
    ELSE            reduce using rule 17 (expression -> alias .)
    DOT             reduce using rule 17 (expression -> alias .)
    STRING          reduce using rule 17 (expression -> alias .)
    VAR_GLOBAL      reduce using rule 17 (expression -> alias .)
    VAR_INSTANCE    reduce using rule 17 (expression -> alias .)
    VAR_CLASS       reduce using rule 17 (expression -> alias .)
    VAR_LOCAL       reduce using rule 17 (expression -> alias .)
    VAR_SYSTEM      reduce using rule 17 (expression -> alias .)
    VAR_CONSTANT    reduce using rule 17 (expression -> alias .)
    LBRACKET        reduce using rule 17 (expression -> alias .)
    IDENTIFIER      reduce using rule 17 (expression -> alias .)
    SUPER           reduce using rule 17 (expression -> alias .)
    LPAREN          reduce using rule 17 (expression -> alias .)
    BEGIN           reduce using rule 17 (expression -> alias .)
    CLASS           reduce using rule 17 (expression -> alias .)
    MODULE          reduce using rule 17 (expression -> alias .)
    DEF             reduce using rule 17 (expression -> alias .)
    ALIAS           reduce using rule 17 (expression -> alias .)
    UNDEF           reduce using rule 17 (expression -> alias .)
    DEFINED_OP      reduce using rule 17 (expression -> alias .)
    DOUBLE_QUOTED   reduce using rule 17 (expression -> alias .)
    PRINT           reduce using rule 17 (expression -> alias .)
    PUTS            reduce using rule 17 (expression -> alias .)
    NOT             reduce using rule 17 (expression -> alias .)
    NOT_SYMBOL      reduce using rule 17 (expression -> alias .)
    FOR             reduce using rule 17 (expression -> alias .)
    YIELD           reduce using rule 17 (expression -> alias .)
    RETRY           reduce using rule 17 (expression -> alias .)
    RETURN          reduce using rule 17 (expression -> alias .)
    BREAK           reduce using rule 17 (expression -> alias .)
    NEXT            reduce using rule 17 (expression -> alias .)
    REDO            reduce using rule 17 (expression -> alias .)
    CASE            reduce using rule 17 (expression -> alias .)
    NUMBER          reduce using rule 17 (expression -> alias .)
    THEN            reduce using rule 17 (expression -> alias .)
    WHEN            reduce using rule 17 (expression -> alias .)
    RPAREN          reduce using rule 17 (expression -> alias .)
    ELSIF           reduce using rule 17 (expression -> alias .)
    OR_SYMBOL       reduce using rule 17 (expression -> alias .)
    RKEY            reduce using rule 17 (expression -> alias .)


state 19

    (18) expression -> undef .

    IF              reduce using rule 18 (expression -> undef .)
    UNLESS          reduce using rule 18 (expression -> undef .)
    AND             reduce using rule 18 (expression -> undef .)
    OR              reduce using rule 18 (expression -> undef .)
    NOTEQUAL        reduce using rule 18 (expression -> undef .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 18 (expression -> undef .)
    RANGE_INCLUSIVE reduce using rule 18 (expression -> undef .)
    RANGE_EXCLUSIVE reduce using rule 18 (expression -> undef .)
    WHILE           reduce using rule 18 (expression -> undef .)
    UNTIL           reduce using rule 18 (expression -> undef .)
    DO              reduce using rule 18 (expression -> undef .)
    LKEY            reduce using rule 18 (expression -> undef .)
    $end            reduce using rule 18 (expression -> undef .)
    END             reduce using rule 18 (expression -> undef .)
    RESCUE          reduce using rule 18 (expression -> undef .)
    ENSURE          reduce using rule 18 (expression -> undef .)
    ELSE            reduce using rule 18 (expression -> undef .)
    DOT             reduce using rule 18 (expression -> undef .)
    STRING          reduce using rule 18 (expression -> undef .)
    VAR_GLOBAL      reduce using rule 18 (expression -> undef .)
    VAR_INSTANCE    reduce using rule 18 (expression -> undef .)
    VAR_CLASS       reduce using rule 18 (expression -> undef .)
    VAR_LOCAL       reduce using rule 18 (expression -> undef .)
    VAR_SYSTEM      reduce using rule 18 (expression -> undef .)
    VAR_CONSTANT    reduce using rule 18 (expression -> undef .)
    LBRACKET        reduce using rule 18 (expression -> undef .)
    IDENTIFIER      reduce using rule 18 (expression -> undef .)
    SUPER           reduce using rule 18 (expression -> undef .)
    LPAREN          reduce using rule 18 (expression -> undef .)
    BEGIN           reduce using rule 18 (expression -> undef .)
    CLASS           reduce using rule 18 (expression -> undef .)
    MODULE          reduce using rule 18 (expression -> undef .)
    DEF             reduce using rule 18 (expression -> undef .)
    ALIAS           reduce using rule 18 (expression -> undef .)
    UNDEF           reduce using rule 18 (expression -> undef .)
    DEFINED_OP      reduce using rule 18 (expression -> undef .)
    DOUBLE_QUOTED   reduce using rule 18 (expression -> undef .)
    PRINT           reduce using rule 18 (expression -> undef .)
    PUTS            reduce using rule 18 (expression -> undef .)
    NOT             reduce using rule 18 (expression -> undef .)
    NOT_SYMBOL      reduce using rule 18 (expression -> undef .)
    FOR             reduce using rule 18 (expression -> undef .)
    YIELD           reduce using rule 18 (expression -> undef .)
    RETRY           reduce using rule 18 (expression -> undef .)
    RETURN          reduce using rule 18 (expression -> undef .)
    BREAK           reduce using rule 18 (expression -> undef .)
    NEXT            reduce using rule 18 (expression -> undef .)
    REDO            reduce using rule 18 (expression -> undef .)
    CASE            reduce using rule 18 (expression -> undef .)
    NUMBER          reduce using rule 18 (expression -> undef .)
    THEN            reduce using rule 18 (expression -> undef .)
    WHEN            reduce using rule 18 (expression -> undef .)
    RPAREN          reduce using rule 18 (expression -> undef .)
    ELSIF           reduce using rule 18 (expression -> undef .)
    OR_SYMBOL       reduce using rule 18 (expression -> undef .)
    RKEY            reduce using rule 18 (expression -> undef .)


state 20

    (19) expression -> defined .

    IF              reduce using rule 19 (expression -> defined .)
    UNLESS          reduce using rule 19 (expression -> defined .)
    AND             reduce using rule 19 (expression -> defined .)
    OR              reduce using rule 19 (expression -> defined .)
    NOTEQUAL        reduce using rule 19 (expression -> defined .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 19 (expression -> defined .)
    RANGE_INCLUSIVE reduce using rule 19 (expression -> defined .)
    RANGE_EXCLUSIVE reduce using rule 19 (expression -> defined .)
    WHILE           reduce using rule 19 (expression -> defined .)
    UNTIL           reduce using rule 19 (expression -> defined .)
    DO              reduce using rule 19 (expression -> defined .)
    LKEY            reduce using rule 19 (expression -> defined .)
    $end            reduce using rule 19 (expression -> defined .)
    END             reduce using rule 19 (expression -> defined .)
    RESCUE          reduce using rule 19 (expression -> defined .)
    ENSURE          reduce using rule 19 (expression -> defined .)
    ELSE            reduce using rule 19 (expression -> defined .)
    DOT             reduce using rule 19 (expression -> defined .)
    STRING          reduce using rule 19 (expression -> defined .)
    VAR_GLOBAL      reduce using rule 19 (expression -> defined .)
    VAR_INSTANCE    reduce using rule 19 (expression -> defined .)
    VAR_CLASS       reduce using rule 19 (expression -> defined .)
    VAR_LOCAL       reduce using rule 19 (expression -> defined .)
    VAR_SYSTEM      reduce using rule 19 (expression -> defined .)
    VAR_CONSTANT    reduce using rule 19 (expression -> defined .)
    LBRACKET        reduce using rule 19 (expression -> defined .)
    IDENTIFIER      reduce using rule 19 (expression -> defined .)
    SUPER           reduce using rule 19 (expression -> defined .)
    LPAREN          reduce using rule 19 (expression -> defined .)
    BEGIN           reduce using rule 19 (expression -> defined .)
    CLASS           reduce using rule 19 (expression -> defined .)
    MODULE          reduce using rule 19 (expression -> defined .)
    DEF             reduce using rule 19 (expression -> defined .)
    ALIAS           reduce using rule 19 (expression -> defined .)
    UNDEF           reduce using rule 19 (expression -> defined .)
    DEFINED_OP      reduce using rule 19 (expression -> defined .)
    DOUBLE_QUOTED   reduce using rule 19 (expression -> defined .)
    PRINT           reduce using rule 19 (expression -> defined .)
    PUTS            reduce using rule 19 (expression -> defined .)
    NOT             reduce using rule 19 (expression -> defined .)
    NOT_SYMBOL      reduce using rule 19 (expression -> defined .)
    FOR             reduce using rule 19 (expression -> defined .)
    YIELD           reduce using rule 19 (expression -> defined .)
    RETRY           reduce using rule 19 (expression -> defined .)
    RETURN          reduce using rule 19 (expression -> defined .)
    BREAK           reduce using rule 19 (expression -> defined .)
    NEXT            reduce using rule 19 (expression -> defined .)
    REDO            reduce using rule 19 (expression -> defined .)
    CASE            reduce using rule 19 (expression -> defined .)
    NUMBER          reduce using rule 19 (expression -> defined .)
    THEN            reduce using rule 19 (expression -> defined .)
    WHEN            reduce using rule 19 (expression -> defined .)
    RPAREN          reduce using rule 19 (expression -> defined .)
    ELSIF           reduce using rule 19 (expression -> defined .)
    OR_SYMBOL       reduce using rule 19 (expression -> defined .)
    RKEY            reduce using rule 19 (expression -> defined .)


state 21

    (26) string_literals -> STRING .
    (183) data -> STRING .

  ! reduce/reduce conflict for NOTEQUAL resolved using rule 26 (string_literals -> STRING .)
    IF              reduce using rule 26 (string_literals -> STRING .)
    UNLESS          reduce using rule 26 (string_literals -> STRING .)
    AND             reduce using rule 26 (string_literals -> STRING .)
    OR              reduce using rule 26 (string_literals -> STRING .)
    NOTEQUAL        reduce using rule 26 (string_literals -> STRING .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 26 (string_literals -> STRING .)
    RANGE_INCLUSIVE reduce using rule 26 (string_literals -> STRING .)
    RANGE_EXCLUSIVE reduce using rule 26 (string_literals -> STRING .)
    WHILE           reduce using rule 26 (string_literals -> STRING .)
    UNTIL           reduce using rule 26 (string_literals -> STRING .)
    DO              reduce using rule 26 (string_literals -> STRING .)
    LKEY            reduce using rule 26 (string_literals -> STRING .)
    $end            reduce using rule 26 (string_literals -> STRING .)
    END             reduce using rule 26 (string_literals -> STRING .)
    RESCUE          reduce using rule 26 (string_literals -> STRING .)
    ENSURE          reduce using rule 26 (string_literals -> STRING .)
    ELSE            reduce using rule 26 (string_literals -> STRING .)
    DOT             reduce using rule 26 (string_literals -> STRING .)
    STRING          reduce using rule 26 (string_literals -> STRING .)
    VAR_GLOBAL      reduce using rule 26 (string_literals -> STRING .)
    VAR_INSTANCE    reduce using rule 26 (string_literals -> STRING .)
    VAR_CLASS       reduce using rule 26 (string_literals -> STRING .)
    VAR_LOCAL       reduce using rule 26 (string_literals -> STRING .)
    VAR_SYSTEM      reduce using rule 26 (string_literals -> STRING .)
    VAR_CONSTANT    reduce using rule 26 (string_literals -> STRING .)
    LBRACKET        reduce using rule 26 (string_literals -> STRING .)
    IDENTIFIER      reduce using rule 26 (string_literals -> STRING .)
    SUPER           reduce using rule 26 (string_literals -> STRING .)
    LPAREN          reduce using rule 26 (string_literals -> STRING .)
    BEGIN           reduce using rule 26 (string_literals -> STRING .)
    CLASS           reduce using rule 26 (string_literals -> STRING .)
    MODULE          reduce using rule 26 (string_literals -> STRING .)
    DEF             reduce using rule 26 (string_literals -> STRING .)
    ALIAS           reduce using rule 26 (string_literals -> STRING .)
    UNDEF           reduce using rule 26 (string_literals -> STRING .)
    DEFINED_OP      reduce using rule 26 (string_literals -> STRING .)
    DOUBLE_QUOTED   reduce using rule 26 (string_literals -> STRING .)
    PRINT           reduce using rule 26 (string_literals -> STRING .)
    PUTS            reduce using rule 26 (string_literals -> STRING .)
    NOT             reduce using rule 26 (string_literals -> STRING .)
    NOT_SYMBOL      reduce using rule 26 (string_literals -> STRING .)
    FOR             reduce using rule 26 (string_literals -> STRING .)
    YIELD           reduce using rule 26 (string_literals -> STRING .)
    RETRY           reduce using rule 26 (string_literals -> STRING .)
    RETURN          reduce using rule 26 (string_literals -> STRING .)
    BREAK           reduce using rule 26 (string_literals -> STRING .)
    NEXT            reduce using rule 26 (string_literals -> STRING .)
    REDO            reduce using rule 26 (string_literals -> STRING .)
    CASE            reduce using rule 26 (string_literals -> STRING .)
    NUMBER          reduce using rule 26 (string_literals -> STRING .)
    THEN            reduce using rule 26 (string_literals -> STRING .)
    WHEN            reduce using rule 26 (string_literals -> STRING .)
    RPAREN          reduce using rule 26 (string_literals -> STRING .)
    ELSIF           reduce using rule 26 (string_literals -> STRING .)
    OR_SYMBOL       reduce using rule 26 (string_literals -> STRING .)
    RKEY            reduce using rule 26 (string_literals -> STRING .)
    PLUS            reduce using rule 183 (data -> STRING .)
    MINUS           reduce using rule 183 (data -> STRING .)
    TIMES           reduce using rule 183 (data -> STRING .)
    DIVIDE          reduce using rule 183 (data -> STRING .)
    MOD             reduce using rule 183 (data -> STRING .)
    EQUAL           reduce using rule 183 (data -> STRING .)
    GREATERTHAN     reduce using rule 183 (data -> STRING .)
    GREATERTHANEQUAL reduce using rule 183 (data -> STRING .)
    LESSERTHAN      reduce using rule 183 (data -> STRING .)
    LESSERTHANEQUAL reduce using rule 183 (data -> STRING .)

  ! NOTEQUAL        [ reduce using rule 183 (data -> STRING .) ]


state 22

    (27) string_literals -> string_concat .

    IF              reduce using rule 27 (string_literals -> string_concat .)
    UNLESS          reduce using rule 27 (string_literals -> string_concat .)
    AND             reduce using rule 27 (string_literals -> string_concat .)
    OR              reduce using rule 27 (string_literals -> string_concat .)
    NOTEQUAL        reduce using rule 27 (string_literals -> string_concat .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 27 (string_literals -> string_concat .)
    RANGE_INCLUSIVE reduce using rule 27 (string_literals -> string_concat .)
    RANGE_EXCLUSIVE reduce using rule 27 (string_literals -> string_concat .)
    WHILE           reduce using rule 27 (string_literals -> string_concat .)
    UNTIL           reduce using rule 27 (string_literals -> string_concat .)
    DO              reduce using rule 27 (string_literals -> string_concat .)
    LKEY            reduce using rule 27 (string_literals -> string_concat .)
    $end            reduce using rule 27 (string_literals -> string_concat .)
    END             reduce using rule 27 (string_literals -> string_concat .)
    RESCUE          reduce using rule 27 (string_literals -> string_concat .)
    ENSURE          reduce using rule 27 (string_literals -> string_concat .)
    ELSE            reduce using rule 27 (string_literals -> string_concat .)
    DOT             reduce using rule 27 (string_literals -> string_concat .)
    STRING          reduce using rule 27 (string_literals -> string_concat .)
    VAR_GLOBAL      reduce using rule 27 (string_literals -> string_concat .)
    VAR_INSTANCE    reduce using rule 27 (string_literals -> string_concat .)
    VAR_CLASS       reduce using rule 27 (string_literals -> string_concat .)
    VAR_LOCAL       reduce using rule 27 (string_literals -> string_concat .)
    VAR_SYSTEM      reduce using rule 27 (string_literals -> string_concat .)
    VAR_CONSTANT    reduce using rule 27 (string_literals -> string_concat .)
    LBRACKET        reduce using rule 27 (string_literals -> string_concat .)
    IDENTIFIER      reduce using rule 27 (string_literals -> string_concat .)
    SUPER           reduce using rule 27 (string_literals -> string_concat .)
    LPAREN          reduce using rule 27 (string_literals -> string_concat .)
    BEGIN           reduce using rule 27 (string_literals -> string_concat .)
    CLASS           reduce using rule 27 (string_literals -> string_concat .)
    MODULE          reduce using rule 27 (string_literals -> string_concat .)
    DEF             reduce using rule 27 (string_literals -> string_concat .)
    ALIAS           reduce using rule 27 (string_literals -> string_concat .)
    UNDEF           reduce using rule 27 (string_literals -> string_concat .)
    DEFINED_OP      reduce using rule 27 (string_literals -> string_concat .)
    DOUBLE_QUOTED   reduce using rule 27 (string_literals -> string_concat .)
    PRINT           reduce using rule 27 (string_literals -> string_concat .)
    PUTS            reduce using rule 27 (string_literals -> string_concat .)
    NOT             reduce using rule 27 (string_literals -> string_concat .)
    NOT_SYMBOL      reduce using rule 27 (string_literals -> string_concat .)
    FOR             reduce using rule 27 (string_literals -> string_concat .)
    YIELD           reduce using rule 27 (string_literals -> string_concat .)
    RETRY           reduce using rule 27 (string_literals -> string_concat .)
    RETURN          reduce using rule 27 (string_literals -> string_concat .)
    BREAK           reduce using rule 27 (string_literals -> string_concat .)
    NEXT            reduce using rule 27 (string_literals -> string_concat .)
    REDO            reduce using rule 27 (string_literals -> string_concat .)
    CASE            reduce using rule 27 (string_literals -> string_concat .)
    NUMBER          reduce using rule 27 (string_literals -> string_concat .)
    THEN            reduce using rule 27 (string_literals -> string_concat .)
    WHEN            reduce using rule 27 (string_literals -> string_concat .)
    RPAREN          reduce using rule 27 (string_literals -> string_concat .)
    ELSIF           reduce using rule 27 (string_literals -> string_concat .)
    OR_SYMBOL       reduce using rule 27 (string_literals -> string_concat .)
    RKEY            reduce using rule 27 (string_literals -> string_concat .)


state 23

    (31) prints -> print .

    IF              reduce using rule 31 (prints -> print .)
    UNLESS          reduce using rule 31 (prints -> print .)
    AND             reduce using rule 31 (prints -> print .)
    OR              reduce using rule 31 (prints -> print .)
    NOTEQUAL        reduce using rule 31 (prints -> print .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 31 (prints -> print .)
    RANGE_INCLUSIVE reduce using rule 31 (prints -> print .)
    RANGE_EXCLUSIVE reduce using rule 31 (prints -> print .)
    WHILE           reduce using rule 31 (prints -> print .)
    UNTIL           reduce using rule 31 (prints -> print .)
    DO              reduce using rule 31 (prints -> print .)
    LKEY            reduce using rule 31 (prints -> print .)
    $end            reduce using rule 31 (prints -> print .)
    END             reduce using rule 31 (prints -> print .)
    RESCUE          reduce using rule 31 (prints -> print .)
    ENSURE          reduce using rule 31 (prints -> print .)
    ELSE            reduce using rule 31 (prints -> print .)
    DOT             reduce using rule 31 (prints -> print .)
    STRING          reduce using rule 31 (prints -> print .)
    VAR_GLOBAL      reduce using rule 31 (prints -> print .)
    VAR_INSTANCE    reduce using rule 31 (prints -> print .)
    VAR_CLASS       reduce using rule 31 (prints -> print .)
    VAR_LOCAL       reduce using rule 31 (prints -> print .)
    VAR_SYSTEM      reduce using rule 31 (prints -> print .)
    VAR_CONSTANT    reduce using rule 31 (prints -> print .)
    LBRACKET        reduce using rule 31 (prints -> print .)
    IDENTIFIER      reduce using rule 31 (prints -> print .)
    SUPER           reduce using rule 31 (prints -> print .)
    LPAREN          reduce using rule 31 (prints -> print .)
    BEGIN           reduce using rule 31 (prints -> print .)
    CLASS           reduce using rule 31 (prints -> print .)
    MODULE          reduce using rule 31 (prints -> print .)
    DEF             reduce using rule 31 (prints -> print .)
    ALIAS           reduce using rule 31 (prints -> print .)
    UNDEF           reduce using rule 31 (prints -> print .)
    DEFINED_OP      reduce using rule 31 (prints -> print .)
    DOUBLE_QUOTED   reduce using rule 31 (prints -> print .)
    PRINT           reduce using rule 31 (prints -> print .)
    PUTS            reduce using rule 31 (prints -> print .)
    NOT             reduce using rule 31 (prints -> print .)
    NOT_SYMBOL      reduce using rule 31 (prints -> print .)
    FOR             reduce using rule 31 (prints -> print .)
    YIELD           reduce using rule 31 (prints -> print .)
    RETRY           reduce using rule 31 (prints -> print .)
    RETURN          reduce using rule 31 (prints -> print .)
    BREAK           reduce using rule 31 (prints -> print .)
    NEXT            reduce using rule 31 (prints -> print .)
    REDO            reduce using rule 31 (prints -> print .)
    CASE            reduce using rule 31 (prints -> print .)
    NUMBER          reduce using rule 31 (prints -> print .)
    THEN            reduce using rule 31 (prints -> print .)
    WHEN            reduce using rule 31 (prints -> print .)
    RPAREN          reduce using rule 31 (prints -> print .)
    ELSIF           reduce using rule 31 (prints -> print .)
    OR_SYMBOL       reduce using rule 31 (prints -> print .)
    RKEY            reduce using rule 31 (prints -> print .)


state 24

    (32) prints -> puts .

    IF              reduce using rule 32 (prints -> puts .)
    UNLESS          reduce using rule 32 (prints -> puts .)
    AND             reduce using rule 32 (prints -> puts .)
    OR              reduce using rule 32 (prints -> puts .)
    NOTEQUAL        reduce using rule 32 (prints -> puts .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 32 (prints -> puts .)
    RANGE_INCLUSIVE reduce using rule 32 (prints -> puts .)
    RANGE_EXCLUSIVE reduce using rule 32 (prints -> puts .)
    WHILE           reduce using rule 32 (prints -> puts .)
    UNTIL           reduce using rule 32 (prints -> puts .)
    DO              reduce using rule 32 (prints -> puts .)
    LKEY            reduce using rule 32 (prints -> puts .)
    $end            reduce using rule 32 (prints -> puts .)
    END             reduce using rule 32 (prints -> puts .)
    RESCUE          reduce using rule 32 (prints -> puts .)
    ENSURE          reduce using rule 32 (prints -> puts .)
    ELSE            reduce using rule 32 (prints -> puts .)
    DOT             reduce using rule 32 (prints -> puts .)
    STRING          reduce using rule 32 (prints -> puts .)
    VAR_GLOBAL      reduce using rule 32 (prints -> puts .)
    VAR_INSTANCE    reduce using rule 32 (prints -> puts .)
    VAR_CLASS       reduce using rule 32 (prints -> puts .)
    VAR_LOCAL       reduce using rule 32 (prints -> puts .)
    VAR_SYSTEM      reduce using rule 32 (prints -> puts .)
    VAR_CONSTANT    reduce using rule 32 (prints -> puts .)
    LBRACKET        reduce using rule 32 (prints -> puts .)
    IDENTIFIER      reduce using rule 32 (prints -> puts .)
    SUPER           reduce using rule 32 (prints -> puts .)
    LPAREN          reduce using rule 32 (prints -> puts .)
    BEGIN           reduce using rule 32 (prints -> puts .)
    CLASS           reduce using rule 32 (prints -> puts .)
    MODULE          reduce using rule 32 (prints -> puts .)
    DEF             reduce using rule 32 (prints -> puts .)
    ALIAS           reduce using rule 32 (prints -> puts .)
    UNDEF           reduce using rule 32 (prints -> puts .)
    DEFINED_OP      reduce using rule 32 (prints -> puts .)
    DOUBLE_QUOTED   reduce using rule 32 (prints -> puts .)
    PRINT           reduce using rule 32 (prints -> puts .)
    PUTS            reduce using rule 32 (prints -> puts .)
    NOT             reduce using rule 32 (prints -> puts .)
    NOT_SYMBOL      reduce using rule 32 (prints -> puts .)
    FOR             reduce using rule 32 (prints -> puts .)
    YIELD           reduce using rule 32 (prints -> puts .)
    RETRY           reduce using rule 32 (prints -> puts .)
    RETURN          reduce using rule 32 (prints -> puts .)
    BREAK           reduce using rule 32 (prints -> puts .)
    NEXT            reduce using rule 32 (prints -> puts .)
    REDO            reduce using rule 32 (prints -> puts .)
    CASE            reduce using rule 32 (prints -> puts .)
    NUMBER          reduce using rule 32 (prints -> puts .)
    THEN            reduce using rule 32 (prints -> puts .)
    WHEN            reduce using rule 32 (prints -> puts .)
    RPAREN          reduce using rule 32 (prints -> puts .)
    ELSIF           reduce using rule 32 (prints -> puts .)
    OR_SYMBOL       reduce using rule 32 (prints -> puts .)
    RKEY            reduce using rule 32 (prints -> puts .)


state 25

    (20) variable -> VAR_GLOBAL .

    EQUAL_SYMBOL    reduce using rule 20 (variable -> VAR_GLOBAL .)
    COMMA           reduce using rule 20 (variable -> VAR_GLOBAL .)
    PLUS_EQUAL      reduce using rule 20 (variable -> VAR_GLOBAL .)
    MINUS_EQUAL     reduce using rule 20 (variable -> VAR_GLOBAL .)
    TIMES_EQUAL     reduce using rule 20 (variable -> VAR_GLOBAL .)
    DIVIDE_EQUAL    reduce using rule 20 (variable -> VAR_GLOBAL .)
    MOD_EQUAL       reduce using rule 20 (variable -> VAR_GLOBAL .)
    POW_EQUAL       reduce using rule 20 (variable -> VAR_GLOBAL .)
    IF              reduce using rule 20 (variable -> VAR_GLOBAL .)
    UNLESS          reduce using rule 20 (variable -> VAR_GLOBAL .)
    AND             reduce using rule 20 (variable -> VAR_GLOBAL .)
    OR              reduce using rule 20 (variable -> VAR_GLOBAL .)
    NOTEQUAL        reduce using rule 20 (variable -> VAR_GLOBAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 20 (variable -> VAR_GLOBAL .)
    RANGE_INCLUSIVE reduce using rule 20 (variable -> VAR_GLOBAL .)
    RANGE_EXCLUSIVE reduce using rule 20 (variable -> VAR_GLOBAL .)
    WHILE           reduce using rule 20 (variable -> VAR_GLOBAL .)
    UNTIL           reduce using rule 20 (variable -> VAR_GLOBAL .)
    DO              reduce using rule 20 (variable -> VAR_GLOBAL .)
    LKEY            reduce using rule 20 (variable -> VAR_GLOBAL .)
    $end            reduce using rule 20 (variable -> VAR_GLOBAL .)
    PLUS            reduce using rule 20 (variable -> VAR_GLOBAL .)
    MINUS           reduce using rule 20 (variable -> VAR_GLOBAL .)
    TIMES           reduce using rule 20 (variable -> VAR_GLOBAL .)
    DIVIDE          reduce using rule 20 (variable -> VAR_GLOBAL .)
    MOD             reduce using rule 20 (variable -> VAR_GLOBAL .)
    EQUAL           reduce using rule 20 (variable -> VAR_GLOBAL .)
    GREATERTHAN     reduce using rule 20 (variable -> VAR_GLOBAL .)
    GREATERTHANEQUAL reduce using rule 20 (variable -> VAR_GLOBAL .)
    LESSERTHAN      reduce using rule 20 (variable -> VAR_GLOBAL .)
    LESSERTHANEQUAL reduce using rule 20 (variable -> VAR_GLOBAL .)
    RBRACKET        reduce using rule 20 (variable -> VAR_GLOBAL .)
    HASH_ROCKET     reduce using rule 20 (variable -> VAR_GLOBAL .)
    END             reduce using rule 20 (variable -> VAR_GLOBAL .)
    RESCUE          reduce using rule 20 (variable -> VAR_GLOBAL .)
    ENSURE          reduce using rule 20 (variable -> VAR_GLOBAL .)
    ELSE            reduce using rule 20 (variable -> VAR_GLOBAL .)
    DOT             reduce using rule 20 (variable -> VAR_GLOBAL .)
    STRING          reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_GLOBAL      reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_INSTANCE    reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_CLASS       reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_LOCAL       reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_SYSTEM      reduce using rule 20 (variable -> VAR_GLOBAL .)
    VAR_CONSTANT    reduce using rule 20 (variable -> VAR_GLOBAL .)
    LBRACKET        reduce using rule 20 (variable -> VAR_GLOBAL .)
    IDENTIFIER      reduce using rule 20 (variable -> VAR_GLOBAL .)
    SUPER           reduce using rule 20 (variable -> VAR_GLOBAL .)
    LPAREN          reduce using rule 20 (variable -> VAR_GLOBAL .)
    BEGIN           reduce using rule 20 (variable -> VAR_GLOBAL .)
    CLASS           reduce using rule 20 (variable -> VAR_GLOBAL .)
    MODULE          reduce using rule 20 (variable -> VAR_GLOBAL .)
    DEF             reduce using rule 20 (variable -> VAR_GLOBAL .)
    ALIAS           reduce using rule 20 (variable -> VAR_GLOBAL .)
    UNDEF           reduce using rule 20 (variable -> VAR_GLOBAL .)
    DEFINED_OP      reduce using rule 20 (variable -> VAR_GLOBAL .)
    DOUBLE_QUOTED   reduce using rule 20 (variable -> VAR_GLOBAL .)
    PRINT           reduce using rule 20 (variable -> VAR_GLOBAL .)
    PUTS            reduce using rule 20 (variable -> VAR_GLOBAL .)
    NOT             reduce using rule 20 (variable -> VAR_GLOBAL .)
    NOT_SYMBOL      reduce using rule 20 (variable -> VAR_GLOBAL .)
    FOR             reduce using rule 20 (variable -> VAR_GLOBAL .)
    YIELD           reduce using rule 20 (variable -> VAR_GLOBAL .)
    RETRY           reduce using rule 20 (variable -> VAR_GLOBAL .)
    RETURN          reduce using rule 20 (variable -> VAR_GLOBAL .)
    BREAK           reduce using rule 20 (variable -> VAR_GLOBAL .)
    NEXT            reduce using rule 20 (variable -> VAR_GLOBAL .)
    REDO            reduce using rule 20 (variable -> VAR_GLOBAL .)
    CASE            reduce using rule 20 (variable -> VAR_GLOBAL .)
    NUMBER          reduce using rule 20 (variable -> VAR_GLOBAL .)
    THEN            reduce using rule 20 (variable -> VAR_GLOBAL .)
    WHEN            reduce using rule 20 (variable -> VAR_GLOBAL .)
    RPAREN          reduce using rule 20 (variable -> VAR_GLOBAL .)
    ELSIF           reduce using rule 20 (variable -> VAR_GLOBAL .)
    OR_SYMBOL       reduce using rule 20 (variable -> VAR_GLOBAL .)
    RKEY            reduce using rule 20 (variable -> VAR_GLOBAL .)


state 26

    (21) variable -> VAR_INSTANCE .

    EQUAL_SYMBOL    reduce using rule 21 (variable -> VAR_INSTANCE .)
    COMMA           reduce using rule 21 (variable -> VAR_INSTANCE .)
    PLUS_EQUAL      reduce using rule 21 (variable -> VAR_INSTANCE .)
    MINUS_EQUAL     reduce using rule 21 (variable -> VAR_INSTANCE .)
    TIMES_EQUAL     reduce using rule 21 (variable -> VAR_INSTANCE .)
    DIVIDE_EQUAL    reduce using rule 21 (variable -> VAR_INSTANCE .)
    MOD_EQUAL       reduce using rule 21 (variable -> VAR_INSTANCE .)
    POW_EQUAL       reduce using rule 21 (variable -> VAR_INSTANCE .)
    IF              reduce using rule 21 (variable -> VAR_INSTANCE .)
    UNLESS          reduce using rule 21 (variable -> VAR_INSTANCE .)
    AND             reduce using rule 21 (variable -> VAR_INSTANCE .)
    OR              reduce using rule 21 (variable -> VAR_INSTANCE .)
    NOTEQUAL        reduce using rule 21 (variable -> VAR_INSTANCE .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 21 (variable -> VAR_INSTANCE .)
    RANGE_INCLUSIVE reduce using rule 21 (variable -> VAR_INSTANCE .)
    RANGE_EXCLUSIVE reduce using rule 21 (variable -> VAR_INSTANCE .)
    WHILE           reduce using rule 21 (variable -> VAR_INSTANCE .)
    UNTIL           reduce using rule 21 (variable -> VAR_INSTANCE .)
    DO              reduce using rule 21 (variable -> VAR_INSTANCE .)
    LKEY            reduce using rule 21 (variable -> VAR_INSTANCE .)
    $end            reduce using rule 21 (variable -> VAR_INSTANCE .)
    PLUS            reduce using rule 21 (variable -> VAR_INSTANCE .)
    MINUS           reduce using rule 21 (variable -> VAR_INSTANCE .)
    TIMES           reduce using rule 21 (variable -> VAR_INSTANCE .)
    DIVIDE          reduce using rule 21 (variable -> VAR_INSTANCE .)
    MOD             reduce using rule 21 (variable -> VAR_INSTANCE .)
    EQUAL           reduce using rule 21 (variable -> VAR_INSTANCE .)
    GREATERTHAN     reduce using rule 21 (variable -> VAR_INSTANCE .)
    GREATERTHANEQUAL reduce using rule 21 (variable -> VAR_INSTANCE .)
    LESSERTHAN      reduce using rule 21 (variable -> VAR_INSTANCE .)
    LESSERTHANEQUAL reduce using rule 21 (variable -> VAR_INSTANCE .)
    RBRACKET        reduce using rule 21 (variable -> VAR_INSTANCE .)
    HASH_ROCKET     reduce using rule 21 (variable -> VAR_INSTANCE .)
    END             reduce using rule 21 (variable -> VAR_INSTANCE .)
    RESCUE          reduce using rule 21 (variable -> VAR_INSTANCE .)
    ENSURE          reduce using rule 21 (variable -> VAR_INSTANCE .)
    ELSE            reduce using rule 21 (variable -> VAR_INSTANCE .)
    DOT             reduce using rule 21 (variable -> VAR_INSTANCE .)
    STRING          reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_GLOBAL      reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_INSTANCE    reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_CLASS       reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_LOCAL       reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_SYSTEM      reduce using rule 21 (variable -> VAR_INSTANCE .)
    VAR_CONSTANT    reduce using rule 21 (variable -> VAR_INSTANCE .)
    LBRACKET        reduce using rule 21 (variable -> VAR_INSTANCE .)
    IDENTIFIER      reduce using rule 21 (variable -> VAR_INSTANCE .)
    SUPER           reduce using rule 21 (variable -> VAR_INSTANCE .)
    LPAREN          reduce using rule 21 (variable -> VAR_INSTANCE .)
    BEGIN           reduce using rule 21 (variable -> VAR_INSTANCE .)
    CLASS           reduce using rule 21 (variable -> VAR_INSTANCE .)
    MODULE          reduce using rule 21 (variable -> VAR_INSTANCE .)
    DEF             reduce using rule 21 (variable -> VAR_INSTANCE .)
    ALIAS           reduce using rule 21 (variable -> VAR_INSTANCE .)
    UNDEF           reduce using rule 21 (variable -> VAR_INSTANCE .)
    DEFINED_OP      reduce using rule 21 (variable -> VAR_INSTANCE .)
    DOUBLE_QUOTED   reduce using rule 21 (variable -> VAR_INSTANCE .)
    PRINT           reduce using rule 21 (variable -> VAR_INSTANCE .)
    PUTS            reduce using rule 21 (variable -> VAR_INSTANCE .)
    NOT             reduce using rule 21 (variable -> VAR_INSTANCE .)
    NOT_SYMBOL      reduce using rule 21 (variable -> VAR_INSTANCE .)
    FOR             reduce using rule 21 (variable -> VAR_INSTANCE .)
    YIELD           reduce using rule 21 (variable -> VAR_INSTANCE .)
    RETRY           reduce using rule 21 (variable -> VAR_INSTANCE .)
    RETURN          reduce using rule 21 (variable -> VAR_INSTANCE .)
    BREAK           reduce using rule 21 (variable -> VAR_INSTANCE .)
    NEXT            reduce using rule 21 (variable -> VAR_INSTANCE .)
    REDO            reduce using rule 21 (variable -> VAR_INSTANCE .)
    CASE            reduce using rule 21 (variable -> VAR_INSTANCE .)
    NUMBER          reduce using rule 21 (variable -> VAR_INSTANCE .)
    THEN            reduce using rule 21 (variable -> VAR_INSTANCE .)
    WHEN            reduce using rule 21 (variable -> VAR_INSTANCE .)
    RPAREN          reduce using rule 21 (variable -> VAR_INSTANCE .)
    ELSIF           reduce using rule 21 (variable -> VAR_INSTANCE .)
    OR_SYMBOL       reduce using rule 21 (variable -> VAR_INSTANCE .)
    RKEY            reduce using rule 21 (variable -> VAR_INSTANCE .)


state 27

    (22) variable -> VAR_CLASS .

    EQUAL_SYMBOL    reduce using rule 22 (variable -> VAR_CLASS .)
    COMMA           reduce using rule 22 (variable -> VAR_CLASS .)
    PLUS_EQUAL      reduce using rule 22 (variable -> VAR_CLASS .)
    MINUS_EQUAL     reduce using rule 22 (variable -> VAR_CLASS .)
    TIMES_EQUAL     reduce using rule 22 (variable -> VAR_CLASS .)
    DIVIDE_EQUAL    reduce using rule 22 (variable -> VAR_CLASS .)
    MOD_EQUAL       reduce using rule 22 (variable -> VAR_CLASS .)
    POW_EQUAL       reduce using rule 22 (variable -> VAR_CLASS .)
    IF              reduce using rule 22 (variable -> VAR_CLASS .)
    UNLESS          reduce using rule 22 (variable -> VAR_CLASS .)
    AND             reduce using rule 22 (variable -> VAR_CLASS .)
    OR              reduce using rule 22 (variable -> VAR_CLASS .)
    NOTEQUAL        reduce using rule 22 (variable -> VAR_CLASS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 22 (variable -> VAR_CLASS .)
    RANGE_INCLUSIVE reduce using rule 22 (variable -> VAR_CLASS .)
    RANGE_EXCLUSIVE reduce using rule 22 (variable -> VAR_CLASS .)
    WHILE           reduce using rule 22 (variable -> VAR_CLASS .)
    UNTIL           reduce using rule 22 (variable -> VAR_CLASS .)
    DO              reduce using rule 22 (variable -> VAR_CLASS .)
    LKEY            reduce using rule 22 (variable -> VAR_CLASS .)
    $end            reduce using rule 22 (variable -> VAR_CLASS .)
    PLUS            reduce using rule 22 (variable -> VAR_CLASS .)
    MINUS           reduce using rule 22 (variable -> VAR_CLASS .)
    TIMES           reduce using rule 22 (variable -> VAR_CLASS .)
    DIVIDE          reduce using rule 22 (variable -> VAR_CLASS .)
    MOD             reduce using rule 22 (variable -> VAR_CLASS .)
    EQUAL           reduce using rule 22 (variable -> VAR_CLASS .)
    GREATERTHAN     reduce using rule 22 (variable -> VAR_CLASS .)
    GREATERTHANEQUAL reduce using rule 22 (variable -> VAR_CLASS .)
    LESSERTHAN      reduce using rule 22 (variable -> VAR_CLASS .)
    LESSERTHANEQUAL reduce using rule 22 (variable -> VAR_CLASS .)
    RBRACKET        reduce using rule 22 (variable -> VAR_CLASS .)
    HASH_ROCKET     reduce using rule 22 (variable -> VAR_CLASS .)
    END             reduce using rule 22 (variable -> VAR_CLASS .)
    RESCUE          reduce using rule 22 (variable -> VAR_CLASS .)
    ENSURE          reduce using rule 22 (variable -> VAR_CLASS .)
    ELSE            reduce using rule 22 (variable -> VAR_CLASS .)
    DOT             reduce using rule 22 (variable -> VAR_CLASS .)
    STRING          reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_GLOBAL      reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_INSTANCE    reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_CLASS       reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_LOCAL       reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_SYSTEM      reduce using rule 22 (variable -> VAR_CLASS .)
    VAR_CONSTANT    reduce using rule 22 (variable -> VAR_CLASS .)
    LBRACKET        reduce using rule 22 (variable -> VAR_CLASS .)
    IDENTIFIER      reduce using rule 22 (variable -> VAR_CLASS .)
    SUPER           reduce using rule 22 (variable -> VAR_CLASS .)
    LPAREN          reduce using rule 22 (variable -> VAR_CLASS .)
    BEGIN           reduce using rule 22 (variable -> VAR_CLASS .)
    CLASS           reduce using rule 22 (variable -> VAR_CLASS .)
    MODULE          reduce using rule 22 (variable -> VAR_CLASS .)
    DEF             reduce using rule 22 (variable -> VAR_CLASS .)
    ALIAS           reduce using rule 22 (variable -> VAR_CLASS .)
    UNDEF           reduce using rule 22 (variable -> VAR_CLASS .)
    DEFINED_OP      reduce using rule 22 (variable -> VAR_CLASS .)
    DOUBLE_QUOTED   reduce using rule 22 (variable -> VAR_CLASS .)
    PRINT           reduce using rule 22 (variable -> VAR_CLASS .)
    PUTS            reduce using rule 22 (variable -> VAR_CLASS .)
    NOT             reduce using rule 22 (variable -> VAR_CLASS .)
    NOT_SYMBOL      reduce using rule 22 (variable -> VAR_CLASS .)
    FOR             reduce using rule 22 (variable -> VAR_CLASS .)
    YIELD           reduce using rule 22 (variable -> VAR_CLASS .)
    RETRY           reduce using rule 22 (variable -> VAR_CLASS .)
    RETURN          reduce using rule 22 (variable -> VAR_CLASS .)
    BREAK           reduce using rule 22 (variable -> VAR_CLASS .)
    NEXT            reduce using rule 22 (variable -> VAR_CLASS .)
    REDO            reduce using rule 22 (variable -> VAR_CLASS .)
    CASE            reduce using rule 22 (variable -> VAR_CLASS .)
    NUMBER          reduce using rule 22 (variable -> VAR_CLASS .)
    THEN            reduce using rule 22 (variable -> VAR_CLASS .)
    WHEN            reduce using rule 22 (variable -> VAR_CLASS .)
    RPAREN          reduce using rule 22 (variable -> VAR_CLASS .)
    ELSIF           reduce using rule 22 (variable -> VAR_CLASS .)
    OR_SYMBOL       reduce using rule 22 (variable -> VAR_CLASS .)
    RKEY            reduce using rule 22 (variable -> VAR_CLASS .)


state 28

    (23) variable -> VAR_LOCAL .

    EQUAL_SYMBOL    reduce using rule 23 (variable -> VAR_LOCAL .)
    COMMA           reduce using rule 23 (variable -> VAR_LOCAL .)
    PLUS_EQUAL      reduce using rule 23 (variable -> VAR_LOCAL .)
    MINUS_EQUAL     reduce using rule 23 (variable -> VAR_LOCAL .)
    TIMES_EQUAL     reduce using rule 23 (variable -> VAR_LOCAL .)
    DIVIDE_EQUAL    reduce using rule 23 (variable -> VAR_LOCAL .)
    MOD_EQUAL       reduce using rule 23 (variable -> VAR_LOCAL .)
    POW_EQUAL       reduce using rule 23 (variable -> VAR_LOCAL .)
    IF              reduce using rule 23 (variable -> VAR_LOCAL .)
    UNLESS          reduce using rule 23 (variable -> VAR_LOCAL .)
    AND             reduce using rule 23 (variable -> VAR_LOCAL .)
    OR              reduce using rule 23 (variable -> VAR_LOCAL .)
    NOTEQUAL        reduce using rule 23 (variable -> VAR_LOCAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 23 (variable -> VAR_LOCAL .)
    RANGE_INCLUSIVE reduce using rule 23 (variable -> VAR_LOCAL .)
    RANGE_EXCLUSIVE reduce using rule 23 (variable -> VAR_LOCAL .)
    WHILE           reduce using rule 23 (variable -> VAR_LOCAL .)
    UNTIL           reduce using rule 23 (variable -> VAR_LOCAL .)
    DO              reduce using rule 23 (variable -> VAR_LOCAL .)
    LKEY            reduce using rule 23 (variable -> VAR_LOCAL .)
    $end            reduce using rule 23 (variable -> VAR_LOCAL .)
    PLUS            reduce using rule 23 (variable -> VAR_LOCAL .)
    MINUS           reduce using rule 23 (variable -> VAR_LOCAL .)
    TIMES           reduce using rule 23 (variable -> VAR_LOCAL .)
    DIVIDE          reduce using rule 23 (variable -> VAR_LOCAL .)
    MOD             reduce using rule 23 (variable -> VAR_LOCAL .)
    EQUAL           reduce using rule 23 (variable -> VAR_LOCAL .)
    GREATERTHAN     reduce using rule 23 (variable -> VAR_LOCAL .)
    GREATERTHANEQUAL reduce using rule 23 (variable -> VAR_LOCAL .)
    LESSERTHAN      reduce using rule 23 (variable -> VAR_LOCAL .)
    LESSERTHANEQUAL reduce using rule 23 (variable -> VAR_LOCAL .)
    RBRACKET        reduce using rule 23 (variable -> VAR_LOCAL .)
    HASH_ROCKET     reduce using rule 23 (variable -> VAR_LOCAL .)
    END             reduce using rule 23 (variable -> VAR_LOCAL .)
    RESCUE          reduce using rule 23 (variable -> VAR_LOCAL .)
    ENSURE          reduce using rule 23 (variable -> VAR_LOCAL .)
    ELSE            reduce using rule 23 (variable -> VAR_LOCAL .)
    DOT             reduce using rule 23 (variable -> VAR_LOCAL .)
    STRING          reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_GLOBAL      reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_INSTANCE    reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_CLASS       reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_LOCAL       reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_SYSTEM      reduce using rule 23 (variable -> VAR_LOCAL .)
    VAR_CONSTANT    reduce using rule 23 (variable -> VAR_LOCAL .)
    LBRACKET        reduce using rule 23 (variable -> VAR_LOCAL .)
    IDENTIFIER      reduce using rule 23 (variable -> VAR_LOCAL .)
    SUPER           reduce using rule 23 (variable -> VAR_LOCAL .)
    LPAREN          reduce using rule 23 (variable -> VAR_LOCAL .)
    BEGIN           reduce using rule 23 (variable -> VAR_LOCAL .)
    CLASS           reduce using rule 23 (variable -> VAR_LOCAL .)
    MODULE          reduce using rule 23 (variable -> VAR_LOCAL .)
    DEF             reduce using rule 23 (variable -> VAR_LOCAL .)
    ALIAS           reduce using rule 23 (variable -> VAR_LOCAL .)
    UNDEF           reduce using rule 23 (variable -> VAR_LOCAL .)
    DEFINED_OP      reduce using rule 23 (variable -> VAR_LOCAL .)
    DOUBLE_QUOTED   reduce using rule 23 (variable -> VAR_LOCAL .)
    PRINT           reduce using rule 23 (variable -> VAR_LOCAL .)
    PUTS            reduce using rule 23 (variable -> VAR_LOCAL .)
    NOT             reduce using rule 23 (variable -> VAR_LOCAL .)
    NOT_SYMBOL      reduce using rule 23 (variable -> VAR_LOCAL .)
    FOR             reduce using rule 23 (variable -> VAR_LOCAL .)
    YIELD           reduce using rule 23 (variable -> VAR_LOCAL .)
    RETRY           reduce using rule 23 (variable -> VAR_LOCAL .)
    RETURN          reduce using rule 23 (variable -> VAR_LOCAL .)
    BREAK           reduce using rule 23 (variable -> VAR_LOCAL .)
    NEXT            reduce using rule 23 (variable -> VAR_LOCAL .)
    REDO            reduce using rule 23 (variable -> VAR_LOCAL .)
    CASE            reduce using rule 23 (variable -> VAR_LOCAL .)
    NUMBER          reduce using rule 23 (variable -> VAR_LOCAL .)
    THEN            reduce using rule 23 (variable -> VAR_LOCAL .)
    WHEN            reduce using rule 23 (variable -> VAR_LOCAL .)
    RPAREN          reduce using rule 23 (variable -> VAR_LOCAL .)
    ELSIF           reduce using rule 23 (variable -> VAR_LOCAL .)
    OR_SYMBOL       reduce using rule 23 (variable -> VAR_LOCAL .)
    RKEY            reduce using rule 23 (variable -> VAR_LOCAL .)


state 29

    (24) variable -> VAR_SYSTEM .

    EQUAL_SYMBOL    reduce using rule 24 (variable -> VAR_SYSTEM .)
    COMMA           reduce using rule 24 (variable -> VAR_SYSTEM .)
    PLUS_EQUAL      reduce using rule 24 (variable -> VAR_SYSTEM .)
    MINUS_EQUAL     reduce using rule 24 (variable -> VAR_SYSTEM .)
    TIMES_EQUAL     reduce using rule 24 (variable -> VAR_SYSTEM .)
    DIVIDE_EQUAL    reduce using rule 24 (variable -> VAR_SYSTEM .)
    MOD_EQUAL       reduce using rule 24 (variable -> VAR_SYSTEM .)
    POW_EQUAL       reduce using rule 24 (variable -> VAR_SYSTEM .)
    IF              reduce using rule 24 (variable -> VAR_SYSTEM .)
    UNLESS          reduce using rule 24 (variable -> VAR_SYSTEM .)
    AND             reduce using rule 24 (variable -> VAR_SYSTEM .)
    OR              reduce using rule 24 (variable -> VAR_SYSTEM .)
    NOTEQUAL        reduce using rule 24 (variable -> VAR_SYSTEM .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 24 (variable -> VAR_SYSTEM .)
    RANGE_INCLUSIVE reduce using rule 24 (variable -> VAR_SYSTEM .)
    RANGE_EXCLUSIVE reduce using rule 24 (variable -> VAR_SYSTEM .)
    WHILE           reduce using rule 24 (variable -> VAR_SYSTEM .)
    UNTIL           reduce using rule 24 (variable -> VAR_SYSTEM .)
    DO              reduce using rule 24 (variable -> VAR_SYSTEM .)
    LKEY            reduce using rule 24 (variable -> VAR_SYSTEM .)
    $end            reduce using rule 24 (variable -> VAR_SYSTEM .)
    PLUS            reduce using rule 24 (variable -> VAR_SYSTEM .)
    MINUS           reduce using rule 24 (variable -> VAR_SYSTEM .)
    TIMES           reduce using rule 24 (variable -> VAR_SYSTEM .)
    DIVIDE          reduce using rule 24 (variable -> VAR_SYSTEM .)
    MOD             reduce using rule 24 (variable -> VAR_SYSTEM .)
    EQUAL           reduce using rule 24 (variable -> VAR_SYSTEM .)
    GREATERTHAN     reduce using rule 24 (variable -> VAR_SYSTEM .)
    GREATERTHANEQUAL reduce using rule 24 (variable -> VAR_SYSTEM .)
    LESSERTHAN      reduce using rule 24 (variable -> VAR_SYSTEM .)
    LESSERTHANEQUAL reduce using rule 24 (variable -> VAR_SYSTEM .)
    RBRACKET        reduce using rule 24 (variable -> VAR_SYSTEM .)
    HASH_ROCKET     reduce using rule 24 (variable -> VAR_SYSTEM .)
    END             reduce using rule 24 (variable -> VAR_SYSTEM .)
    RESCUE          reduce using rule 24 (variable -> VAR_SYSTEM .)
    ENSURE          reduce using rule 24 (variable -> VAR_SYSTEM .)
    ELSE            reduce using rule 24 (variable -> VAR_SYSTEM .)
    DOT             reduce using rule 24 (variable -> VAR_SYSTEM .)
    STRING          reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_GLOBAL      reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_INSTANCE    reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_CLASS       reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_LOCAL       reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_SYSTEM      reduce using rule 24 (variable -> VAR_SYSTEM .)
    VAR_CONSTANT    reduce using rule 24 (variable -> VAR_SYSTEM .)
    LBRACKET        reduce using rule 24 (variable -> VAR_SYSTEM .)
    IDENTIFIER      reduce using rule 24 (variable -> VAR_SYSTEM .)
    SUPER           reduce using rule 24 (variable -> VAR_SYSTEM .)
    LPAREN          reduce using rule 24 (variable -> VAR_SYSTEM .)
    BEGIN           reduce using rule 24 (variable -> VAR_SYSTEM .)
    CLASS           reduce using rule 24 (variable -> VAR_SYSTEM .)
    MODULE          reduce using rule 24 (variable -> VAR_SYSTEM .)
    DEF             reduce using rule 24 (variable -> VAR_SYSTEM .)
    ALIAS           reduce using rule 24 (variable -> VAR_SYSTEM .)
    UNDEF           reduce using rule 24 (variable -> VAR_SYSTEM .)
    DEFINED_OP      reduce using rule 24 (variable -> VAR_SYSTEM .)
    DOUBLE_QUOTED   reduce using rule 24 (variable -> VAR_SYSTEM .)
    PRINT           reduce using rule 24 (variable -> VAR_SYSTEM .)
    PUTS            reduce using rule 24 (variable -> VAR_SYSTEM .)
    NOT             reduce using rule 24 (variable -> VAR_SYSTEM .)
    NOT_SYMBOL      reduce using rule 24 (variable -> VAR_SYSTEM .)
    FOR             reduce using rule 24 (variable -> VAR_SYSTEM .)
    YIELD           reduce using rule 24 (variable -> VAR_SYSTEM .)
    RETRY           reduce using rule 24 (variable -> VAR_SYSTEM .)
    RETURN          reduce using rule 24 (variable -> VAR_SYSTEM .)
    BREAK           reduce using rule 24 (variable -> VAR_SYSTEM .)
    NEXT            reduce using rule 24 (variable -> VAR_SYSTEM .)
    REDO            reduce using rule 24 (variable -> VAR_SYSTEM .)
    CASE            reduce using rule 24 (variable -> VAR_SYSTEM .)
    NUMBER          reduce using rule 24 (variable -> VAR_SYSTEM .)
    THEN            reduce using rule 24 (variable -> VAR_SYSTEM .)
    WHEN            reduce using rule 24 (variable -> VAR_SYSTEM .)
    RPAREN          reduce using rule 24 (variable -> VAR_SYSTEM .)
    ELSIF           reduce using rule 24 (variable -> VAR_SYSTEM .)
    OR_SYMBOL       reduce using rule 24 (variable -> VAR_SYSTEM .)
    RKEY            reduce using rule 24 (variable -> VAR_SYSTEM .)


state 30

    (25) variable -> VAR_CONSTANT .

    EQUAL_SYMBOL    reduce using rule 25 (variable -> VAR_CONSTANT .)
    COMMA           reduce using rule 25 (variable -> VAR_CONSTANT .)
    PLUS_EQUAL      reduce using rule 25 (variable -> VAR_CONSTANT .)
    MINUS_EQUAL     reduce using rule 25 (variable -> VAR_CONSTANT .)
    TIMES_EQUAL     reduce using rule 25 (variable -> VAR_CONSTANT .)
    DIVIDE_EQUAL    reduce using rule 25 (variable -> VAR_CONSTANT .)
    MOD_EQUAL       reduce using rule 25 (variable -> VAR_CONSTANT .)
    POW_EQUAL       reduce using rule 25 (variable -> VAR_CONSTANT .)
    IF              reduce using rule 25 (variable -> VAR_CONSTANT .)
    UNLESS          reduce using rule 25 (variable -> VAR_CONSTANT .)
    AND             reduce using rule 25 (variable -> VAR_CONSTANT .)
    OR              reduce using rule 25 (variable -> VAR_CONSTANT .)
    NOTEQUAL        reduce using rule 25 (variable -> VAR_CONSTANT .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 25 (variable -> VAR_CONSTANT .)
    RANGE_INCLUSIVE reduce using rule 25 (variable -> VAR_CONSTANT .)
    RANGE_EXCLUSIVE reduce using rule 25 (variable -> VAR_CONSTANT .)
    WHILE           reduce using rule 25 (variable -> VAR_CONSTANT .)
    UNTIL           reduce using rule 25 (variable -> VAR_CONSTANT .)
    DO              reduce using rule 25 (variable -> VAR_CONSTANT .)
    LKEY            reduce using rule 25 (variable -> VAR_CONSTANT .)
    $end            reduce using rule 25 (variable -> VAR_CONSTANT .)
    PLUS            reduce using rule 25 (variable -> VAR_CONSTANT .)
    MINUS           reduce using rule 25 (variable -> VAR_CONSTANT .)
    TIMES           reduce using rule 25 (variable -> VAR_CONSTANT .)
    DIVIDE          reduce using rule 25 (variable -> VAR_CONSTANT .)
    MOD             reduce using rule 25 (variable -> VAR_CONSTANT .)
    EQUAL           reduce using rule 25 (variable -> VAR_CONSTANT .)
    GREATERTHAN     reduce using rule 25 (variable -> VAR_CONSTANT .)
    GREATERTHANEQUAL reduce using rule 25 (variable -> VAR_CONSTANT .)
    LESSERTHAN      reduce using rule 25 (variable -> VAR_CONSTANT .)
    LESSERTHANEQUAL reduce using rule 25 (variable -> VAR_CONSTANT .)
    RBRACKET        reduce using rule 25 (variable -> VAR_CONSTANT .)
    HASH_ROCKET     reduce using rule 25 (variable -> VAR_CONSTANT .)
    END             reduce using rule 25 (variable -> VAR_CONSTANT .)
    RESCUE          reduce using rule 25 (variable -> VAR_CONSTANT .)
    ENSURE          reduce using rule 25 (variable -> VAR_CONSTANT .)
    ELSE            reduce using rule 25 (variable -> VAR_CONSTANT .)
    DOT             reduce using rule 25 (variable -> VAR_CONSTANT .)
    STRING          reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_GLOBAL      reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_INSTANCE    reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_CLASS       reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_LOCAL       reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_SYSTEM      reduce using rule 25 (variable -> VAR_CONSTANT .)
    VAR_CONSTANT    reduce using rule 25 (variable -> VAR_CONSTANT .)
    LBRACKET        reduce using rule 25 (variable -> VAR_CONSTANT .)
    IDENTIFIER      reduce using rule 25 (variable -> VAR_CONSTANT .)
    SUPER           reduce using rule 25 (variable -> VAR_CONSTANT .)
    LPAREN          reduce using rule 25 (variable -> VAR_CONSTANT .)
    BEGIN           reduce using rule 25 (variable -> VAR_CONSTANT .)
    CLASS           reduce using rule 25 (variable -> VAR_CONSTANT .)
    MODULE          reduce using rule 25 (variable -> VAR_CONSTANT .)
    DEF             reduce using rule 25 (variable -> VAR_CONSTANT .)
    ALIAS           reduce using rule 25 (variable -> VAR_CONSTANT .)
    UNDEF           reduce using rule 25 (variable -> VAR_CONSTANT .)
    DEFINED_OP      reduce using rule 25 (variable -> VAR_CONSTANT .)
    DOUBLE_QUOTED   reduce using rule 25 (variable -> VAR_CONSTANT .)
    PRINT           reduce using rule 25 (variable -> VAR_CONSTANT .)
    PUTS            reduce using rule 25 (variable -> VAR_CONSTANT .)
    NOT             reduce using rule 25 (variable -> VAR_CONSTANT .)
    NOT_SYMBOL      reduce using rule 25 (variable -> VAR_CONSTANT .)
    FOR             reduce using rule 25 (variable -> VAR_CONSTANT .)
    YIELD           reduce using rule 25 (variable -> VAR_CONSTANT .)
    RETRY           reduce using rule 25 (variable -> VAR_CONSTANT .)
    RETURN          reduce using rule 25 (variable -> VAR_CONSTANT .)
    BREAK           reduce using rule 25 (variable -> VAR_CONSTANT .)
    NEXT            reduce using rule 25 (variable -> VAR_CONSTANT .)
    REDO            reduce using rule 25 (variable -> VAR_CONSTANT .)
    CASE            reduce using rule 25 (variable -> VAR_CONSTANT .)
    NUMBER          reduce using rule 25 (variable -> VAR_CONSTANT .)
    THEN            reduce using rule 25 (variable -> VAR_CONSTANT .)
    WHEN            reduce using rule 25 (variable -> VAR_CONSTANT .)
    RPAREN          reduce using rule 25 (variable -> VAR_CONSTANT .)
    ELSIF           reduce using rule 25 (variable -> VAR_CONSTANT .)
    OR_SYMBOL       reduce using rule 25 (variable -> VAR_CONSTANT .)
    RKEY            reduce using rule 25 (variable -> VAR_CONSTANT .)


state 31

    (37) array -> LBRACKET . args_array RBRACKET
    (39) args_array -> . data
    (40) args_array -> . data COMMA args_array
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_array                     shift and go to state 124
    data                           shift and go to state 125
    variable                       shift and go to state 127

state 32

    (41) hash -> LKEY . args_hash RKEY
    (42) args_hash -> . data HASH_ROCKET data
    (43) args_hash -> . data HASH_ROCKET data COMMA args_hash
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_hash                      shift and go to state 128
    data                           shift and go to state 129
    variable                       shift and go to state 127

state 33

    (48) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> IDENTIFIER . DOT IDENTIFIER
    (38) array_data -> IDENTIFIER . LBRACKET NUMBER RBRACKET

    DOT             shift and go to state 130
    LBRACKET        shift and go to state 131


state 34

    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (170) opmate -> . data op data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    opmate                         shift and go to state 132
    data                           shift and go to state 36
    variable                       shift and go to state 127

state 35

    (46) super -> SUPER . LPAREN RPAREN
    (47) super -> SUPER . LPAREN args_method RPAREN

    LPAREN          shift and go to state 133


state 36

    (170) opmate -> data . op data
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

    op                             shift and go to state 134

state 37

    (54) assignment -> array_data . EQUAL_SYMBOL data

    EQUAL_SYMBOL    shift and go to state 135


state 38

    (56) assignment -> self_assigment .

    IF              reduce using rule 56 (assignment -> self_assigment .)
    UNLESS          reduce using rule 56 (assignment -> self_assigment .)
    AND             reduce using rule 56 (assignment -> self_assigment .)
    OR              reduce using rule 56 (assignment -> self_assigment .)
    NOTEQUAL        reduce using rule 56 (assignment -> self_assigment .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 56 (assignment -> self_assigment .)
    RANGE_INCLUSIVE reduce using rule 56 (assignment -> self_assigment .)
    RANGE_EXCLUSIVE reduce using rule 56 (assignment -> self_assigment .)
    WHILE           reduce using rule 56 (assignment -> self_assigment .)
    UNTIL           reduce using rule 56 (assignment -> self_assigment .)
    DO              reduce using rule 56 (assignment -> self_assigment .)
    LKEY            reduce using rule 56 (assignment -> self_assigment .)
    $end            reduce using rule 56 (assignment -> self_assigment .)
    END             reduce using rule 56 (assignment -> self_assigment .)
    RESCUE          reduce using rule 56 (assignment -> self_assigment .)
    ENSURE          reduce using rule 56 (assignment -> self_assigment .)
    ELSE            reduce using rule 56 (assignment -> self_assigment .)
    DOT             reduce using rule 56 (assignment -> self_assigment .)
    STRING          reduce using rule 56 (assignment -> self_assigment .)
    VAR_GLOBAL      reduce using rule 56 (assignment -> self_assigment .)
    VAR_INSTANCE    reduce using rule 56 (assignment -> self_assigment .)
    VAR_CLASS       reduce using rule 56 (assignment -> self_assigment .)
    VAR_LOCAL       reduce using rule 56 (assignment -> self_assigment .)
    VAR_SYSTEM      reduce using rule 56 (assignment -> self_assigment .)
    VAR_CONSTANT    reduce using rule 56 (assignment -> self_assigment .)
    LBRACKET        reduce using rule 56 (assignment -> self_assigment .)
    IDENTIFIER      reduce using rule 56 (assignment -> self_assigment .)
    SUPER           reduce using rule 56 (assignment -> self_assigment .)
    LPAREN          reduce using rule 56 (assignment -> self_assigment .)
    BEGIN           reduce using rule 56 (assignment -> self_assigment .)
    CLASS           reduce using rule 56 (assignment -> self_assigment .)
    MODULE          reduce using rule 56 (assignment -> self_assigment .)
    DEF             reduce using rule 56 (assignment -> self_assigment .)
    ALIAS           reduce using rule 56 (assignment -> self_assigment .)
    UNDEF           reduce using rule 56 (assignment -> self_assigment .)
    DEFINED_OP      reduce using rule 56 (assignment -> self_assigment .)
    DOUBLE_QUOTED   reduce using rule 56 (assignment -> self_assigment .)
    PRINT           reduce using rule 56 (assignment -> self_assigment .)
    PUTS            reduce using rule 56 (assignment -> self_assigment .)
    NOT             reduce using rule 56 (assignment -> self_assigment .)
    NOT_SYMBOL      reduce using rule 56 (assignment -> self_assigment .)
    FOR             reduce using rule 56 (assignment -> self_assigment .)
    YIELD           reduce using rule 56 (assignment -> self_assigment .)
    RETRY           reduce using rule 56 (assignment -> self_assigment .)
    RETURN          reduce using rule 56 (assignment -> self_assigment .)
    BREAK           reduce using rule 56 (assignment -> self_assigment .)
    NEXT            reduce using rule 56 (assignment -> self_assigment .)
    REDO            reduce using rule 56 (assignment -> self_assigment .)
    CASE            reduce using rule 56 (assignment -> self_assigment .)
    NUMBER          reduce using rule 56 (assignment -> self_assigment .)
    THEN            reduce using rule 56 (assignment -> self_assigment .)
    WHEN            reduce using rule 56 (assignment -> self_assigment .)
    RPAREN          reduce using rule 56 (assignment -> self_assigment .)
    ELSIF           reduce using rule 56 (assignment -> self_assigment .)
    OR_SYMBOL       reduce using rule 56 (assignment -> self_assigment .)
    RKEY            reduce using rule 56 (assignment -> self_assigment .)


state 39

    (57) assignment -> mult_assigment .

    IF              reduce using rule 57 (assignment -> mult_assigment .)
    UNLESS          reduce using rule 57 (assignment -> mult_assigment .)
    AND             reduce using rule 57 (assignment -> mult_assigment .)
    OR              reduce using rule 57 (assignment -> mult_assigment .)
    NOTEQUAL        reduce using rule 57 (assignment -> mult_assigment .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 57 (assignment -> mult_assigment .)
    RANGE_INCLUSIVE reduce using rule 57 (assignment -> mult_assigment .)
    RANGE_EXCLUSIVE reduce using rule 57 (assignment -> mult_assigment .)
    WHILE           reduce using rule 57 (assignment -> mult_assigment .)
    UNTIL           reduce using rule 57 (assignment -> mult_assigment .)
    DO              reduce using rule 57 (assignment -> mult_assigment .)
    LKEY            reduce using rule 57 (assignment -> mult_assigment .)
    $end            reduce using rule 57 (assignment -> mult_assigment .)
    END             reduce using rule 57 (assignment -> mult_assigment .)
    RESCUE          reduce using rule 57 (assignment -> mult_assigment .)
    ENSURE          reduce using rule 57 (assignment -> mult_assigment .)
    ELSE            reduce using rule 57 (assignment -> mult_assigment .)
    DOT             reduce using rule 57 (assignment -> mult_assigment .)
    STRING          reduce using rule 57 (assignment -> mult_assigment .)
    VAR_GLOBAL      reduce using rule 57 (assignment -> mult_assigment .)
    VAR_INSTANCE    reduce using rule 57 (assignment -> mult_assigment .)
    VAR_CLASS       reduce using rule 57 (assignment -> mult_assigment .)
    VAR_LOCAL       reduce using rule 57 (assignment -> mult_assigment .)
    VAR_SYSTEM      reduce using rule 57 (assignment -> mult_assigment .)
    VAR_CONSTANT    reduce using rule 57 (assignment -> mult_assigment .)
    LBRACKET        reduce using rule 57 (assignment -> mult_assigment .)
    IDENTIFIER      reduce using rule 57 (assignment -> mult_assigment .)
    SUPER           reduce using rule 57 (assignment -> mult_assigment .)
    LPAREN          reduce using rule 57 (assignment -> mult_assigment .)
    BEGIN           reduce using rule 57 (assignment -> mult_assigment .)
    CLASS           reduce using rule 57 (assignment -> mult_assigment .)
    MODULE          reduce using rule 57 (assignment -> mult_assigment .)
    DEF             reduce using rule 57 (assignment -> mult_assigment .)
    ALIAS           reduce using rule 57 (assignment -> mult_assigment .)
    UNDEF           reduce using rule 57 (assignment -> mult_assigment .)
    DEFINED_OP      reduce using rule 57 (assignment -> mult_assigment .)
    DOUBLE_QUOTED   reduce using rule 57 (assignment -> mult_assigment .)
    PRINT           reduce using rule 57 (assignment -> mult_assigment .)
    PUTS            reduce using rule 57 (assignment -> mult_assigment .)
    NOT             reduce using rule 57 (assignment -> mult_assigment .)
    NOT_SYMBOL      reduce using rule 57 (assignment -> mult_assigment .)
    FOR             reduce using rule 57 (assignment -> mult_assigment .)
    YIELD           reduce using rule 57 (assignment -> mult_assigment .)
    RETRY           reduce using rule 57 (assignment -> mult_assigment .)
    RETURN          reduce using rule 57 (assignment -> mult_assigment .)
    BREAK           reduce using rule 57 (assignment -> mult_assigment .)
    NEXT            reduce using rule 57 (assignment -> mult_assigment .)
    REDO            reduce using rule 57 (assignment -> mult_assigment .)
    CASE            reduce using rule 57 (assignment -> mult_assigment .)
    NUMBER          reduce using rule 57 (assignment -> mult_assigment .)
    THEN            reduce using rule 57 (assignment -> mult_assigment .)
    WHEN            reduce using rule 57 (assignment -> mult_assigment .)
    RPAREN          reduce using rule 57 (assignment -> mult_assigment .)
    ELSIF           reduce using rule 57 (assignment -> mult_assigment .)
    OR_SYMBOL       reduce using rule 57 (assignment -> mult_assigment .)
    RKEY            reduce using rule 57 (assignment -> mult_assigment .)


state 40

    (164) expression_operations -> opmate .

    PLUS            reduce using rule 164 (expression_operations -> opmate .)
    MINUS           reduce using rule 164 (expression_operations -> opmate .)
    TIMES           reduce using rule 164 (expression_operations -> opmate .)
    DIVIDE          reduce using rule 164 (expression_operations -> opmate .)
    MOD             reduce using rule 164 (expression_operations -> opmate .)
    EQUAL           reduce using rule 164 (expression_operations -> opmate .)
    NOTEQUAL        reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHAN     reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHAN      reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    IF              reduce using rule 164 (expression_operations -> opmate .)
    UNLESS          reduce using rule 164 (expression_operations -> opmate .)
    AND             reduce using rule 164 (expression_operations -> opmate .)
    OR              reduce using rule 164 (expression_operations -> opmate .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 164 (expression_operations -> opmate .)
    RANGE_INCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    RANGE_EXCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    WHILE           reduce using rule 164 (expression_operations -> opmate .)
    UNTIL           reduce using rule 164 (expression_operations -> opmate .)
    DO              reduce using rule 164 (expression_operations -> opmate .)
    LKEY            reduce using rule 164 (expression_operations -> opmate .)
    $end            reduce using rule 164 (expression_operations -> opmate .)
    END             reduce using rule 164 (expression_operations -> opmate .)
    RESCUE          reduce using rule 164 (expression_operations -> opmate .)
    ENSURE          reduce using rule 164 (expression_operations -> opmate .)
    ELSE            reduce using rule 164 (expression_operations -> opmate .)
    DOT             reduce using rule 164 (expression_operations -> opmate .)
    STRING          reduce using rule 164 (expression_operations -> opmate .)
    VAR_GLOBAL      reduce using rule 164 (expression_operations -> opmate .)
    VAR_INSTANCE    reduce using rule 164 (expression_operations -> opmate .)
    VAR_CLASS       reduce using rule 164 (expression_operations -> opmate .)
    VAR_LOCAL       reduce using rule 164 (expression_operations -> opmate .)
    VAR_SYSTEM      reduce using rule 164 (expression_operations -> opmate .)
    VAR_CONSTANT    reduce using rule 164 (expression_operations -> opmate .)
    LBRACKET        reduce using rule 164 (expression_operations -> opmate .)
    IDENTIFIER      reduce using rule 164 (expression_operations -> opmate .)
    SUPER           reduce using rule 164 (expression_operations -> opmate .)
    LPAREN          reduce using rule 164 (expression_operations -> opmate .)
    BEGIN           reduce using rule 164 (expression_operations -> opmate .)
    CLASS           reduce using rule 164 (expression_operations -> opmate .)
    MODULE          reduce using rule 164 (expression_operations -> opmate .)
    DEF             reduce using rule 164 (expression_operations -> opmate .)
    ALIAS           reduce using rule 164 (expression_operations -> opmate .)
    UNDEF           reduce using rule 164 (expression_operations -> opmate .)
    DEFINED_OP      reduce using rule 164 (expression_operations -> opmate .)
    DOUBLE_QUOTED   reduce using rule 164 (expression_operations -> opmate .)
    PRINT           reduce using rule 164 (expression_operations -> opmate .)
    PUTS            reduce using rule 164 (expression_operations -> opmate .)
    NOT             reduce using rule 164 (expression_operations -> opmate .)
    NOT_SYMBOL      reduce using rule 164 (expression_operations -> opmate .)
    FOR             reduce using rule 164 (expression_operations -> opmate .)
    YIELD           reduce using rule 164 (expression_operations -> opmate .)
    RETRY           reduce using rule 164 (expression_operations -> opmate .)
    RETURN          reduce using rule 164 (expression_operations -> opmate .)
    BREAK           reduce using rule 164 (expression_operations -> opmate .)
    NEXT            reduce using rule 164 (expression_operations -> opmate .)
    REDO            reduce using rule 164 (expression_operations -> opmate .)
    CASE            reduce using rule 164 (expression_operations -> opmate .)
    NUMBER          reduce using rule 164 (expression_operations -> opmate .)
    THEN            reduce using rule 164 (expression_operations -> opmate .)
    WHEN            reduce using rule 164 (expression_operations -> opmate .)
    RPAREN          reduce using rule 164 (expression_operations -> opmate .)
    ELSIF           reduce using rule 164 (expression_operations -> opmate .)
    OR_SYMBOL       reduce using rule 164 (expression_operations -> opmate .)
    RKEY            reduce using rule 164 (expression_operations -> opmate .)


state 41

    (69) control_structure -> if .

    IF              reduce using rule 69 (control_structure -> if .)
    UNLESS          reduce using rule 69 (control_structure -> if .)
    AND             reduce using rule 69 (control_structure -> if .)
    OR              reduce using rule 69 (control_structure -> if .)
    NOTEQUAL        reduce using rule 69 (control_structure -> if .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 69 (control_structure -> if .)
    RANGE_INCLUSIVE reduce using rule 69 (control_structure -> if .)
    RANGE_EXCLUSIVE reduce using rule 69 (control_structure -> if .)
    WHILE           reduce using rule 69 (control_structure -> if .)
    UNTIL           reduce using rule 69 (control_structure -> if .)
    DO              reduce using rule 69 (control_structure -> if .)
    LKEY            reduce using rule 69 (control_structure -> if .)
    $end            reduce using rule 69 (control_structure -> if .)
    END             reduce using rule 69 (control_structure -> if .)
    RESCUE          reduce using rule 69 (control_structure -> if .)
    ENSURE          reduce using rule 69 (control_structure -> if .)
    ELSE            reduce using rule 69 (control_structure -> if .)
    DOT             reduce using rule 69 (control_structure -> if .)
    STRING          reduce using rule 69 (control_structure -> if .)
    VAR_GLOBAL      reduce using rule 69 (control_structure -> if .)
    VAR_INSTANCE    reduce using rule 69 (control_structure -> if .)
    VAR_CLASS       reduce using rule 69 (control_structure -> if .)
    VAR_LOCAL       reduce using rule 69 (control_structure -> if .)
    VAR_SYSTEM      reduce using rule 69 (control_structure -> if .)
    VAR_CONSTANT    reduce using rule 69 (control_structure -> if .)
    LBRACKET        reduce using rule 69 (control_structure -> if .)
    IDENTIFIER      reduce using rule 69 (control_structure -> if .)
    SUPER           reduce using rule 69 (control_structure -> if .)
    LPAREN          reduce using rule 69 (control_structure -> if .)
    BEGIN           reduce using rule 69 (control_structure -> if .)
    CLASS           reduce using rule 69 (control_structure -> if .)
    MODULE          reduce using rule 69 (control_structure -> if .)
    DEF             reduce using rule 69 (control_structure -> if .)
    ALIAS           reduce using rule 69 (control_structure -> if .)
    UNDEF           reduce using rule 69 (control_structure -> if .)
    DEFINED_OP      reduce using rule 69 (control_structure -> if .)
    DOUBLE_QUOTED   reduce using rule 69 (control_structure -> if .)
    PRINT           reduce using rule 69 (control_structure -> if .)
    PUTS            reduce using rule 69 (control_structure -> if .)
    NOT             reduce using rule 69 (control_structure -> if .)
    NOT_SYMBOL      reduce using rule 69 (control_structure -> if .)
    FOR             reduce using rule 69 (control_structure -> if .)
    YIELD           reduce using rule 69 (control_structure -> if .)
    RETRY           reduce using rule 69 (control_structure -> if .)
    RETURN          reduce using rule 69 (control_structure -> if .)
    BREAK           reduce using rule 69 (control_structure -> if .)
    NEXT            reduce using rule 69 (control_structure -> if .)
    REDO            reduce using rule 69 (control_structure -> if .)
    CASE            reduce using rule 69 (control_structure -> if .)
    NUMBER          reduce using rule 69 (control_structure -> if .)
    THEN            reduce using rule 69 (control_structure -> if .)
    WHEN            reduce using rule 69 (control_structure -> if .)
    RPAREN          reduce using rule 69 (control_structure -> if .)
    ELSIF           reduce using rule 69 (control_structure -> if .)
    OR_SYMBOL       reduce using rule 69 (control_structure -> if .)
    RKEY            reduce using rule 69 (control_structure -> if .)


state 42

    (70) control_structure -> if_modifier .

    IF              reduce using rule 70 (control_structure -> if_modifier .)
    UNLESS          reduce using rule 70 (control_structure -> if_modifier .)
    AND             reduce using rule 70 (control_structure -> if_modifier .)
    OR              reduce using rule 70 (control_structure -> if_modifier .)
    NOTEQUAL        reduce using rule 70 (control_structure -> if_modifier .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 70 (control_structure -> if_modifier .)
    RANGE_INCLUSIVE reduce using rule 70 (control_structure -> if_modifier .)
    RANGE_EXCLUSIVE reduce using rule 70 (control_structure -> if_modifier .)
    WHILE           reduce using rule 70 (control_structure -> if_modifier .)
    UNTIL           reduce using rule 70 (control_structure -> if_modifier .)
    DO              reduce using rule 70 (control_structure -> if_modifier .)
    LKEY            reduce using rule 70 (control_structure -> if_modifier .)
    $end            reduce using rule 70 (control_structure -> if_modifier .)
    END             reduce using rule 70 (control_structure -> if_modifier .)
    RESCUE          reduce using rule 70 (control_structure -> if_modifier .)
    ENSURE          reduce using rule 70 (control_structure -> if_modifier .)
    ELSE            reduce using rule 70 (control_structure -> if_modifier .)
    DOT             reduce using rule 70 (control_structure -> if_modifier .)
    STRING          reduce using rule 70 (control_structure -> if_modifier .)
    VAR_GLOBAL      reduce using rule 70 (control_structure -> if_modifier .)
    VAR_INSTANCE    reduce using rule 70 (control_structure -> if_modifier .)
    VAR_CLASS       reduce using rule 70 (control_structure -> if_modifier .)
    VAR_LOCAL       reduce using rule 70 (control_structure -> if_modifier .)
    VAR_SYSTEM      reduce using rule 70 (control_structure -> if_modifier .)
    VAR_CONSTANT    reduce using rule 70 (control_structure -> if_modifier .)
    LBRACKET        reduce using rule 70 (control_structure -> if_modifier .)
    IDENTIFIER      reduce using rule 70 (control_structure -> if_modifier .)
    SUPER           reduce using rule 70 (control_structure -> if_modifier .)
    LPAREN          reduce using rule 70 (control_structure -> if_modifier .)
    BEGIN           reduce using rule 70 (control_structure -> if_modifier .)
    CLASS           reduce using rule 70 (control_structure -> if_modifier .)
    MODULE          reduce using rule 70 (control_structure -> if_modifier .)
    DEF             reduce using rule 70 (control_structure -> if_modifier .)
    ALIAS           reduce using rule 70 (control_structure -> if_modifier .)
    UNDEF           reduce using rule 70 (control_structure -> if_modifier .)
    DEFINED_OP      reduce using rule 70 (control_structure -> if_modifier .)
    DOUBLE_QUOTED   reduce using rule 70 (control_structure -> if_modifier .)
    PRINT           reduce using rule 70 (control_structure -> if_modifier .)
    PUTS            reduce using rule 70 (control_structure -> if_modifier .)
    NOT             reduce using rule 70 (control_structure -> if_modifier .)
    NOT_SYMBOL      reduce using rule 70 (control_structure -> if_modifier .)
    FOR             reduce using rule 70 (control_structure -> if_modifier .)
    YIELD           reduce using rule 70 (control_structure -> if_modifier .)
    RETRY           reduce using rule 70 (control_structure -> if_modifier .)
    RETURN          reduce using rule 70 (control_structure -> if_modifier .)
    BREAK           reduce using rule 70 (control_structure -> if_modifier .)
    NEXT            reduce using rule 70 (control_structure -> if_modifier .)
    REDO            reduce using rule 70 (control_structure -> if_modifier .)
    CASE            reduce using rule 70 (control_structure -> if_modifier .)
    NUMBER          reduce using rule 70 (control_structure -> if_modifier .)
    THEN            reduce using rule 70 (control_structure -> if_modifier .)
    WHEN            reduce using rule 70 (control_structure -> if_modifier .)
    RPAREN          reduce using rule 70 (control_structure -> if_modifier .)
    ELSIF           reduce using rule 70 (control_structure -> if_modifier .)
    OR_SYMBOL       reduce using rule 70 (control_structure -> if_modifier .)
    RKEY            reduce using rule 70 (control_structure -> if_modifier .)


state 43

    (71) control_structure -> unless .

    IF              reduce using rule 71 (control_structure -> unless .)
    UNLESS          reduce using rule 71 (control_structure -> unless .)
    AND             reduce using rule 71 (control_structure -> unless .)
    OR              reduce using rule 71 (control_structure -> unless .)
    NOTEQUAL        reduce using rule 71 (control_structure -> unless .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 71 (control_structure -> unless .)
    RANGE_INCLUSIVE reduce using rule 71 (control_structure -> unless .)
    RANGE_EXCLUSIVE reduce using rule 71 (control_structure -> unless .)
    WHILE           reduce using rule 71 (control_structure -> unless .)
    UNTIL           reduce using rule 71 (control_structure -> unless .)
    DO              reduce using rule 71 (control_structure -> unless .)
    LKEY            reduce using rule 71 (control_structure -> unless .)
    $end            reduce using rule 71 (control_structure -> unless .)
    END             reduce using rule 71 (control_structure -> unless .)
    RESCUE          reduce using rule 71 (control_structure -> unless .)
    ENSURE          reduce using rule 71 (control_structure -> unless .)
    ELSE            reduce using rule 71 (control_structure -> unless .)
    DOT             reduce using rule 71 (control_structure -> unless .)
    STRING          reduce using rule 71 (control_structure -> unless .)
    VAR_GLOBAL      reduce using rule 71 (control_structure -> unless .)
    VAR_INSTANCE    reduce using rule 71 (control_structure -> unless .)
    VAR_CLASS       reduce using rule 71 (control_structure -> unless .)
    VAR_LOCAL       reduce using rule 71 (control_structure -> unless .)
    VAR_SYSTEM      reduce using rule 71 (control_structure -> unless .)
    VAR_CONSTANT    reduce using rule 71 (control_structure -> unless .)
    LBRACKET        reduce using rule 71 (control_structure -> unless .)
    IDENTIFIER      reduce using rule 71 (control_structure -> unless .)
    SUPER           reduce using rule 71 (control_structure -> unless .)
    LPAREN          reduce using rule 71 (control_structure -> unless .)
    BEGIN           reduce using rule 71 (control_structure -> unless .)
    CLASS           reduce using rule 71 (control_structure -> unless .)
    MODULE          reduce using rule 71 (control_structure -> unless .)
    DEF             reduce using rule 71 (control_structure -> unless .)
    ALIAS           reduce using rule 71 (control_structure -> unless .)
    UNDEF           reduce using rule 71 (control_structure -> unless .)
    DEFINED_OP      reduce using rule 71 (control_structure -> unless .)
    DOUBLE_QUOTED   reduce using rule 71 (control_structure -> unless .)
    PRINT           reduce using rule 71 (control_structure -> unless .)
    PUTS            reduce using rule 71 (control_structure -> unless .)
    NOT             reduce using rule 71 (control_structure -> unless .)
    NOT_SYMBOL      reduce using rule 71 (control_structure -> unless .)
    FOR             reduce using rule 71 (control_structure -> unless .)
    YIELD           reduce using rule 71 (control_structure -> unless .)
    RETRY           reduce using rule 71 (control_structure -> unless .)
    RETURN          reduce using rule 71 (control_structure -> unless .)
    BREAK           reduce using rule 71 (control_structure -> unless .)
    NEXT            reduce using rule 71 (control_structure -> unless .)
    REDO            reduce using rule 71 (control_structure -> unless .)
    CASE            reduce using rule 71 (control_structure -> unless .)
    NUMBER          reduce using rule 71 (control_structure -> unless .)
    THEN            reduce using rule 71 (control_structure -> unless .)
    WHEN            reduce using rule 71 (control_structure -> unless .)
    RPAREN          reduce using rule 71 (control_structure -> unless .)
    ELSIF           reduce using rule 71 (control_structure -> unless .)
    OR_SYMBOL       reduce using rule 71 (control_structure -> unless .)
    RKEY            reduce using rule 71 (control_structure -> unless .)


state 44

    (72) control_structure -> unless_modifier .

    IF              reduce using rule 72 (control_structure -> unless_modifier .)
    UNLESS          reduce using rule 72 (control_structure -> unless_modifier .)
    AND             reduce using rule 72 (control_structure -> unless_modifier .)
    OR              reduce using rule 72 (control_structure -> unless_modifier .)
    NOTEQUAL        reduce using rule 72 (control_structure -> unless_modifier .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (control_structure -> unless_modifier .)
    RANGE_INCLUSIVE reduce using rule 72 (control_structure -> unless_modifier .)
    RANGE_EXCLUSIVE reduce using rule 72 (control_structure -> unless_modifier .)
    WHILE           reduce using rule 72 (control_structure -> unless_modifier .)
    UNTIL           reduce using rule 72 (control_structure -> unless_modifier .)
    DO              reduce using rule 72 (control_structure -> unless_modifier .)
    LKEY            reduce using rule 72 (control_structure -> unless_modifier .)
    $end            reduce using rule 72 (control_structure -> unless_modifier .)
    END             reduce using rule 72 (control_structure -> unless_modifier .)
    RESCUE          reduce using rule 72 (control_structure -> unless_modifier .)
    ENSURE          reduce using rule 72 (control_structure -> unless_modifier .)
    ELSE            reduce using rule 72 (control_structure -> unless_modifier .)
    DOT             reduce using rule 72 (control_structure -> unless_modifier .)
    STRING          reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_GLOBAL      reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_INSTANCE    reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_CLASS       reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_LOCAL       reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_SYSTEM      reduce using rule 72 (control_structure -> unless_modifier .)
    VAR_CONSTANT    reduce using rule 72 (control_structure -> unless_modifier .)
    LBRACKET        reduce using rule 72 (control_structure -> unless_modifier .)
    IDENTIFIER      reduce using rule 72 (control_structure -> unless_modifier .)
    SUPER           reduce using rule 72 (control_structure -> unless_modifier .)
    LPAREN          reduce using rule 72 (control_structure -> unless_modifier .)
    BEGIN           reduce using rule 72 (control_structure -> unless_modifier .)
    CLASS           reduce using rule 72 (control_structure -> unless_modifier .)
    MODULE          reduce using rule 72 (control_structure -> unless_modifier .)
    DEF             reduce using rule 72 (control_structure -> unless_modifier .)
    ALIAS           reduce using rule 72 (control_structure -> unless_modifier .)
    UNDEF           reduce using rule 72 (control_structure -> unless_modifier .)
    DEFINED_OP      reduce using rule 72 (control_structure -> unless_modifier .)
    DOUBLE_QUOTED   reduce using rule 72 (control_structure -> unless_modifier .)
    PRINT           reduce using rule 72 (control_structure -> unless_modifier .)
    PUTS            reduce using rule 72 (control_structure -> unless_modifier .)
    NOT             reduce using rule 72 (control_structure -> unless_modifier .)
    NOT_SYMBOL      reduce using rule 72 (control_structure -> unless_modifier .)
    FOR             reduce using rule 72 (control_structure -> unless_modifier .)
    YIELD           reduce using rule 72 (control_structure -> unless_modifier .)
    RETRY           reduce using rule 72 (control_structure -> unless_modifier .)
    RETURN          reduce using rule 72 (control_structure -> unless_modifier .)
    BREAK           reduce using rule 72 (control_structure -> unless_modifier .)
    NEXT            reduce using rule 72 (control_structure -> unless_modifier .)
    REDO            reduce using rule 72 (control_structure -> unless_modifier .)
    CASE            reduce using rule 72 (control_structure -> unless_modifier .)
    NUMBER          reduce using rule 72 (control_structure -> unless_modifier .)
    THEN            reduce using rule 72 (control_structure -> unless_modifier .)
    WHEN            reduce using rule 72 (control_structure -> unless_modifier .)
    RPAREN          reduce using rule 72 (control_structure -> unless_modifier .)
    ELSIF           reduce using rule 72 (control_structure -> unless_modifier .)
    OR_SYMBOL       reduce using rule 72 (control_structure -> unless_modifier .)
    RKEY            reduce using rule 72 (control_structure -> unless_modifier .)


state 45

    (73) control_structure -> and .

    IF              reduce using rule 73 (control_structure -> and .)
    UNLESS          reduce using rule 73 (control_structure -> and .)
    AND             reduce using rule 73 (control_structure -> and .)
    OR              reduce using rule 73 (control_structure -> and .)
    NOTEQUAL        reduce using rule 73 (control_structure -> and .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (control_structure -> and .)
    RANGE_INCLUSIVE reduce using rule 73 (control_structure -> and .)
    RANGE_EXCLUSIVE reduce using rule 73 (control_structure -> and .)
    WHILE           reduce using rule 73 (control_structure -> and .)
    UNTIL           reduce using rule 73 (control_structure -> and .)
    DO              reduce using rule 73 (control_structure -> and .)
    LKEY            reduce using rule 73 (control_structure -> and .)
    $end            reduce using rule 73 (control_structure -> and .)
    END             reduce using rule 73 (control_structure -> and .)
    RESCUE          reduce using rule 73 (control_structure -> and .)
    ENSURE          reduce using rule 73 (control_structure -> and .)
    ELSE            reduce using rule 73 (control_structure -> and .)
    DOT             reduce using rule 73 (control_structure -> and .)
    STRING          reduce using rule 73 (control_structure -> and .)
    VAR_GLOBAL      reduce using rule 73 (control_structure -> and .)
    VAR_INSTANCE    reduce using rule 73 (control_structure -> and .)
    VAR_CLASS       reduce using rule 73 (control_structure -> and .)
    VAR_LOCAL       reduce using rule 73 (control_structure -> and .)
    VAR_SYSTEM      reduce using rule 73 (control_structure -> and .)
    VAR_CONSTANT    reduce using rule 73 (control_structure -> and .)
    LBRACKET        reduce using rule 73 (control_structure -> and .)
    IDENTIFIER      reduce using rule 73 (control_structure -> and .)
    SUPER           reduce using rule 73 (control_structure -> and .)
    LPAREN          reduce using rule 73 (control_structure -> and .)
    BEGIN           reduce using rule 73 (control_structure -> and .)
    CLASS           reduce using rule 73 (control_structure -> and .)
    MODULE          reduce using rule 73 (control_structure -> and .)
    DEF             reduce using rule 73 (control_structure -> and .)
    ALIAS           reduce using rule 73 (control_structure -> and .)
    UNDEF           reduce using rule 73 (control_structure -> and .)
    DEFINED_OP      reduce using rule 73 (control_structure -> and .)
    DOUBLE_QUOTED   reduce using rule 73 (control_structure -> and .)
    PRINT           reduce using rule 73 (control_structure -> and .)
    PUTS            reduce using rule 73 (control_structure -> and .)
    NOT             reduce using rule 73 (control_structure -> and .)
    NOT_SYMBOL      reduce using rule 73 (control_structure -> and .)
    FOR             reduce using rule 73 (control_structure -> and .)
    YIELD           reduce using rule 73 (control_structure -> and .)
    RETRY           reduce using rule 73 (control_structure -> and .)
    RETURN          reduce using rule 73 (control_structure -> and .)
    BREAK           reduce using rule 73 (control_structure -> and .)
    NEXT            reduce using rule 73 (control_structure -> and .)
    REDO            reduce using rule 73 (control_structure -> and .)
    CASE            reduce using rule 73 (control_structure -> and .)
    NUMBER          reduce using rule 73 (control_structure -> and .)
    THEN            reduce using rule 73 (control_structure -> and .)
    WHEN            reduce using rule 73 (control_structure -> and .)
    RPAREN          reduce using rule 73 (control_structure -> and .)
    ELSIF           reduce using rule 73 (control_structure -> and .)
    OR_SYMBOL       reduce using rule 73 (control_structure -> and .)
    RKEY            reduce using rule 73 (control_structure -> and .)


state 46

    (74) control_structure -> or .

    IF              reduce using rule 74 (control_structure -> or .)
    UNLESS          reduce using rule 74 (control_structure -> or .)
    AND             reduce using rule 74 (control_structure -> or .)
    OR              reduce using rule 74 (control_structure -> or .)
    NOTEQUAL        reduce using rule 74 (control_structure -> or .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 74 (control_structure -> or .)
    RANGE_INCLUSIVE reduce using rule 74 (control_structure -> or .)
    RANGE_EXCLUSIVE reduce using rule 74 (control_structure -> or .)
    WHILE           reduce using rule 74 (control_structure -> or .)
    UNTIL           reduce using rule 74 (control_structure -> or .)
    DO              reduce using rule 74 (control_structure -> or .)
    LKEY            reduce using rule 74 (control_structure -> or .)
    $end            reduce using rule 74 (control_structure -> or .)
    END             reduce using rule 74 (control_structure -> or .)
    RESCUE          reduce using rule 74 (control_structure -> or .)
    ENSURE          reduce using rule 74 (control_structure -> or .)
    ELSE            reduce using rule 74 (control_structure -> or .)
    DOT             reduce using rule 74 (control_structure -> or .)
    STRING          reduce using rule 74 (control_structure -> or .)
    VAR_GLOBAL      reduce using rule 74 (control_structure -> or .)
    VAR_INSTANCE    reduce using rule 74 (control_structure -> or .)
    VAR_CLASS       reduce using rule 74 (control_structure -> or .)
    VAR_LOCAL       reduce using rule 74 (control_structure -> or .)
    VAR_SYSTEM      reduce using rule 74 (control_structure -> or .)
    VAR_CONSTANT    reduce using rule 74 (control_structure -> or .)
    LBRACKET        reduce using rule 74 (control_structure -> or .)
    IDENTIFIER      reduce using rule 74 (control_structure -> or .)
    SUPER           reduce using rule 74 (control_structure -> or .)
    LPAREN          reduce using rule 74 (control_structure -> or .)
    BEGIN           reduce using rule 74 (control_structure -> or .)
    CLASS           reduce using rule 74 (control_structure -> or .)
    MODULE          reduce using rule 74 (control_structure -> or .)
    DEF             reduce using rule 74 (control_structure -> or .)
    ALIAS           reduce using rule 74 (control_structure -> or .)
    UNDEF           reduce using rule 74 (control_structure -> or .)
    DEFINED_OP      reduce using rule 74 (control_structure -> or .)
    DOUBLE_QUOTED   reduce using rule 74 (control_structure -> or .)
    PRINT           reduce using rule 74 (control_structure -> or .)
    PUTS            reduce using rule 74 (control_structure -> or .)
    NOT             reduce using rule 74 (control_structure -> or .)
    NOT_SYMBOL      reduce using rule 74 (control_structure -> or .)
    FOR             reduce using rule 74 (control_structure -> or .)
    YIELD           reduce using rule 74 (control_structure -> or .)
    RETRY           reduce using rule 74 (control_structure -> or .)
    RETURN          reduce using rule 74 (control_structure -> or .)
    BREAK           reduce using rule 74 (control_structure -> or .)
    NEXT            reduce using rule 74 (control_structure -> or .)
    REDO            reduce using rule 74 (control_structure -> or .)
    CASE            reduce using rule 74 (control_structure -> or .)
    NUMBER          reduce using rule 74 (control_structure -> or .)
    THEN            reduce using rule 74 (control_structure -> or .)
    WHEN            reduce using rule 74 (control_structure -> or .)
    RPAREN          reduce using rule 74 (control_structure -> or .)
    ELSIF           reduce using rule 74 (control_structure -> or .)
    OR_SYMBOL       reduce using rule 74 (control_structure -> or .)
    RKEY            reduce using rule 74 (control_structure -> or .)


state 47

    (75) control_structure -> not .

    IF              reduce using rule 75 (control_structure -> not .)
    UNLESS          reduce using rule 75 (control_structure -> not .)
    AND             reduce using rule 75 (control_structure -> not .)
    OR              reduce using rule 75 (control_structure -> not .)
    NOTEQUAL        reduce using rule 75 (control_structure -> not .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 75 (control_structure -> not .)
    RANGE_INCLUSIVE reduce using rule 75 (control_structure -> not .)
    RANGE_EXCLUSIVE reduce using rule 75 (control_structure -> not .)
    WHILE           reduce using rule 75 (control_structure -> not .)
    UNTIL           reduce using rule 75 (control_structure -> not .)
    DO              reduce using rule 75 (control_structure -> not .)
    LKEY            reduce using rule 75 (control_structure -> not .)
    $end            reduce using rule 75 (control_structure -> not .)
    END             reduce using rule 75 (control_structure -> not .)
    RESCUE          reduce using rule 75 (control_structure -> not .)
    ENSURE          reduce using rule 75 (control_structure -> not .)
    ELSE            reduce using rule 75 (control_structure -> not .)
    DOT             reduce using rule 75 (control_structure -> not .)
    STRING          reduce using rule 75 (control_structure -> not .)
    VAR_GLOBAL      reduce using rule 75 (control_structure -> not .)
    VAR_INSTANCE    reduce using rule 75 (control_structure -> not .)
    VAR_CLASS       reduce using rule 75 (control_structure -> not .)
    VAR_LOCAL       reduce using rule 75 (control_structure -> not .)
    VAR_SYSTEM      reduce using rule 75 (control_structure -> not .)
    VAR_CONSTANT    reduce using rule 75 (control_structure -> not .)
    LBRACKET        reduce using rule 75 (control_structure -> not .)
    IDENTIFIER      reduce using rule 75 (control_structure -> not .)
    SUPER           reduce using rule 75 (control_structure -> not .)
    LPAREN          reduce using rule 75 (control_structure -> not .)
    BEGIN           reduce using rule 75 (control_structure -> not .)
    CLASS           reduce using rule 75 (control_structure -> not .)
    MODULE          reduce using rule 75 (control_structure -> not .)
    DEF             reduce using rule 75 (control_structure -> not .)
    ALIAS           reduce using rule 75 (control_structure -> not .)
    UNDEF           reduce using rule 75 (control_structure -> not .)
    DEFINED_OP      reduce using rule 75 (control_structure -> not .)
    DOUBLE_QUOTED   reduce using rule 75 (control_structure -> not .)
    PRINT           reduce using rule 75 (control_structure -> not .)
    PUTS            reduce using rule 75 (control_structure -> not .)
    NOT             reduce using rule 75 (control_structure -> not .)
    NOT_SYMBOL      reduce using rule 75 (control_structure -> not .)
    FOR             reduce using rule 75 (control_structure -> not .)
    YIELD           reduce using rule 75 (control_structure -> not .)
    RETRY           reduce using rule 75 (control_structure -> not .)
    RETURN          reduce using rule 75 (control_structure -> not .)
    BREAK           reduce using rule 75 (control_structure -> not .)
    NEXT            reduce using rule 75 (control_structure -> not .)
    REDO            reduce using rule 75 (control_structure -> not .)
    CASE            reduce using rule 75 (control_structure -> not .)
    NUMBER          reduce using rule 75 (control_structure -> not .)
    THEN            reduce using rule 75 (control_structure -> not .)
    WHEN            reduce using rule 75 (control_structure -> not .)
    RPAREN          reduce using rule 75 (control_structure -> not .)
    ELSIF           reduce using rule 75 (control_structure -> not .)
    OR_SYMBOL       reduce using rule 75 (control_structure -> not .)
    RKEY            reduce using rule 75 (control_structure -> not .)


state 48

    (76) control_structure -> range_expressions .

    IF              reduce using rule 76 (control_structure -> range_expressions .)
    UNLESS          reduce using rule 76 (control_structure -> range_expressions .)
    AND             reduce using rule 76 (control_structure -> range_expressions .)
    OR              reduce using rule 76 (control_structure -> range_expressions .)
    NOTEQUAL        reduce using rule 76 (control_structure -> range_expressions .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 76 (control_structure -> range_expressions .)
    RANGE_INCLUSIVE reduce using rule 76 (control_structure -> range_expressions .)
    RANGE_EXCLUSIVE reduce using rule 76 (control_structure -> range_expressions .)
    WHILE           reduce using rule 76 (control_structure -> range_expressions .)
    UNTIL           reduce using rule 76 (control_structure -> range_expressions .)
    DO              reduce using rule 76 (control_structure -> range_expressions .)
    LKEY            reduce using rule 76 (control_structure -> range_expressions .)
    $end            reduce using rule 76 (control_structure -> range_expressions .)
    END             reduce using rule 76 (control_structure -> range_expressions .)
    RESCUE          reduce using rule 76 (control_structure -> range_expressions .)
    ENSURE          reduce using rule 76 (control_structure -> range_expressions .)
    ELSE            reduce using rule 76 (control_structure -> range_expressions .)
    DOT             reduce using rule 76 (control_structure -> range_expressions .)
    STRING          reduce using rule 76 (control_structure -> range_expressions .)
    VAR_GLOBAL      reduce using rule 76 (control_structure -> range_expressions .)
    VAR_INSTANCE    reduce using rule 76 (control_structure -> range_expressions .)
    VAR_CLASS       reduce using rule 76 (control_structure -> range_expressions .)
    VAR_LOCAL       reduce using rule 76 (control_structure -> range_expressions .)
    VAR_SYSTEM      reduce using rule 76 (control_structure -> range_expressions .)
    VAR_CONSTANT    reduce using rule 76 (control_structure -> range_expressions .)
    LBRACKET        reduce using rule 76 (control_structure -> range_expressions .)
    IDENTIFIER      reduce using rule 76 (control_structure -> range_expressions .)
    SUPER           reduce using rule 76 (control_structure -> range_expressions .)
    LPAREN          reduce using rule 76 (control_structure -> range_expressions .)
    BEGIN           reduce using rule 76 (control_structure -> range_expressions .)
    CLASS           reduce using rule 76 (control_structure -> range_expressions .)
    MODULE          reduce using rule 76 (control_structure -> range_expressions .)
    DEF             reduce using rule 76 (control_structure -> range_expressions .)
    ALIAS           reduce using rule 76 (control_structure -> range_expressions .)
    UNDEF           reduce using rule 76 (control_structure -> range_expressions .)
    DEFINED_OP      reduce using rule 76 (control_structure -> range_expressions .)
    DOUBLE_QUOTED   reduce using rule 76 (control_structure -> range_expressions .)
    PRINT           reduce using rule 76 (control_structure -> range_expressions .)
    PUTS            reduce using rule 76 (control_structure -> range_expressions .)
    NOT             reduce using rule 76 (control_structure -> range_expressions .)
    NOT_SYMBOL      reduce using rule 76 (control_structure -> range_expressions .)
    FOR             reduce using rule 76 (control_structure -> range_expressions .)
    YIELD           reduce using rule 76 (control_structure -> range_expressions .)
    RETRY           reduce using rule 76 (control_structure -> range_expressions .)
    RETURN          reduce using rule 76 (control_structure -> range_expressions .)
    BREAK           reduce using rule 76 (control_structure -> range_expressions .)
    NEXT            reduce using rule 76 (control_structure -> range_expressions .)
    REDO            reduce using rule 76 (control_structure -> range_expressions .)
    CASE            reduce using rule 76 (control_structure -> range_expressions .)
    NUMBER          reduce using rule 76 (control_structure -> range_expressions .)
    THEN            reduce using rule 76 (control_structure -> range_expressions .)
    WHEN            reduce using rule 76 (control_structure -> range_expressions .)
    RPAREN          reduce using rule 76 (control_structure -> range_expressions .)
    ELSIF           reduce using rule 76 (control_structure -> range_expressions .)
    OR_SYMBOL       reduce using rule 76 (control_structure -> range_expressions .)
    RKEY            reduce using rule 76 (control_structure -> range_expressions .)


state 49

    (77) control_structure -> while .

    IF              reduce using rule 77 (control_structure -> while .)
    UNLESS          reduce using rule 77 (control_structure -> while .)
    AND             reduce using rule 77 (control_structure -> while .)
    OR              reduce using rule 77 (control_structure -> while .)
    NOTEQUAL        reduce using rule 77 (control_structure -> while .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 77 (control_structure -> while .)
    RANGE_INCLUSIVE reduce using rule 77 (control_structure -> while .)
    RANGE_EXCLUSIVE reduce using rule 77 (control_structure -> while .)
    WHILE           reduce using rule 77 (control_structure -> while .)
    UNTIL           reduce using rule 77 (control_structure -> while .)
    DO              reduce using rule 77 (control_structure -> while .)
    LKEY            reduce using rule 77 (control_structure -> while .)
    $end            reduce using rule 77 (control_structure -> while .)
    END             reduce using rule 77 (control_structure -> while .)
    RESCUE          reduce using rule 77 (control_structure -> while .)
    ENSURE          reduce using rule 77 (control_structure -> while .)
    ELSE            reduce using rule 77 (control_structure -> while .)
    DOT             reduce using rule 77 (control_structure -> while .)
    STRING          reduce using rule 77 (control_structure -> while .)
    VAR_GLOBAL      reduce using rule 77 (control_structure -> while .)
    VAR_INSTANCE    reduce using rule 77 (control_structure -> while .)
    VAR_CLASS       reduce using rule 77 (control_structure -> while .)
    VAR_LOCAL       reduce using rule 77 (control_structure -> while .)
    VAR_SYSTEM      reduce using rule 77 (control_structure -> while .)
    VAR_CONSTANT    reduce using rule 77 (control_structure -> while .)
    LBRACKET        reduce using rule 77 (control_structure -> while .)
    IDENTIFIER      reduce using rule 77 (control_structure -> while .)
    SUPER           reduce using rule 77 (control_structure -> while .)
    LPAREN          reduce using rule 77 (control_structure -> while .)
    BEGIN           reduce using rule 77 (control_structure -> while .)
    CLASS           reduce using rule 77 (control_structure -> while .)
    MODULE          reduce using rule 77 (control_structure -> while .)
    DEF             reduce using rule 77 (control_structure -> while .)
    ALIAS           reduce using rule 77 (control_structure -> while .)
    UNDEF           reduce using rule 77 (control_structure -> while .)
    DEFINED_OP      reduce using rule 77 (control_structure -> while .)
    DOUBLE_QUOTED   reduce using rule 77 (control_structure -> while .)
    PRINT           reduce using rule 77 (control_structure -> while .)
    PUTS            reduce using rule 77 (control_structure -> while .)
    NOT             reduce using rule 77 (control_structure -> while .)
    NOT_SYMBOL      reduce using rule 77 (control_structure -> while .)
    FOR             reduce using rule 77 (control_structure -> while .)
    YIELD           reduce using rule 77 (control_structure -> while .)
    RETRY           reduce using rule 77 (control_structure -> while .)
    RETURN          reduce using rule 77 (control_structure -> while .)
    BREAK           reduce using rule 77 (control_structure -> while .)
    NEXT            reduce using rule 77 (control_structure -> while .)
    REDO            reduce using rule 77 (control_structure -> while .)
    CASE            reduce using rule 77 (control_structure -> while .)
    NUMBER          reduce using rule 77 (control_structure -> while .)
    THEN            reduce using rule 77 (control_structure -> while .)
    WHEN            reduce using rule 77 (control_structure -> while .)
    RPAREN          reduce using rule 77 (control_structure -> while .)
    ELSIF           reduce using rule 77 (control_structure -> while .)
    OR_SYMBOL       reduce using rule 77 (control_structure -> while .)
    RKEY            reduce using rule 77 (control_structure -> while .)


state 50

    (78) control_structure -> while_modifier .

    IF              reduce using rule 78 (control_structure -> while_modifier .)
    UNLESS          reduce using rule 78 (control_structure -> while_modifier .)
    AND             reduce using rule 78 (control_structure -> while_modifier .)
    OR              reduce using rule 78 (control_structure -> while_modifier .)
    NOTEQUAL        reduce using rule 78 (control_structure -> while_modifier .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 78 (control_structure -> while_modifier .)
    RANGE_INCLUSIVE reduce using rule 78 (control_structure -> while_modifier .)
    RANGE_EXCLUSIVE reduce using rule 78 (control_structure -> while_modifier .)
    WHILE           reduce using rule 78 (control_structure -> while_modifier .)
    UNTIL           reduce using rule 78 (control_structure -> while_modifier .)
    DO              reduce using rule 78 (control_structure -> while_modifier .)
    LKEY            reduce using rule 78 (control_structure -> while_modifier .)
    $end            reduce using rule 78 (control_structure -> while_modifier .)
    END             reduce using rule 78 (control_structure -> while_modifier .)
    RESCUE          reduce using rule 78 (control_structure -> while_modifier .)
    ENSURE          reduce using rule 78 (control_structure -> while_modifier .)
    ELSE            reduce using rule 78 (control_structure -> while_modifier .)
    DOT             reduce using rule 78 (control_structure -> while_modifier .)
    STRING          reduce using rule 78 (control_structure -> while_modifier .)
    VAR_GLOBAL      reduce using rule 78 (control_structure -> while_modifier .)
    VAR_INSTANCE    reduce using rule 78 (control_structure -> while_modifier .)
    VAR_CLASS       reduce using rule 78 (control_structure -> while_modifier .)
    VAR_LOCAL       reduce using rule 78 (control_structure -> while_modifier .)
    VAR_SYSTEM      reduce using rule 78 (control_structure -> while_modifier .)
    VAR_CONSTANT    reduce using rule 78 (control_structure -> while_modifier .)
    LBRACKET        reduce using rule 78 (control_structure -> while_modifier .)
    IDENTIFIER      reduce using rule 78 (control_structure -> while_modifier .)
    SUPER           reduce using rule 78 (control_structure -> while_modifier .)
    LPAREN          reduce using rule 78 (control_structure -> while_modifier .)
    BEGIN           reduce using rule 78 (control_structure -> while_modifier .)
    CLASS           reduce using rule 78 (control_structure -> while_modifier .)
    MODULE          reduce using rule 78 (control_structure -> while_modifier .)
    DEF             reduce using rule 78 (control_structure -> while_modifier .)
    ALIAS           reduce using rule 78 (control_structure -> while_modifier .)
    UNDEF           reduce using rule 78 (control_structure -> while_modifier .)
    DEFINED_OP      reduce using rule 78 (control_structure -> while_modifier .)
    DOUBLE_QUOTED   reduce using rule 78 (control_structure -> while_modifier .)
    PRINT           reduce using rule 78 (control_structure -> while_modifier .)
    PUTS            reduce using rule 78 (control_structure -> while_modifier .)
    NOT             reduce using rule 78 (control_structure -> while_modifier .)
    NOT_SYMBOL      reduce using rule 78 (control_structure -> while_modifier .)
    FOR             reduce using rule 78 (control_structure -> while_modifier .)
    YIELD           reduce using rule 78 (control_structure -> while_modifier .)
    RETRY           reduce using rule 78 (control_structure -> while_modifier .)
    RETURN          reduce using rule 78 (control_structure -> while_modifier .)
    BREAK           reduce using rule 78 (control_structure -> while_modifier .)
    NEXT            reduce using rule 78 (control_structure -> while_modifier .)
    REDO            reduce using rule 78 (control_structure -> while_modifier .)
    CASE            reduce using rule 78 (control_structure -> while_modifier .)
    NUMBER          reduce using rule 78 (control_structure -> while_modifier .)
    THEN            reduce using rule 78 (control_structure -> while_modifier .)
    WHEN            reduce using rule 78 (control_structure -> while_modifier .)
    RPAREN          reduce using rule 78 (control_structure -> while_modifier .)
    ELSIF           reduce using rule 78 (control_structure -> while_modifier .)
    OR_SYMBOL       reduce using rule 78 (control_structure -> while_modifier .)
    RKEY            reduce using rule 78 (control_structure -> while_modifier .)


state 51

    (79) control_structure -> until .

    IF              reduce using rule 79 (control_structure -> until .)
    UNLESS          reduce using rule 79 (control_structure -> until .)
    AND             reduce using rule 79 (control_structure -> until .)
    OR              reduce using rule 79 (control_structure -> until .)
    NOTEQUAL        reduce using rule 79 (control_structure -> until .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 79 (control_structure -> until .)
    RANGE_INCLUSIVE reduce using rule 79 (control_structure -> until .)
    RANGE_EXCLUSIVE reduce using rule 79 (control_structure -> until .)
    WHILE           reduce using rule 79 (control_structure -> until .)
    UNTIL           reduce using rule 79 (control_structure -> until .)
    DO              reduce using rule 79 (control_structure -> until .)
    LKEY            reduce using rule 79 (control_structure -> until .)
    $end            reduce using rule 79 (control_structure -> until .)
    END             reduce using rule 79 (control_structure -> until .)
    RESCUE          reduce using rule 79 (control_structure -> until .)
    ENSURE          reduce using rule 79 (control_structure -> until .)
    ELSE            reduce using rule 79 (control_structure -> until .)
    DOT             reduce using rule 79 (control_structure -> until .)
    STRING          reduce using rule 79 (control_structure -> until .)
    VAR_GLOBAL      reduce using rule 79 (control_structure -> until .)
    VAR_INSTANCE    reduce using rule 79 (control_structure -> until .)
    VAR_CLASS       reduce using rule 79 (control_structure -> until .)
    VAR_LOCAL       reduce using rule 79 (control_structure -> until .)
    VAR_SYSTEM      reduce using rule 79 (control_structure -> until .)
    VAR_CONSTANT    reduce using rule 79 (control_structure -> until .)
    LBRACKET        reduce using rule 79 (control_structure -> until .)
    IDENTIFIER      reduce using rule 79 (control_structure -> until .)
    SUPER           reduce using rule 79 (control_structure -> until .)
    LPAREN          reduce using rule 79 (control_structure -> until .)
    BEGIN           reduce using rule 79 (control_structure -> until .)
    CLASS           reduce using rule 79 (control_structure -> until .)
    MODULE          reduce using rule 79 (control_structure -> until .)
    DEF             reduce using rule 79 (control_structure -> until .)
    ALIAS           reduce using rule 79 (control_structure -> until .)
    UNDEF           reduce using rule 79 (control_structure -> until .)
    DEFINED_OP      reduce using rule 79 (control_structure -> until .)
    DOUBLE_QUOTED   reduce using rule 79 (control_structure -> until .)
    PRINT           reduce using rule 79 (control_structure -> until .)
    PUTS            reduce using rule 79 (control_structure -> until .)
    NOT             reduce using rule 79 (control_structure -> until .)
    NOT_SYMBOL      reduce using rule 79 (control_structure -> until .)
    FOR             reduce using rule 79 (control_structure -> until .)
    YIELD           reduce using rule 79 (control_structure -> until .)
    RETRY           reduce using rule 79 (control_structure -> until .)
    RETURN          reduce using rule 79 (control_structure -> until .)
    BREAK           reduce using rule 79 (control_structure -> until .)
    NEXT            reduce using rule 79 (control_structure -> until .)
    REDO            reduce using rule 79 (control_structure -> until .)
    CASE            reduce using rule 79 (control_structure -> until .)
    NUMBER          reduce using rule 79 (control_structure -> until .)
    THEN            reduce using rule 79 (control_structure -> until .)
    WHEN            reduce using rule 79 (control_structure -> until .)
    RPAREN          reduce using rule 79 (control_structure -> until .)
    ELSIF           reduce using rule 79 (control_structure -> until .)
    OR_SYMBOL       reduce using rule 79 (control_structure -> until .)
    RKEY            reduce using rule 79 (control_structure -> until .)


state 52

    (80) control_structure -> until_modifier .

    IF              reduce using rule 80 (control_structure -> until_modifier .)
    UNLESS          reduce using rule 80 (control_structure -> until_modifier .)
    AND             reduce using rule 80 (control_structure -> until_modifier .)
    OR              reduce using rule 80 (control_structure -> until_modifier .)
    NOTEQUAL        reduce using rule 80 (control_structure -> until_modifier .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 80 (control_structure -> until_modifier .)
    RANGE_INCLUSIVE reduce using rule 80 (control_structure -> until_modifier .)
    RANGE_EXCLUSIVE reduce using rule 80 (control_structure -> until_modifier .)
    WHILE           reduce using rule 80 (control_structure -> until_modifier .)
    UNTIL           reduce using rule 80 (control_structure -> until_modifier .)
    DO              reduce using rule 80 (control_structure -> until_modifier .)
    LKEY            reduce using rule 80 (control_structure -> until_modifier .)
    $end            reduce using rule 80 (control_structure -> until_modifier .)
    END             reduce using rule 80 (control_structure -> until_modifier .)
    RESCUE          reduce using rule 80 (control_structure -> until_modifier .)
    ENSURE          reduce using rule 80 (control_structure -> until_modifier .)
    ELSE            reduce using rule 80 (control_structure -> until_modifier .)
    DOT             reduce using rule 80 (control_structure -> until_modifier .)
    STRING          reduce using rule 80 (control_structure -> until_modifier .)
    VAR_GLOBAL      reduce using rule 80 (control_structure -> until_modifier .)
    VAR_INSTANCE    reduce using rule 80 (control_structure -> until_modifier .)
    VAR_CLASS       reduce using rule 80 (control_structure -> until_modifier .)
    VAR_LOCAL       reduce using rule 80 (control_structure -> until_modifier .)
    VAR_SYSTEM      reduce using rule 80 (control_structure -> until_modifier .)
    VAR_CONSTANT    reduce using rule 80 (control_structure -> until_modifier .)
    LBRACKET        reduce using rule 80 (control_structure -> until_modifier .)
    IDENTIFIER      reduce using rule 80 (control_structure -> until_modifier .)
    SUPER           reduce using rule 80 (control_structure -> until_modifier .)
    LPAREN          reduce using rule 80 (control_structure -> until_modifier .)
    BEGIN           reduce using rule 80 (control_structure -> until_modifier .)
    CLASS           reduce using rule 80 (control_structure -> until_modifier .)
    MODULE          reduce using rule 80 (control_structure -> until_modifier .)
    DEF             reduce using rule 80 (control_structure -> until_modifier .)
    ALIAS           reduce using rule 80 (control_structure -> until_modifier .)
    UNDEF           reduce using rule 80 (control_structure -> until_modifier .)
    DEFINED_OP      reduce using rule 80 (control_structure -> until_modifier .)
    DOUBLE_QUOTED   reduce using rule 80 (control_structure -> until_modifier .)
    PRINT           reduce using rule 80 (control_structure -> until_modifier .)
    PUTS            reduce using rule 80 (control_structure -> until_modifier .)
    NOT             reduce using rule 80 (control_structure -> until_modifier .)
    NOT_SYMBOL      reduce using rule 80 (control_structure -> until_modifier .)
    FOR             reduce using rule 80 (control_structure -> until_modifier .)
    YIELD           reduce using rule 80 (control_structure -> until_modifier .)
    RETRY           reduce using rule 80 (control_structure -> until_modifier .)
    RETURN          reduce using rule 80 (control_structure -> until_modifier .)
    BREAK           reduce using rule 80 (control_structure -> until_modifier .)
    NEXT            reduce using rule 80 (control_structure -> until_modifier .)
    REDO            reduce using rule 80 (control_structure -> until_modifier .)
    CASE            reduce using rule 80 (control_structure -> until_modifier .)
    NUMBER          reduce using rule 80 (control_structure -> until_modifier .)
    THEN            reduce using rule 80 (control_structure -> until_modifier .)
    WHEN            reduce using rule 80 (control_structure -> until_modifier .)
    RPAREN          reduce using rule 80 (control_structure -> until_modifier .)
    ELSIF           reduce using rule 80 (control_structure -> until_modifier .)
    OR_SYMBOL       reduce using rule 80 (control_structure -> until_modifier .)
    RKEY            reduce using rule 80 (control_structure -> until_modifier .)


state 53

    (81) control_structure -> iterator .

    IF              reduce using rule 81 (control_structure -> iterator .)
    UNLESS          reduce using rule 81 (control_structure -> iterator .)
    AND             reduce using rule 81 (control_structure -> iterator .)
    OR              reduce using rule 81 (control_structure -> iterator .)
    NOTEQUAL        reduce using rule 81 (control_structure -> iterator .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 81 (control_structure -> iterator .)
    RANGE_INCLUSIVE reduce using rule 81 (control_structure -> iterator .)
    RANGE_EXCLUSIVE reduce using rule 81 (control_structure -> iterator .)
    WHILE           reduce using rule 81 (control_structure -> iterator .)
    UNTIL           reduce using rule 81 (control_structure -> iterator .)
    DO              reduce using rule 81 (control_structure -> iterator .)
    LKEY            reduce using rule 81 (control_structure -> iterator .)
    $end            reduce using rule 81 (control_structure -> iterator .)
    END             reduce using rule 81 (control_structure -> iterator .)
    RESCUE          reduce using rule 81 (control_structure -> iterator .)
    ENSURE          reduce using rule 81 (control_structure -> iterator .)
    ELSE            reduce using rule 81 (control_structure -> iterator .)
    DOT             reduce using rule 81 (control_structure -> iterator .)
    STRING          reduce using rule 81 (control_structure -> iterator .)
    VAR_GLOBAL      reduce using rule 81 (control_structure -> iterator .)
    VAR_INSTANCE    reduce using rule 81 (control_structure -> iterator .)
    VAR_CLASS       reduce using rule 81 (control_structure -> iterator .)
    VAR_LOCAL       reduce using rule 81 (control_structure -> iterator .)
    VAR_SYSTEM      reduce using rule 81 (control_structure -> iterator .)
    VAR_CONSTANT    reduce using rule 81 (control_structure -> iterator .)
    LBRACKET        reduce using rule 81 (control_structure -> iterator .)
    IDENTIFIER      reduce using rule 81 (control_structure -> iterator .)
    SUPER           reduce using rule 81 (control_structure -> iterator .)
    LPAREN          reduce using rule 81 (control_structure -> iterator .)
    BEGIN           reduce using rule 81 (control_structure -> iterator .)
    CLASS           reduce using rule 81 (control_structure -> iterator .)
    MODULE          reduce using rule 81 (control_structure -> iterator .)
    DEF             reduce using rule 81 (control_structure -> iterator .)
    ALIAS           reduce using rule 81 (control_structure -> iterator .)
    UNDEF           reduce using rule 81 (control_structure -> iterator .)
    DEFINED_OP      reduce using rule 81 (control_structure -> iterator .)
    DOUBLE_QUOTED   reduce using rule 81 (control_structure -> iterator .)
    PRINT           reduce using rule 81 (control_structure -> iterator .)
    PUTS            reduce using rule 81 (control_structure -> iterator .)
    NOT             reduce using rule 81 (control_structure -> iterator .)
    NOT_SYMBOL      reduce using rule 81 (control_structure -> iterator .)
    FOR             reduce using rule 81 (control_structure -> iterator .)
    YIELD           reduce using rule 81 (control_structure -> iterator .)
    RETRY           reduce using rule 81 (control_structure -> iterator .)
    RETURN          reduce using rule 81 (control_structure -> iterator .)
    BREAK           reduce using rule 81 (control_structure -> iterator .)
    NEXT            reduce using rule 81 (control_structure -> iterator .)
    REDO            reduce using rule 81 (control_structure -> iterator .)
    CASE            reduce using rule 81 (control_structure -> iterator .)
    NUMBER          reduce using rule 81 (control_structure -> iterator .)
    THEN            reduce using rule 81 (control_structure -> iterator .)
    WHEN            reduce using rule 81 (control_structure -> iterator .)
    RPAREN          reduce using rule 81 (control_structure -> iterator .)
    ELSIF           reduce using rule 81 (control_structure -> iterator .)
    OR_SYMBOL       reduce using rule 81 (control_structure -> iterator .)
    RKEY            reduce using rule 81 (control_structure -> iterator .)


state 54

    (82) control_structure -> for .

    IF              reduce using rule 82 (control_structure -> for .)
    UNLESS          reduce using rule 82 (control_structure -> for .)
    AND             reduce using rule 82 (control_structure -> for .)
    OR              reduce using rule 82 (control_structure -> for .)
    NOTEQUAL        reduce using rule 82 (control_structure -> for .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 82 (control_structure -> for .)
    RANGE_INCLUSIVE reduce using rule 82 (control_structure -> for .)
    RANGE_EXCLUSIVE reduce using rule 82 (control_structure -> for .)
    WHILE           reduce using rule 82 (control_structure -> for .)
    UNTIL           reduce using rule 82 (control_structure -> for .)
    DO              reduce using rule 82 (control_structure -> for .)
    LKEY            reduce using rule 82 (control_structure -> for .)
    $end            reduce using rule 82 (control_structure -> for .)
    END             reduce using rule 82 (control_structure -> for .)
    RESCUE          reduce using rule 82 (control_structure -> for .)
    ENSURE          reduce using rule 82 (control_structure -> for .)
    ELSE            reduce using rule 82 (control_structure -> for .)
    DOT             reduce using rule 82 (control_structure -> for .)
    STRING          reduce using rule 82 (control_structure -> for .)
    VAR_GLOBAL      reduce using rule 82 (control_structure -> for .)
    VAR_INSTANCE    reduce using rule 82 (control_structure -> for .)
    VAR_CLASS       reduce using rule 82 (control_structure -> for .)
    VAR_LOCAL       reduce using rule 82 (control_structure -> for .)
    VAR_SYSTEM      reduce using rule 82 (control_structure -> for .)
    VAR_CONSTANT    reduce using rule 82 (control_structure -> for .)
    LBRACKET        reduce using rule 82 (control_structure -> for .)
    IDENTIFIER      reduce using rule 82 (control_structure -> for .)
    SUPER           reduce using rule 82 (control_structure -> for .)
    LPAREN          reduce using rule 82 (control_structure -> for .)
    BEGIN           reduce using rule 82 (control_structure -> for .)
    CLASS           reduce using rule 82 (control_structure -> for .)
    MODULE          reduce using rule 82 (control_structure -> for .)
    DEF             reduce using rule 82 (control_structure -> for .)
    ALIAS           reduce using rule 82 (control_structure -> for .)
    UNDEF           reduce using rule 82 (control_structure -> for .)
    DEFINED_OP      reduce using rule 82 (control_structure -> for .)
    DOUBLE_QUOTED   reduce using rule 82 (control_structure -> for .)
    PRINT           reduce using rule 82 (control_structure -> for .)
    PUTS            reduce using rule 82 (control_structure -> for .)
    NOT             reduce using rule 82 (control_structure -> for .)
    NOT_SYMBOL      reduce using rule 82 (control_structure -> for .)
    FOR             reduce using rule 82 (control_structure -> for .)
    YIELD           reduce using rule 82 (control_structure -> for .)
    RETRY           reduce using rule 82 (control_structure -> for .)
    RETURN          reduce using rule 82 (control_structure -> for .)
    BREAK           reduce using rule 82 (control_structure -> for .)
    NEXT            reduce using rule 82 (control_structure -> for .)
    REDO            reduce using rule 82 (control_structure -> for .)
    CASE            reduce using rule 82 (control_structure -> for .)
    NUMBER          reduce using rule 82 (control_structure -> for .)
    THEN            reduce using rule 82 (control_structure -> for .)
    WHEN            reduce using rule 82 (control_structure -> for .)
    RPAREN          reduce using rule 82 (control_structure -> for .)
    ELSIF           reduce using rule 82 (control_structure -> for .)
    OR_SYMBOL       reduce using rule 82 (control_structure -> for .)
    RKEY            reduce using rule 82 (control_structure -> for .)


state 55

    (83) control_structure -> yield .

    IF              reduce using rule 83 (control_structure -> yield .)
    UNLESS          reduce using rule 83 (control_structure -> yield .)
    AND             reduce using rule 83 (control_structure -> yield .)
    OR              reduce using rule 83 (control_structure -> yield .)
    NOTEQUAL        reduce using rule 83 (control_structure -> yield .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 83 (control_structure -> yield .)
    RANGE_INCLUSIVE reduce using rule 83 (control_structure -> yield .)
    RANGE_EXCLUSIVE reduce using rule 83 (control_structure -> yield .)
    WHILE           reduce using rule 83 (control_structure -> yield .)
    UNTIL           reduce using rule 83 (control_structure -> yield .)
    DO              reduce using rule 83 (control_structure -> yield .)
    LKEY            reduce using rule 83 (control_structure -> yield .)
    $end            reduce using rule 83 (control_structure -> yield .)
    END             reduce using rule 83 (control_structure -> yield .)
    RESCUE          reduce using rule 83 (control_structure -> yield .)
    ENSURE          reduce using rule 83 (control_structure -> yield .)
    ELSE            reduce using rule 83 (control_structure -> yield .)
    DOT             reduce using rule 83 (control_structure -> yield .)
    STRING          reduce using rule 83 (control_structure -> yield .)
    VAR_GLOBAL      reduce using rule 83 (control_structure -> yield .)
    VAR_INSTANCE    reduce using rule 83 (control_structure -> yield .)
    VAR_CLASS       reduce using rule 83 (control_structure -> yield .)
    VAR_LOCAL       reduce using rule 83 (control_structure -> yield .)
    VAR_SYSTEM      reduce using rule 83 (control_structure -> yield .)
    VAR_CONSTANT    reduce using rule 83 (control_structure -> yield .)
    LBRACKET        reduce using rule 83 (control_structure -> yield .)
    IDENTIFIER      reduce using rule 83 (control_structure -> yield .)
    SUPER           reduce using rule 83 (control_structure -> yield .)
    LPAREN          reduce using rule 83 (control_structure -> yield .)
    BEGIN           reduce using rule 83 (control_structure -> yield .)
    CLASS           reduce using rule 83 (control_structure -> yield .)
    MODULE          reduce using rule 83 (control_structure -> yield .)
    DEF             reduce using rule 83 (control_structure -> yield .)
    ALIAS           reduce using rule 83 (control_structure -> yield .)
    UNDEF           reduce using rule 83 (control_structure -> yield .)
    DEFINED_OP      reduce using rule 83 (control_structure -> yield .)
    DOUBLE_QUOTED   reduce using rule 83 (control_structure -> yield .)
    PRINT           reduce using rule 83 (control_structure -> yield .)
    PUTS            reduce using rule 83 (control_structure -> yield .)
    NOT             reduce using rule 83 (control_structure -> yield .)
    NOT_SYMBOL      reduce using rule 83 (control_structure -> yield .)
    FOR             reduce using rule 83 (control_structure -> yield .)
    YIELD           reduce using rule 83 (control_structure -> yield .)
    RETRY           reduce using rule 83 (control_structure -> yield .)
    RETURN          reduce using rule 83 (control_structure -> yield .)
    BREAK           reduce using rule 83 (control_structure -> yield .)
    NEXT            reduce using rule 83 (control_structure -> yield .)
    REDO            reduce using rule 83 (control_structure -> yield .)
    CASE            reduce using rule 83 (control_structure -> yield .)
    NUMBER          reduce using rule 83 (control_structure -> yield .)
    THEN            reduce using rule 83 (control_structure -> yield .)
    WHEN            reduce using rule 83 (control_structure -> yield .)
    RPAREN          reduce using rule 83 (control_structure -> yield .)
    ELSIF           reduce using rule 83 (control_structure -> yield .)
    OR_SYMBOL       reduce using rule 83 (control_structure -> yield .)
    RKEY            reduce using rule 83 (control_structure -> yield .)


state 56

    (84) control_structure -> begin_expression .

    IF              reduce using rule 84 (control_structure -> begin_expression .)
    UNLESS          reduce using rule 84 (control_structure -> begin_expression .)
    AND             reduce using rule 84 (control_structure -> begin_expression .)
    OR              reduce using rule 84 (control_structure -> begin_expression .)
    NOTEQUAL        reduce using rule 84 (control_structure -> begin_expression .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 84 (control_structure -> begin_expression .)
    RANGE_INCLUSIVE reduce using rule 84 (control_structure -> begin_expression .)
    RANGE_EXCLUSIVE reduce using rule 84 (control_structure -> begin_expression .)
    WHILE           reduce using rule 84 (control_structure -> begin_expression .)
    UNTIL           reduce using rule 84 (control_structure -> begin_expression .)
    DO              reduce using rule 84 (control_structure -> begin_expression .)
    LKEY            reduce using rule 84 (control_structure -> begin_expression .)
    $end            reduce using rule 84 (control_structure -> begin_expression .)
    END             reduce using rule 84 (control_structure -> begin_expression .)
    RESCUE          reduce using rule 84 (control_structure -> begin_expression .)
    ENSURE          reduce using rule 84 (control_structure -> begin_expression .)
    ELSE            reduce using rule 84 (control_structure -> begin_expression .)
    DOT             reduce using rule 84 (control_structure -> begin_expression .)
    STRING          reduce using rule 84 (control_structure -> begin_expression .)
    VAR_GLOBAL      reduce using rule 84 (control_structure -> begin_expression .)
    VAR_INSTANCE    reduce using rule 84 (control_structure -> begin_expression .)
    VAR_CLASS       reduce using rule 84 (control_structure -> begin_expression .)
    VAR_LOCAL       reduce using rule 84 (control_structure -> begin_expression .)
    VAR_SYSTEM      reduce using rule 84 (control_structure -> begin_expression .)
    VAR_CONSTANT    reduce using rule 84 (control_structure -> begin_expression .)
    LBRACKET        reduce using rule 84 (control_structure -> begin_expression .)
    IDENTIFIER      reduce using rule 84 (control_structure -> begin_expression .)
    SUPER           reduce using rule 84 (control_structure -> begin_expression .)
    LPAREN          reduce using rule 84 (control_structure -> begin_expression .)
    BEGIN           reduce using rule 84 (control_structure -> begin_expression .)
    CLASS           reduce using rule 84 (control_structure -> begin_expression .)
    MODULE          reduce using rule 84 (control_structure -> begin_expression .)
    DEF             reduce using rule 84 (control_structure -> begin_expression .)
    ALIAS           reduce using rule 84 (control_structure -> begin_expression .)
    UNDEF           reduce using rule 84 (control_structure -> begin_expression .)
    DEFINED_OP      reduce using rule 84 (control_structure -> begin_expression .)
    DOUBLE_QUOTED   reduce using rule 84 (control_structure -> begin_expression .)
    PRINT           reduce using rule 84 (control_structure -> begin_expression .)
    PUTS            reduce using rule 84 (control_structure -> begin_expression .)
    NOT             reduce using rule 84 (control_structure -> begin_expression .)
    NOT_SYMBOL      reduce using rule 84 (control_structure -> begin_expression .)
    FOR             reduce using rule 84 (control_structure -> begin_expression .)
    YIELD           reduce using rule 84 (control_structure -> begin_expression .)
    RETRY           reduce using rule 84 (control_structure -> begin_expression .)
    RETURN          reduce using rule 84 (control_structure -> begin_expression .)
    BREAK           reduce using rule 84 (control_structure -> begin_expression .)
    NEXT            reduce using rule 84 (control_structure -> begin_expression .)
    REDO            reduce using rule 84 (control_structure -> begin_expression .)
    CASE            reduce using rule 84 (control_structure -> begin_expression .)
    NUMBER          reduce using rule 84 (control_structure -> begin_expression .)
    THEN            reduce using rule 84 (control_structure -> begin_expression .)
    WHEN            reduce using rule 84 (control_structure -> begin_expression .)
    RPAREN          reduce using rule 84 (control_structure -> begin_expression .)
    ELSIF           reduce using rule 84 (control_structure -> begin_expression .)
    OR_SYMBOL       reduce using rule 84 (control_structure -> begin_expression .)
    RKEY            reduce using rule 84 (control_structure -> begin_expression .)


state 57

    (85) control_structure -> retry .

    IF              reduce using rule 85 (control_structure -> retry .)
    UNLESS          reduce using rule 85 (control_structure -> retry .)
    AND             reduce using rule 85 (control_structure -> retry .)
    OR              reduce using rule 85 (control_structure -> retry .)
    NOTEQUAL        reduce using rule 85 (control_structure -> retry .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 85 (control_structure -> retry .)
    RANGE_INCLUSIVE reduce using rule 85 (control_structure -> retry .)
    RANGE_EXCLUSIVE reduce using rule 85 (control_structure -> retry .)
    WHILE           reduce using rule 85 (control_structure -> retry .)
    UNTIL           reduce using rule 85 (control_structure -> retry .)
    DO              reduce using rule 85 (control_structure -> retry .)
    LKEY            reduce using rule 85 (control_structure -> retry .)
    $end            reduce using rule 85 (control_structure -> retry .)
    END             reduce using rule 85 (control_structure -> retry .)
    RESCUE          reduce using rule 85 (control_structure -> retry .)
    ENSURE          reduce using rule 85 (control_structure -> retry .)
    ELSE            reduce using rule 85 (control_structure -> retry .)
    DOT             reduce using rule 85 (control_structure -> retry .)
    STRING          reduce using rule 85 (control_structure -> retry .)
    VAR_GLOBAL      reduce using rule 85 (control_structure -> retry .)
    VAR_INSTANCE    reduce using rule 85 (control_structure -> retry .)
    VAR_CLASS       reduce using rule 85 (control_structure -> retry .)
    VAR_LOCAL       reduce using rule 85 (control_structure -> retry .)
    VAR_SYSTEM      reduce using rule 85 (control_structure -> retry .)
    VAR_CONSTANT    reduce using rule 85 (control_structure -> retry .)
    LBRACKET        reduce using rule 85 (control_structure -> retry .)
    IDENTIFIER      reduce using rule 85 (control_structure -> retry .)
    SUPER           reduce using rule 85 (control_structure -> retry .)
    LPAREN          reduce using rule 85 (control_structure -> retry .)
    BEGIN           reduce using rule 85 (control_structure -> retry .)
    CLASS           reduce using rule 85 (control_structure -> retry .)
    MODULE          reduce using rule 85 (control_structure -> retry .)
    DEF             reduce using rule 85 (control_structure -> retry .)
    ALIAS           reduce using rule 85 (control_structure -> retry .)
    UNDEF           reduce using rule 85 (control_structure -> retry .)
    DEFINED_OP      reduce using rule 85 (control_structure -> retry .)
    DOUBLE_QUOTED   reduce using rule 85 (control_structure -> retry .)
    PRINT           reduce using rule 85 (control_structure -> retry .)
    PUTS            reduce using rule 85 (control_structure -> retry .)
    NOT             reduce using rule 85 (control_structure -> retry .)
    NOT_SYMBOL      reduce using rule 85 (control_structure -> retry .)
    FOR             reduce using rule 85 (control_structure -> retry .)
    YIELD           reduce using rule 85 (control_structure -> retry .)
    RETRY           reduce using rule 85 (control_structure -> retry .)
    RETURN          reduce using rule 85 (control_structure -> retry .)
    BREAK           reduce using rule 85 (control_structure -> retry .)
    NEXT            reduce using rule 85 (control_structure -> retry .)
    REDO            reduce using rule 85 (control_structure -> retry .)
    CASE            reduce using rule 85 (control_structure -> retry .)
    NUMBER          reduce using rule 85 (control_structure -> retry .)
    THEN            reduce using rule 85 (control_structure -> retry .)
    WHEN            reduce using rule 85 (control_structure -> retry .)
    RPAREN          reduce using rule 85 (control_structure -> retry .)
    ELSIF           reduce using rule 85 (control_structure -> retry .)
    OR_SYMBOL       reduce using rule 85 (control_structure -> retry .)
    RKEY            reduce using rule 85 (control_structure -> retry .)


state 58

    (86) control_structure -> return .

    IF              reduce using rule 86 (control_structure -> return .)
    UNLESS          reduce using rule 86 (control_structure -> return .)
    AND             reduce using rule 86 (control_structure -> return .)
    OR              reduce using rule 86 (control_structure -> return .)
    NOTEQUAL        reduce using rule 86 (control_structure -> return .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 86 (control_structure -> return .)
    RANGE_INCLUSIVE reduce using rule 86 (control_structure -> return .)
    RANGE_EXCLUSIVE reduce using rule 86 (control_structure -> return .)
    WHILE           reduce using rule 86 (control_structure -> return .)
    UNTIL           reduce using rule 86 (control_structure -> return .)
    DO              reduce using rule 86 (control_structure -> return .)
    LKEY            reduce using rule 86 (control_structure -> return .)
    $end            reduce using rule 86 (control_structure -> return .)
    END             reduce using rule 86 (control_structure -> return .)
    RESCUE          reduce using rule 86 (control_structure -> return .)
    ENSURE          reduce using rule 86 (control_structure -> return .)
    ELSE            reduce using rule 86 (control_structure -> return .)
    DOT             reduce using rule 86 (control_structure -> return .)
    STRING          reduce using rule 86 (control_structure -> return .)
    VAR_GLOBAL      reduce using rule 86 (control_structure -> return .)
    VAR_INSTANCE    reduce using rule 86 (control_structure -> return .)
    VAR_CLASS       reduce using rule 86 (control_structure -> return .)
    VAR_LOCAL       reduce using rule 86 (control_structure -> return .)
    VAR_SYSTEM      reduce using rule 86 (control_structure -> return .)
    VAR_CONSTANT    reduce using rule 86 (control_structure -> return .)
    LBRACKET        reduce using rule 86 (control_structure -> return .)
    IDENTIFIER      reduce using rule 86 (control_structure -> return .)
    SUPER           reduce using rule 86 (control_structure -> return .)
    LPAREN          reduce using rule 86 (control_structure -> return .)
    BEGIN           reduce using rule 86 (control_structure -> return .)
    CLASS           reduce using rule 86 (control_structure -> return .)
    MODULE          reduce using rule 86 (control_structure -> return .)
    DEF             reduce using rule 86 (control_structure -> return .)
    ALIAS           reduce using rule 86 (control_structure -> return .)
    UNDEF           reduce using rule 86 (control_structure -> return .)
    DEFINED_OP      reduce using rule 86 (control_structure -> return .)
    DOUBLE_QUOTED   reduce using rule 86 (control_structure -> return .)
    PRINT           reduce using rule 86 (control_structure -> return .)
    PUTS            reduce using rule 86 (control_structure -> return .)
    NOT             reduce using rule 86 (control_structure -> return .)
    NOT_SYMBOL      reduce using rule 86 (control_structure -> return .)
    FOR             reduce using rule 86 (control_structure -> return .)
    YIELD           reduce using rule 86 (control_structure -> return .)
    RETRY           reduce using rule 86 (control_structure -> return .)
    RETURN          reduce using rule 86 (control_structure -> return .)
    BREAK           reduce using rule 86 (control_structure -> return .)
    NEXT            reduce using rule 86 (control_structure -> return .)
    REDO            reduce using rule 86 (control_structure -> return .)
    CASE            reduce using rule 86 (control_structure -> return .)
    NUMBER          reduce using rule 86 (control_structure -> return .)
    THEN            reduce using rule 86 (control_structure -> return .)
    WHEN            reduce using rule 86 (control_structure -> return .)
    RPAREN          reduce using rule 86 (control_structure -> return .)
    ELSIF           reduce using rule 86 (control_structure -> return .)
    OR_SYMBOL       reduce using rule 86 (control_structure -> return .)
    RKEY            reduce using rule 86 (control_structure -> return .)


state 59

    (87) control_structure -> break .

    IF              reduce using rule 87 (control_structure -> break .)
    UNLESS          reduce using rule 87 (control_structure -> break .)
    AND             reduce using rule 87 (control_structure -> break .)
    OR              reduce using rule 87 (control_structure -> break .)
    NOTEQUAL        reduce using rule 87 (control_structure -> break .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 87 (control_structure -> break .)
    RANGE_INCLUSIVE reduce using rule 87 (control_structure -> break .)
    RANGE_EXCLUSIVE reduce using rule 87 (control_structure -> break .)
    WHILE           reduce using rule 87 (control_structure -> break .)
    UNTIL           reduce using rule 87 (control_structure -> break .)
    DO              reduce using rule 87 (control_structure -> break .)
    LKEY            reduce using rule 87 (control_structure -> break .)
    $end            reduce using rule 87 (control_structure -> break .)
    END             reduce using rule 87 (control_structure -> break .)
    RESCUE          reduce using rule 87 (control_structure -> break .)
    ENSURE          reduce using rule 87 (control_structure -> break .)
    ELSE            reduce using rule 87 (control_structure -> break .)
    DOT             reduce using rule 87 (control_structure -> break .)
    STRING          reduce using rule 87 (control_structure -> break .)
    VAR_GLOBAL      reduce using rule 87 (control_structure -> break .)
    VAR_INSTANCE    reduce using rule 87 (control_structure -> break .)
    VAR_CLASS       reduce using rule 87 (control_structure -> break .)
    VAR_LOCAL       reduce using rule 87 (control_structure -> break .)
    VAR_SYSTEM      reduce using rule 87 (control_structure -> break .)
    VAR_CONSTANT    reduce using rule 87 (control_structure -> break .)
    LBRACKET        reduce using rule 87 (control_structure -> break .)
    IDENTIFIER      reduce using rule 87 (control_structure -> break .)
    SUPER           reduce using rule 87 (control_structure -> break .)
    LPAREN          reduce using rule 87 (control_structure -> break .)
    BEGIN           reduce using rule 87 (control_structure -> break .)
    CLASS           reduce using rule 87 (control_structure -> break .)
    MODULE          reduce using rule 87 (control_structure -> break .)
    DEF             reduce using rule 87 (control_structure -> break .)
    ALIAS           reduce using rule 87 (control_structure -> break .)
    UNDEF           reduce using rule 87 (control_structure -> break .)
    DEFINED_OP      reduce using rule 87 (control_structure -> break .)
    DOUBLE_QUOTED   reduce using rule 87 (control_structure -> break .)
    PRINT           reduce using rule 87 (control_structure -> break .)
    PUTS            reduce using rule 87 (control_structure -> break .)
    NOT             reduce using rule 87 (control_structure -> break .)
    NOT_SYMBOL      reduce using rule 87 (control_structure -> break .)
    FOR             reduce using rule 87 (control_structure -> break .)
    YIELD           reduce using rule 87 (control_structure -> break .)
    RETRY           reduce using rule 87 (control_structure -> break .)
    RETURN          reduce using rule 87 (control_structure -> break .)
    BREAK           reduce using rule 87 (control_structure -> break .)
    NEXT            reduce using rule 87 (control_structure -> break .)
    REDO            reduce using rule 87 (control_structure -> break .)
    CASE            reduce using rule 87 (control_structure -> break .)
    NUMBER          reduce using rule 87 (control_structure -> break .)
    THEN            reduce using rule 87 (control_structure -> break .)
    WHEN            reduce using rule 87 (control_structure -> break .)
    RPAREN          reduce using rule 87 (control_structure -> break .)
    ELSIF           reduce using rule 87 (control_structure -> break .)
    OR_SYMBOL       reduce using rule 87 (control_structure -> break .)
    RKEY            reduce using rule 87 (control_structure -> break .)


state 60

    (88) control_structure -> next .

    IF              reduce using rule 88 (control_structure -> next .)
    UNLESS          reduce using rule 88 (control_structure -> next .)
    AND             reduce using rule 88 (control_structure -> next .)
    OR              reduce using rule 88 (control_structure -> next .)
    NOTEQUAL        reduce using rule 88 (control_structure -> next .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 88 (control_structure -> next .)
    RANGE_INCLUSIVE reduce using rule 88 (control_structure -> next .)
    RANGE_EXCLUSIVE reduce using rule 88 (control_structure -> next .)
    WHILE           reduce using rule 88 (control_structure -> next .)
    UNTIL           reduce using rule 88 (control_structure -> next .)
    DO              reduce using rule 88 (control_structure -> next .)
    LKEY            reduce using rule 88 (control_structure -> next .)
    $end            reduce using rule 88 (control_structure -> next .)
    END             reduce using rule 88 (control_structure -> next .)
    RESCUE          reduce using rule 88 (control_structure -> next .)
    ENSURE          reduce using rule 88 (control_structure -> next .)
    ELSE            reduce using rule 88 (control_structure -> next .)
    DOT             reduce using rule 88 (control_structure -> next .)
    STRING          reduce using rule 88 (control_structure -> next .)
    VAR_GLOBAL      reduce using rule 88 (control_structure -> next .)
    VAR_INSTANCE    reduce using rule 88 (control_structure -> next .)
    VAR_CLASS       reduce using rule 88 (control_structure -> next .)
    VAR_LOCAL       reduce using rule 88 (control_structure -> next .)
    VAR_SYSTEM      reduce using rule 88 (control_structure -> next .)
    VAR_CONSTANT    reduce using rule 88 (control_structure -> next .)
    LBRACKET        reduce using rule 88 (control_structure -> next .)
    IDENTIFIER      reduce using rule 88 (control_structure -> next .)
    SUPER           reduce using rule 88 (control_structure -> next .)
    LPAREN          reduce using rule 88 (control_structure -> next .)
    BEGIN           reduce using rule 88 (control_structure -> next .)
    CLASS           reduce using rule 88 (control_structure -> next .)
    MODULE          reduce using rule 88 (control_structure -> next .)
    DEF             reduce using rule 88 (control_structure -> next .)
    ALIAS           reduce using rule 88 (control_structure -> next .)
    UNDEF           reduce using rule 88 (control_structure -> next .)
    DEFINED_OP      reduce using rule 88 (control_structure -> next .)
    DOUBLE_QUOTED   reduce using rule 88 (control_structure -> next .)
    PRINT           reduce using rule 88 (control_structure -> next .)
    PUTS            reduce using rule 88 (control_structure -> next .)
    NOT             reduce using rule 88 (control_structure -> next .)
    NOT_SYMBOL      reduce using rule 88 (control_structure -> next .)
    FOR             reduce using rule 88 (control_structure -> next .)
    YIELD           reduce using rule 88 (control_structure -> next .)
    RETRY           reduce using rule 88 (control_structure -> next .)
    RETURN          reduce using rule 88 (control_structure -> next .)
    BREAK           reduce using rule 88 (control_structure -> next .)
    NEXT            reduce using rule 88 (control_structure -> next .)
    REDO            reduce using rule 88 (control_structure -> next .)
    CASE            reduce using rule 88 (control_structure -> next .)
    NUMBER          reduce using rule 88 (control_structure -> next .)
    THEN            reduce using rule 88 (control_structure -> next .)
    WHEN            reduce using rule 88 (control_structure -> next .)
    RPAREN          reduce using rule 88 (control_structure -> next .)
    ELSIF           reduce using rule 88 (control_structure -> next .)
    OR_SYMBOL       reduce using rule 88 (control_structure -> next .)
    RKEY            reduce using rule 88 (control_structure -> next .)


state 61

    (89) control_structure -> redo .

    IF              reduce using rule 89 (control_structure -> redo .)
    UNLESS          reduce using rule 89 (control_structure -> redo .)
    AND             reduce using rule 89 (control_structure -> redo .)
    OR              reduce using rule 89 (control_structure -> redo .)
    NOTEQUAL        reduce using rule 89 (control_structure -> redo .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 89 (control_structure -> redo .)
    RANGE_INCLUSIVE reduce using rule 89 (control_structure -> redo .)
    RANGE_EXCLUSIVE reduce using rule 89 (control_structure -> redo .)
    WHILE           reduce using rule 89 (control_structure -> redo .)
    UNTIL           reduce using rule 89 (control_structure -> redo .)
    DO              reduce using rule 89 (control_structure -> redo .)
    LKEY            reduce using rule 89 (control_structure -> redo .)
    $end            reduce using rule 89 (control_structure -> redo .)
    END             reduce using rule 89 (control_structure -> redo .)
    RESCUE          reduce using rule 89 (control_structure -> redo .)
    ENSURE          reduce using rule 89 (control_structure -> redo .)
    ELSE            reduce using rule 89 (control_structure -> redo .)
    DOT             reduce using rule 89 (control_structure -> redo .)
    STRING          reduce using rule 89 (control_structure -> redo .)
    VAR_GLOBAL      reduce using rule 89 (control_structure -> redo .)
    VAR_INSTANCE    reduce using rule 89 (control_structure -> redo .)
    VAR_CLASS       reduce using rule 89 (control_structure -> redo .)
    VAR_LOCAL       reduce using rule 89 (control_structure -> redo .)
    VAR_SYSTEM      reduce using rule 89 (control_structure -> redo .)
    VAR_CONSTANT    reduce using rule 89 (control_structure -> redo .)
    LBRACKET        reduce using rule 89 (control_structure -> redo .)
    IDENTIFIER      reduce using rule 89 (control_structure -> redo .)
    SUPER           reduce using rule 89 (control_structure -> redo .)
    LPAREN          reduce using rule 89 (control_structure -> redo .)
    BEGIN           reduce using rule 89 (control_structure -> redo .)
    CLASS           reduce using rule 89 (control_structure -> redo .)
    MODULE          reduce using rule 89 (control_structure -> redo .)
    DEF             reduce using rule 89 (control_structure -> redo .)
    ALIAS           reduce using rule 89 (control_structure -> redo .)
    UNDEF           reduce using rule 89 (control_structure -> redo .)
    DEFINED_OP      reduce using rule 89 (control_structure -> redo .)
    DOUBLE_QUOTED   reduce using rule 89 (control_structure -> redo .)
    PRINT           reduce using rule 89 (control_structure -> redo .)
    PUTS            reduce using rule 89 (control_structure -> redo .)
    NOT             reduce using rule 89 (control_structure -> redo .)
    NOT_SYMBOL      reduce using rule 89 (control_structure -> redo .)
    FOR             reduce using rule 89 (control_structure -> redo .)
    YIELD           reduce using rule 89 (control_structure -> redo .)
    RETRY           reduce using rule 89 (control_structure -> redo .)
    RETURN          reduce using rule 89 (control_structure -> redo .)
    BREAK           reduce using rule 89 (control_structure -> redo .)
    NEXT            reduce using rule 89 (control_structure -> redo .)
    REDO            reduce using rule 89 (control_structure -> redo .)
    CASE            reduce using rule 89 (control_structure -> redo .)
    NUMBER          reduce using rule 89 (control_structure -> redo .)
    THEN            reduce using rule 89 (control_structure -> redo .)
    WHEN            reduce using rule 89 (control_structure -> redo .)
    RPAREN          reduce using rule 89 (control_structure -> redo .)
    ELSIF           reduce using rule 89 (control_structure -> redo .)
    OR_SYMBOL       reduce using rule 89 (control_structure -> redo .)
    RKEY            reduce using rule 89 (control_structure -> redo .)


state 62

    (90) control_structure -> BEGIN .
    (139) begin_expression -> BEGIN . expression END
    (140) begin_expression -> BEGIN . expression RESCUE expression END
    (141) begin_expression -> BEGIN . expression ENSURE expression END
    (142) begin_expression -> BEGIN . expression RESCUE expression ENSURE expression END
    (143) begin_expression -> BEGIN . expression RESCUE expression ELSE expression END
    (144) begin_expression -> BEGIN . expression ELSE expression ENSURE expression END
    (145) begin_expression -> BEGIN . expression RESCUE expression ELSE expression ENSURE expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    AND             reduce using rule 90 (control_structure -> BEGIN .)
    OR              reduce using rule 90 (control_structure -> BEGIN .)
    NOTEQUAL        reduce using rule 90 (control_structure -> BEGIN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 90 (control_structure -> BEGIN .)
    RANGE_INCLUSIVE reduce using rule 90 (control_structure -> BEGIN .)
    RANGE_EXCLUSIVE reduce using rule 90 (control_structure -> BEGIN .)
    DO              reduce using rule 90 (control_structure -> BEGIN .)
    $end            reduce using rule 90 (control_structure -> BEGIN .)
    RESCUE          reduce using rule 90 (control_structure -> BEGIN .)
    ENSURE          reduce using rule 90 (control_structure -> BEGIN .)
    ELSE            reduce using rule 90 (control_structure -> BEGIN .)
    DOT             reduce using rule 90 (control_structure -> BEGIN .)
    THEN            reduce using rule 90 (control_structure -> BEGIN .)
    WHEN            reduce using rule 90 (control_structure -> BEGIN .)
    RPAREN          reduce using rule 90 (control_structure -> BEGIN .)
    ELSIF           reduce using rule 90 (control_structure -> BEGIN .)
    OR_SYMBOL       reduce using rule 90 (control_structure -> BEGIN .)
    RKEY            reduce using rule 90 (control_structure -> BEGIN .)
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! IF              [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! UNLESS          [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! WHILE           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! UNTIL           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! LKEY            [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! END             [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! STRING          [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_GLOBAL      [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_INSTANCE    [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_CLASS       [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_LOCAL       [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_SYSTEM      [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! VAR_CONSTANT    [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! LBRACKET        [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! IDENTIFIER      [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! SUPER           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! LPAREN          [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! BEGIN           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! CLASS           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! MODULE          [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! DEF             [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! ALIAS           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! UNDEF           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! DEFINED_OP      [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! PRINT           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! PUTS            [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! NOT             [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! NOT_SYMBOL      [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! FOR             [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! YIELD           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! RETRY           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! RETURN          [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! BREAK           [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! NEXT            [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! REDO            [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! CASE            [ reduce using rule 90 (control_structure -> BEGIN .) ]
  ! NUMBER          [ reduce using rule 90 (control_structure -> BEGIN .) ]

    expression                     shift and go to state 136
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 63

    (91) control_structure -> END .

    IF              reduce using rule 91 (control_structure -> END .)
    UNLESS          reduce using rule 91 (control_structure -> END .)
    AND             reduce using rule 91 (control_structure -> END .)
    OR              reduce using rule 91 (control_structure -> END .)
    NOTEQUAL        reduce using rule 91 (control_structure -> END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 91 (control_structure -> END .)
    RANGE_INCLUSIVE reduce using rule 91 (control_structure -> END .)
    RANGE_EXCLUSIVE reduce using rule 91 (control_structure -> END .)
    WHILE           reduce using rule 91 (control_structure -> END .)
    UNTIL           reduce using rule 91 (control_structure -> END .)
    DO              reduce using rule 91 (control_structure -> END .)
    LKEY            reduce using rule 91 (control_structure -> END .)
    $end            reduce using rule 91 (control_structure -> END .)
    END             reduce using rule 91 (control_structure -> END .)
    RESCUE          reduce using rule 91 (control_structure -> END .)
    ENSURE          reduce using rule 91 (control_structure -> END .)
    ELSE            reduce using rule 91 (control_structure -> END .)
    DOT             reduce using rule 91 (control_structure -> END .)
    STRING          reduce using rule 91 (control_structure -> END .)
    VAR_GLOBAL      reduce using rule 91 (control_structure -> END .)
    VAR_INSTANCE    reduce using rule 91 (control_structure -> END .)
    VAR_CLASS       reduce using rule 91 (control_structure -> END .)
    VAR_LOCAL       reduce using rule 91 (control_structure -> END .)
    VAR_SYSTEM      reduce using rule 91 (control_structure -> END .)
    VAR_CONSTANT    reduce using rule 91 (control_structure -> END .)
    LBRACKET        reduce using rule 91 (control_structure -> END .)
    IDENTIFIER      reduce using rule 91 (control_structure -> END .)
    SUPER           reduce using rule 91 (control_structure -> END .)
    LPAREN          reduce using rule 91 (control_structure -> END .)
    BEGIN           reduce using rule 91 (control_structure -> END .)
    CLASS           reduce using rule 91 (control_structure -> END .)
    MODULE          reduce using rule 91 (control_structure -> END .)
    DEF             reduce using rule 91 (control_structure -> END .)
    ALIAS           reduce using rule 91 (control_structure -> END .)
    UNDEF           reduce using rule 91 (control_structure -> END .)
    DEFINED_OP      reduce using rule 91 (control_structure -> END .)
    DOUBLE_QUOTED   reduce using rule 91 (control_structure -> END .)
    PRINT           reduce using rule 91 (control_structure -> END .)
    PUTS            reduce using rule 91 (control_structure -> END .)
    NOT             reduce using rule 91 (control_structure -> END .)
    NOT_SYMBOL      reduce using rule 91 (control_structure -> END .)
    FOR             reduce using rule 91 (control_structure -> END .)
    YIELD           reduce using rule 91 (control_structure -> END .)
    RETRY           reduce using rule 91 (control_structure -> END .)
    RETURN          reduce using rule 91 (control_structure -> END .)
    BREAK           reduce using rule 91 (control_structure -> END .)
    NEXT            reduce using rule 91 (control_structure -> END .)
    REDO            reduce using rule 91 (control_structure -> END .)
    CASE            reduce using rule 91 (control_structure -> END .)
    NUMBER          reduce using rule 91 (control_structure -> END .)
    THEN            reduce using rule 91 (control_structure -> END .)
    WHEN            reduce using rule 91 (control_structure -> END .)
    RPAREN          reduce using rule 91 (control_structure -> END .)
    ELSIF           reduce using rule 91 (control_structure -> END .)
    OR_SYMBOL       reduce using rule 91 (control_structure -> END .)
    RKEY            reduce using rule 91 (control_structure -> END .)


state 64

    (92) control_structure -> case .

    IF              reduce using rule 92 (control_structure -> case .)
    UNLESS          reduce using rule 92 (control_structure -> case .)
    AND             reduce using rule 92 (control_structure -> case .)
    OR              reduce using rule 92 (control_structure -> case .)
    NOTEQUAL        reduce using rule 92 (control_structure -> case .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 92 (control_structure -> case .)
    RANGE_INCLUSIVE reduce using rule 92 (control_structure -> case .)
    RANGE_EXCLUSIVE reduce using rule 92 (control_structure -> case .)
    WHILE           reduce using rule 92 (control_structure -> case .)
    UNTIL           reduce using rule 92 (control_structure -> case .)
    DO              reduce using rule 92 (control_structure -> case .)
    LKEY            reduce using rule 92 (control_structure -> case .)
    $end            reduce using rule 92 (control_structure -> case .)
    END             reduce using rule 92 (control_structure -> case .)
    RESCUE          reduce using rule 92 (control_structure -> case .)
    ENSURE          reduce using rule 92 (control_structure -> case .)
    ELSE            reduce using rule 92 (control_structure -> case .)
    DOT             reduce using rule 92 (control_structure -> case .)
    STRING          reduce using rule 92 (control_structure -> case .)
    VAR_GLOBAL      reduce using rule 92 (control_structure -> case .)
    VAR_INSTANCE    reduce using rule 92 (control_structure -> case .)
    VAR_CLASS       reduce using rule 92 (control_structure -> case .)
    VAR_LOCAL       reduce using rule 92 (control_structure -> case .)
    VAR_SYSTEM      reduce using rule 92 (control_structure -> case .)
    VAR_CONSTANT    reduce using rule 92 (control_structure -> case .)
    LBRACKET        reduce using rule 92 (control_structure -> case .)
    IDENTIFIER      reduce using rule 92 (control_structure -> case .)
    SUPER           reduce using rule 92 (control_structure -> case .)
    LPAREN          reduce using rule 92 (control_structure -> case .)
    BEGIN           reduce using rule 92 (control_structure -> case .)
    CLASS           reduce using rule 92 (control_structure -> case .)
    MODULE          reduce using rule 92 (control_structure -> case .)
    DEF             reduce using rule 92 (control_structure -> case .)
    ALIAS           reduce using rule 92 (control_structure -> case .)
    UNDEF           reduce using rule 92 (control_structure -> case .)
    DEFINED_OP      reduce using rule 92 (control_structure -> case .)
    DOUBLE_QUOTED   reduce using rule 92 (control_structure -> case .)
    PRINT           reduce using rule 92 (control_structure -> case .)
    PUTS            reduce using rule 92 (control_structure -> case .)
    NOT             reduce using rule 92 (control_structure -> case .)
    NOT_SYMBOL      reduce using rule 92 (control_structure -> case .)
    FOR             reduce using rule 92 (control_structure -> case .)
    YIELD           reduce using rule 92 (control_structure -> case .)
    RETRY           reduce using rule 92 (control_structure -> case .)
    RETURN          reduce using rule 92 (control_structure -> case .)
    BREAK           reduce using rule 92 (control_structure -> case .)
    NEXT            reduce using rule 92 (control_structure -> case .)
    REDO            reduce using rule 92 (control_structure -> case .)
    CASE            reduce using rule 92 (control_structure -> case .)
    NUMBER          reduce using rule 92 (control_structure -> case .)
    THEN            reduce using rule 92 (control_structure -> case .)
    WHEN            reduce using rule 92 (control_structure -> case .)
    RPAREN          reduce using rule 92 (control_structure -> case .)
    ELSIF           reduce using rule 92 (control_structure -> case .)
    OR_SYMBOL       reduce using rule 92 (control_structure -> case .)
    RKEY            reduce using rule 92 (control_structure -> case .)


state 65

    (154) class_definitions -> CLASS . IDENTIFIER expression END
    (155) class_definitions -> CLASS . IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> CLASS . BINARY_LEFT_SHIFT_OP expression expression END

    IDENTIFIER      shift and go to state 137
    BINARY_LEFT_SHIFT_OP shift and go to state 138


state 66

    (157) module_definitions -> MODULE . IDENTIFIER expression END

    IDENTIFIER      shift and go to state 139


state 67

    (158) method_definitions -> DEF . function expression END
    (159) singleton_method_definitions -> DEF . expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> DEF . expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (44) function -> . IDENTIFIER LPAREN RPAREN
    (45) function -> . IDENTIFIER LPAREN args_method RPAREN
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    IDENTIFIER      shift and go to state 142
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    function                       shift and go to state 140
    expression                     shift and go to state 141
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 68

    (161) alias -> ALIAS . expression expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 143
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 69

    (162) undef -> UNDEF . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 144
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 70

    (163) defined -> DEFINED_OP . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 145
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 71

    (28) string_concat -> DOUBLE_QUOTED . IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> DOUBLE_QUOTED . IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED

    IDENTIFIER      shift and go to state 146


state 72

    (33) print -> PRINT . expression
    (34) print -> PRINT . LPAREN expression RPAREN
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    LPAREN          shift and go to state 148
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 147
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 73

    (35) puts -> PUTS . expression
    (36) puts -> PUTS . LPAREN expression RPAREN
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    LPAREN          shift and go to state 150
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 149
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 74

    (182) data -> NUMBER .

    PLUS            reduce using rule 182 (data -> NUMBER .)
    MINUS           reduce using rule 182 (data -> NUMBER .)
    TIMES           reduce using rule 182 (data -> NUMBER .)
    DIVIDE          reduce using rule 182 (data -> NUMBER .)
    MOD             reduce using rule 182 (data -> NUMBER .)
    EQUAL           reduce using rule 182 (data -> NUMBER .)
    NOTEQUAL        reduce using rule 182 (data -> NUMBER .)
    GREATERTHAN     reduce using rule 182 (data -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 182 (data -> NUMBER .)
    LESSERTHAN      reduce using rule 182 (data -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 182 (data -> NUMBER .)
    COMMA           reduce using rule 182 (data -> NUMBER .)
    RBRACKET        reduce using rule 182 (data -> NUMBER .)
    HASH_ROCKET     reduce using rule 182 (data -> NUMBER .)
    IF              reduce using rule 182 (data -> NUMBER .)
    UNLESS          reduce using rule 182 (data -> NUMBER .)
    AND             reduce using rule 182 (data -> NUMBER .)
    OR              reduce using rule 182 (data -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 182 (data -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 182 (data -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 182 (data -> NUMBER .)
    WHILE           reduce using rule 182 (data -> NUMBER .)
    UNTIL           reduce using rule 182 (data -> NUMBER .)
    DO              reduce using rule 182 (data -> NUMBER .)
    LKEY            reduce using rule 182 (data -> NUMBER .)
    $end            reduce using rule 182 (data -> NUMBER .)
    END             reduce using rule 182 (data -> NUMBER .)
    RESCUE          reduce using rule 182 (data -> NUMBER .)
    ENSURE          reduce using rule 182 (data -> NUMBER .)
    ELSE            reduce using rule 182 (data -> NUMBER .)
    DOT             reduce using rule 182 (data -> NUMBER .)
    STRING          reduce using rule 182 (data -> NUMBER .)
    VAR_GLOBAL      reduce using rule 182 (data -> NUMBER .)
    VAR_INSTANCE    reduce using rule 182 (data -> NUMBER .)
    VAR_CLASS       reduce using rule 182 (data -> NUMBER .)
    VAR_LOCAL       reduce using rule 182 (data -> NUMBER .)
    VAR_SYSTEM      reduce using rule 182 (data -> NUMBER .)
    VAR_CONSTANT    reduce using rule 182 (data -> NUMBER .)
    LBRACKET        reduce using rule 182 (data -> NUMBER .)
    IDENTIFIER      reduce using rule 182 (data -> NUMBER .)
    SUPER           reduce using rule 182 (data -> NUMBER .)
    LPAREN          reduce using rule 182 (data -> NUMBER .)
    BEGIN           reduce using rule 182 (data -> NUMBER .)
    CLASS           reduce using rule 182 (data -> NUMBER .)
    MODULE          reduce using rule 182 (data -> NUMBER .)
    DEF             reduce using rule 182 (data -> NUMBER .)
    ALIAS           reduce using rule 182 (data -> NUMBER .)
    UNDEF           reduce using rule 182 (data -> NUMBER .)
    DEFINED_OP      reduce using rule 182 (data -> NUMBER .)
    DOUBLE_QUOTED   reduce using rule 182 (data -> NUMBER .)
    PRINT           reduce using rule 182 (data -> NUMBER .)
    PUTS            reduce using rule 182 (data -> NUMBER .)
    NOT             reduce using rule 182 (data -> NUMBER .)
    NOT_SYMBOL      reduce using rule 182 (data -> NUMBER .)
    FOR             reduce using rule 182 (data -> NUMBER .)
    YIELD           reduce using rule 182 (data -> NUMBER .)
    RETRY           reduce using rule 182 (data -> NUMBER .)
    RETURN          reduce using rule 182 (data -> NUMBER .)
    BREAK           reduce using rule 182 (data -> NUMBER .)
    NEXT            reduce using rule 182 (data -> NUMBER .)
    REDO            reduce using rule 182 (data -> NUMBER .)
    CASE            reduce using rule 182 (data -> NUMBER .)
    NUMBER          reduce using rule 182 (data -> NUMBER .)
    THEN            reduce using rule 182 (data -> NUMBER .)
    WHEN            reduce using rule 182 (data -> NUMBER .)
    RPAREN          reduce using rule 182 (data -> NUMBER .)
    ELSIF           reduce using rule 182 (data -> NUMBER .)
    OR_SYMBOL       reduce using rule 182 (data -> NUMBER .)
    RKEY            reduce using rule 182 (data -> NUMBER .)


state 75

    (65) mult_assigment -> list_var . EQUAL_SYMBOL args_method

    EQUAL_SYMBOL    shift and go to state 151


state 76

    (93) if -> IF . expression expression END
    (94) if -> IF . expression THEN expression END
    (95) if -> IF . expression expression elsif END
    (96) if -> IF . expression THEN expression elsif END
    (97) if -> IF . expression expression else END
    (98) if -> IF . expression THEN expression else END
    (99) if -> IF . expression expression elsif else END
    (100) if -> IF . expression THEN expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 152
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 77

    (105) unless -> UNLESS . expression expression END
    (106) unless -> UNLESS . expression THEN expression END
    (107) unless -> UNLESS . expression THEN expression else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 153
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 78

    (121) not -> NOT . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 154
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 79

    (122) not -> NOT_SYMBOL . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 155
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 80

    (127) while -> WHILE . expression expression END
    (128) while -> WHILE . expression DO expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 156
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 81

    (130) until -> UNTIL . expression DO expression END
    (131) until -> UNTIL . expression expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 157
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 82

    (135) for -> FOR . IDENTIFIER IN expression DO expression END
    (136) for -> FOR . IDENTIFIER IN expression expression END

    IDENTIFIER      shift and go to state 158


state 83

    (137) yield -> YIELD . LPAREN expression RPAREN
    (138) yield -> YIELD . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    LPAREN          shift and go to state 159
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 160
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 84

    (146) retry -> RETRY .

    IF              reduce using rule 146 (retry -> RETRY .)
    UNLESS          reduce using rule 146 (retry -> RETRY .)
    AND             reduce using rule 146 (retry -> RETRY .)
    OR              reduce using rule 146 (retry -> RETRY .)
    NOTEQUAL        reduce using rule 146 (retry -> RETRY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 146 (retry -> RETRY .)
    RANGE_INCLUSIVE reduce using rule 146 (retry -> RETRY .)
    RANGE_EXCLUSIVE reduce using rule 146 (retry -> RETRY .)
    WHILE           reduce using rule 146 (retry -> RETRY .)
    UNTIL           reduce using rule 146 (retry -> RETRY .)
    DO              reduce using rule 146 (retry -> RETRY .)
    LKEY            reduce using rule 146 (retry -> RETRY .)
    $end            reduce using rule 146 (retry -> RETRY .)
    END             reduce using rule 146 (retry -> RETRY .)
    RESCUE          reduce using rule 146 (retry -> RETRY .)
    ENSURE          reduce using rule 146 (retry -> RETRY .)
    ELSE            reduce using rule 146 (retry -> RETRY .)
    DOT             reduce using rule 146 (retry -> RETRY .)
    STRING          reduce using rule 146 (retry -> RETRY .)
    VAR_GLOBAL      reduce using rule 146 (retry -> RETRY .)
    VAR_INSTANCE    reduce using rule 146 (retry -> RETRY .)
    VAR_CLASS       reduce using rule 146 (retry -> RETRY .)
    VAR_LOCAL       reduce using rule 146 (retry -> RETRY .)
    VAR_SYSTEM      reduce using rule 146 (retry -> RETRY .)
    VAR_CONSTANT    reduce using rule 146 (retry -> RETRY .)
    LBRACKET        reduce using rule 146 (retry -> RETRY .)
    IDENTIFIER      reduce using rule 146 (retry -> RETRY .)
    SUPER           reduce using rule 146 (retry -> RETRY .)
    LPAREN          reduce using rule 146 (retry -> RETRY .)
    BEGIN           reduce using rule 146 (retry -> RETRY .)
    CLASS           reduce using rule 146 (retry -> RETRY .)
    MODULE          reduce using rule 146 (retry -> RETRY .)
    DEF             reduce using rule 146 (retry -> RETRY .)
    ALIAS           reduce using rule 146 (retry -> RETRY .)
    UNDEF           reduce using rule 146 (retry -> RETRY .)
    DEFINED_OP      reduce using rule 146 (retry -> RETRY .)
    DOUBLE_QUOTED   reduce using rule 146 (retry -> RETRY .)
    PRINT           reduce using rule 146 (retry -> RETRY .)
    PUTS            reduce using rule 146 (retry -> RETRY .)
    NOT             reduce using rule 146 (retry -> RETRY .)
    NOT_SYMBOL      reduce using rule 146 (retry -> RETRY .)
    FOR             reduce using rule 146 (retry -> RETRY .)
    YIELD           reduce using rule 146 (retry -> RETRY .)
    RETRY           reduce using rule 146 (retry -> RETRY .)
    RETURN          reduce using rule 146 (retry -> RETRY .)
    BREAK           reduce using rule 146 (retry -> RETRY .)
    NEXT            reduce using rule 146 (retry -> RETRY .)
    REDO            reduce using rule 146 (retry -> RETRY .)
    CASE            reduce using rule 146 (retry -> RETRY .)
    NUMBER          reduce using rule 146 (retry -> RETRY .)
    THEN            reduce using rule 146 (retry -> RETRY .)
    WHEN            reduce using rule 146 (retry -> RETRY .)
    RPAREN          reduce using rule 146 (retry -> RETRY .)
    ELSIF           reduce using rule 146 (retry -> RETRY .)
    OR_SYMBOL       reduce using rule 146 (retry -> RETRY .)
    RKEY            reduce using rule 146 (retry -> RETRY .)


state 85

    (147) return -> RETURN .
    (148) return -> RETURN . args_method
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
    IF              reduce using rule 147 (return -> RETURN .)
    UNLESS          reduce using rule 147 (return -> RETURN .)
    AND             reduce using rule 147 (return -> RETURN .)
    OR              reduce using rule 147 (return -> RETURN .)
    NOTEQUAL        reduce using rule 147 (return -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 147 (return -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 147 (return -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 147 (return -> RETURN .)
    WHILE           reduce using rule 147 (return -> RETURN .)
    UNTIL           reduce using rule 147 (return -> RETURN .)
    DO              reduce using rule 147 (return -> RETURN .)
    LKEY            reduce using rule 147 (return -> RETURN .)
    $end            reduce using rule 147 (return -> RETURN .)
    END             reduce using rule 147 (return -> RETURN .)
    RESCUE          reduce using rule 147 (return -> RETURN .)
    ENSURE          reduce using rule 147 (return -> RETURN .)
    ELSE            reduce using rule 147 (return -> RETURN .)
    DOT             reduce using rule 147 (return -> RETURN .)
    LBRACKET        reduce using rule 147 (return -> RETURN .)
    IDENTIFIER      reduce using rule 147 (return -> RETURN .)
    SUPER           reduce using rule 147 (return -> RETURN .)
    LPAREN          reduce using rule 147 (return -> RETURN .)
    BEGIN           reduce using rule 147 (return -> RETURN .)
    CLASS           reduce using rule 147 (return -> RETURN .)
    MODULE          reduce using rule 147 (return -> RETURN .)
    DEF             reduce using rule 147 (return -> RETURN .)
    ALIAS           reduce using rule 147 (return -> RETURN .)
    UNDEF           reduce using rule 147 (return -> RETURN .)
    DEFINED_OP      reduce using rule 147 (return -> RETURN .)
    DOUBLE_QUOTED   reduce using rule 147 (return -> RETURN .)
    PRINT           reduce using rule 147 (return -> RETURN .)
    PUTS            reduce using rule 147 (return -> RETURN .)
    NOT             reduce using rule 147 (return -> RETURN .)
    NOT_SYMBOL      reduce using rule 147 (return -> RETURN .)
    FOR             reduce using rule 147 (return -> RETURN .)
    YIELD           reduce using rule 147 (return -> RETURN .)
    RETRY           reduce using rule 147 (return -> RETURN .)
    RETURN          reduce using rule 147 (return -> RETURN .)
    BREAK           reduce using rule 147 (return -> RETURN .)
    NEXT            reduce using rule 147 (return -> RETURN .)
    REDO            reduce using rule 147 (return -> RETURN .)
    CASE            reduce using rule 147 (return -> RETURN .)
    THEN            reduce using rule 147 (return -> RETURN .)
    WHEN            reduce using rule 147 (return -> RETURN .)
    RPAREN          reduce using rule 147 (return -> RETURN .)
    ELSIF           reduce using rule 147 (return -> RETURN .)
    OR_SYMBOL       reduce using rule 147 (return -> RETURN .)
    RKEY            reduce using rule 147 (return -> RETURN .)
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

  ! STRING          [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_GLOBAL      [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_INSTANCE    [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_CLASS       [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_LOCAL       [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_SYSTEM      [ reduce using rule 147 (return -> RETURN .) ]
  ! VAR_CONSTANT    [ reduce using rule 147 (return -> RETURN .) ]
  ! NUMBER          [ reduce using rule 147 (return -> RETURN .) ]

    args_method                    shift and go to state 161
    data                           shift and go to state 162
    variable                       shift and go to state 127

state 86

    (149) break -> BREAK .

    IF              reduce using rule 149 (break -> BREAK .)
    UNLESS          reduce using rule 149 (break -> BREAK .)
    AND             reduce using rule 149 (break -> BREAK .)
    OR              reduce using rule 149 (break -> BREAK .)
    NOTEQUAL        reduce using rule 149 (break -> BREAK .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 149 (break -> BREAK .)
    RANGE_INCLUSIVE reduce using rule 149 (break -> BREAK .)
    RANGE_EXCLUSIVE reduce using rule 149 (break -> BREAK .)
    WHILE           reduce using rule 149 (break -> BREAK .)
    UNTIL           reduce using rule 149 (break -> BREAK .)
    DO              reduce using rule 149 (break -> BREAK .)
    LKEY            reduce using rule 149 (break -> BREAK .)
    $end            reduce using rule 149 (break -> BREAK .)
    END             reduce using rule 149 (break -> BREAK .)
    RESCUE          reduce using rule 149 (break -> BREAK .)
    ENSURE          reduce using rule 149 (break -> BREAK .)
    ELSE            reduce using rule 149 (break -> BREAK .)
    DOT             reduce using rule 149 (break -> BREAK .)
    STRING          reduce using rule 149 (break -> BREAK .)
    VAR_GLOBAL      reduce using rule 149 (break -> BREAK .)
    VAR_INSTANCE    reduce using rule 149 (break -> BREAK .)
    VAR_CLASS       reduce using rule 149 (break -> BREAK .)
    VAR_LOCAL       reduce using rule 149 (break -> BREAK .)
    VAR_SYSTEM      reduce using rule 149 (break -> BREAK .)
    VAR_CONSTANT    reduce using rule 149 (break -> BREAK .)
    LBRACKET        reduce using rule 149 (break -> BREAK .)
    IDENTIFIER      reduce using rule 149 (break -> BREAK .)
    SUPER           reduce using rule 149 (break -> BREAK .)
    LPAREN          reduce using rule 149 (break -> BREAK .)
    BEGIN           reduce using rule 149 (break -> BREAK .)
    CLASS           reduce using rule 149 (break -> BREAK .)
    MODULE          reduce using rule 149 (break -> BREAK .)
    DEF             reduce using rule 149 (break -> BREAK .)
    ALIAS           reduce using rule 149 (break -> BREAK .)
    UNDEF           reduce using rule 149 (break -> BREAK .)
    DEFINED_OP      reduce using rule 149 (break -> BREAK .)
    DOUBLE_QUOTED   reduce using rule 149 (break -> BREAK .)
    PRINT           reduce using rule 149 (break -> BREAK .)
    PUTS            reduce using rule 149 (break -> BREAK .)
    NOT             reduce using rule 149 (break -> BREAK .)
    NOT_SYMBOL      reduce using rule 149 (break -> BREAK .)
    FOR             reduce using rule 149 (break -> BREAK .)
    YIELD           reduce using rule 149 (break -> BREAK .)
    RETRY           reduce using rule 149 (break -> BREAK .)
    RETURN          reduce using rule 149 (break -> BREAK .)
    BREAK           reduce using rule 149 (break -> BREAK .)
    NEXT            reduce using rule 149 (break -> BREAK .)
    REDO            reduce using rule 149 (break -> BREAK .)
    CASE            reduce using rule 149 (break -> BREAK .)
    NUMBER          reduce using rule 149 (break -> BREAK .)
    THEN            reduce using rule 149 (break -> BREAK .)
    WHEN            reduce using rule 149 (break -> BREAK .)
    RPAREN          reduce using rule 149 (break -> BREAK .)
    ELSIF           reduce using rule 149 (break -> BREAK .)
    OR_SYMBOL       reduce using rule 149 (break -> BREAK .)
    RKEY            reduce using rule 149 (break -> BREAK .)


state 87

    (150) next -> NEXT .

    IF              reduce using rule 150 (next -> NEXT .)
    UNLESS          reduce using rule 150 (next -> NEXT .)
    AND             reduce using rule 150 (next -> NEXT .)
    OR              reduce using rule 150 (next -> NEXT .)
    NOTEQUAL        reduce using rule 150 (next -> NEXT .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 150 (next -> NEXT .)
    RANGE_INCLUSIVE reduce using rule 150 (next -> NEXT .)
    RANGE_EXCLUSIVE reduce using rule 150 (next -> NEXT .)
    WHILE           reduce using rule 150 (next -> NEXT .)
    UNTIL           reduce using rule 150 (next -> NEXT .)
    DO              reduce using rule 150 (next -> NEXT .)
    LKEY            reduce using rule 150 (next -> NEXT .)
    $end            reduce using rule 150 (next -> NEXT .)
    END             reduce using rule 150 (next -> NEXT .)
    RESCUE          reduce using rule 150 (next -> NEXT .)
    ENSURE          reduce using rule 150 (next -> NEXT .)
    ELSE            reduce using rule 150 (next -> NEXT .)
    DOT             reduce using rule 150 (next -> NEXT .)
    STRING          reduce using rule 150 (next -> NEXT .)
    VAR_GLOBAL      reduce using rule 150 (next -> NEXT .)
    VAR_INSTANCE    reduce using rule 150 (next -> NEXT .)
    VAR_CLASS       reduce using rule 150 (next -> NEXT .)
    VAR_LOCAL       reduce using rule 150 (next -> NEXT .)
    VAR_SYSTEM      reduce using rule 150 (next -> NEXT .)
    VAR_CONSTANT    reduce using rule 150 (next -> NEXT .)
    LBRACKET        reduce using rule 150 (next -> NEXT .)
    IDENTIFIER      reduce using rule 150 (next -> NEXT .)
    SUPER           reduce using rule 150 (next -> NEXT .)
    LPAREN          reduce using rule 150 (next -> NEXT .)
    BEGIN           reduce using rule 150 (next -> NEXT .)
    CLASS           reduce using rule 150 (next -> NEXT .)
    MODULE          reduce using rule 150 (next -> NEXT .)
    DEF             reduce using rule 150 (next -> NEXT .)
    ALIAS           reduce using rule 150 (next -> NEXT .)
    UNDEF           reduce using rule 150 (next -> NEXT .)
    DEFINED_OP      reduce using rule 150 (next -> NEXT .)
    DOUBLE_QUOTED   reduce using rule 150 (next -> NEXT .)
    PRINT           reduce using rule 150 (next -> NEXT .)
    PUTS            reduce using rule 150 (next -> NEXT .)
    NOT             reduce using rule 150 (next -> NEXT .)
    NOT_SYMBOL      reduce using rule 150 (next -> NEXT .)
    FOR             reduce using rule 150 (next -> NEXT .)
    YIELD           reduce using rule 150 (next -> NEXT .)
    RETRY           reduce using rule 150 (next -> NEXT .)
    RETURN          reduce using rule 150 (next -> NEXT .)
    BREAK           reduce using rule 150 (next -> NEXT .)
    NEXT            reduce using rule 150 (next -> NEXT .)
    REDO            reduce using rule 150 (next -> NEXT .)
    CASE            reduce using rule 150 (next -> NEXT .)
    NUMBER          reduce using rule 150 (next -> NEXT .)
    THEN            reduce using rule 150 (next -> NEXT .)
    WHEN            reduce using rule 150 (next -> NEXT .)
    RPAREN          reduce using rule 150 (next -> NEXT .)
    ELSIF           reduce using rule 150 (next -> NEXT .)
    OR_SYMBOL       reduce using rule 150 (next -> NEXT .)
    RKEY            reduce using rule 150 (next -> NEXT .)


state 88

    (151) redo -> REDO .

    IF              reduce using rule 151 (redo -> REDO .)
    UNLESS          reduce using rule 151 (redo -> REDO .)
    AND             reduce using rule 151 (redo -> REDO .)
    OR              reduce using rule 151 (redo -> REDO .)
    NOTEQUAL        reduce using rule 151 (redo -> REDO .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 151 (redo -> REDO .)
    RANGE_INCLUSIVE reduce using rule 151 (redo -> REDO .)
    RANGE_EXCLUSIVE reduce using rule 151 (redo -> REDO .)
    WHILE           reduce using rule 151 (redo -> REDO .)
    UNTIL           reduce using rule 151 (redo -> REDO .)
    DO              reduce using rule 151 (redo -> REDO .)
    LKEY            reduce using rule 151 (redo -> REDO .)
    $end            reduce using rule 151 (redo -> REDO .)
    END             reduce using rule 151 (redo -> REDO .)
    RESCUE          reduce using rule 151 (redo -> REDO .)
    ENSURE          reduce using rule 151 (redo -> REDO .)
    ELSE            reduce using rule 151 (redo -> REDO .)
    DOT             reduce using rule 151 (redo -> REDO .)
    STRING          reduce using rule 151 (redo -> REDO .)
    VAR_GLOBAL      reduce using rule 151 (redo -> REDO .)
    VAR_INSTANCE    reduce using rule 151 (redo -> REDO .)
    VAR_CLASS       reduce using rule 151 (redo -> REDO .)
    VAR_LOCAL       reduce using rule 151 (redo -> REDO .)
    VAR_SYSTEM      reduce using rule 151 (redo -> REDO .)
    VAR_CONSTANT    reduce using rule 151 (redo -> REDO .)
    LBRACKET        reduce using rule 151 (redo -> REDO .)
    IDENTIFIER      reduce using rule 151 (redo -> REDO .)
    SUPER           reduce using rule 151 (redo -> REDO .)
    LPAREN          reduce using rule 151 (redo -> REDO .)
    BEGIN           reduce using rule 151 (redo -> REDO .)
    CLASS           reduce using rule 151 (redo -> REDO .)
    MODULE          reduce using rule 151 (redo -> REDO .)
    DEF             reduce using rule 151 (redo -> REDO .)
    ALIAS           reduce using rule 151 (redo -> REDO .)
    UNDEF           reduce using rule 151 (redo -> REDO .)
    DEFINED_OP      reduce using rule 151 (redo -> REDO .)
    DOUBLE_QUOTED   reduce using rule 151 (redo -> REDO .)
    PRINT           reduce using rule 151 (redo -> REDO .)
    PUTS            reduce using rule 151 (redo -> REDO .)
    NOT             reduce using rule 151 (redo -> REDO .)
    NOT_SYMBOL      reduce using rule 151 (redo -> REDO .)
    FOR             reduce using rule 151 (redo -> REDO .)
    YIELD           reduce using rule 151 (redo -> REDO .)
    RETRY           reduce using rule 151 (redo -> REDO .)
    RETURN          reduce using rule 151 (redo -> REDO .)
    BREAK           reduce using rule 151 (redo -> REDO .)
    NEXT            reduce using rule 151 (redo -> REDO .)
    REDO            reduce using rule 151 (redo -> REDO .)
    CASE            reduce using rule 151 (redo -> REDO .)
    NUMBER          reduce using rule 151 (redo -> REDO .)
    THEN            reduce using rule 151 (redo -> REDO .)
    WHEN            reduce using rule 151 (redo -> REDO .)
    RPAREN          reduce using rule 151 (redo -> REDO .)
    ELSIF           reduce using rule 151 (redo -> REDO .)
    OR_SYMBOL       reduce using rule 151 (redo -> REDO .)
    RKEY            reduce using rule 151 (redo -> REDO .)


state 89

    (109) case -> CASE . expression END
    (110) case -> CASE . expression when END
    (111) case -> CASE . expression else END
    (112) case -> CASE . expression when else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 163
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 90

    (104) if_modifier -> expression IF . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 164
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 91

    (108) unless_modifier -> expression UNLESS . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 165
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 92

    (119) and -> expression AND . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 166
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 93

    (120) or -> expression OR . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 167
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 94

    (123) not -> expression NOTEQUAL . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 168
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 95

    (124) not -> expression OPPOSITE_MATCHED_STRINGS_OP . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 169
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 96

    (125) range_expressions -> expression RANGE_INCLUSIVE . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 170
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 97

    (126) range_expressions -> expression RANGE_EXCLUSIVE . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 171
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 98

    (129) while_modifier -> expression WHILE . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 172
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 99

    (132) until_modifier -> expression UNTIL . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 173
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 100

    (133) iterator -> expression DO . OR_SYMBOL expression OR_SYMBOL expression END

    OR_SYMBOL       shift and go to state 174


state 101

    (134) iterator -> expression LKEY . OR_SYMBOL expression OR_SYMBOL expression RKEY

    OR_SYMBOL       shift and go to state 175


state 102

    (53) assignment -> variable EQUAL_SYMBOL . data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    variable                       shift and go to state 127
    data                           shift and go to state 176

state 103

    (58) self_assigment -> variable op_assigment . data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    variable                       shift and go to state 127
    data                           shift and go to state 177

state 104

    (66) list_var -> variable COMMA .
    (67) list_var -> variable COMMA . list_var
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    EQUAL_SYMBOL    reduce using rule 66 (list_var -> variable COMMA .)
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    variable                       shift and go to state 178
    list_var                       shift and go to state 179

state 105

    (59) op_assigment -> PLUS_EQUAL .

    NUMBER          reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    STRING          reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_CLASS       reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_LOCAL       reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_SYSTEM      reduce using rule 59 (op_assigment -> PLUS_EQUAL .)
    VAR_CONSTANT    reduce using rule 59 (op_assigment -> PLUS_EQUAL .)


state 106

    (60) op_assigment -> MINUS_EQUAL .

    NUMBER          reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    STRING          reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_CLASS       reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_LOCAL       reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_SYSTEM      reduce using rule 60 (op_assigment -> MINUS_EQUAL .)
    VAR_CONSTANT    reduce using rule 60 (op_assigment -> MINUS_EQUAL .)


state 107

    (61) op_assigment -> TIMES_EQUAL .

    NUMBER          reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    STRING          reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_GLOBAL      reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_INSTANCE    reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_CLASS       reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_LOCAL       reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_SYSTEM      reduce using rule 61 (op_assigment -> TIMES_EQUAL .)
    VAR_CONSTANT    reduce using rule 61 (op_assigment -> TIMES_EQUAL .)


state 108

    (62) op_assigment -> DIVIDE_EQUAL .

    NUMBER          reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    STRING          reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_GLOBAL      reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_INSTANCE    reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_CLASS       reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_LOCAL       reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_SYSTEM      reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)
    VAR_CONSTANT    reduce using rule 62 (op_assigment -> DIVIDE_EQUAL .)


state 109

    (63) op_assigment -> MOD_EQUAL .

    NUMBER          reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    STRING          reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_GLOBAL      reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_INSTANCE    reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_CLASS       reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_LOCAL       reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_SYSTEM      reduce using rule 63 (op_assigment -> MOD_EQUAL .)
    VAR_CONSTANT    reduce using rule 63 (op_assigment -> MOD_EQUAL .)


state 110

    (64) op_assigment -> POW_EQUAL .

    NUMBER          reduce using rule 64 (op_assigment -> POW_EQUAL .)
    STRING          reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_GLOBAL      reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_INSTANCE    reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_CLASS       reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_LOCAL       reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_SYSTEM      reduce using rule 64 (op_assigment -> POW_EQUAL .)
    VAR_CONSTANT    reduce using rule 64 (op_assigment -> POW_EQUAL .)


state 111

    (55) assignment -> method_invocation EQUAL_SYMBOL . data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 180
    variable                       shift and go to state 127

state 112

    (166) expression_operations -> expression_operations op . expression_operations
    (167) expression_operations -> expression_operations op . opmate
    (169) expression_operations -> expression_operations op . LPAREN opmate RPAREN
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (170) opmate -> . data op data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    LPAREN          shift and go to state 183
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    expression_operations          shift and go to state 181
    opmate                         shift and go to state 182
    data                           shift and go to state 36
    variable                       shift and go to state 127

state 113

    (171) op -> PLUS .

    LPAREN          reduce using rule 171 (op -> PLUS .)
    NUMBER          reduce using rule 171 (op -> PLUS .)
    STRING          reduce using rule 171 (op -> PLUS .)
    VAR_GLOBAL      reduce using rule 171 (op -> PLUS .)
    VAR_INSTANCE    reduce using rule 171 (op -> PLUS .)
    VAR_CLASS       reduce using rule 171 (op -> PLUS .)
    VAR_LOCAL       reduce using rule 171 (op -> PLUS .)
    VAR_SYSTEM      reduce using rule 171 (op -> PLUS .)
    VAR_CONSTANT    reduce using rule 171 (op -> PLUS .)


state 114

    (172) op -> MINUS .

    LPAREN          reduce using rule 172 (op -> MINUS .)
    NUMBER          reduce using rule 172 (op -> MINUS .)
    STRING          reduce using rule 172 (op -> MINUS .)
    VAR_GLOBAL      reduce using rule 172 (op -> MINUS .)
    VAR_INSTANCE    reduce using rule 172 (op -> MINUS .)
    VAR_CLASS       reduce using rule 172 (op -> MINUS .)
    VAR_LOCAL       reduce using rule 172 (op -> MINUS .)
    VAR_SYSTEM      reduce using rule 172 (op -> MINUS .)
    VAR_CONSTANT    reduce using rule 172 (op -> MINUS .)


state 115

    (173) op -> TIMES .

    LPAREN          reduce using rule 173 (op -> TIMES .)
    NUMBER          reduce using rule 173 (op -> TIMES .)
    STRING          reduce using rule 173 (op -> TIMES .)
    VAR_GLOBAL      reduce using rule 173 (op -> TIMES .)
    VAR_INSTANCE    reduce using rule 173 (op -> TIMES .)
    VAR_CLASS       reduce using rule 173 (op -> TIMES .)
    VAR_LOCAL       reduce using rule 173 (op -> TIMES .)
    VAR_SYSTEM      reduce using rule 173 (op -> TIMES .)
    VAR_CONSTANT    reduce using rule 173 (op -> TIMES .)


state 116

    (174) op -> DIVIDE .

    LPAREN          reduce using rule 174 (op -> DIVIDE .)
    NUMBER          reduce using rule 174 (op -> DIVIDE .)
    STRING          reduce using rule 174 (op -> DIVIDE .)
    VAR_GLOBAL      reduce using rule 174 (op -> DIVIDE .)
    VAR_INSTANCE    reduce using rule 174 (op -> DIVIDE .)
    VAR_CLASS       reduce using rule 174 (op -> DIVIDE .)
    VAR_LOCAL       reduce using rule 174 (op -> DIVIDE .)
    VAR_SYSTEM      reduce using rule 174 (op -> DIVIDE .)
    VAR_CONSTANT    reduce using rule 174 (op -> DIVIDE .)


state 117

    (175) op -> MOD .

    LPAREN          reduce using rule 175 (op -> MOD .)
    NUMBER          reduce using rule 175 (op -> MOD .)
    STRING          reduce using rule 175 (op -> MOD .)
    VAR_GLOBAL      reduce using rule 175 (op -> MOD .)
    VAR_INSTANCE    reduce using rule 175 (op -> MOD .)
    VAR_CLASS       reduce using rule 175 (op -> MOD .)
    VAR_LOCAL       reduce using rule 175 (op -> MOD .)
    VAR_SYSTEM      reduce using rule 175 (op -> MOD .)
    VAR_CONSTANT    reduce using rule 175 (op -> MOD .)


state 118

    (176) op -> EQUAL .

    LPAREN          reduce using rule 176 (op -> EQUAL .)
    NUMBER          reduce using rule 176 (op -> EQUAL .)
    STRING          reduce using rule 176 (op -> EQUAL .)
    VAR_GLOBAL      reduce using rule 176 (op -> EQUAL .)
    VAR_INSTANCE    reduce using rule 176 (op -> EQUAL .)
    VAR_CLASS       reduce using rule 176 (op -> EQUAL .)
    VAR_LOCAL       reduce using rule 176 (op -> EQUAL .)
    VAR_SYSTEM      reduce using rule 176 (op -> EQUAL .)
    VAR_CONSTANT    reduce using rule 176 (op -> EQUAL .)


state 119

    (177) op -> NOTEQUAL .

    LPAREN          reduce using rule 177 (op -> NOTEQUAL .)
    NUMBER          reduce using rule 177 (op -> NOTEQUAL .)
    STRING          reduce using rule 177 (op -> NOTEQUAL .)
    VAR_GLOBAL      reduce using rule 177 (op -> NOTEQUAL .)
    VAR_INSTANCE    reduce using rule 177 (op -> NOTEQUAL .)
    VAR_CLASS       reduce using rule 177 (op -> NOTEQUAL .)
    VAR_LOCAL       reduce using rule 177 (op -> NOTEQUAL .)
    VAR_SYSTEM      reduce using rule 177 (op -> NOTEQUAL .)
    VAR_CONSTANT    reduce using rule 177 (op -> NOTEQUAL .)


state 120

    (178) op -> GREATERTHAN .

    LPAREN          reduce using rule 178 (op -> GREATERTHAN .)
    NUMBER          reduce using rule 178 (op -> GREATERTHAN .)
    STRING          reduce using rule 178 (op -> GREATERTHAN .)
    VAR_GLOBAL      reduce using rule 178 (op -> GREATERTHAN .)
    VAR_INSTANCE    reduce using rule 178 (op -> GREATERTHAN .)
    VAR_CLASS       reduce using rule 178 (op -> GREATERTHAN .)
    VAR_LOCAL       reduce using rule 178 (op -> GREATERTHAN .)
    VAR_SYSTEM      reduce using rule 178 (op -> GREATERTHAN .)
    VAR_CONSTANT    reduce using rule 178 (op -> GREATERTHAN .)


state 121

    (179) op -> GREATERTHANEQUAL .

    LPAREN          reduce using rule 179 (op -> GREATERTHANEQUAL .)
    NUMBER          reduce using rule 179 (op -> GREATERTHANEQUAL .)
    STRING          reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_CLASS       reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_SYSTEM      reduce using rule 179 (op -> GREATERTHANEQUAL .)
    VAR_CONSTANT    reduce using rule 179 (op -> GREATERTHANEQUAL .)


state 122

    (180) op -> LESSERTHAN .

    LPAREN          reduce using rule 180 (op -> LESSERTHAN .)
    NUMBER          reduce using rule 180 (op -> LESSERTHAN .)
    STRING          reduce using rule 180 (op -> LESSERTHAN .)
    VAR_GLOBAL      reduce using rule 180 (op -> LESSERTHAN .)
    VAR_INSTANCE    reduce using rule 180 (op -> LESSERTHAN .)
    VAR_CLASS       reduce using rule 180 (op -> LESSERTHAN .)
    VAR_LOCAL       reduce using rule 180 (op -> LESSERTHAN .)
    VAR_SYSTEM      reduce using rule 180 (op -> LESSERTHAN .)
    VAR_CONSTANT    reduce using rule 180 (op -> LESSERTHAN .)


state 123

    (181) op -> LESSERTHANEQUAL .

    LPAREN          reduce using rule 181 (op -> LESSERTHANEQUAL .)
    NUMBER          reduce using rule 181 (op -> LESSERTHANEQUAL .)
    STRING          reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_CLASS       reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_SYSTEM      reduce using rule 181 (op -> LESSERTHANEQUAL .)
    VAR_CONSTANT    reduce using rule 181 (op -> LESSERTHANEQUAL .)


state 124

    (37) array -> LBRACKET args_array . RBRACKET

    RBRACKET        shift and go to state 184


state 125

    (39) args_array -> data .
    (40) args_array -> data . COMMA args_array

    RBRACKET        reduce using rule 39 (args_array -> data .)
    COMMA           shift and go to state 185


state 126

    (183) data -> STRING .

    COMMA           reduce using rule 183 (data -> STRING .)
    RBRACKET        reduce using rule 183 (data -> STRING .)
    HASH_ROCKET     reduce using rule 183 (data -> STRING .)
    PLUS            reduce using rule 183 (data -> STRING .)
    MINUS           reduce using rule 183 (data -> STRING .)
    TIMES           reduce using rule 183 (data -> STRING .)
    DIVIDE          reduce using rule 183 (data -> STRING .)
    MOD             reduce using rule 183 (data -> STRING .)
    EQUAL           reduce using rule 183 (data -> STRING .)
    NOTEQUAL        reduce using rule 183 (data -> STRING .)
    GREATERTHAN     reduce using rule 183 (data -> STRING .)
    GREATERTHANEQUAL reduce using rule 183 (data -> STRING .)
    LESSERTHAN      reduce using rule 183 (data -> STRING .)
    LESSERTHANEQUAL reduce using rule 183 (data -> STRING .)
    IF              reduce using rule 183 (data -> STRING .)
    UNLESS          reduce using rule 183 (data -> STRING .)
    AND             reduce using rule 183 (data -> STRING .)
    OR              reduce using rule 183 (data -> STRING .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 183 (data -> STRING .)
    RANGE_INCLUSIVE reduce using rule 183 (data -> STRING .)
    RANGE_EXCLUSIVE reduce using rule 183 (data -> STRING .)
    WHILE           reduce using rule 183 (data -> STRING .)
    UNTIL           reduce using rule 183 (data -> STRING .)
    DO              reduce using rule 183 (data -> STRING .)
    LKEY            reduce using rule 183 (data -> STRING .)
    $end            reduce using rule 183 (data -> STRING .)
    END             reduce using rule 183 (data -> STRING .)
    RESCUE          reduce using rule 183 (data -> STRING .)
    ENSURE          reduce using rule 183 (data -> STRING .)
    ELSE            reduce using rule 183 (data -> STRING .)
    DOT             reduce using rule 183 (data -> STRING .)
    STRING          reduce using rule 183 (data -> STRING .)
    VAR_GLOBAL      reduce using rule 183 (data -> STRING .)
    VAR_INSTANCE    reduce using rule 183 (data -> STRING .)
    VAR_CLASS       reduce using rule 183 (data -> STRING .)
    VAR_LOCAL       reduce using rule 183 (data -> STRING .)
    VAR_SYSTEM      reduce using rule 183 (data -> STRING .)
    VAR_CONSTANT    reduce using rule 183 (data -> STRING .)
    LBRACKET        reduce using rule 183 (data -> STRING .)
    IDENTIFIER      reduce using rule 183 (data -> STRING .)
    SUPER           reduce using rule 183 (data -> STRING .)
    LPAREN          reduce using rule 183 (data -> STRING .)
    BEGIN           reduce using rule 183 (data -> STRING .)
    CLASS           reduce using rule 183 (data -> STRING .)
    MODULE          reduce using rule 183 (data -> STRING .)
    DEF             reduce using rule 183 (data -> STRING .)
    ALIAS           reduce using rule 183 (data -> STRING .)
    UNDEF           reduce using rule 183 (data -> STRING .)
    DEFINED_OP      reduce using rule 183 (data -> STRING .)
    DOUBLE_QUOTED   reduce using rule 183 (data -> STRING .)
    PRINT           reduce using rule 183 (data -> STRING .)
    PUTS            reduce using rule 183 (data -> STRING .)
    NOT             reduce using rule 183 (data -> STRING .)
    NOT_SYMBOL      reduce using rule 183 (data -> STRING .)
    FOR             reduce using rule 183 (data -> STRING .)
    YIELD           reduce using rule 183 (data -> STRING .)
    RETRY           reduce using rule 183 (data -> STRING .)
    RETURN          reduce using rule 183 (data -> STRING .)
    BREAK           reduce using rule 183 (data -> STRING .)
    NEXT            reduce using rule 183 (data -> STRING .)
    REDO            reduce using rule 183 (data -> STRING .)
    CASE            reduce using rule 183 (data -> STRING .)
    NUMBER          reduce using rule 183 (data -> STRING .)
    THEN            reduce using rule 183 (data -> STRING .)
    WHEN            reduce using rule 183 (data -> STRING .)
    RPAREN          reduce using rule 183 (data -> STRING .)
    ELSIF           reduce using rule 183 (data -> STRING .)
    OR_SYMBOL       reduce using rule 183 (data -> STRING .)
    RKEY            reduce using rule 183 (data -> STRING .)


state 127

    (184) data -> variable .

    COMMA           reduce using rule 184 (data -> variable .)
    RBRACKET        reduce using rule 184 (data -> variable .)
    HASH_ROCKET     reduce using rule 184 (data -> variable .)
    PLUS            reduce using rule 184 (data -> variable .)
    MINUS           reduce using rule 184 (data -> variable .)
    TIMES           reduce using rule 184 (data -> variable .)
    DIVIDE          reduce using rule 184 (data -> variable .)
    MOD             reduce using rule 184 (data -> variable .)
    EQUAL           reduce using rule 184 (data -> variable .)
    NOTEQUAL        reduce using rule 184 (data -> variable .)
    GREATERTHAN     reduce using rule 184 (data -> variable .)
    GREATERTHANEQUAL reduce using rule 184 (data -> variable .)
    LESSERTHAN      reduce using rule 184 (data -> variable .)
    LESSERTHANEQUAL reduce using rule 184 (data -> variable .)
    IF              reduce using rule 184 (data -> variable .)
    UNLESS          reduce using rule 184 (data -> variable .)
    AND             reduce using rule 184 (data -> variable .)
    OR              reduce using rule 184 (data -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 184 (data -> variable .)
    RANGE_INCLUSIVE reduce using rule 184 (data -> variable .)
    RANGE_EXCLUSIVE reduce using rule 184 (data -> variable .)
    WHILE           reduce using rule 184 (data -> variable .)
    UNTIL           reduce using rule 184 (data -> variable .)
    DO              reduce using rule 184 (data -> variable .)
    LKEY            reduce using rule 184 (data -> variable .)
    $end            reduce using rule 184 (data -> variable .)
    END             reduce using rule 184 (data -> variable .)
    RESCUE          reduce using rule 184 (data -> variable .)
    ENSURE          reduce using rule 184 (data -> variable .)
    ELSE            reduce using rule 184 (data -> variable .)
    DOT             reduce using rule 184 (data -> variable .)
    STRING          reduce using rule 184 (data -> variable .)
    VAR_GLOBAL      reduce using rule 184 (data -> variable .)
    VAR_INSTANCE    reduce using rule 184 (data -> variable .)
    VAR_CLASS       reduce using rule 184 (data -> variable .)
    VAR_LOCAL       reduce using rule 184 (data -> variable .)
    VAR_SYSTEM      reduce using rule 184 (data -> variable .)
    VAR_CONSTANT    reduce using rule 184 (data -> variable .)
    LBRACKET        reduce using rule 184 (data -> variable .)
    IDENTIFIER      reduce using rule 184 (data -> variable .)
    SUPER           reduce using rule 184 (data -> variable .)
    LPAREN          reduce using rule 184 (data -> variable .)
    BEGIN           reduce using rule 184 (data -> variable .)
    CLASS           reduce using rule 184 (data -> variable .)
    MODULE          reduce using rule 184 (data -> variable .)
    DEF             reduce using rule 184 (data -> variable .)
    ALIAS           reduce using rule 184 (data -> variable .)
    UNDEF           reduce using rule 184 (data -> variable .)
    DEFINED_OP      reduce using rule 184 (data -> variable .)
    DOUBLE_QUOTED   reduce using rule 184 (data -> variable .)
    PRINT           reduce using rule 184 (data -> variable .)
    PUTS            reduce using rule 184 (data -> variable .)
    NOT             reduce using rule 184 (data -> variable .)
    NOT_SYMBOL      reduce using rule 184 (data -> variable .)
    FOR             reduce using rule 184 (data -> variable .)
    YIELD           reduce using rule 184 (data -> variable .)
    RETRY           reduce using rule 184 (data -> variable .)
    RETURN          reduce using rule 184 (data -> variable .)
    BREAK           reduce using rule 184 (data -> variable .)
    NEXT            reduce using rule 184 (data -> variable .)
    REDO            reduce using rule 184 (data -> variable .)
    CASE            reduce using rule 184 (data -> variable .)
    NUMBER          reduce using rule 184 (data -> variable .)
    THEN            reduce using rule 184 (data -> variable .)
    WHEN            reduce using rule 184 (data -> variable .)
    RPAREN          reduce using rule 184 (data -> variable .)
    ELSIF           reduce using rule 184 (data -> variable .)
    OR_SYMBOL       reduce using rule 184 (data -> variable .)
    RKEY            reduce using rule 184 (data -> variable .)


state 128

    (41) hash -> LKEY args_hash . RKEY

    RKEY            shift and go to state 186


state 129

    (42) args_hash -> data . HASH_ROCKET data
    (43) args_hash -> data . HASH_ROCKET data COMMA args_hash

    HASH_ROCKET     shift and go to state 187


state 130

    (48) method_invocation -> IDENTIFIER DOT . IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> IDENTIFIER DOT . IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 188


state 131

    (38) array_data -> IDENTIFIER LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 189


state 132

    (165) expression_operations -> LPAREN opmate . RPAREN
    (168) expression_operations -> LPAREN opmate . RPAREN op expression_operations

    RPAREN          shift and go to state 190


state 133

    (46) super -> SUPER LPAREN . RPAREN
    (47) super -> SUPER LPAREN . args_method RPAREN
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 191
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_method                    shift and go to state 192
    data                           shift and go to state 162
    variable                       shift and go to state 127

state 134

    (170) opmate -> data op . data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 193
    variable                       shift and go to state 127

state 135

    (54) assignment -> array_data EQUAL_SYMBOL . data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 194
    variable                       shift and go to state 127

state 136

    (139) begin_expression -> BEGIN expression . END
    (140) begin_expression -> BEGIN expression . RESCUE expression END
    (141) begin_expression -> BEGIN expression . ENSURE expression END
    (142) begin_expression -> BEGIN expression . RESCUE expression ENSURE expression END
    (143) begin_expression -> BEGIN expression . RESCUE expression ELSE expression END
    (144) begin_expression -> BEGIN expression . ELSE expression ENSURE expression END
    (145) begin_expression -> BEGIN expression . RESCUE expression ELSE expression ENSURE expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 195
    RESCUE          shift and go to state 196
    ENSURE          shift and go to state 197
    ELSE            shift and go to state 198
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 137

    (154) class_definitions -> CLASS IDENTIFIER . expression END
    (155) class_definitions -> CLASS IDENTIFIER . LESSERTHAN SUPER expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    LESSERTHAN      shift and go to state 200
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 199
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 138

    (156) singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP . expression expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 201
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 139

    (157) module_definitions -> MODULE IDENTIFIER . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 202
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 140

    (158) method_definitions -> DEF function . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 203
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 141

    (159) singleton_method_definitions -> DEF expression . DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> DEF expression . DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    DOT             shift and go to state 204
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 142

    (44) function -> IDENTIFIER . LPAREN RPAREN
    (45) function -> IDENTIFIER . LPAREN args_method RPAREN
    (48) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> IDENTIFIER . DOT IDENTIFIER
    (38) array_data -> IDENTIFIER . LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 205
    DOT             shift and go to state 130
    LBRACKET        shift and go to state 131


state 143

    (161) alias -> ALIAS expression . expression
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 206
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 144

    (162) undef -> UNDEF expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 162 (undef -> UNDEF expression .)
    END             reduce using rule 162 (undef -> UNDEF expression .)
    RESCUE          reduce using rule 162 (undef -> UNDEF expression .)
    ENSURE          reduce using rule 162 (undef -> UNDEF expression .)
    ELSE            reduce using rule 162 (undef -> UNDEF expression .)
    DOT             reduce using rule 162 (undef -> UNDEF expression .)
    STRING          reduce using rule 162 (undef -> UNDEF expression .)
    VAR_GLOBAL      reduce using rule 162 (undef -> UNDEF expression .)
    VAR_INSTANCE    reduce using rule 162 (undef -> UNDEF expression .)
    VAR_CLASS       reduce using rule 162 (undef -> UNDEF expression .)
    VAR_LOCAL       reduce using rule 162 (undef -> UNDEF expression .)
    VAR_SYSTEM      reduce using rule 162 (undef -> UNDEF expression .)
    VAR_CONSTANT    reduce using rule 162 (undef -> UNDEF expression .)
    LBRACKET        reduce using rule 162 (undef -> UNDEF expression .)
    IDENTIFIER      reduce using rule 162 (undef -> UNDEF expression .)
    SUPER           reduce using rule 162 (undef -> UNDEF expression .)
    LPAREN          reduce using rule 162 (undef -> UNDEF expression .)
    BEGIN           reduce using rule 162 (undef -> UNDEF expression .)
    CLASS           reduce using rule 162 (undef -> UNDEF expression .)
    MODULE          reduce using rule 162 (undef -> UNDEF expression .)
    DEF             reduce using rule 162 (undef -> UNDEF expression .)
    ALIAS           reduce using rule 162 (undef -> UNDEF expression .)
    UNDEF           reduce using rule 162 (undef -> UNDEF expression .)
    DEFINED_OP      reduce using rule 162 (undef -> UNDEF expression .)
    DOUBLE_QUOTED   reduce using rule 162 (undef -> UNDEF expression .)
    PRINT           reduce using rule 162 (undef -> UNDEF expression .)
    PUTS            reduce using rule 162 (undef -> UNDEF expression .)
    NOT             reduce using rule 162 (undef -> UNDEF expression .)
    NOT_SYMBOL      reduce using rule 162 (undef -> UNDEF expression .)
    FOR             reduce using rule 162 (undef -> UNDEF expression .)
    YIELD           reduce using rule 162 (undef -> UNDEF expression .)
    RETRY           reduce using rule 162 (undef -> UNDEF expression .)
    RETURN          reduce using rule 162 (undef -> UNDEF expression .)
    BREAK           reduce using rule 162 (undef -> UNDEF expression .)
    NEXT            reduce using rule 162 (undef -> UNDEF expression .)
    REDO            reduce using rule 162 (undef -> UNDEF expression .)
    CASE            reduce using rule 162 (undef -> UNDEF expression .)
    NUMBER          reduce using rule 162 (undef -> UNDEF expression .)
    THEN            reduce using rule 162 (undef -> UNDEF expression .)
    WHEN            reduce using rule 162 (undef -> UNDEF expression .)
    RPAREN          reduce using rule 162 (undef -> UNDEF expression .)
    ELSIF           reduce using rule 162 (undef -> UNDEF expression .)
    OR_SYMBOL       reduce using rule 162 (undef -> UNDEF expression .)
    RKEY            reduce using rule 162 (undef -> UNDEF expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! UNLESS          [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! AND             [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! OR              [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! NOTEQUAL        [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! WHILE           [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! UNTIL           [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! DO              [ reduce using rule 162 (undef -> UNDEF expression .) ]
  ! LKEY            [ reduce using rule 162 (undef -> UNDEF expression .) ]


state 145

    (163) defined -> DEFINED_OP expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 163 (defined -> DEFINED_OP expression .)
    END             reduce using rule 163 (defined -> DEFINED_OP expression .)
    RESCUE          reduce using rule 163 (defined -> DEFINED_OP expression .)
    ENSURE          reduce using rule 163 (defined -> DEFINED_OP expression .)
    ELSE            reduce using rule 163 (defined -> DEFINED_OP expression .)
    DOT             reduce using rule 163 (defined -> DEFINED_OP expression .)
    STRING          reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_GLOBAL      reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_INSTANCE    reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_CLASS       reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_LOCAL       reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_SYSTEM      reduce using rule 163 (defined -> DEFINED_OP expression .)
    VAR_CONSTANT    reduce using rule 163 (defined -> DEFINED_OP expression .)
    LBRACKET        reduce using rule 163 (defined -> DEFINED_OP expression .)
    IDENTIFIER      reduce using rule 163 (defined -> DEFINED_OP expression .)
    SUPER           reduce using rule 163 (defined -> DEFINED_OP expression .)
    LPAREN          reduce using rule 163 (defined -> DEFINED_OP expression .)
    BEGIN           reduce using rule 163 (defined -> DEFINED_OP expression .)
    CLASS           reduce using rule 163 (defined -> DEFINED_OP expression .)
    MODULE          reduce using rule 163 (defined -> DEFINED_OP expression .)
    DEF             reduce using rule 163 (defined -> DEFINED_OP expression .)
    ALIAS           reduce using rule 163 (defined -> DEFINED_OP expression .)
    UNDEF           reduce using rule 163 (defined -> DEFINED_OP expression .)
    DEFINED_OP      reduce using rule 163 (defined -> DEFINED_OP expression .)
    DOUBLE_QUOTED   reduce using rule 163 (defined -> DEFINED_OP expression .)
    PRINT           reduce using rule 163 (defined -> DEFINED_OP expression .)
    PUTS            reduce using rule 163 (defined -> DEFINED_OP expression .)
    NOT             reduce using rule 163 (defined -> DEFINED_OP expression .)
    NOT_SYMBOL      reduce using rule 163 (defined -> DEFINED_OP expression .)
    FOR             reduce using rule 163 (defined -> DEFINED_OP expression .)
    YIELD           reduce using rule 163 (defined -> DEFINED_OP expression .)
    RETRY           reduce using rule 163 (defined -> DEFINED_OP expression .)
    RETURN          reduce using rule 163 (defined -> DEFINED_OP expression .)
    BREAK           reduce using rule 163 (defined -> DEFINED_OP expression .)
    NEXT            reduce using rule 163 (defined -> DEFINED_OP expression .)
    REDO            reduce using rule 163 (defined -> DEFINED_OP expression .)
    CASE            reduce using rule 163 (defined -> DEFINED_OP expression .)
    NUMBER          reduce using rule 163 (defined -> DEFINED_OP expression .)
    THEN            reduce using rule 163 (defined -> DEFINED_OP expression .)
    WHEN            reduce using rule 163 (defined -> DEFINED_OP expression .)
    RPAREN          reduce using rule 163 (defined -> DEFINED_OP expression .)
    ELSIF           reduce using rule 163 (defined -> DEFINED_OP expression .)
    OR_SYMBOL       reduce using rule 163 (defined -> DEFINED_OP expression .)
    RKEY            reduce using rule 163 (defined -> DEFINED_OP expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! UNLESS          [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! AND             [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! OR              [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! NOTEQUAL        [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! WHILE           [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! UNTIL           [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! DO              [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]
  ! LKEY            [ reduce using rule 163 (defined -> DEFINED_OP expression .) ]


state 146

    (28) string_concat -> DOUBLE_QUOTED IDENTIFIER . concat DOUBLE_QUOTED
    (29) string_concat -> DOUBLE_QUOTED IDENTIFIER . concat IDENTIFIER DOUBLE_QUOTED
    (30) concat -> . NUMBER_SIGN LKEY IDENTIFIER RKEY

    NUMBER_SIGN     shift and go to state 213

    concat                         shift and go to state 212

state 147

    (33) print -> PRINT expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 33 (print -> PRINT expression .)
    END             reduce using rule 33 (print -> PRINT expression .)
    RESCUE          reduce using rule 33 (print -> PRINT expression .)
    ENSURE          reduce using rule 33 (print -> PRINT expression .)
    ELSE            reduce using rule 33 (print -> PRINT expression .)
    DOT             reduce using rule 33 (print -> PRINT expression .)
    STRING          reduce using rule 33 (print -> PRINT expression .)
    VAR_GLOBAL      reduce using rule 33 (print -> PRINT expression .)
    VAR_INSTANCE    reduce using rule 33 (print -> PRINT expression .)
    VAR_CLASS       reduce using rule 33 (print -> PRINT expression .)
    VAR_LOCAL       reduce using rule 33 (print -> PRINT expression .)
    VAR_SYSTEM      reduce using rule 33 (print -> PRINT expression .)
    VAR_CONSTANT    reduce using rule 33 (print -> PRINT expression .)
    LBRACKET        reduce using rule 33 (print -> PRINT expression .)
    IDENTIFIER      reduce using rule 33 (print -> PRINT expression .)
    SUPER           reduce using rule 33 (print -> PRINT expression .)
    LPAREN          reduce using rule 33 (print -> PRINT expression .)
    BEGIN           reduce using rule 33 (print -> PRINT expression .)
    CLASS           reduce using rule 33 (print -> PRINT expression .)
    MODULE          reduce using rule 33 (print -> PRINT expression .)
    DEF             reduce using rule 33 (print -> PRINT expression .)
    ALIAS           reduce using rule 33 (print -> PRINT expression .)
    UNDEF           reduce using rule 33 (print -> PRINT expression .)
    DEFINED_OP      reduce using rule 33 (print -> PRINT expression .)
    DOUBLE_QUOTED   reduce using rule 33 (print -> PRINT expression .)
    PRINT           reduce using rule 33 (print -> PRINT expression .)
    PUTS            reduce using rule 33 (print -> PRINT expression .)
    NOT             reduce using rule 33 (print -> PRINT expression .)
    NOT_SYMBOL      reduce using rule 33 (print -> PRINT expression .)
    FOR             reduce using rule 33 (print -> PRINT expression .)
    YIELD           reduce using rule 33 (print -> PRINT expression .)
    RETRY           reduce using rule 33 (print -> PRINT expression .)
    RETURN          reduce using rule 33 (print -> PRINT expression .)
    BREAK           reduce using rule 33 (print -> PRINT expression .)
    NEXT            reduce using rule 33 (print -> PRINT expression .)
    REDO            reduce using rule 33 (print -> PRINT expression .)
    CASE            reduce using rule 33 (print -> PRINT expression .)
    NUMBER          reduce using rule 33 (print -> PRINT expression .)
    THEN            reduce using rule 33 (print -> PRINT expression .)
    WHEN            reduce using rule 33 (print -> PRINT expression .)
    RPAREN          reduce using rule 33 (print -> PRINT expression .)
    ELSIF           reduce using rule 33 (print -> PRINT expression .)
    OR_SYMBOL       reduce using rule 33 (print -> PRINT expression .)
    RKEY            reduce using rule 33 (print -> PRINT expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 33 (print -> PRINT expression .) ]
  ! UNLESS          [ reduce using rule 33 (print -> PRINT expression .) ]
  ! AND             [ reduce using rule 33 (print -> PRINT expression .) ]
  ! OR              [ reduce using rule 33 (print -> PRINT expression .) ]
  ! NOTEQUAL        [ reduce using rule 33 (print -> PRINT expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 33 (print -> PRINT expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 33 (print -> PRINT expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 33 (print -> PRINT expression .) ]
  ! WHILE           [ reduce using rule 33 (print -> PRINT expression .) ]
  ! UNTIL           [ reduce using rule 33 (print -> PRINT expression .) ]
  ! DO              [ reduce using rule 33 (print -> PRINT expression .) ]
  ! LKEY            [ reduce using rule 33 (print -> PRINT expression .) ]


state 148

    (34) print -> PRINT LPAREN . expression RPAREN
    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (170) opmate -> . data op data
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    NUMBER          shift and go to state 74
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89

    expression                     shift and go to state 214
    opmate                         shift and go to state 215
    expression_operations          shift and go to state 11
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 216
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    data                           shift and go to state 36
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 149

    (35) puts -> PUTS expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 35 (puts -> PUTS expression .)
    END             reduce using rule 35 (puts -> PUTS expression .)
    RESCUE          reduce using rule 35 (puts -> PUTS expression .)
    ENSURE          reduce using rule 35 (puts -> PUTS expression .)
    ELSE            reduce using rule 35 (puts -> PUTS expression .)
    DOT             reduce using rule 35 (puts -> PUTS expression .)
    STRING          reduce using rule 35 (puts -> PUTS expression .)
    VAR_GLOBAL      reduce using rule 35 (puts -> PUTS expression .)
    VAR_INSTANCE    reduce using rule 35 (puts -> PUTS expression .)
    VAR_CLASS       reduce using rule 35 (puts -> PUTS expression .)
    VAR_LOCAL       reduce using rule 35 (puts -> PUTS expression .)
    VAR_SYSTEM      reduce using rule 35 (puts -> PUTS expression .)
    VAR_CONSTANT    reduce using rule 35 (puts -> PUTS expression .)
    LBRACKET        reduce using rule 35 (puts -> PUTS expression .)
    IDENTIFIER      reduce using rule 35 (puts -> PUTS expression .)
    SUPER           reduce using rule 35 (puts -> PUTS expression .)
    LPAREN          reduce using rule 35 (puts -> PUTS expression .)
    BEGIN           reduce using rule 35 (puts -> PUTS expression .)
    CLASS           reduce using rule 35 (puts -> PUTS expression .)
    MODULE          reduce using rule 35 (puts -> PUTS expression .)
    DEF             reduce using rule 35 (puts -> PUTS expression .)
    ALIAS           reduce using rule 35 (puts -> PUTS expression .)
    UNDEF           reduce using rule 35 (puts -> PUTS expression .)
    DEFINED_OP      reduce using rule 35 (puts -> PUTS expression .)
    DOUBLE_QUOTED   reduce using rule 35 (puts -> PUTS expression .)
    PRINT           reduce using rule 35 (puts -> PUTS expression .)
    PUTS            reduce using rule 35 (puts -> PUTS expression .)
    NOT             reduce using rule 35 (puts -> PUTS expression .)
    NOT_SYMBOL      reduce using rule 35 (puts -> PUTS expression .)
    FOR             reduce using rule 35 (puts -> PUTS expression .)
    YIELD           reduce using rule 35 (puts -> PUTS expression .)
    RETRY           reduce using rule 35 (puts -> PUTS expression .)
    RETURN          reduce using rule 35 (puts -> PUTS expression .)
    BREAK           reduce using rule 35 (puts -> PUTS expression .)
    NEXT            reduce using rule 35 (puts -> PUTS expression .)
    REDO            reduce using rule 35 (puts -> PUTS expression .)
    CASE            reduce using rule 35 (puts -> PUTS expression .)
    NUMBER          reduce using rule 35 (puts -> PUTS expression .)
    THEN            reduce using rule 35 (puts -> PUTS expression .)
    WHEN            reduce using rule 35 (puts -> PUTS expression .)
    RPAREN          reduce using rule 35 (puts -> PUTS expression .)
    ELSIF           reduce using rule 35 (puts -> PUTS expression .)
    OR_SYMBOL       reduce using rule 35 (puts -> PUTS expression .)
    RKEY            reduce using rule 35 (puts -> PUTS expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! UNLESS          [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! AND             [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! OR              [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! NOTEQUAL        [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! WHILE           [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! UNTIL           [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! DO              [ reduce using rule 35 (puts -> PUTS expression .) ]
  ! LKEY            [ reduce using rule 35 (puts -> PUTS expression .) ]


state 150

    (36) puts -> PUTS LPAREN . expression RPAREN
    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (170) opmate -> . data op data
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    NUMBER          shift and go to state 74
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89

    expression                     shift and go to state 217
    opmate                         shift and go to state 215
    expression_operations          shift and go to state 11
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 216
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    data                           shift and go to state 36
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 151

    (65) mult_assigment -> list_var EQUAL_SYMBOL . args_method
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_method                    shift and go to state 218
    data                           shift and go to state 162
    variable                       shift and go to state 127

state 152

    (93) if -> IF expression . expression END
    (94) if -> IF expression . THEN expression END
    (95) if -> IF expression . expression elsif END
    (96) if -> IF expression . THEN expression elsif END
    (97) if -> IF expression . expression else END
    (98) if -> IF expression . THEN expression else END
    (99) if -> IF expression . expression elsif else END
    (100) if -> IF expression . THEN expression elsif else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    THEN            shift and go to state 220
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 219
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 153

    (105) unless -> UNLESS expression . expression END
    (106) unless -> UNLESS expression . THEN expression END
    (107) unless -> UNLESS expression . THEN expression else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    THEN            shift and go to state 222
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 221
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 154

    (121) not -> NOT expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 121 (not -> NOT expression .)
    END             reduce using rule 121 (not -> NOT expression .)
    RESCUE          reduce using rule 121 (not -> NOT expression .)
    ENSURE          reduce using rule 121 (not -> NOT expression .)
    ELSE            reduce using rule 121 (not -> NOT expression .)
    DOT             reduce using rule 121 (not -> NOT expression .)
    STRING          reduce using rule 121 (not -> NOT expression .)
    VAR_GLOBAL      reduce using rule 121 (not -> NOT expression .)
    VAR_INSTANCE    reduce using rule 121 (not -> NOT expression .)
    VAR_CLASS       reduce using rule 121 (not -> NOT expression .)
    VAR_LOCAL       reduce using rule 121 (not -> NOT expression .)
    VAR_SYSTEM      reduce using rule 121 (not -> NOT expression .)
    VAR_CONSTANT    reduce using rule 121 (not -> NOT expression .)
    LBRACKET        reduce using rule 121 (not -> NOT expression .)
    IDENTIFIER      reduce using rule 121 (not -> NOT expression .)
    SUPER           reduce using rule 121 (not -> NOT expression .)
    LPAREN          reduce using rule 121 (not -> NOT expression .)
    BEGIN           reduce using rule 121 (not -> NOT expression .)
    CLASS           reduce using rule 121 (not -> NOT expression .)
    MODULE          reduce using rule 121 (not -> NOT expression .)
    DEF             reduce using rule 121 (not -> NOT expression .)
    ALIAS           reduce using rule 121 (not -> NOT expression .)
    UNDEF           reduce using rule 121 (not -> NOT expression .)
    DEFINED_OP      reduce using rule 121 (not -> NOT expression .)
    DOUBLE_QUOTED   reduce using rule 121 (not -> NOT expression .)
    PRINT           reduce using rule 121 (not -> NOT expression .)
    PUTS            reduce using rule 121 (not -> NOT expression .)
    NOT             reduce using rule 121 (not -> NOT expression .)
    NOT_SYMBOL      reduce using rule 121 (not -> NOT expression .)
    FOR             reduce using rule 121 (not -> NOT expression .)
    YIELD           reduce using rule 121 (not -> NOT expression .)
    RETRY           reduce using rule 121 (not -> NOT expression .)
    RETURN          reduce using rule 121 (not -> NOT expression .)
    BREAK           reduce using rule 121 (not -> NOT expression .)
    NEXT            reduce using rule 121 (not -> NOT expression .)
    REDO            reduce using rule 121 (not -> NOT expression .)
    CASE            reduce using rule 121 (not -> NOT expression .)
    NUMBER          reduce using rule 121 (not -> NOT expression .)
    THEN            reduce using rule 121 (not -> NOT expression .)
    WHEN            reduce using rule 121 (not -> NOT expression .)
    RPAREN          reduce using rule 121 (not -> NOT expression .)
    ELSIF           reduce using rule 121 (not -> NOT expression .)
    OR_SYMBOL       reduce using rule 121 (not -> NOT expression .)
    RKEY            reduce using rule 121 (not -> NOT expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 121 (not -> NOT expression .) ]
  ! UNLESS          [ reduce using rule 121 (not -> NOT expression .) ]
  ! AND             [ reduce using rule 121 (not -> NOT expression .) ]
  ! OR              [ reduce using rule 121 (not -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 121 (not -> NOT expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 121 (not -> NOT expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 121 (not -> NOT expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 121 (not -> NOT expression .) ]
  ! WHILE           [ reduce using rule 121 (not -> NOT expression .) ]
  ! UNTIL           [ reduce using rule 121 (not -> NOT expression .) ]
  ! DO              [ reduce using rule 121 (not -> NOT expression .) ]
  ! LKEY            [ reduce using rule 121 (not -> NOT expression .) ]


state 155

    (122) not -> NOT_SYMBOL expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    END             reduce using rule 122 (not -> NOT_SYMBOL expression .)
    RESCUE          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    ENSURE          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    ELSE            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    DOT             reduce using rule 122 (not -> NOT_SYMBOL expression .)
    STRING          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_GLOBAL      reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_INSTANCE    reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_CLASS       reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_LOCAL       reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_SYSTEM      reduce using rule 122 (not -> NOT_SYMBOL expression .)
    VAR_CONSTANT    reduce using rule 122 (not -> NOT_SYMBOL expression .)
    LBRACKET        reduce using rule 122 (not -> NOT_SYMBOL expression .)
    IDENTIFIER      reduce using rule 122 (not -> NOT_SYMBOL expression .)
    SUPER           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    LPAREN          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    BEGIN           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    CLASS           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    MODULE          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    DEF             reduce using rule 122 (not -> NOT_SYMBOL expression .)
    ALIAS           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    UNDEF           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    DEFINED_OP      reduce using rule 122 (not -> NOT_SYMBOL expression .)
    DOUBLE_QUOTED   reduce using rule 122 (not -> NOT_SYMBOL expression .)
    PRINT           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    PUTS            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    NOT             reduce using rule 122 (not -> NOT_SYMBOL expression .)
    NOT_SYMBOL      reduce using rule 122 (not -> NOT_SYMBOL expression .)
    FOR             reduce using rule 122 (not -> NOT_SYMBOL expression .)
    YIELD           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    RETRY           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    RETURN          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    BREAK           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    NEXT            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    REDO            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    CASE            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    NUMBER          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    THEN            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    WHEN            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    RPAREN          reduce using rule 122 (not -> NOT_SYMBOL expression .)
    ELSIF           reduce using rule 122 (not -> NOT_SYMBOL expression .)
    OR_SYMBOL       reduce using rule 122 (not -> NOT_SYMBOL expression .)
    RKEY            reduce using rule 122 (not -> NOT_SYMBOL expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! UNLESS          [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! AND             [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! OR              [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! NOTEQUAL        [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! WHILE           [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! UNTIL           [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! DO              [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]
  ! LKEY            [ reduce using rule 122 (not -> NOT_SYMBOL expression .) ]


state 156

    (127) while -> WHILE expression . expression END
    (128) while -> WHILE expression . DO expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    DO              shift and go to state 224
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 223
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 157

    (130) until -> UNTIL expression . DO expression END
    (131) until -> UNTIL expression . expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    DO              shift and go to state 226
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 225
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 158

    (135) for -> FOR IDENTIFIER . IN expression DO expression END
    (136) for -> FOR IDENTIFIER . IN expression expression END

    IN              shift and go to state 227


state 159

    (137) yield -> YIELD LPAREN . expression RPAREN
    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (170) opmate -> . data op data
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    NUMBER          shift and go to state 74
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89

    expression                     shift and go to state 228
    opmate                         shift and go to state 215
    expression_operations          shift and go to state 11
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 216
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    data                           shift and go to state 36
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 160

    (138) yield -> YIELD expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 138 (yield -> YIELD expression .)
    END             reduce using rule 138 (yield -> YIELD expression .)
    RESCUE          reduce using rule 138 (yield -> YIELD expression .)
    ENSURE          reduce using rule 138 (yield -> YIELD expression .)
    ELSE            reduce using rule 138 (yield -> YIELD expression .)
    DOT             reduce using rule 138 (yield -> YIELD expression .)
    STRING          reduce using rule 138 (yield -> YIELD expression .)
    VAR_GLOBAL      reduce using rule 138 (yield -> YIELD expression .)
    VAR_INSTANCE    reduce using rule 138 (yield -> YIELD expression .)
    VAR_CLASS       reduce using rule 138 (yield -> YIELD expression .)
    VAR_LOCAL       reduce using rule 138 (yield -> YIELD expression .)
    VAR_SYSTEM      reduce using rule 138 (yield -> YIELD expression .)
    VAR_CONSTANT    reduce using rule 138 (yield -> YIELD expression .)
    LBRACKET        reduce using rule 138 (yield -> YIELD expression .)
    IDENTIFIER      reduce using rule 138 (yield -> YIELD expression .)
    SUPER           reduce using rule 138 (yield -> YIELD expression .)
    LPAREN          reduce using rule 138 (yield -> YIELD expression .)
    BEGIN           reduce using rule 138 (yield -> YIELD expression .)
    CLASS           reduce using rule 138 (yield -> YIELD expression .)
    MODULE          reduce using rule 138 (yield -> YIELD expression .)
    DEF             reduce using rule 138 (yield -> YIELD expression .)
    ALIAS           reduce using rule 138 (yield -> YIELD expression .)
    UNDEF           reduce using rule 138 (yield -> YIELD expression .)
    DEFINED_OP      reduce using rule 138 (yield -> YIELD expression .)
    DOUBLE_QUOTED   reduce using rule 138 (yield -> YIELD expression .)
    PRINT           reduce using rule 138 (yield -> YIELD expression .)
    PUTS            reduce using rule 138 (yield -> YIELD expression .)
    NOT             reduce using rule 138 (yield -> YIELD expression .)
    NOT_SYMBOL      reduce using rule 138 (yield -> YIELD expression .)
    FOR             reduce using rule 138 (yield -> YIELD expression .)
    YIELD           reduce using rule 138 (yield -> YIELD expression .)
    RETRY           reduce using rule 138 (yield -> YIELD expression .)
    RETURN          reduce using rule 138 (yield -> YIELD expression .)
    BREAK           reduce using rule 138 (yield -> YIELD expression .)
    NEXT            reduce using rule 138 (yield -> YIELD expression .)
    REDO            reduce using rule 138 (yield -> YIELD expression .)
    CASE            reduce using rule 138 (yield -> YIELD expression .)
    NUMBER          reduce using rule 138 (yield -> YIELD expression .)
    THEN            reduce using rule 138 (yield -> YIELD expression .)
    WHEN            reduce using rule 138 (yield -> YIELD expression .)
    RPAREN          reduce using rule 138 (yield -> YIELD expression .)
    ELSIF           reduce using rule 138 (yield -> YIELD expression .)
    OR_SYMBOL       reduce using rule 138 (yield -> YIELD expression .)
    RKEY            reduce using rule 138 (yield -> YIELD expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! UNLESS          [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! AND             [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! OR              [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! NOTEQUAL        [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! WHILE           [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! UNTIL           [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! DO              [ reduce using rule 138 (yield -> YIELD expression .) ]
  ! LKEY            [ reduce using rule 138 (yield -> YIELD expression .) ]


state 161

    (148) return -> RETURN args_method .

    IF              reduce using rule 148 (return -> RETURN args_method .)
    UNLESS          reduce using rule 148 (return -> RETURN args_method .)
    AND             reduce using rule 148 (return -> RETURN args_method .)
    OR              reduce using rule 148 (return -> RETURN args_method .)
    NOTEQUAL        reduce using rule 148 (return -> RETURN args_method .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 148 (return -> RETURN args_method .)
    RANGE_INCLUSIVE reduce using rule 148 (return -> RETURN args_method .)
    RANGE_EXCLUSIVE reduce using rule 148 (return -> RETURN args_method .)
    WHILE           reduce using rule 148 (return -> RETURN args_method .)
    UNTIL           reduce using rule 148 (return -> RETURN args_method .)
    DO              reduce using rule 148 (return -> RETURN args_method .)
    LKEY            reduce using rule 148 (return -> RETURN args_method .)
    $end            reduce using rule 148 (return -> RETURN args_method .)
    END             reduce using rule 148 (return -> RETURN args_method .)
    RESCUE          reduce using rule 148 (return -> RETURN args_method .)
    ENSURE          reduce using rule 148 (return -> RETURN args_method .)
    ELSE            reduce using rule 148 (return -> RETURN args_method .)
    DOT             reduce using rule 148 (return -> RETURN args_method .)
    STRING          reduce using rule 148 (return -> RETURN args_method .)
    VAR_GLOBAL      reduce using rule 148 (return -> RETURN args_method .)
    VAR_INSTANCE    reduce using rule 148 (return -> RETURN args_method .)
    VAR_CLASS       reduce using rule 148 (return -> RETURN args_method .)
    VAR_LOCAL       reduce using rule 148 (return -> RETURN args_method .)
    VAR_SYSTEM      reduce using rule 148 (return -> RETURN args_method .)
    VAR_CONSTANT    reduce using rule 148 (return -> RETURN args_method .)
    LBRACKET        reduce using rule 148 (return -> RETURN args_method .)
    IDENTIFIER      reduce using rule 148 (return -> RETURN args_method .)
    SUPER           reduce using rule 148 (return -> RETURN args_method .)
    LPAREN          reduce using rule 148 (return -> RETURN args_method .)
    BEGIN           reduce using rule 148 (return -> RETURN args_method .)
    CLASS           reduce using rule 148 (return -> RETURN args_method .)
    MODULE          reduce using rule 148 (return -> RETURN args_method .)
    DEF             reduce using rule 148 (return -> RETURN args_method .)
    ALIAS           reduce using rule 148 (return -> RETURN args_method .)
    UNDEF           reduce using rule 148 (return -> RETURN args_method .)
    DEFINED_OP      reduce using rule 148 (return -> RETURN args_method .)
    DOUBLE_QUOTED   reduce using rule 148 (return -> RETURN args_method .)
    PRINT           reduce using rule 148 (return -> RETURN args_method .)
    PUTS            reduce using rule 148 (return -> RETURN args_method .)
    NOT             reduce using rule 148 (return -> RETURN args_method .)
    NOT_SYMBOL      reduce using rule 148 (return -> RETURN args_method .)
    FOR             reduce using rule 148 (return -> RETURN args_method .)
    YIELD           reduce using rule 148 (return -> RETURN args_method .)
    RETRY           reduce using rule 148 (return -> RETURN args_method .)
    RETURN          reduce using rule 148 (return -> RETURN args_method .)
    BREAK           reduce using rule 148 (return -> RETURN args_method .)
    NEXT            reduce using rule 148 (return -> RETURN args_method .)
    REDO            reduce using rule 148 (return -> RETURN args_method .)
    CASE            reduce using rule 148 (return -> RETURN args_method .)
    NUMBER          reduce using rule 148 (return -> RETURN args_method .)
    THEN            reduce using rule 148 (return -> RETURN args_method .)
    WHEN            reduce using rule 148 (return -> RETURN args_method .)
    RPAREN          reduce using rule 148 (return -> RETURN args_method .)
    ELSIF           reduce using rule 148 (return -> RETURN args_method .)
    OR_SYMBOL       reduce using rule 148 (return -> RETURN args_method .)
    RKEY            reduce using rule 148 (return -> RETURN args_method .)


state 162

    (51) args_method -> data .
    (52) args_method -> data . COMMA args_method

    IF              reduce using rule 51 (args_method -> data .)
    UNLESS          reduce using rule 51 (args_method -> data .)
    AND             reduce using rule 51 (args_method -> data .)
    OR              reduce using rule 51 (args_method -> data .)
    NOTEQUAL        reduce using rule 51 (args_method -> data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 51 (args_method -> data .)
    RANGE_INCLUSIVE reduce using rule 51 (args_method -> data .)
    RANGE_EXCLUSIVE reduce using rule 51 (args_method -> data .)
    WHILE           reduce using rule 51 (args_method -> data .)
    UNTIL           reduce using rule 51 (args_method -> data .)
    DO              reduce using rule 51 (args_method -> data .)
    LKEY            reduce using rule 51 (args_method -> data .)
    $end            reduce using rule 51 (args_method -> data .)
    END             reduce using rule 51 (args_method -> data .)
    RESCUE          reduce using rule 51 (args_method -> data .)
    ENSURE          reduce using rule 51 (args_method -> data .)
    ELSE            reduce using rule 51 (args_method -> data .)
    DOT             reduce using rule 51 (args_method -> data .)
    STRING          reduce using rule 51 (args_method -> data .)
    VAR_GLOBAL      reduce using rule 51 (args_method -> data .)
    VAR_INSTANCE    reduce using rule 51 (args_method -> data .)
    VAR_CLASS       reduce using rule 51 (args_method -> data .)
    VAR_LOCAL       reduce using rule 51 (args_method -> data .)
    VAR_SYSTEM      reduce using rule 51 (args_method -> data .)
    VAR_CONSTANT    reduce using rule 51 (args_method -> data .)
    LBRACKET        reduce using rule 51 (args_method -> data .)
    IDENTIFIER      reduce using rule 51 (args_method -> data .)
    SUPER           reduce using rule 51 (args_method -> data .)
    LPAREN          reduce using rule 51 (args_method -> data .)
    BEGIN           reduce using rule 51 (args_method -> data .)
    CLASS           reduce using rule 51 (args_method -> data .)
    MODULE          reduce using rule 51 (args_method -> data .)
    DEF             reduce using rule 51 (args_method -> data .)
    ALIAS           reduce using rule 51 (args_method -> data .)
    UNDEF           reduce using rule 51 (args_method -> data .)
    DEFINED_OP      reduce using rule 51 (args_method -> data .)
    DOUBLE_QUOTED   reduce using rule 51 (args_method -> data .)
    PRINT           reduce using rule 51 (args_method -> data .)
    PUTS            reduce using rule 51 (args_method -> data .)
    NOT             reduce using rule 51 (args_method -> data .)
    NOT_SYMBOL      reduce using rule 51 (args_method -> data .)
    FOR             reduce using rule 51 (args_method -> data .)
    YIELD           reduce using rule 51 (args_method -> data .)
    RETRY           reduce using rule 51 (args_method -> data .)
    RETURN          reduce using rule 51 (args_method -> data .)
    BREAK           reduce using rule 51 (args_method -> data .)
    NEXT            reduce using rule 51 (args_method -> data .)
    REDO            reduce using rule 51 (args_method -> data .)
    CASE            reduce using rule 51 (args_method -> data .)
    NUMBER          reduce using rule 51 (args_method -> data .)
    THEN            reduce using rule 51 (args_method -> data .)
    WHEN            reduce using rule 51 (args_method -> data .)
    RPAREN          reduce using rule 51 (args_method -> data .)
    ELSIF           reduce using rule 51 (args_method -> data .)
    OR_SYMBOL       reduce using rule 51 (args_method -> data .)
    RKEY            reduce using rule 51 (args_method -> data .)
    COMMA           shift and go to state 229


state 163

    (109) case -> CASE expression . END
    (110) case -> CASE expression . when END
    (111) case -> CASE expression . else END
    (112) case -> CASE expression . when else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (113) when -> . WHEN it_expression THEN expression
    (114) when -> . WHEN it_expression THEN expression when
    (115) when -> . WHEN it_expression expression
    (116) when -> . WHEN it_expression expression when
    (103) else -> . ELSE expression

    END             shift and go to state 230
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    WHEN            shift and go to state 233
    ELSE            shift and go to state 234

    when                           shift and go to state 231
    else                           shift and go to state 232

state 164

    (104) if_modifier -> expression IF expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 104 (if_modifier -> expression IF expression .)
    END             reduce using rule 104 (if_modifier -> expression IF expression .)
    RESCUE          reduce using rule 104 (if_modifier -> expression IF expression .)
    ENSURE          reduce using rule 104 (if_modifier -> expression IF expression .)
    ELSE            reduce using rule 104 (if_modifier -> expression IF expression .)
    DOT             reduce using rule 104 (if_modifier -> expression IF expression .)
    STRING          reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_GLOBAL      reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_INSTANCE    reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_CLASS       reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_LOCAL       reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_SYSTEM      reduce using rule 104 (if_modifier -> expression IF expression .)
    VAR_CONSTANT    reduce using rule 104 (if_modifier -> expression IF expression .)
    LBRACKET        reduce using rule 104 (if_modifier -> expression IF expression .)
    IDENTIFIER      reduce using rule 104 (if_modifier -> expression IF expression .)
    SUPER           reduce using rule 104 (if_modifier -> expression IF expression .)
    LPAREN          reduce using rule 104 (if_modifier -> expression IF expression .)
    BEGIN           reduce using rule 104 (if_modifier -> expression IF expression .)
    CLASS           reduce using rule 104 (if_modifier -> expression IF expression .)
    MODULE          reduce using rule 104 (if_modifier -> expression IF expression .)
    DEF             reduce using rule 104 (if_modifier -> expression IF expression .)
    ALIAS           reduce using rule 104 (if_modifier -> expression IF expression .)
    UNDEF           reduce using rule 104 (if_modifier -> expression IF expression .)
    DEFINED_OP      reduce using rule 104 (if_modifier -> expression IF expression .)
    DOUBLE_QUOTED   reduce using rule 104 (if_modifier -> expression IF expression .)
    PRINT           reduce using rule 104 (if_modifier -> expression IF expression .)
    PUTS            reduce using rule 104 (if_modifier -> expression IF expression .)
    NOT             reduce using rule 104 (if_modifier -> expression IF expression .)
    NOT_SYMBOL      reduce using rule 104 (if_modifier -> expression IF expression .)
    FOR             reduce using rule 104 (if_modifier -> expression IF expression .)
    YIELD           reduce using rule 104 (if_modifier -> expression IF expression .)
    RETRY           reduce using rule 104 (if_modifier -> expression IF expression .)
    RETURN          reduce using rule 104 (if_modifier -> expression IF expression .)
    BREAK           reduce using rule 104 (if_modifier -> expression IF expression .)
    NEXT            reduce using rule 104 (if_modifier -> expression IF expression .)
    REDO            reduce using rule 104 (if_modifier -> expression IF expression .)
    CASE            reduce using rule 104 (if_modifier -> expression IF expression .)
    NUMBER          reduce using rule 104 (if_modifier -> expression IF expression .)
    THEN            reduce using rule 104 (if_modifier -> expression IF expression .)
    WHEN            reduce using rule 104 (if_modifier -> expression IF expression .)
    RPAREN          reduce using rule 104 (if_modifier -> expression IF expression .)
    ELSIF           reduce using rule 104 (if_modifier -> expression IF expression .)
    OR_SYMBOL       reduce using rule 104 (if_modifier -> expression IF expression .)
    RKEY            reduce using rule 104 (if_modifier -> expression IF expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! UNLESS          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! AND             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! OR              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NOTEQUAL        [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! WHILE           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! UNTIL           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! DO              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! LKEY            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]


state 165

    (108) unless_modifier -> expression UNLESS expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    END             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RESCUE          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ENSURE          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ELSE            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    DOT             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    STRING          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_GLOBAL      reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_INSTANCE    reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_CLASS       reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_LOCAL       reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_SYSTEM      reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    VAR_CONSTANT    reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    LBRACKET        reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    IDENTIFIER      reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    SUPER           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    LPAREN          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    BEGIN           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    CLASS           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    MODULE          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    DEF             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ALIAS           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    UNDEF           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    DEFINED_OP      reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    DOUBLE_QUOTED   reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    PRINT           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    PUTS            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    NOT             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    NOT_SYMBOL      reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    FOR             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    YIELD           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RETRY           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RETURN          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    BREAK           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    NEXT            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    REDO            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    CASE            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    NUMBER          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    THEN            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    WHEN            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RPAREN          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ELSIF           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    OR_SYMBOL       reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RKEY            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! UNLESS          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! AND             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! OR              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NOTEQUAL        [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! WHILE           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! UNTIL           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! DO              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! LKEY            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]


state 166

    (119) and -> expression AND expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 119 (and -> expression AND expression .)
    END             reduce using rule 119 (and -> expression AND expression .)
    RESCUE          reduce using rule 119 (and -> expression AND expression .)
    ENSURE          reduce using rule 119 (and -> expression AND expression .)
    ELSE            reduce using rule 119 (and -> expression AND expression .)
    DOT             reduce using rule 119 (and -> expression AND expression .)
    STRING          reduce using rule 119 (and -> expression AND expression .)
    VAR_GLOBAL      reduce using rule 119 (and -> expression AND expression .)
    VAR_INSTANCE    reduce using rule 119 (and -> expression AND expression .)
    VAR_CLASS       reduce using rule 119 (and -> expression AND expression .)
    VAR_LOCAL       reduce using rule 119 (and -> expression AND expression .)
    VAR_SYSTEM      reduce using rule 119 (and -> expression AND expression .)
    VAR_CONSTANT    reduce using rule 119 (and -> expression AND expression .)
    LBRACKET        reduce using rule 119 (and -> expression AND expression .)
    IDENTIFIER      reduce using rule 119 (and -> expression AND expression .)
    SUPER           reduce using rule 119 (and -> expression AND expression .)
    LPAREN          reduce using rule 119 (and -> expression AND expression .)
    BEGIN           reduce using rule 119 (and -> expression AND expression .)
    CLASS           reduce using rule 119 (and -> expression AND expression .)
    MODULE          reduce using rule 119 (and -> expression AND expression .)
    DEF             reduce using rule 119 (and -> expression AND expression .)
    ALIAS           reduce using rule 119 (and -> expression AND expression .)
    UNDEF           reduce using rule 119 (and -> expression AND expression .)
    DEFINED_OP      reduce using rule 119 (and -> expression AND expression .)
    DOUBLE_QUOTED   reduce using rule 119 (and -> expression AND expression .)
    PRINT           reduce using rule 119 (and -> expression AND expression .)
    PUTS            reduce using rule 119 (and -> expression AND expression .)
    NOT             reduce using rule 119 (and -> expression AND expression .)
    NOT_SYMBOL      reduce using rule 119 (and -> expression AND expression .)
    FOR             reduce using rule 119 (and -> expression AND expression .)
    YIELD           reduce using rule 119 (and -> expression AND expression .)
    RETRY           reduce using rule 119 (and -> expression AND expression .)
    RETURN          reduce using rule 119 (and -> expression AND expression .)
    BREAK           reduce using rule 119 (and -> expression AND expression .)
    NEXT            reduce using rule 119 (and -> expression AND expression .)
    REDO            reduce using rule 119 (and -> expression AND expression .)
    CASE            reduce using rule 119 (and -> expression AND expression .)
    NUMBER          reduce using rule 119 (and -> expression AND expression .)
    THEN            reduce using rule 119 (and -> expression AND expression .)
    WHEN            reduce using rule 119 (and -> expression AND expression .)
    RPAREN          reduce using rule 119 (and -> expression AND expression .)
    ELSIF           reduce using rule 119 (and -> expression AND expression .)
    OR_SYMBOL       reduce using rule 119 (and -> expression AND expression .)
    RKEY            reduce using rule 119 (and -> expression AND expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 119 (and -> expression AND expression .) ]
  ! UNLESS          [ reduce using rule 119 (and -> expression AND expression .) ]
  ! AND             [ reduce using rule 119 (and -> expression AND expression .) ]
  ! OR              [ reduce using rule 119 (and -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 119 (and -> expression AND expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 119 (and -> expression AND expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 119 (and -> expression AND expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 119 (and -> expression AND expression .) ]
  ! WHILE           [ reduce using rule 119 (and -> expression AND expression .) ]
  ! UNTIL           [ reduce using rule 119 (and -> expression AND expression .) ]
  ! DO              [ reduce using rule 119 (and -> expression AND expression .) ]
  ! LKEY            [ reduce using rule 119 (and -> expression AND expression .) ]


state 167

    (120) or -> expression OR expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 120 (or -> expression OR expression .)
    END             reduce using rule 120 (or -> expression OR expression .)
    RESCUE          reduce using rule 120 (or -> expression OR expression .)
    ENSURE          reduce using rule 120 (or -> expression OR expression .)
    ELSE            reduce using rule 120 (or -> expression OR expression .)
    DOT             reduce using rule 120 (or -> expression OR expression .)
    STRING          reduce using rule 120 (or -> expression OR expression .)
    VAR_GLOBAL      reduce using rule 120 (or -> expression OR expression .)
    VAR_INSTANCE    reduce using rule 120 (or -> expression OR expression .)
    VAR_CLASS       reduce using rule 120 (or -> expression OR expression .)
    VAR_LOCAL       reduce using rule 120 (or -> expression OR expression .)
    VAR_SYSTEM      reduce using rule 120 (or -> expression OR expression .)
    VAR_CONSTANT    reduce using rule 120 (or -> expression OR expression .)
    LBRACKET        reduce using rule 120 (or -> expression OR expression .)
    IDENTIFIER      reduce using rule 120 (or -> expression OR expression .)
    SUPER           reduce using rule 120 (or -> expression OR expression .)
    LPAREN          reduce using rule 120 (or -> expression OR expression .)
    BEGIN           reduce using rule 120 (or -> expression OR expression .)
    CLASS           reduce using rule 120 (or -> expression OR expression .)
    MODULE          reduce using rule 120 (or -> expression OR expression .)
    DEF             reduce using rule 120 (or -> expression OR expression .)
    ALIAS           reduce using rule 120 (or -> expression OR expression .)
    UNDEF           reduce using rule 120 (or -> expression OR expression .)
    DEFINED_OP      reduce using rule 120 (or -> expression OR expression .)
    DOUBLE_QUOTED   reduce using rule 120 (or -> expression OR expression .)
    PRINT           reduce using rule 120 (or -> expression OR expression .)
    PUTS            reduce using rule 120 (or -> expression OR expression .)
    NOT             reduce using rule 120 (or -> expression OR expression .)
    NOT_SYMBOL      reduce using rule 120 (or -> expression OR expression .)
    FOR             reduce using rule 120 (or -> expression OR expression .)
    YIELD           reduce using rule 120 (or -> expression OR expression .)
    RETRY           reduce using rule 120 (or -> expression OR expression .)
    RETURN          reduce using rule 120 (or -> expression OR expression .)
    BREAK           reduce using rule 120 (or -> expression OR expression .)
    NEXT            reduce using rule 120 (or -> expression OR expression .)
    REDO            reduce using rule 120 (or -> expression OR expression .)
    CASE            reduce using rule 120 (or -> expression OR expression .)
    NUMBER          reduce using rule 120 (or -> expression OR expression .)
    THEN            reduce using rule 120 (or -> expression OR expression .)
    WHEN            reduce using rule 120 (or -> expression OR expression .)
    RPAREN          reduce using rule 120 (or -> expression OR expression .)
    ELSIF           reduce using rule 120 (or -> expression OR expression .)
    OR_SYMBOL       reduce using rule 120 (or -> expression OR expression .)
    RKEY            reduce using rule 120 (or -> expression OR expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 120 (or -> expression OR expression .) ]
  ! UNLESS          [ reduce using rule 120 (or -> expression OR expression .) ]
  ! AND             [ reduce using rule 120 (or -> expression OR expression .) ]
  ! OR              [ reduce using rule 120 (or -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 120 (or -> expression OR expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 120 (or -> expression OR expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 120 (or -> expression OR expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 120 (or -> expression OR expression .) ]
  ! WHILE           [ reduce using rule 120 (or -> expression OR expression .) ]
  ! UNTIL           [ reduce using rule 120 (or -> expression OR expression .) ]
  ! DO              [ reduce using rule 120 (or -> expression OR expression .) ]
  ! LKEY            [ reduce using rule 120 (or -> expression OR expression .) ]


state 168

    (123) not -> expression NOTEQUAL expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    END             reduce using rule 123 (not -> expression NOTEQUAL expression .)
    RESCUE          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    ENSURE          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    ELSE            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    DOT             reduce using rule 123 (not -> expression NOTEQUAL expression .)
    STRING          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_GLOBAL      reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_INSTANCE    reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_CLASS       reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_LOCAL       reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_SYSTEM      reduce using rule 123 (not -> expression NOTEQUAL expression .)
    VAR_CONSTANT    reduce using rule 123 (not -> expression NOTEQUAL expression .)
    LBRACKET        reduce using rule 123 (not -> expression NOTEQUAL expression .)
    IDENTIFIER      reduce using rule 123 (not -> expression NOTEQUAL expression .)
    SUPER           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    LPAREN          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    BEGIN           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    CLASS           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    MODULE          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    DEF             reduce using rule 123 (not -> expression NOTEQUAL expression .)
    ALIAS           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    UNDEF           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    DEFINED_OP      reduce using rule 123 (not -> expression NOTEQUAL expression .)
    DOUBLE_QUOTED   reduce using rule 123 (not -> expression NOTEQUAL expression .)
    PRINT           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    PUTS            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    NOT             reduce using rule 123 (not -> expression NOTEQUAL expression .)
    NOT_SYMBOL      reduce using rule 123 (not -> expression NOTEQUAL expression .)
    FOR             reduce using rule 123 (not -> expression NOTEQUAL expression .)
    YIELD           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    RETRY           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    RETURN          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    BREAK           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    NEXT            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    REDO            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    CASE            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    NUMBER          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    THEN            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    WHEN            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 123 (not -> expression NOTEQUAL expression .)
    ELSIF           reduce using rule 123 (not -> expression NOTEQUAL expression .)
    OR_SYMBOL       reduce using rule 123 (not -> expression NOTEQUAL expression .)
    RKEY            reduce using rule 123 (not -> expression NOTEQUAL expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! UNLESS          [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! WHILE           [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! UNTIL           [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! DO              [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]
  ! LKEY            [ reduce using rule 123 (not -> expression NOTEQUAL expression .) ]


state 169

    (124) not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    END             reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    RESCUE          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    ENSURE          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    ELSE            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    DOT             reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    STRING          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_GLOBAL      reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_INSTANCE    reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_CLASS       reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_LOCAL       reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_SYSTEM      reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    VAR_CONSTANT    reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    LBRACKET        reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    IDENTIFIER      reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    SUPER           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    LPAREN          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    BEGIN           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    CLASS           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    MODULE          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    DEF             reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    ALIAS           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    UNDEF           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    DEFINED_OP      reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    DOUBLE_QUOTED   reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    PRINT           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    PUTS            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    NOT             reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    NOT_SYMBOL      reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    FOR             reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    YIELD           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    RETRY           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    RETURN          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    BREAK           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    NEXT            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    REDO            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    CASE            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    NUMBER          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    THEN            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    WHEN            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    RPAREN          reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    ELSIF           reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    OR_SYMBOL       reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    RKEY            reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! UNLESS          [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! AND             [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! OR              [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! NOTEQUAL        [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! WHILE           [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! UNTIL           [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! DO              [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]
  ! LKEY            [ reduce using rule 124 (not -> expression OPPOSITE_MATCHED_STRINGS_OP expression .) ]


state 170

    (125) range_expressions -> expression RANGE_INCLUSIVE expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    END             reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    RESCUE          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    ENSURE          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    ELSE            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    DOT             reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    STRING          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_GLOBAL      reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_INSTANCE    reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_CLASS       reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_LOCAL       reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_SYSTEM      reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    VAR_CONSTANT    reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    LBRACKET        reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    IDENTIFIER      reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    SUPER           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    LPAREN          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    BEGIN           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    CLASS           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    MODULE          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    DEF             reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    ALIAS           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    UNDEF           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    DEFINED_OP      reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    DOUBLE_QUOTED   reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    PRINT           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    PUTS            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    NOT             reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    NOT_SYMBOL      reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    FOR             reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    YIELD           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    RETRY           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    RETURN          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    BREAK           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    NEXT            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    REDO            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    CASE            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    NUMBER          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    THEN            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    WHEN            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    RPAREN          reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    ELSIF           reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    OR_SYMBOL       reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    RKEY            reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! UNLESS          [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! AND             [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! OR              [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! NOTEQUAL        [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! WHILE           [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! UNTIL           [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! DO              [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]
  ! LKEY            [ reduce using rule 125 (range_expressions -> expression RANGE_INCLUSIVE expression .) ]


state 171

    (126) range_expressions -> expression RANGE_EXCLUSIVE expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    END             reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    RESCUE          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    ENSURE          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    ELSE            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    DOT             reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    STRING          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_GLOBAL      reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_INSTANCE    reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_CLASS       reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_LOCAL       reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_SYSTEM      reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    VAR_CONSTANT    reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    LBRACKET        reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    IDENTIFIER      reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    SUPER           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    LPAREN          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    BEGIN           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    CLASS           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    MODULE          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    DEF             reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    ALIAS           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    UNDEF           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    DEFINED_OP      reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    DOUBLE_QUOTED   reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    PRINT           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    PUTS            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    NOT             reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    NOT_SYMBOL      reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    FOR             reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    YIELD           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    RETRY           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    RETURN          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    BREAK           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    NEXT            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    REDO            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    CASE            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    NUMBER          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    THEN            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    WHEN            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    RPAREN          reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    ELSIF           reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    OR_SYMBOL       reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    RKEY            reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! UNLESS          [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! AND             [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! OR              [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! NOTEQUAL        [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! WHILE           [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! UNTIL           [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! DO              [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]
  ! LKEY            [ reduce using rule 126 (range_expressions -> expression RANGE_EXCLUSIVE expression .) ]


state 172

    (129) while_modifier -> expression WHILE expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    END             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RESCUE          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ENSURE          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ELSE            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DOT             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    STRING          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_GLOBAL      reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_INSTANCE    reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_CLASS       reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_LOCAL       reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_SYSTEM      reduce using rule 129 (while_modifier -> expression WHILE expression .)
    VAR_CONSTANT    reduce using rule 129 (while_modifier -> expression WHILE expression .)
    LBRACKET        reduce using rule 129 (while_modifier -> expression WHILE expression .)
    IDENTIFIER      reduce using rule 129 (while_modifier -> expression WHILE expression .)
    SUPER           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    LPAREN          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    BEGIN           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    CLASS           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    MODULE          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DEF             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ALIAS           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    UNDEF           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DEFINED_OP      reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DOUBLE_QUOTED   reduce using rule 129 (while_modifier -> expression WHILE expression .)
    PRINT           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    PUTS            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    NOT             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    NOT_SYMBOL      reduce using rule 129 (while_modifier -> expression WHILE expression .)
    FOR             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    YIELD           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RETRY           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RETURN          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    BREAK           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    NEXT            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    REDO            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    CASE            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    NUMBER          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    THEN            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    WHEN            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RPAREN          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ELSIF           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    OR_SYMBOL       reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RKEY            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! UNLESS          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! AND             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! OR              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NOTEQUAL        [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! WHILE           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! UNTIL           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! DO              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! LKEY            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]


state 173

    (132) until_modifier -> expression UNTIL expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    END             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RESCUE          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ENSURE          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ELSE            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DOT             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    STRING          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_GLOBAL      reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_INSTANCE    reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_CLASS       reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_LOCAL       reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_SYSTEM      reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    VAR_CONSTANT    reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    LBRACKET        reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    IDENTIFIER      reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    SUPER           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    LPAREN          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    BEGIN           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    CLASS           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    MODULE          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DEF             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ALIAS           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    UNDEF           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DEFINED_OP      reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DOUBLE_QUOTED   reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    PRINT           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    PUTS            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    NOT             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    NOT_SYMBOL      reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    FOR             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    YIELD           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RETRY           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RETURN          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    BREAK           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    NEXT            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    REDO            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    CASE            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    NUMBER          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    THEN            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    WHEN            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RPAREN          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ELSIF           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    OR_SYMBOL       reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RKEY            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! UNLESS          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! AND             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! OR              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NOTEQUAL        [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! WHILE           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! UNTIL           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! DO              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! LKEY            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]


state 174

    (133) iterator -> expression DO OR_SYMBOL . expression OR_SYMBOL expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 235
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 175

    (134) iterator -> expression LKEY OR_SYMBOL . expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 236
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 176

    (53) assignment -> variable EQUAL_SYMBOL data .

    IF              reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    UNLESS          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    AND             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    OR              reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    NOTEQUAL        reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RANGE_INCLUSIVE reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RANGE_EXCLUSIVE reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    WHILE           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    UNTIL           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    DO              reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    LKEY            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    $end            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    END             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RESCUE          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    ENSURE          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    ELSE            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    DOT             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    STRING          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    SUPER           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    BEGIN           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    CLASS           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    MODULE          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    DEF             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    PRINT           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    PUTS            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    NOT             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    NOT_SYMBOL      reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    FOR             reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    YIELD           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RETRY           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RETURN          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    BREAK           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    NEXT            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    REDO            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    CASE            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    THEN            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    WHEN            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RPAREN          reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    OR_SYMBOL       reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)
    RKEY            reduce using rule 53 (assignment -> variable EQUAL_SYMBOL data .)


state 177

    (58) self_assigment -> variable op_assigment data .

    IF              reduce using rule 58 (self_assigment -> variable op_assigment data .)
    UNLESS          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    AND             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    OR              reduce using rule 58 (self_assigment -> variable op_assigment data .)
    NOTEQUAL        reduce using rule 58 (self_assigment -> variable op_assigment data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RANGE_INCLUSIVE reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RANGE_EXCLUSIVE reduce using rule 58 (self_assigment -> variable op_assigment data .)
    WHILE           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    UNTIL           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    DO              reduce using rule 58 (self_assigment -> variable op_assigment data .)
    LKEY            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    $end            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    END             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RESCUE          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    ENSURE          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    ELSE            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    DOT             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    STRING          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_GLOBAL      reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_INSTANCE    reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_CLASS       reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_LOCAL       reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_SYSTEM      reduce using rule 58 (self_assigment -> variable op_assigment data .)
    VAR_CONSTANT    reduce using rule 58 (self_assigment -> variable op_assigment data .)
    LBRACKET        reduce using rule 58 (self_assigment -> variable op_assigment data .)
    IDENTIFIER      reduce using rule 58 (self_assigment -> variable op_assigment data .)
    SUPER           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    LPAREN          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    BEGIN           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    CLASS           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    MODULE          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    DEF             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    ALIAS           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    UNDEF           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    DEFINED_OP      reduce using rule 58 (self_assigment -> variable op_assigment data .)
    DOUBLE_QUOTED   reduce using rule 58 (self_assigment -> variable op_assigment data .)
    PRINT           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    PUTS            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    NOT             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    NOT_SYMBOL      reduce using rule 58 (self_assigment -> variable op_assigment data .)
    FOR             reduce using rule 58 (self_assigment -> variable op_assigment data .)
    YIELD           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RETRY           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RETURN          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    BREAK           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    NEXT            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    REDO            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    CASE            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    NUMBER          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    THEN            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    WHEN            reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RPAREN          reduce using rule 58 (self_assigment -> variable op_assigment data .)
    ELSIF           reduce using rule 58 (self_assigment -> variable op_assigment data .)
    OR_SYMBOL       reduce using rule 58 (self_assigment -> variable op_assigment data .)
    RKEY            reduce using rule 58 (self_assigment -> variable op_assigment data .)


state 178

    (66) list_var -> variable . COMMA
    (67) list_var -> variable . COMMA list_var
    (68) list_var -> variable .

    COMMA           shift and go to state 104
    EQUAL_SYMBOL    reduce using rule 68 (list_var -> variable .)


state 179

    (67) list_var -> variable COMMA list_var .

    EQUAL_SYMBOL    reduce using rule 67 (list_var -> variable COMMA list_var .)


state 180

    (55) assignment -> method_invocation EQUAL_SYMBOL data .

    IF              reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    UNLESS          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    AND             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    OR              reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NOTEQUAL        reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RANGE_INCLUSIVE reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RANGE_EXCLUSIVE reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    WHILE           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    UNTIL           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DO              reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LKEY            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    $end            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    END             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RESCUE          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ENSURE          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ELSE            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DOT             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    STRING          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    SUPER           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    BEGIN           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    CLASS           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    MODULE          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DEF             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    PRINT           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    PUTS            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NOT             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NOT_SYMBOL      reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    FOR             reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    YIELD           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RETRY           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RETURN          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    BREAK           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NEXT            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    REDO            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    CASE            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    THEN            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    WHEN            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RPAREN          reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    OR_SYMBOL       reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)
    RKEY            reduce using rule 55 (assignment -> method_invocation EQUAL_SYMBOL data .)


state 181

    (166) expression_operations -> expression_operations op expression_operations .
    (166) expression_operations -> expression_operations . op expression_operations
    (167) expression_operations -> expression_operations . op opmate
    (169) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    IF              reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    UNLESS          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    AND             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    OR              reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RANGE_INCLUSIVE reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RANGE_EXCLUSIVE reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    WHILE           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    UNTIL           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    DO              reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    LKEY            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    $end            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    END             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RESCUE          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    ENSURE          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    ELSE            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    DOT             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    STRING          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_GLOBAL      reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_INSTANCE    reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_CLASS       reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_LOCAL       reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_SYSTEM      reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    VAR_CONSTANT    reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    LBRACKET        reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    IDENTIFIER      reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    SUPER           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    LPAREN          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    BEGIN           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    CLASS           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    MODULE          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    DEF             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    ALIAS           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    UNDEF           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    DEFINED_OP      reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    DOUBLE_QUOTED   reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    PRINT           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    PUTS            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    NOT             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    NOT_SYMBOL      reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    FOR             reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    YIELD           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RETRY           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RETURN          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    BREAK           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    NEXT            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    REDO            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    CASE            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    NUMBER          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    THEN            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    WHEN            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RPAREN          reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    ELSIF           reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    OR_SYMBOL       reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    RKEY            reduce using rule 166 (expression_operations -> expression_operations op expression_operations .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

  ! PLUS            [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! MINUS           [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! TIMES           [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! DIVIDE          [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! MOD             [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! EQUAL           [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! NOTEQUAL        [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! GREATERTHAN     [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! GREATERTHANEQUAL [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! LESSERTHAN      [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]
  ! LESSERTHANEQUAL [ reduce using rule 166 (expression_operations -> expression_operations op expression_operations .) ]

    op                             shift and go to state 112

state 182

    (167) expression_operations -> expression_operations op opmate .
    (164) expression_operations -> opmate .

  ! reduce/reduce conflict for PLUS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MINUS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for TIMES resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MOD resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for EQUAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for IF resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for UNLESS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for AND resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for OR resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for WHILE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for UNTIL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DO resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LKEY resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for $end resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for END resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RESCUE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ENSURE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ELSE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DOT resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for STRING resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_SYSTEM resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_CONSTANT resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for SUPER resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LPAREN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for BEGIN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for CLASS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MODULE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DEF resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ALIAS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for UNDEF resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DOUBLE_QUOTED resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for PRINT resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for PUTS resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NOT resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for FOR resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for YIELD resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RETRY resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RETURN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for BREAK resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NEXT resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for REDO resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for CASE resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NUMBER resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for THEN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for WHEN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RPAREN resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ELSIF resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 164 (expression_operations -> opmate .)
  ! reduce/reduce conflict for RKEY resolved using rule 164 (expression_operations -> opmate .)
    PLUS            reduce using rule 164 (expression_operations -> opmate .)
    MINUS           reduce using rule 164 (expression_operations -> opmate .)
    TIMES           reduce using rule 164 (expression_operations -> opmate .)
    DIVIDE          reduce using rule 164 (expression_operations -> opmate .)
    MOD             reduce using rule 164 (expression_operations -> opmate .)
    EQUAL           reduce using rule 164 (expression_operations -> opmate .)
    NOTEQUAL        reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHAN     reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHAN      reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    IF              reduce using rule 164 (expression_operations -> opmate .)
    UNLESS          reduce using rule 164 (expression_operations -> opmate .)
    AND             reduce using rule 164 (expression_operations -> opmate .)
    OR              reduce using rule 164 (expression_operations -> opmate .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 164 (expression_operations -> opmate .)
    RANGE_INCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    RANGE_EXCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    WHILE           reduce using rule 164 (expression_operations -> opmate .)
    UNTIL           reduce using rule 164 (expression_operations -> opmate .)
    DO              reduce using rule 164 (expression_operations -> opmate .)
    LKEY            reduce using rule 164 (expression_operations -> opmate .)
    $end            reduce using rule 164 (expression_operations -> opmate .)
    END             reduce using rule 164 (expression_operations -> opmate .)
    RESCUE          reduce using rule 164 (expression_operations -> opmate .)
    ENSURE          reduce using rule 164 (expression_operations -> opmate .)
    ELSE            reduce using rule 164 (expression_operations -> opmate .)
    DOT             reduce using rule 164 (expression_operations -> opmate .)
    STRING          reduce using rule 164 (expression_operations -> opmate .)
    VAR_GLOBAL      reduce using rule 164 (expression_operations -> opmate .)
    VAR_INSTANCE    reduce using rule 164 (expression_operations -> opmate .)
    VAR_CLASS       reduce using rule 164 (expression_operations -> opmate .)
    VAR_LOCAL       reduce using rule 164 (expression_operations -> opmate .)
    VAR_SYSTEM      reduce using rule 164 (expression_operations -> opmate .)
    VAR_CONSTANT    reduce using rule 164 (expression_operations -> opmate .)
    LBRACKET        reduce using rule 164 (expression_operations -> opmate .)
    IDENTIFIER      reduce using rule 164 (expression_operations -> opmate .)
    SUPER           reduce using rule 164 (expression_operations -> opmate .)
    LPAREN          reduce using rule 164 (expression_operations -> opmate .)
    BEGIN           reduce using rule 164 (expression_operations -> opmate .)
    CLASS           reduce using rule 164 (expression_operations -> opmate .)
    MODULE          reduce using rule 164 (expression_operations -> opmate .)
    DEF             reduce using rule 164 (expression_operations -> opmate .)
    ALIAS           reduce using rule 164 (expression_operations -> opmate .)
    UNDEF           reduce using rule 164 (expression_operations -> opmate .)
    DEFINED_OP      reduce using rule 164 (expression_operations -> opmate .)
    DOUBLE_QUOTED   reduce using rule 164 (expression_operations -> opmate .)
    PRINT           reduce using rule 164 (expression_operations -> opmate .)
    PUTS            reduce using rule 164 (expression_operations -> opmate .)
    NOT             reduce using rule 164 (expression_operations -> opmate .)
    NOT_SYMBOL      reduce using rule 164 (expression_operations -> opmate .)
    FOR             reduce using rule 164 (expression_operations -> opmate .)
    YIELD           reduce using rule 164 (expression_operations -> opmate .)
    RETRY           reduce using rule 164 (expression_operations -> opmate .)
    RETURN          reduce using rule 164 (expression_operations -> opmate .)
    BREAK           reduce using rule 164 (expression_operations -> opmate .)
    NEXT            reduce using rule 164 (expression_operations -> opmate .)
    REDO            reduce using rule 164 (expression_operations -> opmate .)
    CASE            reduce using rule 164 (expression_operations -> opmate .)
    NUMBER          reduce using rule 164 (expression_operations -> opmate .)
    THEN            reduce using rule 164 (expression_operations -> opmate .)
    WHEN            reduce using rule 164 (expression_operations -> opmate .)
    RPAREN          reduce using rule 164 (expression_operations -> opmate .)
    ELSIF           reduce using rule 164 (expression_operations -> opmate .)
    OR_SYMBOL       reduce using rule 164 (expression_operations -> opmate .)
    RKEY            reduce using rule 164 (expression_operations -> opmate .)

  ! PLUS            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! MINUS           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! TIMES           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DIVIDE          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! MOD             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! EQUAL           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! NOTEQUAL        [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! GREATERTHAN     [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! GREATERTHANEQUAL [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! LESSERTHAN      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! LESSERTHANEQUAL [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! IF              [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! UNLESS          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! AND             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! OR              [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! WHILE           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! UNTIL           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DO              [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! LKEY            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! $end            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! END             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RESCUE          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! ENSURE          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! ELSE            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DOT             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! STRING          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_GLOBAL      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_INSTANCE    [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_CLASS       [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_LOCAL       [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_SYSTEM      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_CONSTANT    [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! LBRACKET        [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! IDENTIFIER      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! SUPER           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! LPAREN          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! BEGIN           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! CLASS           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! MODULE          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DEF             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! ALIAS           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! UNDEF           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DEFINED_OP      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! PRINT           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! PUTS            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! NOT             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! NOT_SYMBOL      [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! FOR             [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! YIELD           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RETRY           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RETURN          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! BREAK           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! NEXT            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! REDO            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! CASE            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! NUMBER          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! THEN            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! WHEN            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RPAREN          [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! ELSIF           [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! OR_SYMBOL       [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]
  ! RKEY            [ reduce using rule 167 (expression_operations -> expression_operations op opmate .) ]


state 183

    (169) expression_operations -> expression_operations op LPAREN . opmate RPAREN
    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (170) opmate -> . data op data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    opmate                         shift and go to state 237
    data                           shift and go to state 36
    variable                       shift and go to state 127

state 184

    (37) array -> LBRACKET args_array RBRACKET .

    IF              reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    UNLESS          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    AND             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    OR              reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    NOTEQUAL        reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    WHILE           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    UNTIL           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    DO              reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    LKEY            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    $end            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    END             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RESCUE          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    ENSURE          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    ELSE            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    DOT             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    STRING          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_GLOBAL      reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_INSTANCE    reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_CLASS       reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_LOCAL       reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_SYSTEM      reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    VAR_CONSTANT    reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    LBRACKET        reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    IDENTIFIER      reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    SUPER           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    LPAREN          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    BEGIN           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    CLASS           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    MODULE          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    DEF             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    ALIAS           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    UNDEF           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    DEFINED_OP      reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    DOUBLE_QUOTED   reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    PRINT           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    PUTS            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    NOT             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    NOT_SYMBOL      reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    FOR             reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    YIELD           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RETRY           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RETURN          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    BREAK           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    NEXT            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    REDO            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    CASE            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    NUMBER          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    THEN            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    WHEN            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RPAREN          reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    ELSIF           reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    OR_SYMBOL       reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)
    RKEY            reduce using rule 37 (array -> LBRACKET args_array RBRACKET .)


state 185

    (40) args_array -> data COMMA . args_array
    (39) args_array -> . data
    (40) args_array -> . data COMMA args_array
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 125
    args_array                     shift and go to state 238
    variable                       shift and go to state 127

state 186

    (41) hash -> LKEY args_hash RKEY .

    IF              reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    UNLESS          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    AND             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    OR              reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    NOTEQUAL        reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RANGE_INCLUSIVE reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RANGE_EXCLUSIVE reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    WHILE           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    UNTIL           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    DO              reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    LKEY            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    $end            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    END             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RESCUE          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    ENSURE          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    ELSE            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    DOT             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    STRING          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_GLOBAL      reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_INSTANCE    reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_CLASS       reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_LOCAL       reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_SYSTEM      reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    VAR_CONSTANT    reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    LBRACKET        reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    IDENTIFIER      reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    SUPER           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    LPAREN          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    BEGIN           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    CLASS           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    MODULE          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    DEF             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    ALIAS           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    UNDEF           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    DEFINED_OP      reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    DOUBLE_QUOTED   reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    PRINT           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    PUTS            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    NOT             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    NOT_SYMBOL      reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    FOR             reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    YIELD           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RETRY           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RETURN          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    BREAK           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    NEXT            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    REDO            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    CASE            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    NUMBER          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    THEN            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    WHEN            reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RPAREN          reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    ELSIF           reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    OR_SYMBOL       reduce using rule 41 (hash -> LKEY args_hash RKEY .)
    RKEY            reduce using rule 41 (hash -> LKEY args_hash RKEY .)


state 187

    (42) args_hash -> data HASH_ROCKET . data
    (43) args_hash -> data HASH_ROCKET . data COMMA args_hash
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 239
    variable                       shift and go to state 127

state 188

    (48) method_invocation -> IDENTIFIER DOT IDENTIFIER . LPAREN RPAREN
    (49) method_invocation -> IDENTIFIER DOT IDENTIFIER . LPAREN args_method RPAREN
    (50) method_invocation -> IDENTIFIER DOT IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 240
    EQUAL_SYMBOL    reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    UNLESS          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    AND             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    OR              reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NOTEQUAL        reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    WHILE           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    UNTIL           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DO              reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    LKEY            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    END             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RESCUE          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ENSURE          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ELSE            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DOT             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    STRING          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_CLASS       reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_LOCAL       reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_SYSTEM      reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_CONSTANT    reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    LBRACKET        reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    SUPER           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    BEGIN           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    CLASS           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    MODULE          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DEF             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ALIAS           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    UNDEF           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DEFINED_OP      reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DOUBLE_QUOTED   reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    PRINT           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    PUTS            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NOT             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NOT_SYMBOL      reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    YIELD           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RETRY           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    BREAK           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NEXT            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    REDO            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    CASE            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NUMBER          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    THEN            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    WHEN            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ELSIF           reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    OR_SYMBOL       reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    RKEY            reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)

  ! LPAREN          [ reduce using rule 50 (method_invocation -> IDENTIFIER DOT IDENTIFIER .) ]


state 189

    (38) array_data -> IDENTIFIER LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 241


state 190

    (165) expression_operations -> LPAREN opmate RPAREN .
    (168) expression_operations -> LPAREN opmate RPAREN . op expression_operations
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    IF              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNLESS          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    AND             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OR              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RANGE_INCLUSIVE reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    WHILE           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNTIL           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DO              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LKEY            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    $end            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    END             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RESCUE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ENSURE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ELSE            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DOT             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    STRING          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_GLOBAL      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_INSTANCE    reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CLASS       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_LOCAL       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_SYSTEM      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CONSTANT    reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LBRACKET        reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    IDENTIFIER      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    SUPER           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LPAREN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    BEGIN           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    CLASS           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    MODULE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DEF             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ALIAS           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNDEF           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DEFINED_OP      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DOUBLE_QUOTED   reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PRINT           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PUTS            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NOT             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NOT_SYMBOL      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    FOR             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    YIELD           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RETRY           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RETURN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    BREAK           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NEXT            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    REDO            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    CASE            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NUMBER          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    THEN            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    WHEN            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RPAREN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ELSIF           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OR_SYMBOL       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RKEY            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

  ! PLUS            [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]

    op                             shift and go to state 242

state 191

    (46) super -> SUPER LPAREN RPAREN .

    IF              reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    UNLESS          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    AND             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    OR              reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    WHILE           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    UNTIL           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    DO              reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    LKEY            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    $end            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    END             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RESCUE          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    ENSURE          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    ELSE            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    DOT             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    STRING          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    LBRACKET        reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    SUPER           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    LPAREN          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    BEGIN           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    CLASS           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    MODULE          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    DEF             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    ALIAS           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    UNDEF           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    PRINT           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    PUTS            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    NOT             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    FOR             reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    YIELD           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RETRY           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RETURN          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    BREAK           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    NEXT            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    REDO            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    CASE            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    NUMBER          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    THEN            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    WHEN            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RPAREN          reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    ELSIF           reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 46 (super -> SUPER LPAREN RPAREN .)
    RKEY            reduce using rule 46 (super -> SUPER LPAREN RPAREN .)


state 192

    (47) super -> SUPER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 243


state 193

    (170) opmate -> data op data .

    PLUS            reduce using rule 170 (opmate -> data op data .)
    MINUS           reduce using rule 170 (opmate -> data op data .)
    TIMES           reduce using rule 170 (opmate -> data op data .)
    DIVIDE          reduce using rule 170 (opmate -> data op data .)
    MOD             reduce using rule 170 (opmate -> data op data .)
    EQUAL           reduce using rule 170 (opmate -> data op data .)
    NOTEQUAL        reduce using rule 170 (opmate -> data op data .)
    GREATERTHAN     reduce using rule 170 (opmate -> data op data .)
    GREATERTHANEQUAL reduce using rule 170 (opmate -> data op data .)
    LESSERTHAN      reduce using rule 170 (opmate -> data op data .)
    LESSERTHANEQUAL reduce using rule 170 (opmate -> data op data .)
    IF              reduce using rule 170 (opmate -> data op data .)
    UNLESS          reduce using rule 170 (opmate -> data op data .)
    AND             reduce using rule 170 (opmate -> data op data .)
    OR              reduce using rule 170 (opmate -> data op data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 170 (opmate -> data op data .)
    RANGE_INCLUSIVE reduce using rule 170 (opmate -> data op data .)
    RANGE_EXCLUSIVE reduce using rule 170 (opmate -> data op data .)
    WHILE           reduce using rule 170 (opmate -> data op data .)
    UNTIL           reduce using rule 170 (opmate -> data op data .)
    DO              reduce using rule 170 (opmate -> data op data .)
    LKEY            reduce using rule 170 (opmate -> data op data .)
    $end            reduce using rule 170 (opmate -> data op data .)
    RPAREN          reduce using rule 170 (opmate -> data op data .)
    END             reduce using rule 170 (opmate -> data op data .)
    RESCUE          reduce using rule 170 (opmate -> data op data .)
    ENSURE          reduce using rule 170 (opmate -> data op data .)
    ELSE            reduce using rule 170 (opmate -> data op data .)
    DOT             reduce using rule 170 (opmate -> data op data .)
    STRING          reduce using rule 170 (opmate -> data op data .)
    VAR_GLOBAL      reduce using rule 170 (opmate -> data op data .)
    VAR_INSTANCE    reduce using rule 170 (opmate -> data op data .)
    VAR_CLASS       reduce using rule 170 (opmate -> data op data .)
    VAR_LOCAL       reduce using rule 170 (opmate -> data op data .)
    VAR_SYSTEM      reduce using rule 170 (opmate -> data op data .)
    VAR_CONSTANT    reduce using rule 170 (opmate -> data op data .)
    LBRACKET        reduce using rule 170 (opmate -> data op data .)
    IDENTIFIER      reduce using rule 170 (opmate -> data op data .)
    SUPER           reduce using rule 170 (opmate -> data op data .)
    LPAREN          reduce using rule 170 (opmate -> data op data .)
    BEGIN           reduce using rule 170 (opmate -> data op data .)
    CLASS           reduce using rule 170 (opmate -> data op data .)
    MODULE          reduce using rule 170 (opmate -> data op data .)
    DEF             reduce using rule 170 (opmate -> data op data .)
    ALIAS           reduce using rule 170 (opmate -> data op data .)
    UNDEF           reduce using rule 170 (opmate -> data op data .)
    DEFINED_OP      reduce using rule 170 (opmate -> data op data .)
    DOUBLE_QUOTED   reduce using rule 170 (opmate -> data op data .)
    PRINT           reduce using rule 170 (opmate -> data op data .)
    PUTS            reduce using rule 170 (opmate -> data op data .)
    NOT             reduce using rule 170 (opmate -> data op data .)
    NOT_SYMBOL      reduce using rule 170 (opmate -> data op data .)
    FOR             reduce using rule 170 (opmate -> data op data .)
    YIELD           reduce using rule 170 (opmate -> data op data .)
    RETRY           reduce using rule 170 (opmate -> data op data .)
    RETURN          reduce using rule 170 (opmate -> data op data .)
    BREAK           reduce using rule 170 (opmate -> data op data .)
    NEXT            reduce using rule 170 (opmate -> data op data .)
    REDO            reduce using rule 170 (opmate -> data op data .)
    CASE            reduce using rule 170 (opmate -> data op data .)
    NUMBER          reduce using rule 170 (opmate -> data op data .)
    THEN            reduce using rule 170 (opmate -> data op data .)
    WHEN            reduce using rule 170 (opmate -> data op data .)
    ELSIF           reduce using rule 170 (opmate -> data op data .)
    OR_SYMBOL       reduce using rule 170 (opmate -> data op data .)
    RKEY            reduce using rule 170 (opmate -> data op data .)


state 194

    (54) assignment -> array_data EQUAL_SYMBOL data .

    IF              reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    UNLESS          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    AND             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    OR              reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    NOTEQUAL        reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RANGE_INCLUSIVE reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RANGE_EXCLUSIVE reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    WHILE           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    UNTIL           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    DO              reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    LKEY            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    $end            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    END             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RESCUE          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    ENSURE          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    ELSE            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    DOT             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    STRING          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    SUPER           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    BEGIN           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    CLASS           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    MODULE          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    DEF             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    PRINT           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    PUTS            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    NOT             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    NOT_SYMBOL      reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    FOR             reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    YIELD           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RETRY           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RETURN          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    BREAK           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    NEXT            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    REDO            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    CASE            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    THEN            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    WHEN            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RPAREN          reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    OR_SYMBOL       reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)
    RKEY            reduce using rule 54 (assignment -> array_data EQUAL_SYMBOL data .)


state 195

    (139) begin_expression -> BEGIN expression END .

    IF              reduce using rule 139 (begin_expression -> BEGIN expression END .)
    UNLESS          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    AND             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    OR              reduce using rule 139 (begin_expression -> BEGIN expression END .)
    NOTEQUAL        reduce using rule 139 (begin_expression -> BEGIN expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RANGE_INCLUSIVE reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RANGE_EXCLUSIVE reduce using rule 139 (begin_expression -> BEGIN expression END .)
    WHILE           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    UNTIL           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    DO              reduce using rule 139 (begin_expression -> BEGIN expression END .)
    LKEY            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    $end            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    END             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RESCUE          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    ENSURE          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    ELSE            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    DOT             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    STRING          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_GLOBAL      reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_INSTANCE    reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_CLASS       reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_LOCAL       reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_SYSTEM      reduce using rule 139 (begin_expression -> BEGIN expression END .)
    VAR_CONSTANT    reduce using rule 139 (begin_expression -> BEGIN expression END .)
    LBRACKET        reduce using rule 139 (begin_expression -> BEGIN expression END .)
    IDENTIFIER      reduce using rule 139 (begin_expression -> BEGIN expression END .)
    SUPER           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    LPAREN          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    BEGIN           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    CLASS           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    MODULE          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    DEF             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    ALIAS           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    UNDEF           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    DEFINED_OP      reduce using rule 139 (begin_expression -> BEGIN expression END .)
    DOUBLE_QUOTED   reduce using rule 139 (begin_expression -> BEGIN expression END .)
    PRINT           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    PUTS            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    NOT             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    NOT_SYMBOL      reduce using rule 139 (begin_expression -> BEGIN expression END .)
    FOR             reduce using rule 139 (begin_expression -> BEGIN expression END .)
    YIELD           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RETRY           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RETURN          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    BREAK           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    NEXT            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    REDO            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    CASE            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    NUMBER          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    THEN            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    WHEN            reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RPAREN          reduce using rule 139 (begin_expression -> BEGIN expression END .)
    ELSIF           reduce using rule 139 (begin_expression -> BEGIN expression END .)
    OR_SYMBOL       reduce using rule 139 (begin_expression -> BEGIN expression END .)
    RKEY            reduce using rule 139 (begin_expression -> BEGIN expression END .)


state 196

    (140) begin_expression -> BEGIN expression RESCUE . expression END
    (142) begin_expression -> BEGIN expression RESCUE . expression ENSURE expression END
    (143) begin_expression -> BEGIN expression RESCUE . expression ELSE expression END
    (145) begin_expression -> BEGIN expression RESCUE . expression ELSE expression ENSURE expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 244
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 197

    (141) begin_expression -> BEGIN expression ENSURE . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 245
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 198

    (144) begin_expression -> BEGIN expression ELSE . expression ENSURE expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 246
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 199

    (154) class_definitions -> CLASS IDENTIFIER expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 247
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 200

    (155) class_definitions -> CLASS IDENTIFIER LESSERTHAN . SUPER expression END

    SUPER           shift and go to state 248


state 201

    (156) singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression . expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 249
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 202

    (157) module_definitions -> MODULE IDENTIFIER expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 250
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 203

    (158) method_definitions -> DEF function expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 251
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 204

    (159) singleton_method_definitions -> DEF expression DOT . IDENTIFIER expression END
    (160) singleton_method_definitions -> DEF expression DOT . IDENTIFIER LPAREN args_method RPAREN expression END

    IDENTIFIER      shift and go to state 252


state 205

    (44) function -> IDENTIFIER LPAREN . RPAREN
    (45) function -> IDENTIFIER LPAREN . args_method RPAREN
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 253
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_method                    shift and go to state 254
    data                           shift and go to state 162
    variable                       shift and go to state 127

state 206

    (161) alias -> ALIAS expression expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 161 (alias -> ALIAS expression expression .)
    END             reduce using rule 161 (alias -> ALIAS expression expression .)
    RESCUE          reduce using rule 161 (alias -> ALIAS expression expression .)
    ENSURE          reduce using rule 161 (alias -> ALIAS expression expression .)
    ELSE            reduce using rule 161 (alias -> ALIAS expression expression .)
    DOT             reduce using rule 161 (alias -> ALIAS expression expression .)
    STRING          reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_GLOBAL      reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_INSTANCE    reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_CLASS       reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_LOCAL       reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_SYSTEM      reduce using rule 161 (alias -> ALIAS expression expression .)
    VAR_CONSTANT    reduce using rule 161 (alias -> ALIAS expression expression .)
    LBRACKET        reduce using rule 161 (alias -> ALIAS expression expression .)
    IDENTIFIER      reduce using rule 161 (alias -> ALIAS expression expression .)
    SUPER           reduce using rule 161 (alias -> ALIAS expression expression .)
    LPAREN          reduce using rule 161 (alias -> ALIAS expression expression .)
    BEGIN           reduce using rule 161 (alias -> ALIAS expression expression .)
    CLASS           reduce using rule 161 (alias -> ALIAS expression expression .)
    MODULE          reduce using rule 161 (alias -> ALIAS expression expression .)
    DEF             reduce using rule 161 (alias -> ALIAS expression expression .)
    ALIAS           reduce using rule 161 (alias -> ALIAS expression expression .)
    UNDEF           reduce using rule 161 (alias -> ALIAS expression expression .)
    DEFINED_OP      reduce using rule 161 (alias -> ALIAS expression expression .)
    DOUBLE_QUOTED   reduce using rule 161 (alias -> ALIAS expression expression .)
    PRINT           reduce using rule 161 (alias -> ALIAS expression expression .)
    PUTS            reduce using rule 161 (alias -> ALIAS expression expression .)
    NOT             reduce using rule 161 (alias -> ALIAS expression expression .)
    NOT_SYMBOL      reduce using rule 161 (alias -> ALIAS expression expression .)
    FOR             reduce using rule 161 (alias -> ALIAS expression expression .)
    YIELD           reduce using rule 161 (alias -> ALIAS expression expression .)
    RETRY           reduce using rule 161 (alias -> ALIAS expression expression .)
    RETURN          reduce using rule 161 (alias -> ALIAS expression expression .)
    BREAK           reduce using rule 161 (alias -> ALIAS expression expression .)
    NEXT            reduce using rule 161 (alias -> ALIAS expression expression .)
    REDO            reduce using rule 161 (alias -> ALIAS expression expression .)
    CASE            reduce using rule 161 (alias -> ALIAS expression expression .)
    NUMBER          reduce using rule 161 (alias -> ALIAS expression expression .)
    THEN            reduce using rule 161 (alias -> ALIAS expression expression .)
    WHEN            reduce using rule 161 (alias -> ALIAS expression expression .)
    RPAREN          reduce using rule 161 (alias -> ALIAS expression expression .)
    ELSIF           reduce using rule 161 (alias -> ALIAS expression expression .)
    OR_SYMBOL       reduce using rule 161 (alias -> ALIAS expression expression .)
    RKEY            reduce using rule 161 (alias -> ALIAS expression expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101

  ! IF              [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! UNLESS          [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! AND             [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! OR              [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! NOTEQUAL        [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! WHILE           [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! UNTIL           [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! DO              [ reduce using rule 161 (alias -> ALIAS expression expression .) ]
  ! LKEY            [ reduce using rule 161 (alias -> ALIAS expression expression .) ]


state 207

    (104) if_modifier -> expression IF . expression
    (93) if -> IF . expression expression END
    (94) if -> IF . expression THEN expression END
    (95) if -> IF . expression expression elsif END
    (96) if -> IF . expression THEN expression elsif END
    (97) if -> IF . expression expression else END
    (98) if -> IF . expression THEN expression else END
    (99) if -> IF . expression expression elsif else END
    (100) if -> IF . expression THEN expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 255
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 208

    (108) unless_modifier -> expression UNLESS . expression
    (105) unless -> UNLESS . expression expression END
    (106) unless -> UNLESS . expression THEN expression END
    (107) unless -> UNLESS . expression THEN expression else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 256
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 209

    (129) while_modifier -> expression WHILE . expression
    (127) while -> WHILE . expression expression END
    (128) while -> WHILE . expression DO expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 257
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 210

    (132) until_modifier -> expression UNTIL . expression
    (130) until -> UNTIL . expression DO expression END
    (131) until -> UNTIL . expression expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 258
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 211

    (134) iterator -> expression LKEY . OR_SYMBOL expression OR_SYMBOL expression RKEY
    (41) hash -> LKEY . args_hash RKEY
    (42) args_hash -> . data HASH_ROCKET data
    (43) args_hash -> . data HASH_ROCKET data COMMA args_hash
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    OR_SYMBOL       shift and go to state 175
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_hash                      shift and go to state 128
    data                           shift and go to state 129
    variable                       shift and go to state 127

state 212

    (28) string_concat -> DOUBLE_QUOTED IDENTIFIER concat . DOUBLE_QUOTED
    (29) string_concat -> DOUBLE_QUOTED IDENTIFIER concat . IDENTIFIER DOUBLE_QUOTED

    DOUBLE_QUOTED   shift and go to state 259
    IDENTIFIER      shift and go to state 260


state 213

    (30) concat -> NUMBER_SIGN . LKEY IDENTIFIER RKEY

    LKEY            shift and go to state 261


state 214

    (34) print -> PRINT LPAREN expression . RPAREN
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    RPAREN          shift and go to state 262
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 215

    (165) expression_operations -> LPAREN opmate . RPAREN
    (168) expression_operations -> LPAREN opmate . RPAREN op expression_operations
    (164) expression_operations -> opmate .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 190
    PLUS            reduce using rule 164 (expression_operations -> opmate .)
    MINUS           reduce using rule 164 (expression_operations -> opmate .)
    TIMES           reduce using rule 164 (expression_operations -> opmate .)
    DIVIDE          reduce using rule 164 (expression_operations -> opmate .)
    MOD             reduce using rule 164 (expression_operations -> opmate .)
    EQUAL           reduce using rule 164 (expression_operations -> opmate .)
    NOTEQUAL        reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHAN     reduce using rule 164 (expression_operations -> opmate .)
    GREATERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHAN      reduce using rule 164 (expression_operations -> opmate .)
    LESSERTHANEQUAL reduce using rule 164 (expression_operations -> opmate .)
    IF              reduce using rule 164 (expression_operations -> opmate .)
    UNLESS          reduce using rule 164 (expression_operations -> opmate .)
    AND             reduce using rule 164 (expression_operations -> opmate .)
    OR              reduce using rule 164 (expression_operations -> opmate .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 164 (expression_operations -> opmate .)
    RANGE_INCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    RANGE_EXCLUSIVE reduce using rule 164 (expression_operations -> opmate .)
    WHILE           reduce using rule 164 (expression_operations -> opmate .)
    UNTIL           reduce using rule 164 (expression_operations -> opmate .)
    DO              reduce using rule 164 (expression_operations -> opmate .)
    LKEY            reduce using rule 164 (expression_operations -> opmate .)

  ! RPAREN          [ reduce using rule 164 (expression_operations -> opmate .) ]


state 216

    (4) expression -> variable .
    (53) assignment -> variable . EQUAL_SYMBOL data
    (184) data -> variable .
    (58) self_assigment -> variable . op_assigment data
    (66) list_var -> variable . COMMA
    (67) list_var -> variable . COMMA list_var
    (68) list_var -> variable .
    (59) op_assigment -> . PLUS_EQUAL
    (60) op_assigment -> . MINUS_EQUAL
    (61) op_assigment -> . TIMES_EQUAL
    (62) op_assigment -> . DIVIDE_EQUAL
    (63) op_assigment -> . MOD_EQUAL
    (64) op_assigment -> . POW_EQUAL

  ! reduce/reduce conflict for NOTEQUAL resolved using rule 4 (expression -> variable .)
  ! shift/reduce conflict for EQUAL_SYMBOL resolved as shift
    RPAREN          reduce using rule 4 (expression -> variable .)
    IF              reduce using rule 4 (expression -> variable .)
    UNLESS          reduce using rule 4 (expression -> variable .)
    AND             reduce using rule 4 (expression -> variable .)
    OR              reduce using rule 4 (expression -> variable .)
    NOTEQUAL        reduce using rule 4 (expression -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 4 (expression -> variable .)
    RANGE_INCLUSIVE reduce using rule 4 (expression -> variable .)
    RANGE_EXCLUSIVE reduce using rule 4 (expression -> variable .)
    WHILE           reduce using rule 4 (expression -> variable .)
    UNTIL           reduce using rule 4 (expression -> variable .)
    DO              reduce using rule 4 (expression -> variable .)
    LKEY            reduce using rule 4 (expression -> variable .)
    EQUAL_SYMBOL    shift and go to state 102
    PLUS            reduce using rule 184 (data -> variable .)
    MINUS           reduce using rule 184 (data -> variable .)
    TIMES           reduce using rule 184 (data -> variable .)
    DIVIDE          reduce using rule 184 (data -> variable .)
    MOD             reduce using rule 184 (data -> variable .)
    EQUAL           reduce using rule 184 (data -> variable .)
    GREATERTHAN     reduce using rule 184 (data -> variable .)
    GREATERTHANEQUAL reduce using rule 184 (data -> variable .)
    LESSERTHAN      reduce using rule 184 (data -> variable .)
    LESSERTHANEQUAL reduce using rule 184 (data -> variable .)
    COMMA           shift and go to state 104
    PLUS_EQUAL      shift and go to state 105
    MINUS_EQUAL     shift and go to state 106
    TIMES_EQUAL     shift and go to state 107
    DIVIDE_EQUAL    shift and go to state 108
    MOD_EQUAL       shift and go to state 109
    POW_EQUAL       shift and go to state 110

  ! NOTEQUAL        [ reduce using rule 184 (data -> variable .) ]
  ! EQUAL_SYMBOL    [ reduce using rule 68 (list_var -> variable .) ]

    op_assigment                   shift and go to state 103

state 217

    (36) puts -> PUTS LPAREN expression . RPAREN
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    RPAREN          shift and go to state 263
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 218

    (65) mult_assigment -> list_var EQUAL_SYMBOL args_method .

    IF              reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    UNLESS          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    AND             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    OR              reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NOTEQUAL        reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RANGE_INCLUSIVE reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RANGE_EXCLUSIVE reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    WHILE           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    UNTIL           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DO              reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LKEY            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    $end            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    END             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RESCUE          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ENSURE          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ELSE            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DOT             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    STRING          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_GLOBAL      reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_INSTANCE    reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_CLASS       reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_LOCAL       reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_SYSTEM      reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_CONSTANT    reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LBRACKET        reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    IDENTIFIER      reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    SUPER           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LPAREN          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    BEGIN           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    CLASS           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    MODULE          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DEF             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ALIAS           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    UNDEF           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DEFINED_OP      reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DOUBLE_QUOTED   reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    PRINT           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    PUTS            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NOT             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NOT_SYMBOL      reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    FOR             reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    YIELD           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RETRY           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RETURN          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    BREAK           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NEXT            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    REDO            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    CASE            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NUMBER          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    THEN            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    WHEN            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RPAREN          reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ELSIF           reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    OR_SYMBOL       reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    RKEY            reduce using rule 65 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)


state 219

    (93) if -> IF expression expression . END
    (95) if -> IF expression expression . elsif END
    (97) if -> IF expression expression . else END
    (99) if -> IF expression expression . elsif else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (101) elsif -> . ELSIF expression expression END
    (102) elsif -> . ELSIF expression THEN expression END
    (103) else -> . ELSE expression

    END             shift and go to state 264
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    ELSIF           shift and go to state 267
    ELSE            shift and go to state 234

    elsif                          shift and go to state 265
    else                           shift and go to state 266

state 220

    (94) if -> IF expression THEN . expression END
    (96) if -> IF expression THEN . expression elsif END
    (98) if -> IF expression THEN . expression else END
    (100) if -> IF expression THEN . expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 268
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 221

    (105) unless -> UNLESS expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 269
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 222

    (106) unless -> UNLESS expression THEN . expression END
    (107) unless -> UNLESS expression THEN . expression else END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 270
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 223

    (127) while -> WHILE expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 271
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 224

    (128) while -> WHILE expression DO . expression END
    (133) iterator -> expression DO . OR_SYMBOL expression OR_SYMBOL expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    OR_SYMBOL       shift and go to state 174
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 272
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 225

    (131) until -> UNTIL expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 273
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 226

    (130) until -> UNTIL expression DO . expression END
    (133) iterator -> expression DO . OR_SYMBOL expression OR_SYMBOL expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    OR_SYMBOL       shift and go to state 174
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 274
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 227

    (135) for -> FOR IDENTIFIER IN . expression DO expression END
    (136) for -> FOR IDENTIFIER IN . expression expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 275
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 228

    (137) yield -> YIELD LPAREN expression . RPAREN
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    RPAREN          shift and go to state 276
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 229

    (52) args_method -> data COMMA . args_method
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 162
    args_method                    shift and go to state 277
    variable                       shift and go to state 127

state 230

    (109) case -> CASE expression END .

    IF              reduce using rule 109 (case -> CASE expression END .)
    UNLESS          reduce using rule 109 (case -> CASE expression END .)
    AND             reduce using rule 109 (case -> CASE expression END .)
    OR              reduce using rule 109 (case -> CASE expression END .)
    NOTEQUAL        reduce using rule 109 (case -> CASE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 109 (case -> CASE expression END .)
    RANGE_INCLUSIVE reduce using rule 109 (case -> CASE expression END .)
    RANGE_EXCLUSIVE reduce using rule 109 (case -> CASE expression END .)
    WHILE           reduce using rule 109 (case -> CASE expression END .)
    UNTIL           reduce using rule 109 (case -> CASE expression END .)
    DO              reduce using rule 109 (case -> CASE expression END .)
    LKEY            reduce using rule 109 (case -> CASE expression END .)
    $end            reduce using rule 109 (case -> CASE expression END .)
    END             reduce using rule 109 (case -> CASE expression END .)
    RESCUE          reduce using rule 109 (case -> CASE expression END .)
    ENSURE          reduce using rule 109 (case -> CASE expression END .)
    ELSE            reduce using rule 109 (case -> CASE expression END .)
    DOT             reduce using rule 109 (case -> CASE expression END .)
    STRING          reduce using rule 109 (case -> CASE expression END .)
    VAR_GLOBAL      reduce using rule 109 (case -> CASE expression END .)
    VAR_INSTANCE    reduce using rule 109 (case -> CASE expression END .)
    VAR_CLASS       reduce using rule 109 (case -> CASE expression END .)
    VAR_LOCAL       reduce using rule 109 (case -> CASE expression END .)
    VAR_SYSTEM      reduce using rule 109 (case -> CASE expression END .)
    VAR_CONSTANT    reduce using rule 109 (case -> CASE expression END .)
    LBRACKET        reduce using rule 109 (case -> CASE expression END .)
    IDENTIFIER      reduce using rule 109 (case -> CASE expression END .)
    SUPER           reduce using rule 109 (case -> CASE expression END .)
    LPAREN          reduce using rule 109 (case -> CASE expression END .)
    BEGIN           reduce using rule 109 (case -> CASE expression END .)
    CLASS           reduce using rule 109 (case -> CASE expression END .)
    MODULE          reduce using rule 109 (case -> CASE expression END .)
    DEF             reduce using rule 109 (case -> CASE expression END .)
    ALIAS           reduce using rule 109 (case -> CASE expression END .)
    UNDEF           reduce using rule 109 (case -> CASE expression END .)
    DEFINED_OP      reduce using rule 109 (case -> CASE expression END .)
    DOUBLE_QUOTED   reduce using rule 109 (case -> CASE expression END .)
    PRINT           reduce using rule 109 (case -> CASE expression END .)
    PUTS            reduce using rule 109 (case -> CASE expression END .)
    NOT             reduce using rule 109 (case -> CASE expression END .)
    NOT_SYMBOL      reduce using rule 109 (case -> CASE expression END .)
    FOR             reduce using rule 109 (case -> CASE expression END .)
    YIELD           reduce using rule 109 (case -> CASE expression END .)
    RETRY           reduce using rule 109 (case -> CASE expression END .)
    RETURN          reduce using rule 109 (case -> CASE expression END .)
    BREAK           reduce using rule 109 (case -> CASE expression END .)
    NEXT            reduce using rule 109 (case -> CASE expression END .)
    REDO            reduce using rule 109 (case -> CASE expression END .)
    CASE            reduce using rule 109 (case -> CASE expression END .)
    NUMBER          reduce using rule 109 (case -> CASE expression END .)
    THEN            reduce using rule 109 (case -> CASE expression END .)
    WHEN            reduce using rule 109 (case -> CASE expression END .)
    RPAREN          reduce using rule 109 (case -> CASE expression END .)
    ELSIF           reduce using rule 109 (case -> CASE expression END .)
    OR_SYMBOL       reduce using rule 109 (case -> CASE expression END .)
    RKEY            reduce using rule 109 (case -> CASE expression END .)


state 231

    (110) case -> CASE expression when . END
    (112) case -> CASE expression when . else END
    (103) else -> . ELSE expression

    END             shift and go to state 278
    ELSE            shift and go to state 234

    else                           shift and go to state 279

state 232

    (111) case -> CASE expression else . END

    END             shift and go to state 280


state 233

    (113) when -> WHEN . it_expression THEN expression
    (114) when -> WHEN . it_expression THEN expression when
    (115) when -> WHEN . it_expression expression
    (116) when -> WHEN . it_expression expression when
    (117) it_expression -> . expression
    (118) it_expression -> . expression it_expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    it_expression                  shift and go to state 281
    expression                     shift and go to state 282
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 234

    (103) else -> ELSE . expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 283
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 235

    (133) iterator -> expression DO OR_SYMBOL expression . OR_SYMBOL expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    OR_SYMBOL       shift and go to state 284
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 236

    (134) iterator -> expression LKEY OR_SYMBOL expression . OR_SYMBOL expression RKEY
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    OR_SYMBOL       shift and go to state 285
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 237

    (169) expression_operations -> expression_operations op LPAREN opmate . RPAREN
    (165) expression_operations -> LPAREN opmate . RPAREN
    (168) expression_operations -> LPAREN opmate . RPAREN op expression_operations

    RPAREN          shift and go to state 286


state 238

    (40) args_array -> data COMMA args_array .

    RBRACKET        reduce using rule 40 (args_array -> data COMMA args_array .)


state 239

    (42) args_hash -> data HASH_ROCKET data .
    (43) args_hash -> data HASH_ROCKET data . COMMA args_hash

    RKEY            reduce using rule 42 (args_hash -> data HASH_ROCKET data .)
    COMMA           shift and go to state 287


state 240

    (48) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN . RPAREN
    (49) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN . args_method RPAREN
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 288
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_method                    shift and go to state 289
    data                           shift and go to state 162
    variable                       shift and go to state 127

state 241

    (38) array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET .

    EQUAL_SYMBOL    reduce using rule 38 (array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET .)


state 242

    (168) expression_operations -> LPAREN opmate RPAREN op . expression_operations
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (170) opmate -> . data op data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    opmate                         shift and go to state 40
    expression_operations          shift and go to state 290
    data                           shift and go to state 36
    variable                       shift and go to state 127

state 243

    (47) super -> SUPER LPAREN args_method RPAREN .

    IF              reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    UNLESS          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    AND             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    OR              reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    NOTEQUAL        reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RANGE_INCLUSIVE reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    WHILE           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    UNTIL           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    DO              reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    $end            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    END             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RESCUE          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    ENSURE          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    ELSE            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    DOT             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    STRING          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    BEGIN           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    DEF             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    PRINT           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    PUTS            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    NOT             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    NOT_SYMBOL      reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    FOR             reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    YIELD           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RETRY           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RETURN          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    BREAK           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    NEXT            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    REDO            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    CASE            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    THEN            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    WHEN            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RPAREN          reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    ELSIF           reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    OR_SYMBOL       reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)
    RKEY            reduce using rule 47 (super -> SUPER LPAREN args_method RPAREN .)


state 244

    (140) begin_expression -> BEGIN expression RESCUE expression . END
    (142) begin_expression -> BEGIN expression RESCUE expression . ENSURE expression END
    (143) begin_expression -> BEGIN expression RESCUE expression . ELSE expression END
    (145) begin_expression -> BEGIN expression RESCUE expression . ELSE expression ENSURE expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 291
    ENSURE          shift and go to state 292
    ELSE            shift and go to state 293
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 245

    (141) begin_expression -> BEGIN expression ENSURE expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 294
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 246

    (144) begin_expression -> BEGIN expression ELSE expression . ENSURE expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    ENSURE          shift and go to state 295
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 247

    (154) class_definitions -> CLASS IDENTIFIER expression END .

    IF              reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    UNLESS          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    AND             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    OR              reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    NOTEQUAL        reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RANGE_INCLUSIVE reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RANGE_EXCLUSIVE reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    WHILE           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    UNTIL           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    DO              reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    LKEY            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    $end            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    END             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RESCUE          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    ENSURE          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    ELSE            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    DOT             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    STRING          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    LBRACKET        reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    SUPER           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    LPAREN          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    BEGIN           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    CLASS           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    MODULE          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    DEF             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    ALIAS           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    UNDEF           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    PRINT           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    PUTS            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    NOT             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    NOT_SYMBOL      reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    FOR             reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    YIELD           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RETRY           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RETURN          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    BREAK           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    NEXT            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    REDO            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    CASE            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    NUMBER          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    THEN            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    WHEN            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RPAREN          reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    ELSIF           reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    OR_SYMBOL       reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)
    RKEY            reduce using rule 154 (class_definitions -> CLASS IDENTIFIER expression END .)


state 248

    (155) class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 296
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 249

    (156) singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 297
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 250

    (157) module_definitions -> MODULE IDENTIFIER expression END .

    IF              reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    UNLESS          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    AND             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    OR              reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    NOTEQUAL        reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RANGE_INCLUSIVE reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RANGE_EXCLUSIVE reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    WHILE           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    UNTIL           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    DO              reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    LKEY            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    $end            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    END             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RESCUE          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    ENSURE          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    ELSE            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    DOT             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    STRING          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    LBRACKET        reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    SUPER           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    LPAREN          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    BEGIN           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    CLASS           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    MODULE          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    DEF             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    ALIAS           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    UNDEF           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    PRINT           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    PUTS            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    NOT             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    NOT_SYMBOL      reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    FOR             reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    YIELD           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RETRY           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RETURN          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    BREAK           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    NEXT            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    REDO            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    CASE            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    NUMBER          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    THEN            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    WHEN            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RPAREN          reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    ELSIF           reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    OR_SYMBOL       reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)
    RKEY            reduce using rule 157 (module_definitions -> MODULE IDENTIFIER expression END .)


state 251

    (158) method_definitions -> DEF function expression END .

    IF              reduce using rule 158 (method_definitions -> DEF function expression END .)
    UNLESS          reduce using rule 158 (method_definitions -> DEF function expression END .)
    AND             reduce using rule 158 (method_definitions -> DEF function expression END .)
    OR              reduce using rule 158 (method_definitions -> DEF function expression END .)
    NOTEQUAL        reduce using rule 158 (method_definitions -> DEF function expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 158 (method_definitions -> DEF function expression END .)
    RANGE_INCLUSIVE reduce using rule 158 (method_definitions -> DEF function expression END .)
    RANGE_EXCLUSIVE reduce using rule 158 (method_definitions -> DEF function expression END .)
    WHILE           reduce using rule 158 (method_definitions -> DEF function expression END .)
    UNTIL           reduce using rule 158 (method_definitions -> DEF function expression END .)
    DO              reduce using rule 158 (method_definitions -> DEF function expression END .)
    LKEY            reduce using rule 158 (method_definitions -> DEF function expression END .)
    $end            reduce using rule 158 (method_definitions -> DEF function expression END .)
    END             reduce using rule 158 (method_definitions -> DEF function expression END .)
    RESCUE          reduce using rule 158 (method_definitions -> DEF function expression END .)
    ENSURE          reduce using rule 158 (method_definitions -> DEF function expression END .)
    ELSE            reduce using rule 158 (method_definitions -> DEF function expression END .)
    DOT             reduce using rule 158 (method_definitions -> DEF function expression END .)
    STRING          reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_GLOBAL      reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_INSTANCE    reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_CLASS       reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_LOCAL       reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_SYSTEM      reduce using rule 158 (method_definitions -> DEF function expression END .)
    VAR_CONSTANT    reduce using rule 158 (method_definitions -> DEF function expression END .)
    LBRACKET        reduce using rule 158 (method_definitions -> DEF function expression END .)
    IDENTIFIER      reduce using rule 158 (method_definitions -> DEF function expression END .)
    SUPER           reduce using rule 158 (method_definitions -> DEF function expression END .)
    LPAREN          reduce using rule 158 (method_definitions -> DEF function expression END .)
    BEGIN           reduce using rule 158 (method_definitions -> DEF function expression END .)
    CLASS           reduce using rule 158 (method_definitions -> DEF function expression END .)
    MODULE          reduce using rule 158 (method_definitions -> DEF function expression END .)
    DEF             reduce using rule 158 (method_definitions -> DEF function expression END .)
    ALIAS           reduce using rule 158 (method_definitions -> DEF function expression END .)
    UNDEF           reduce using rule 158 (method_definitions -> DEF function expression END .)
    DEFINED_OP      reduce using rule 158 (method_definitions -> DEF function expression END .)
    DOUBLE_QUOTED   reduce using rule 158 (method_definitions -> DEF function expression END .)
    PRINT           reduce using rule 158 (method_definitions -> DEF function expression END .)
    PUTS            reduce using rule 158 (method_definitions -> DEF function expression END .)
    NOT             reduce using rule 158 (method_definitions -> DEF function expression END .)
    NOT_SYMBOL      reduce using rule 158 (method_definitions -> DEF function expression END .)
    FOR             reduce using rule 158 (method_definitions -> DEF function expression END .)
    YIELD           reduce using rule 158 (method_definitions -> DEF function expression END .)
    RETRY           reduce using rule 158 (method_definitions -> DEF function expression END .)
    RETURN          reduce using rule 158 (method_definitions -> DEF function expression END .)
    BREAK           reduce using rule 158 (method_definitions -> DEF function expression END .)
    NEXT            reduce using rule 158 (method_definitions -> DEF function expression END .)
    REDO            reduce using rule 158 (method_definitions -> DEF function expression END .)
    CASE            reduce using rule 158 (method_definitions -> DEF function expression END .)
    NUMBER          reduce using rule 158 (method_definitions -> DEF function expression END .)
    THEN            reduce using rule 158 (method_definitions -> DEF function expression END .)
    WHEN            reduce using rule 158 (method_definitions -> DEF function expression END .)
    RPAREN          reduce using rule 158 (method_definitions -> DEF function expression END .)
    ELSIF           reduce using rule 158 (method_definitions -> DEF function expression END .)
    OR_SYMBOL       reduce using rule 158 (method_definitions -> DEF function expression END .)
    RKEY            reduce using rule 158 (method_definitions -> DEF function expression END .)


state 252

    (159) singleton_method_definitions -> DEF expression DOT IDENTIFIER . expression END
    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER . LPAREN args_method RPAREN expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    LPAREN          shift and go to state 299
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 298
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 253

    (44) function -> IDENTIFIER LPAREN RPAREN .

    STRING          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    LBRACKET        reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    LKEY            reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    SUPER           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    BEGIN           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    END             reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    CLASS           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    MODULE          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    DEF             reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    ALIAS           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    UNDEF           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    PRINT           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    PUTS            reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    UNLESS          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    NOT             reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    WHILE           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    UNTIL           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    FOR             reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    YIELD           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    RETRY           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    RETURN          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    BREAK           reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    NEXT            reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    REDO            reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    CASE            reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 44 (function -> IDENTIFIER LPAREN RPAREN .)


state 254

    (45) function -> IDENTIFIER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 300


state 255

    (104) if_modifier -> expression IF expression .
    (93) if -> IF expression . expression END
    (94) if -> IF expression . THEN expression END
    (95) if -> IF expression . expression elsif END
    (96) if -> IF expression . THEN expression elsif END
    (97) if -> IF expression . expression else END
    (98) if -> IF expression . THEN expression else END
    (99) if -> IF expression . expression elsif else END
    (100) if -> IF expression . THEN expression elsif else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 104 (if_modifier -> expression IF expression .)
    RESCUE          reduce using rule 104 (if_modifier -> expression IF expression .)
    ENSURE          reduce using rule 104 (if_modifier -> expression IF expression .)
    ELSE            reduce using rule 104 (if_modifier -> expression IF expression .)
    DOT             reduce using rule 104 (if_modifier -> expression IF expression .)
    WHEN            reduce using rule 104 (if_modifier -> expression IF expression .)
    RPAREN          reduce using rule 104 (if_modifier -> expression IF expression .)
    ELSIF           reduce using rule 104 (if_modifier -> expression IF expression .)
    OR_SYMBOL       reduce using rule 104 (if_modifier -> expression IF expression .)
    RKEY            reduce using rule 104 (if_modifier -> expression IF expression .)
    THEN            shift and go to state 220
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! IF              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! UNLESS          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! AND             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! OR              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NOTEQUAL        [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! WHILE           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! UNTIL           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! DO              [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! LKEY            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! STRING          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_GLOBAL      [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_INSTANCE    [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_CLASS       [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_LOCAL       [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_SYSTEM      [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! VAR_CONSTANT    [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! LBRACKET        [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! IDENTIFIER      [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! SUPER           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! LPAREN          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! BEGIN           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! END             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! CLASS           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! MODULE          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! DEF             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! ALIAS           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! UNDEF           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! DEFINED_OP      [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! PRINT           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! PUTS            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NOT             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NOT_SYMBOL      [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! FOR             [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! YIELD           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RETRY           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! RETURN          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! BREAK           [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NEXT            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! REDO            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! CASE            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! NUMBER          [ reduce using rule 104 (if_modifier -> expression IF expression .) ]
  ! THEN            [ reduce using rule 104 (if_modifier -> expression IF expression .) ]

    expression                     shift and go to state 219
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 256

    (108) unless_modifier -> expression UNLESS expression .
    (105) unless -> UNLESS expression . expression END
    (106) unless -> UNLESS expression . THEN expression END
    (107) unless -> UNLESS expression . THEN expression else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RESCUE          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ENSURE          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ELSE            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    DOT             reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    WHEN            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RPAREN          reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    ELSIF           reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    OR_SYMBOL       reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    RKEY            reduce using rule 108 (unless_modifier -> expression UNLESS expression .)
    THEN            shift and go to state 222
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! IF              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! UNLESS          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! AND             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! OR              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NOTEQUAL        [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! WHILE           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! UNTIL           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! DO              [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! LKEY            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! STRING          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_GLOBAL      [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_INSTANCE    [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_CLASS       [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_LOCAL       [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_SYSTEM      [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! VAR_CONSTANT    [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! LBRACKET        [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! IDENTIFIER      [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! SUPER           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! LPAREN          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! BEGIN           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! END             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! CLASS           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! MODULE          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! DEF             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! ALIAS           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! UNDEF           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! DEFINED_OP      [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! PRINT           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! PUTS            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NOT             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NOT_SYMBOL      [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! FOR             [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! YIELD           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RETRY           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! RETURN          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! BREAK           [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NEXT            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! REDO            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! CASE            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! NUMBER          [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]
  ! THEN            [ reduce using rule 108 (unless_modifier -> expression UNLESS expression .) ]

    expression                     shift and go to state 221
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 257

    (129) while_modifier -> expression WHILE expression .
    (127) while -> WHILE expression . expression END
    (128) while -> WHILE expression . DO expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    THEN            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    $end            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RESCUE          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ENSURE          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ELSE            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DOT             reduce using rule 129 (while_modifier -> expression WHILE expression .)
    WHEN            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RPAREN          reduce using rule 129 (while_modifier -> expression WHILE expression .)
    ELSIF           reduce using rule 129 (while_modifier -> expression WHILE expression .)
    OR_SYMBOL       reduce using rule 129 (while_modifier -> expression WHILE expression .)
    RKEY            reduce using rule 129 (while_modifier -> expression WHILE expression .)
    DO              shift and go to state 224
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! IF              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! UNLESS          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! AND             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! OR              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NOTEQUAL        [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! WHILE           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! UNTIL           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! DO              [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! LKEY            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! STRING          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_GLOBAL      [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_INSTANCE    [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_CLASS       [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_LOCAL       [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_SYSTEM      [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! VAR_CONSTANT    [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! LBRACKET        [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! IDENTIFIER      [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! SUPER           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! LPAREN          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! BEGIN           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! END             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! CLASS           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! MODULE          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! DEF             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! ALIAS           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! UNDEF           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! DEFINED_OP      [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! PRINT           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! PUTS            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NOT             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NOT_SYMBOL      [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! FOR             [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! YIELD           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RETRY           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! RETURN          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! BREAK           [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NEXT            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! REDO            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! CASE            [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]
  ! NUMBER          [ reduce using rule 129 (while_modifier -> expression WHILE expression .) ]

    expression                     shift and go to state 223
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 258

    (132) until_modifier -> expression UNTIL expression .
    (130) until -> UNTIL expression . DO expression END
    (131) until -> UNTIL expression . expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    THEN            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    $end            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RESCUE          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ENSURE          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ELSE            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DOT             reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    WHEN            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RPAREN          reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    ELSIF           reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    OR_SYMBOL       reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    RKEY            reduce using rule 132 (until_modifier -> expression UNTIL expression .)
    DO              shift and go to state 226
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! IF              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! UNLESS          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! AND             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! OR              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NOTEQUAL        [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! WHILE           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! UNTIL           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! DO              [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! LKEY            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! STRING          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_GLOBAL      [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_INSTANCE    [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_CLASS       [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_LOCAL       [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_SYSTEM      [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! VAR_CONSTANT    [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! LBRACKET        [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! IDENTIFIER      [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! SUPER           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! LPAREN          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! BEGIN           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! END             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! CLASS           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! MODULE          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! DEF             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! ALIAS           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! UNDEF           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! DEFINED_OP      [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! PRINT           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! PUTS            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NOT             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NOT_SYMBOL      [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! FOR             [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! YIELD           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RETRY           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! RETURN          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! BREAK           [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NEXT            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! REDO            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! CASE            [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]
  ! NUMBER          [ reduce using rule 132 (until_modifier -> expression UNTIL expression .) ]

    expression                     shift and go to state 225
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 259

    (28) string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .

    IF              reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    UNLESS          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    AND             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    OR              reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NOTEQUAL        reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RANGE_INCLUSIVE reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RANGE_EXCLUSIVE reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    WHILE           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    UNTIL           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DO              reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LKEY            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    $end            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    END             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RESCUE          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ENSURE          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ELSE            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DOT             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    STRING          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_GLOBAL      reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_INSTANCE    reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_CLASS       reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_LOCAL       reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_SYSTEM      reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_CONSTANT    reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LBRACKET        reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    IDENTIFIER      reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    SUPER           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LPAREN          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    BEGIN           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    CLASS           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    MODULE          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DEF             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ALIAS           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    UNDEF           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DEFINED_OP      reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DOUBLE_QUOTED   reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    PRINT           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    PUTS            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NOT             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NOT_SYMBOL      reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    FOR             reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    YIELD           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RETRY           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RETURN          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    BREAK           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NEXT            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    REDO            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    CASE            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NUMBER          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    THEN            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    WHEN            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RPAREN          reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ELSIF           reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    OR_SYMBOL       reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    RKEY            reduce using rule 28 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)


state 260

    (29) string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER . DOUBLE_QUOTED

    DOUBLE_QUOTED   shift and go to state 301


state 261

    (30) concat -> NUMBER_SIGN LKEY . IDENTIFIER RKEY

    IDENTIFIER      shift and go to state 302


state 262

    (34) print -> PRINT LPAREN expression RPAREN .

    IF              reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    UNLESS          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    AND             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    OR              reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RANGE_INCLUSIVE reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    UNTIL           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    DO              reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    LKEY            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    END             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RESCUE          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    ENSURE          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    DOT             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    STRING          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_GLOBAL      reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_INSTANCE    reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_CLASS       reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_LOCAL       reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_SYSTEM      reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    VAR_CONSTANT    reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    SUPER           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    BEGIN           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    CLASS           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    MODULE          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    DEF             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    ALIAS           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    UNDEF           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    DEFINED_OP      reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    DOUBLE_QUOTED   reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    PUTS            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    NOT             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    NOT_SYMBOL      reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    YIELD           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RETRY           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    BREAK           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    NEXT            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    REDO            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    CASE            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    NUMBER          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    THEN            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    WHEN            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    ELSIF           reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    OR_SYMBOL       reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)
    RKEY            reduce using rule 34 (print -> PRINT LPAREN expression RPAREN .)


state 263

    (36) puts -> PUTS LPAREN expression RPAREN .

    IF              reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    UNLESS          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    AND             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    OR              reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RANGE_INCLUSIVE reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    UNTIL           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    DO              reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    LKEY            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    $end            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    END             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RESCUE          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    ENSURE          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    ELSE            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    DOT             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    STRING          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_GLOBAL      reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_INSTANCE    reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_CLASS       reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_LOCAL       reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_SYSTEM      reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    VAR_CONSTANT    reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    SUPER           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    LPAREN          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    BEGIN           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    CLASS           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    MODULE          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    DEF             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    ALIAS           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    UNDEF           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    DEFINED_OP      reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    DOUBLE_QUOTED   reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    PRINT           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    PUTS            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    NOT             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    NOT_SYMBOL      reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    FOR             reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    YIELD           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RETRY           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RETURN          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    BREAK           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    NEXT            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    REDO            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    CASE            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    NUMBER          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    THEN            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    WHEN            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    ELSIF           reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    OR_SYMBOL       reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)
    RKEY            reduce using rule 36 (puts -> PUTS LPAREN expression RPAREN .)


state 264

    (93) if -> IF expression expression END .

    IF              reduce using rule 93 (if -> IF expression expression END .)
    UNLESS          reduce using rule 93 (if -> IF expression expression END .)
    AND             reduce using rule 93 (if -> IF expression expression END .)
    OR              reduce using rule 93 (if -> IF expression expression END .)
    NOTEQUAL        reduce using rule 93 (if -> IF expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 93 (if -> IF expression expression END .)
    RANGE_INCLUSIVE reduce using rule 93 (if -> IF expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 93 (if -> IF expression expression END .)
    WHILE           reduce using rule 93 (if -> IF expression expression END .)
    UNTIL           reduce using rule 93 (if -> IF expression expression END .)
    DO              reduce using rule 93 (if -> IF expression expression END .)
    LKEY            reduce using rule 93 (if -> IF expression expression END .)
    $end            reduce using rule 93 (if -> IF expression expression END .)
    END             reduce using rule 93 (if -> IF expression expression END .)
    RESCUE          reduce using rule 93 (if -> IF expression expression END .)
    ENSURE          reduce using rule 93 (if -> IF expression expression END .)
    ELSE            reduce using rule 93 (if -> IF expression expression END .)
    DOT             reduce using rule 93 (if -> IF expression expression END .)
    STRING          reduce using rule 93 (if -> IF expression expression END .)
    VAR_GLOBAL      reduce using rule 93 (if -> IF expression expression END .)
    VAR_INSTANCE    reduce using rule 93 (if -> IF expression expression END .)
    VAR_CLASS       reduce using rule 93 (if -> IF expression expression END .)
    VAR_LOCAL       reduce using rule 93 (if -> IF expression expression END .)
    VAR_SYSTEM      reduce using rule 93 (if -> IF expression expression END .)
    VAR_CONSTANT    reduce using rule 93 (if -> IF expression expression END .)
    LBRACKET        reduce using rule 93 (if -> IF expression expression END .)
    IDENTIFIER      reduce using rule 93 (if -> IF expression expression END .)
    SUPER           reduce using rule 93 (if -> IF expression expression END .)
    LPAREN          reduce using rule 93 (if -> IF expression expression END .)
    BEGIN           reduce using rule 93 (if -> IF expression expression END .)
    CLASS           reduce using rule 93 (if -> IF expression expression END .)
    MODULE          reduce using rule 93 (if -> IF expression expression END .)
    DEF             reduce using rule 93 (if -> IF expression expression END .)
    ALIAS           reduce using rule 93 (if -> IF expression expression END .)
    UNDEF           reduce using rule 93 (if -> IF expression expression END .)
    DEFINED_OP      reduce using rule 93 (if -> IF expression expression END .)
    DOUBLE_QUOTED   reduce using rule 93 (if -> IF expression expression END .)
    PRINT           reduce using rule 93 (if -> IF expression expression END .)
    PUTS            reduce using rule 93 (if -> IF expression expression END .)
    NOT             reduce using rule 93 (if -> IF expression expression END .)
    NOT_SYMBOL      reduce using rule 93 (if -> IF expression expression END .)
    FOR             reduce using rule 93 (if -> IF expression expression END .)
    YIELD           reduce using rule 93 (if -> IF expression expression END .)
    RETRY           reduce using rule 93 (if -> IF expression expression END .)
    RETURN          reduce using rule 93 (if -> IF expression expression END .)
    BREAK           reduce using rule 93 (if -> IF expression expression END .)
    NEXT            reduce using rule 93 (if -> IF expression expression END .)
    REDO            reduce using rule 93 (if -> IF expression expression END .)
    CASE            reduce using rule 93 (if -> IF expression expression END .)
    NUMBER          reduce using rule 93 (if -> IF expression expression END .)
    THEN            reduce using rule 93 (if -> IF expression expression END .)
    WHEN            reduce using rule 93 (if -> IF expression expression END .)
    RPAREN          reduce using rule 93 (if -> IF expression expression END .)
    ELSIF           reduce using rule 93 (if -> IF expression expression END .)
    OR_SYMBOL       reduce using rule 93 (if -> IF expression expression END .)
    RKEY            reduce using rule 93 (if -> IF expression expression END .)


state 265

    (95) if -> IF expression expression elsif . END
    (99) if -> IF expression expression elsif . else END
    (103) else -> . ELSE expression

    END             shift and go to state 303
    ELSE            shift and go to state 234

    else                           shift and go to state 304

state 266

    (97) if -> IF expression expression else . END

    END             shift and go to state 305


state 267

    (101) elsif -> ELSIF . expression expression END
    (102) elsif -> ELSIF . expression THEN expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 306
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 268

    (94) if -> IF expression THEN expression . END
    (96) if -> IF expression THEN expression . elsif END
    (98) if -> IF expression THEN expression . else END
    (100) if -> IF expression THEN expression . elsif else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (101) elsif -> . ELSIF expression expression END
    (102) elsif -> . ELSIF expression THEN expression END
    (103) else -> . ELSE expression

    END             shift and go to state 307
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    ELSIF           shift and go to state 267
    ELSE            shift and go to state 234

    elsif                          shift and go to state 308
    else                           shift and go to state 309

state 269

    (105) unless -> UNLESS expression expression END .

    IF              reduce using rule 105 (unless -> UNLESS expression expression END .)
    UNLESS          reduce using rule 105 (unless -> UNLESS expression expression END .)
    AND             reduce using rule 105 (unless -> UNLESS expression expression END .)
    OR              reduce using rule 105 (unless -> UNLESS expression expression END .)
    NOTEQUAL        reduce using rule 105 (unless -> UNLESS expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 105 (unless -> UNLESS expression expression END .)
    RANGE_INCLUSIVE reduce using rule 105 (unless -> UNLESS expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 105 (unless -> UNLESS expression expression END .)
    WHILE           reduce using rule 105 (unless -> UNLESS expression expression END .)
    UNTIL           reduce using rule 105 (unless -> UNLESS expression expression END .)
    DO              reduce using rule 105 (unless -> UNLESS expression expression END .)
    LKEY            reduce using rule 105 (unless -> UNLESS expression expression END .)
    $end            reduce using rule 105 (unless -> UNLESS expression expression END .)
    END             reduce using rule 105 (unless -> UNLESS expression expression END .)
    RESCUE          reduce using rule 105 (unless -> UNLESS expression expression END .)
    ENSURE          reduce using rule 105 (unless -> UNLESS expression expression END .)
    ELSE            reduce using rule 105 (unless -> UNLESS expression expression END .)
    DOT             reduce using rule 105 (unless -> UNLESS expression expression END .)
    STRING          reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_GLOBAL      reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_INSTANCE    reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_CLASS       reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_LOCAL       reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_SYSTEM      reduce using rule 105 (unless -> UNLESS expression expression END .)
    VAR_CONSTANT    reduce using rule 105 (unless -> UNLESS expression expression END .)
    LBRACKET        reduce using rule 105 (unless -> UNLESS expression expression END .)
    IDENTIFIER      reduce using rule 105 (unless -> UNLESS expression expression END .)
    SUPER           reduce using rule 105 (unless -> UNLESS expression expression END .)
    LPAREN          reduce using rule 105 (unless -> UNLESS expression expression END .)
    BEGIN           reduce using rule 105 (unless -> UNLESS expression expression END .)
    CLASS           reduce using rule 105 (unless -> UNLESS expression expression END .)
    MODULE          reduce using rule 105 (unless -> UNLESS expression expression END .)
    DEF             reduce using rule 105 (unless -> UNLESS expression expression END .)
    ALIAS           reduce using rule 105 (unless -> UNLESS expression expression END .)
    UNDEF           reduce using rule 105 (unless -> UNLESS expression expression END .)
    DEFINED_OP      reduce using rule 105 (unless -> UNLESS expression expression END .)
    DOUBLE_QUOTED   reduce using rule 105 (unless -> UNLESS expression expression END .)
    PRINT           reduce using rule 105 (unless -> UNLESS expression expression END .)
    PUTS            reduce using rule 105 (unless -> UNLESS expression expression END .)
    NOT             reduce using rule 105 (unless -> UNLESS expression expression END .)
    NOT_SYMBOL      reduce using rule 105 (unless -> UNLESS expression expression END .)
    FOR             reduce using rule 105 (unless -> UNLESS expression expression END .)
    YIELD           reduce using rule 105 (unless -> UNLESS expression expression END .)
    RETRY           reduce using rule 105 (unless -> UNLESS expression expression END .)
    RETURN          reduce using rule 105 (unless -> UNLESS expression expression END .)
    BREAK           reduce using rule 105 (unless -> UNLESS expression expression END .)
    NEXT            reduce using rule 105 (unless -> UNLESS expression expression END .)
    REDO            reduce using rule 105 (unless -> UNLESS expression expression END .)
    CASE            reduce using rule 105 (unless -> UNLESS expression expression END .)
    NUMBER          reduce using rule 105 (unless -> UNLESS expression expression END .)
    THEN            reduce using rule 105 (unless -> UNLESS expression expression END .)
    WHEN            reduce using rule 105 (unless -> UNLESS expression expression END .)
    RPAREN          reduce using rule 105 (unless -> UNLESS expression expression END .)
    ELSIF           reduce using rule 105 (unless -> UNLESS expression expression END .)
    OR_SYMBOL       reduce using rule 105 (unless -> UNLESS expression expression END .)
    RKEY            reduce using rule 105 (unless -> UNLESS expression expression END .)


state 270

    (106) unless -> UNLESS expression THEN expression . END
    (107) unless -> UNLESS expression THEN expression . else END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (103) else -> . ELSE expression

    END             shift and go to state 310
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    ELSE            shift and go to state 234

    else                           shift and go to state 311

state 271

    (127) while -> WHILE expression expression END .

    IF              reduce using rule 127 (while -> WHILE expression expression END .)
    UNLESS          reduce using rule 127 (while -> WHILE expression expression END .)
    AND             reduce using rule 127 (while -> WHILE expression expression END .)
    OR              reduce using rule 127 (while -> WHILE expression expression END .)
    NOTEQUAL        reduce using rule 127 (while -> WHILE expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 127 (while -> WHILE expression expression END .)
    RANGE_INCLUSIVE reduce using rule 127 (while -> WHILE expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 127 (while -> WHILE expression expression END .)
    WHILE           reduce using rule 127 (while -> WHILE expression expression END .)
    UNTIL           reduce using rule 127 (while -> WHILE expression expression END .)
    DO              reduce using rule 127 (while -> WHILE expression expression END .)
    LKEY            reduce using rule 127 (while -> WHILE expression expression END .)
    $end            reduce using rule 127 (while -> WHILE expression expression END .)
    END             reduce using rule 127 (while -> WHILE expression expression END .)
    RESCUE          reduce using rule 127 (while -> WHILE expression expression END .)
    ENSURE          reduce using rule 127 (while -> WHILE expression expression END .)
    ELSE            reduce using rule 127 (while -> WHILE expression expression END .)
    DOT             reduce using rule 127 (while -> WHILE expression expression END .)
    STRING          reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_GLOBAL      reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_INSTANCE    reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_CLASS       reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_LOCAL       reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_SYSTEM      reduce using rule 127 (while -> WHILE expression expression END .)
    VAR_CONSTANT    reduce using rule 127 (while -> WHILE expression expression END .)
    LBRACKET        reduce using rule 127 (while -> WHILE expression expression END .)
    IDENTIFIER      reduce using rule 127 (while -> WHILE expression expression END .)
    SUPER           reduce using rule 127 (while -> WHILE expression expression END .)
    LPAREN          reduce using rule 127 (while -> WHILE expression expression END .)
    BEGIN           reduce using rule 127 (while -> WHILE expression expression END .)
    CLASS           reduce using rule 127 (while -> WHILE expression expression END .)
    MODULE          reduce using rule 127 (while -> WHILE expression expression END .)
    DEF             reduce using rule 127 (while -> WHILE expression expression END .)
    ALIAS           reduce using rule 127 (while -> WHILE expression expression END .)
    UNDEF           reduce using rule 127 (while -> WHILE expression expression END .)
    DEFINED_OP      reduce using rule 127 (while -> WHILE expression expression END .)
    DOUBLE_QUOTED   reduce using rule 127 (while -> WHILE expression expression END .)
    PRINT           reduce using rule 127 (while -> WHILE expression expression END .)
    PUTS            reduce using rule 127 (while -> WHILE expression expression END .)
    NOT             reduce using rule 127 (while -> WHILE expression expression END .)
    NOT_SYMBOL      reduce using rule 127 (while -> WHILE expression expression END .)
    FOR             reduce using rule 127 (while -> WHILE expression expression END .)
    YIELD           reduce using rule 127 (while -> WHILE expression expression END .)
    RETRY           reduce using rule 127 (while -> WHILE expression expression END .)
    RETURN          reduce using rule 127 (while -> WHILE expression expression END .)
    BREAK           reduce using rule 127 (while -> WHILE expression expression END .)
    NEXT            reduce using rule 127 (while -> WHILE expression expression END .)
    REDO            reduce using rule 127 (while -> WHILE expression expression END .)
    CASE            reduce using rule 127 (while -> WHILE expression expression END .)
    NUMBER          reduce using rule 127 (while -> WHILE expression expression END .)
    THEN            reduce using rule 127 (while -> WHILE expression expression END .)
    WHEN            reduce using rule 127 (while -> WHILE expression expression END .)
    RPAREN          reduce using rule 127 (while -> WHILE expression expression END .)
    ELSIF           reduce using rule 127 (while -> WHILE expression expression END .)
    OR_SYMBOL       reduce using rule 127 (while -> WHILE expression expression END .)
    RKEY            reduce using rule 127 (while -> WHILE expression expression END .)


state 272

    (128) while -> WHILE expression DO expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 312
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 273

    (131) until -> UNTIL expression expression END .

    IF              reduce using rule 131 (until -> UNTIL expression expression END .)
    UNLESS          reduce using rule 131 (until -> UNTIL expression expression END .)
    AND             reduce using rule 131 (until -> UNTIL expression expression END .)
    OR              reduce using rule 131 (until -> UNTIL expression expression END .)
    NOTEQUAL        reduce using rule 131 (until -> UNTIL expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 131 (until -> UNTIL expression expression END .)
    RANGE_INCLUSIVE reduce using rule 131 (until -> UNTIL expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 131 (until -> UNTIL expression expression END .)
    WHILE           reduce using rule 131 (until -> UNTIL expression expression END .)
    UNTIL           reduce using rule 131 (until -> UNTIL expression expression END .)
    DO              reduce using rule 131 (until -> UNTIL expression expression END .)
    LKEY            reduce using rule 131 (until -> UNTIL expression expression END .)
    $end            reduce using rule 131 (until -> UNTIL expression expression END .)
    END             reduce using rule 131 (until -> UNTIL expression expression END .)
    RESCUE          reduce using rule 131 (until -> UNTIL expression expression END .)
    ENSURE          reduce using rule 131 (until -> UNTIL expression expression END .)
    ELSE            reduce using rule 131 (until -> UNTIL expression expression END .)
    DOT             reduce using rule 131 (until -> UNTIL expression expression END .)
    STRING          reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_GLOBAL      reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_INSTANCE    reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_CLASS       reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_LOCAL       reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_SYSTEM      reduce using rule 131 (until -> UNTIL expression expression END .)
    VAR_CONSTANT    reduce using rule 131 (until -> UNTIL expression expression END .)
    LBRACKET        reduce using rule 131 (until -> UNTIL expression expression END .)
    IDENTIFIER      reduce using rule 131 (until -> UNTIL expression expression END .)
    SUPER           reduce using rule 131 (until -> UNTIL expression expression END .)
    LPAREN          reduce using rule 131 (until -> UNTIL expression expression END .)
    BEGIN           reduce using rule 131 (until -> UNTIL expression expression END .)
    CLASS           reduce using rule 131 (until -> UNTIL expression expression END .)
    MODULE          reduce using rule 131 (until -> UNTIL expression expression END .)
    DEF             reduce using rule 131 (until -> UNTIL expression expression END .)
    ALIAS           reduce using rule 131 (until -> UNTIL expression expression END .)
    UNDEF           reduce using rule 131 (until -> UNTIL expression expression END .)
    DEFINED_OP      reduce using rule 131 (until -> UNTIL expression expression END .)
    DOUBLE_QUOTED   reduce using rule 131 (until -> UNTIL expression expression END .)
    PRINT           reduce using rule 131 (until -> UNTIL expression expression END .)
    PUTS            reduce using rule 131 (until -> UNTIL expression expression END .)
    NOT             reduce using rule 131 (until -> UNTIL expression expression END .)
    NOT_SYMBOL      reduce using rule 131 (until -> UNTIL expression expression END .)
    FOR             reduce using rule 131 (until -> UNTIL expression expression END .)
    YIELD           reduce using rule 131 (until -> UNTIL expression expression END .)
    RETRY           reduce using rule 131 (until -> UNTIL expression expression END .)
    RETURN          reduce using rule 131 (until -> UNTIL expression expression END .)
    BREAK           reduce using rule 131 (until -> UNTIL expression expression END .)
    NEXT            reduce using rule 131 (until -> UNTIL expression expression END .)
    REDO            reduce using rule 131 (until -> UNTIL expression expression END .)
    CASE            reduce using rule 131 (until -> UNTIL expression expression END .)
    NUMBER          reduce using rule 131 (until -> UNTIL expression expression END .)
    THEN            reduce using rule 131 (until -> UNTIL expression expression END .)
    WHEN            reduce using rule 131 (until -> UNTIL expression expression END .)
    RPAREN          reduce using rule 131 (until -> UNTIL expression expression END .)
    ELSIF           reduce using rule 131 (until -> UNTIL expression expression END .)
    OR_SYMBOL       reduce using rule 131 (until -> UNTIL expression expression END .)
    RKEY            reduce using rule 131 (until -> UNTIL expression expression END .)


state 274

    (130) until -> UNTIL expression DO expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 313
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 275

    (135) for -> FOR IDENTIFIER IN expression . DO expression END
    (136) for -> FOR IDENTIFIER IN expression . expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    DO              shift and go to state 315
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 314
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 276

    (137) yield -> YIELD LPAREN expression RPAREN .

    IF              reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    UNLESS          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    AND             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    OR              reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RANGE_INCLUSIVE reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    WHILE           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    UNTIL           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    DO              reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    LKEY            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    $end            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    END             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RESCUE          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    ENSURE          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    ELSE            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    DOT             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    STRING          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_GLOBAL      reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_INSTANCE    reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_CLASS       reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_LOCAL       reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_SYSTEM      reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    VAR_CONSTANT    reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    SUPER           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    LPAREN          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    BEGIN           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    CLASS           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    MODULE          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    DEF             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    ALIAS           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    UNDEF           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    DEFINED_OP      reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    DOUBLE_QUOTED   reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    PRINT           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    PUTS            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    NOT             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    NOT_SYMBOL      reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    FOR             reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    YIELD           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RETRY           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RETURN          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    BREAK           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    NEXT            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    REDO            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    CASE            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    NUMBER          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    THEN            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    WHEN            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RPAREN          reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    ELSIF           reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    OR_SYMBOL       reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)
    RKEY            reduce using rule 137 (yield -> YIELD LPAREN expression RPAREN .)


state 277

    (52) args_method -> data COMMA args_method .

    IF              reduce using rule 52 (args_method -> data COMMA args_method .)
    UNLESS          reduce using rule 52 (args_method -> data COMMA args_method .)
    AND             reduce using rule 52 (args_method -> data COMMA args_method .)
    OR              reduce using rule 52 (args_method -> data COMMA args_method .)
    NOTEQUAL        reduce using rule 52 (args_method -> data COMMA args_method .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 52 (args_method -> data COMMA args_method .)
    RANGE_INCLUSIVE reduce using rule 52 (args_method -> data COMMA args_method .)
    RANGE_EXCLUSIVE reduce using rule 52 (args_method -> data COMMA args_method .)
    WHILE           reduce using rule 52 (args_method -> data COMMA args_method .)
    UNTIL           reduce using rule 52 (args_method -> data COMMA args_method .)
    DO              reduce using rule 52 (args_method -> data COMMA args_method .)
    LKEY            reduce using rule 52 (args_method -> data COMMA args_method .)
    $end            reduce using rule 52 (args_method -> data COMMA args_method .)
    END             reduce using rule 52 (args_method -> data COMMA args_method .)
    RESCUE          reduce using rule 52 (args_method -> data COMMA args_method .)
    ENSURE          reduce using rule 52 (args_method -> data COMMA args_method .)
    ELSE            reduce using rule 52 (args_method -> data COMMA args_method .)
    DOT             reduce using rule 52 (args_method -> data COMMA args_method .)
    STRING          reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_GLOBAL      reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_INSTANCE    reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_CLASS       reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_LOCAL       reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_SYSTEM      reduce using rule 52 (args_method -> data COMMA args_method .)
    VAR_CONSTANT    reduce using rule 52 (args_method -> data COMMA args_method .)
    LBRACKET        reduce using rule 52 (args_method -> data COMMA args_method .)
    IDENTIFIER      reduce using rule 52 (args_method -> data COMMA args_method .)
    SUPER           reduce using rule 52 (args_method -> data COMMA args_method .)
    LPAREN          reduce using rule 52 (args_method -> data COMMA args_method .)
    BEGIN           reduce using rule 52 (args_method -> data COMMA args_method .)
    CLASS           reduce using rule 52 (args_method -> data COMMA args_method .)
    MODULE          reduce using rule 52 (args_method -> data COMMA args_method .)
    DEF             reduce using rule 52 (args_method -> data COMMA args_method .)
    ALIAS           reduce using rule 52 (args_method -> data COMMA args_method .)
    UNDEF           reduce using rule 52 (args_method -> data COMMA args_method .)
    DEFINED_OP      reduce using rule 52 (args_method -> data COMMA args_method .)
    DOUBLE_QUOTED   reduce using rule 52 (args_method -> data COMMA args_method .)
    PRINT           reduce using rule 52 (args_method -> data COMMA args_method .)
    PUTS            reduce using rule 52 (args_method -> data COMMA args_method .)
    NOT             reduce using rule 52 (args_method -> data COMMA args_method .)
    NOT_SYMBOL      reduce using rule 52 (args_method -> data COMMA args_method .)
    FOR             reduce using rule 52 (args_method -> data COMMA args_method .)
    YIELD           reduce using rule 52 (args_method -> data COMMA args_method .)
    RETRY           reduce using rule 52 (args_method -> data COMMA args_method .)
    RETURN          reduce using rule 52 (args_method -> data COMMA args_method .)
    BREAK           reduce using rule 52 (args_method -> data COMMA args_method .)
    NEXT            reduce using rule 52 (args_method -> data COMMA args_method .)
    REDO            reduce using rule 52 (args_method -> data COMMA args_method .)
    CASE            reduce using rule 52 (args_method -> data COMMA args_method .)
    NUMBER          reduce using rule 52 (args_method -> data COMMA args_method .)
    THEN            reduce using rule 52 (args_method -> data COMMA args_method .)
    WHEN            reduce using rule 52 (args_method -> data COMMA args_method .)
    RPAREN          reduce using rule 52 (args_method -> data COMMA args_method .)
    ELSIF           reduce using rule 52 (args_method -> data COMMA args_method .)
    OR_SYMBOL       reduce using rule 52 (args_method -> data COMMA args_method .)
    RKEY            reduce using rule 52 (args_method -> data COMMA args_method .)


state 278

    (110) case -> CASE expression when END .

    IF              reduce using rule 110 (case -> CASE expression when END .)
    UNLESS          reduce using rule 110 (case -> CASE expression when END .)
    AND             reduce using rule 110 (case -> CASE expression when END .)
    OR              reduce using rule 110 (case -> CASE expression when END .)
    NOTEQUAL        reduce using rule 110 (case -> CASE expression when END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 110 (case -> CASE expression when END .)
    RANGE_INCLUSIVE reduce using rule 110 (case -> CASE expression when END .)
    RANGE_EXCLUSIVE reduce using rule 110 (case -> CASE expression when END .)
    WHILE           reduce using rule 110 (case -> CASE expression when END .)
    UNTIL           reduce using rule 110 (case -> CASE expression when END .)
    DO              reduce using rule 110 (case -> CASE expression when END .)
    LKEY            reduce using rule 110 (case -> CASE expression when END .)
    $end            reduce using rule 110 (case -> CASE expression when END .)
    END             reduce using rule 110 (case -> CASE expression when END .)
    RESCUE          reduce using rule 110 (case -> CASE expression when END .)
    ENSURE          reduce using rule 110 (case -> CASE expression when END .)
    ELSE            reduce using rule 110 (case -> CASE expression when END .)
    DOT             reduce using rule 110 (case -> CASE expression when END .)
    STRING          reduce using rule 110 (case -> CASE expression when END .)
    VAR_GLOBAL      reduce using rule 110 (case -> CASE expression when END .)
    VAR_INSTANCE    reduce using rule 110 (case -> CASE expression when END .)
    VAR_CLASS       reduce using rule 110 (case -> CASE expression when END .)
    VAR_LOCAL       reduce using rule 110 (case -> CASE expression when END .)
    VAR_SYSTEM      reduce using rule 110 (case -> CASE expression when END .)
    VAR_CONSTANT    reduce using rule 110 (case -> CASE expression when END .)
    LBRACKET        reduce using rule 110 (case -> CASE expression when END .)
    IDENTIFIER      reduce using rule 110 (case -> CASE expression when END .)
    SUPER           reduce using rule 110 (case -> CASE expression when END .)
    LPAREN          reduce using rule 110 (case -> CASE expression when END .)
    BEGIN           reduce using rule 110 (case -> CASE expression when END .)
    CLASS           reduce using rule 110 (case -> CASE expression when END .)
    MODULE          reduce using rule 110 (case -> CASE expression when END .)
    DEF             reduce using rule 110 (case -> CASE expression when END .)
    ALIAS           reduce using rule 110 (case -> CASE expression when END .)
    UNDEF           reduce using rule 110 (case -> CASE expression when END .)
    DEFINED_OP      reduce using rule 110 (case -> CASE expression when END .)
    DOUBLE_QUOTED   reduce using rule 110 (case -> CASE expression when END .)
    PRINT           reduce using rule 110 (case -> CASE expression when END .)
    PUTS            reduce using rule 110 (case -> CASE expression when END .)
    NOT             reduce using rule 110 (case -> CASE expression when END .)
    NOT_SYMBOL      reduce using rule 110 (case -> CASE expression when END .)
    FOR             reduce using rule 110 (case -> CASE expression when END .)
    YIELD           reduce using rule 110 (case -> CASE expression when END .)
    RETRY           reduce using rule 110 (case -> CASE expression when END .)
    RETURN          reduce using rule 110 (case -> CASE expression when END .)
    BREAK           reduce using rule 110 (case -> CASE expression when END .)
    NEXT            reduce using rule 110 (case -> CASE expression when END .)
    REDO            reduce using rule 110 (case -> CASE expression when END .)
    CASE            reduce using rule 110 (case -> CASE expression when END .)
    NUMBER          reduce using rule 110 (case -> CASE expression when END .)
    THEN            reduce using rule 110 (case -> CASE expression when END .)
    WHEN            reduce using rule 110 (case -> CASE expression when END .)
    RPAREN          reduce using rule 110 (case -> CASE expression when END .)
    ELSIF           reduce using rule 110 (case -> CASE expression when END .)
    OR_SYMBOL       reduce using rule 110 (case -> CASE expression when END .)
    RKEY            reduce using rule 110 (case -> CASE expression when END .)


state 279

    (112) case -> CASE expression when else . END

    END             shift and go to state 316


state 280

    (111) case -> CASE expression else END .

    IF              reduce using rule 111 (case -> CASE expression else END .)
    UNLESS          reduce using rule 111 (case -> CASE expression else END .)
    AND             reduce using rule 111 (case -> CASE expression else END .)
    OR              reduce using rule 111 (case -> CASE expression else END .)
    NOTEQUAL        reduce using rule 111 (case -> CASE expression else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 111 (case -> CASE expression else END .)
    RANGE_INCLUSIVE reduce using rule 111 (case -> CASE expression else END .)
    RANGE_EXCLUSIVE reduce using rule 111 (case -> CASE expression else END .)
    WHILE           reduce using rule 111 (case -> CASE expression else END .)
    UNTIL           reduce using rule 111 (case -> CASE expression else END .)
    DO              reduce using rule 111 (case -> CASE expression else END .)
    LKEY            reduce using rule 111 (case -> CASE expression else END .)
    $end            reduce using rule 111 (case -> CASE expression else END .)
    END             reduce using rule 111 (case -> CASE expression else END .)
    RESCUE          reduce using rule 111 (case -> CASE expression else END .)
    ENSURE          reduce using rule 111 (case -> CASE expression else END .)
    ELSE            reduce using rule 111 (case -> CASE expression else END .)
    DOT             reduce using rule 111 (case -> CASE expression else END .)
    STRING          reduce using rule 111 (case -> CASE expression else END .)
    VAR_GLOBAL      reduce using rule 111 (case -> CASE expression else END .)
    VAR_INSTANCE    reduce using rule 111 (case -> CASE expression else END .)
    VAR_CLASS       reduce using rule 111 (case -> CASE expression else END .)
    VAR_LOCAL       reduce using rule 111 (case -> CASE expression else END .)
    VAR_SYSTEM      reduce using rule 111 (case -> CASE expression else END .)
    VAR_CONSTANT    reduce using rule 111 (case -> CASE expression else END .)
    LBRACKET        reduce using rule 111 (case -> CASE expression else END .)
    IDENTIFIER      reduce using rule 111 (case -> CASE expression else END .)
    SUPER           reduce using rule 111 (case -> CASE expression else END .)
    LPAREN          reduce using rule 111 (case -> CASE expression else END .)
    BEGIN           reduce using rule 111 (case -> CASE expression else END .)
    CLASS           reduce using rule 111 (case -> CASE expression else END .)
    MODULE          reduce using rule 111 (case -> CASE expression else END .)
    DEF             reduce using rule 111 (case -> CASE expression else END .)
    ALIAS           reduce using rule 111 (case -> CASE expression else END .)
    UNDEF           reduce using rule 111 (case -> CASE expression else END .)
    DEFINED_OP      reduce using rule 111 (case -> CASE expression else END .)
    DOUBLE_QUOTED   reduce using rule 111 (case -> CASE expression else END .)
    PRINT           reduce using rule 111 (case -> CASE expression else END .)
    PUTS            reduce using rule 111 (case -> CASE expression else END .)
    NOT             reduce using rule 111 (case -> CASE expression else END .)
    NOT_SYMBOL      reduce using rule 111 (case -> CASE expression else END .)
    FOR             reduce using rule 111 (case -> CASE expression else END .)
    YIELD           reduce using rule 111 (case -> CASE expression else END .)
    RETRY           reduce using rule 111 (case -> CASE expression else END .)
    RETURN          reduce using rule 111 (case -> CASE expression else END .)
    BREAK           reduce using rule 111 (case -> CASE expression else END .)
    NEXT            reduce using rule 111 (case -> CASE expression else END .)
    REDO            reduce using rule 111 (case -> CASE expression else END .)
    CASE            reduce using rule 111 (case -> CASE expression else END .)
    NUMBER          reduce using rule 111 (case -> CASE expression else END .)
    THEN            reduce using rule 111 (case -> CASE expression else END .)
    WHEN            reduce using rule 111 (case -> CASE expression else END .)
    RPAREN          reduce using rule 111 (case -> CASE expression else END .)
    ELSIF           reduce using rule 111 (case -> CASE expression else END .)
    OR_SYMBOL       reduce using rule 111 (case -> CASE expression else END .)
    RKEY            reduce using rule 111 (case -> CASE expression else END .)


state 281

    (113) when -> WHEN it_expression . THEN expression
    (114) when -> WHEN it_expression . THEN expression when
    (115) when -> WHEN it_expression . expression
    (116) when -> WHEN it_expression . expression when
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    THEN            shift and go to state 317
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 318
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 282

    (117) it_expression -> expression .
    (118) it_expression -> expression . it_expression
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (117) it_expression -> . expression
    (118) it_expression -> . expression it_expression
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_SYSTEM resolved as shift
  ! shift/reduce conflict for VAR_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for UNDEF resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for DOUBLE_QUOTED resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for RETRY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for REDO resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    THEN            reduce using rule 117 (it_expression -> expression .)
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

  ! STRING          [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_GLOBAL      [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_INSTANCE    [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_CLASS       [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_LOCAL       [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_SYSTEM      [ reduce using rule 117 (it_expression -> expression .) ]
  ! VAR_CONSTANT    [ reduce using rule 117 (it_expression -> expression .) ]
  ! LBRACKET        [ reduce using rule 117 (it_expression -> expression .) ]
  ! LKEY            [ reduce using rule 117 (it_expression -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 117 (it_expression -> expression .) ]
  ! SUPER           [ reduce using rule 117 (it_expression -> expression .) ]
  ! LPAREN          [ reduce using rule 117 (it_expression -> expression .) ]
  ! BEGIN           [ reduce using rule 117 (it_expression -> expression .) ]
  ! END             [ reduce using rule 117 (it_expression -> expression .) ]
  ! CLASS           [ reduce using rule 117 (it_expression -> expression .) ]
  ! MODULE          [ reduce using rule 117 (it_expression -> expression .) ]
  ! DEF             [ reduce using rule 117 (it_expression -> expression .) ]
  ! ALIAS           [ reduce using rule 117 (it_expression -> expression .) ]
  ! UNDEF           [ reduce using rule 117 (it_expression -> expression .) ]
  ! DEFINED_OP      [ reduce using rule 117 (it_expression -> expression .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 117 (it_expression -> expression .) ]
  ! PRINT           [ reduce using rule 117 (it_expression -> expression .) ]
  ! PUTS            [ reduce using rule 117 (it_expression -> expression .) ]
  ! IF              [ reduce using rule 117 (it_expression -> expression .) ]
  ! UNLESS          [ reduce using rule 117 (it_expression -> expression .) ]
  ! NOT             [ reduce using rule 117 (it_expression -> expression .) ]
  ! NOT_SYMBOL      [ reduce using rule 117 (it_expression -> expression .) ]
  ! WHILE           [ reduce using rule 117 (it_expression -> expression .) ]
  ! UNTIL           [ reduce using rule 117 (it_expression -> expression .) ]
  ! FOR             [ reduce using rule 117 (it_expression -> expression .) ]
  ! YIELD           [ reduce using rule 117 (it_expression -> expression .) ]
  ! RETRY           [ reduce using rule 117 (it_expression -> expression .) ]
  ! RETURN          [ reduce using rule 117 (it_expression -> expression .) ]
  ! BREAK           [ reduce using rule 117 (it_expression -> expression .) ]
  ! NEXT            [ reduce using rule 117 (it_expression -> expression .) ]
  ! REDO            [ reduce using rule 117 (it_expression -> expression .) ]
  ! CASE            [ reduce using rule 117 (it_expression -> expression .) ]
  ! NUMBER          [ reduce using rule 117 (it_expression -> expression .) ]

    expression                     shift and go to state 282
    it_expression                  shift and go to state 319
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 283

    (103) else -> ELSE expression .
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             reduce using rule 103 (else -> ELSE expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 284

    (133) iterator -> expression DO OR_SYMBOL expression OR_SYMBOL . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 320
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 285

    (134) iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL . expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 321
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 286

    (169) expression_operations -> expression_operations op LPAREN opmate RPAREN .
    (165) expression_operations -> LPAREN opmate RPAREN .
    (168) expression_operations -> LPAREN opmate RPAREN . op expression_operations
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

  ! reduce/reduce conflict for PLUS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for EQUAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for UNLESS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for UNTIL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LKEY resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RESCUE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ENSURE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DOT resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_SYSTEM resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_CONSTANT resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for SUPER resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for BEGIN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for CLASS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MODULE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DEF resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ALIAS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for UNDEF resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DOUBLE_QUOTED resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for PRINT resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for PUTS resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for YIELD resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RETRY resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NEXT resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for REDO resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for WHEN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ELSIF resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for RKEY resolved using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    IF              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNLESS          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    AND             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OR              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RANGE_INCLUSIVE reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    WHILE           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNTIL           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DO              reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LKEY            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    $end            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    END             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RESCUE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ENSURE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ELSE            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DOT             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    STRING          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_GLOBAL      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_INSTANCE    reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CLASS       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_LOCAL       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_SYSTEM      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CONSTANT    reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LBRACKET        reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    IDENTIFIER      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    SUPER           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    LPAREN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    BEGIN           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    CLASS           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    MODULE          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DEF             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ALIAS           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    UNDEF           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DEFINED_OP      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    DOUBLE_QUOTED   reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PRINT           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PUTS            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NOT             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NOT_SYMBOL      reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    FOR             reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    YIELD           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RETRY           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RETURN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    BREAK           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NEXT            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    REDO            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    CASE            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    NUMBER          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    THEN            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    WHEN            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RPAREN          reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    ELSIF           reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    OR_SYMBOL       reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    RKEY            reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

  ! PLUS            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! IF              [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! UNLESS          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! AND             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! OR              [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! WHILE           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! UNTIL           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DO              [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LKEY            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! $end            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! END             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RESCUE          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ENSURE          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ELSE            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DOT             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! STRING          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_GLOBAL      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_INSTANCE    [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_CLASS       [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_LOCAL       [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_SYSTEM      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_CONSTANT    [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LBRACKET        [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! IDENTIFIER      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! SUPER           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LPAREN          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! BEGIN           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! CLASS           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MODULE          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DEF             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ALIAS           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! UNDEF           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DEFINED_OP      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! PRINT           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! PUTS            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NOT             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NOT_SYMBOL      [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! FOR             [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! YIELD           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RETRY           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RETURN          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! BREAK           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NEXT            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! REDO            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! CASE            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NUMBER          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! THEN            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! WHEN            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RPAREN          [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ELSIF           [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! OR_SYMBOL       [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! RKEY            [ reduce using rule 169 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! PLUS            [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 165 (expression_operations -> LPAREN opmate RPAREN .) ]

    op                             shift and go to state 242

state 287

    (43) args_hash -> data HASH_ROCKET data COMMA . args_hash
    (42) args_hash -> . data HASH_ROCKET data
    (43) args_hash -> . data HASH_ROCKET data COMMA args_hash
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    data                           shift and go to state 129
    args_hash                      shift and go to state 322
    variable                       shift and go to state 127

state 288

    (48) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .

    EQUAL_SYMBOL    reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    UNLESS          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    WHILE           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    UNTIL           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DO              reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LKEY            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    $end            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    END             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RESCUE          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ENSURE          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DOT             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    STRING          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LBRACKET        reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    SUPER           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    BEGIN           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    CLASS           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    MODULE          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DEF             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ALIAS           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    UNDEF           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    PRINT           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    PUTS            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NOT             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    FOR             reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    YIELD           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RETRY           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RETURN          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    BREAK           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NEXT            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    REDO            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    CASE            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    WHEN            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ELSIF           reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    RKEY            reduce using rule 48 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)


state 289

    (49) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 323


state 290

    (168) expression_operations -> LPAREN opmate RPAREN op expression_operations .
    (166) expression_operations -> expression_operations . op expression_operations
    (167) expression_operations -> expression_operations . op opmate
    (169) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    IF              reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    UNLESS          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    AND             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    OR              reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RANGE_INCLUSIVE reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RANGE_EXCLUSIVE reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    WHILE           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    UNTIL           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DO              reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LKEY            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    $end            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    END             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RESCUE          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ENSURE          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ELSE            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DOT             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    STRING          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_GLOBAL      reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_INSTANCE    reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_CLASS       reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_LOCAL       reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_SYSTEM      reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_CONSTANT    reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LBRACKET        reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    IDENTIFIER      reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    SUPER           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LPAREN          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    BEGIN           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    CLASS           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    MODULE          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DEF             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ALIAS           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    UNDEF           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DEFINED_OP      reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DOUBLE_QUOTED   reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    PRINT           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    PUTS            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    NOT             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    NOT_SYMBOL      reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    FOR             reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    YIELD           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RETRY           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RETURN          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    BREAK           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    NEXT            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    REDO            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    CASE            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    NUMBER          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    THEN            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    WHEN            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RPAREN          reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ELSIF           reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    OR_SYMBOL       reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    RKEY            reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

  ! PLUS            [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! MINUS           [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! TIMES           [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! DIVIDE          [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! MOD             [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! EQUAL           [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! NOTEQUAL        [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! GREATERTHAN     [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! GREATERTHANEQUAL [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! LESSERTHAN      [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! LESSERTHANEQUAL [ reduce using rule 168 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]

    op                             shift and go to state 112

state 291

    (140) begin_expression -> BEGIN expression RESCUE expression END .

    IF              reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    UNLESS          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    AND             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    OR              reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    NOTEQUAL        reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RANGE_INCLUSIVE reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RANGE_EXCLUSIVE reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    WHILE           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    UNTIL           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    DO              reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    LKEY            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    $end            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    END             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RESCUE          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    ENSURE          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    ELSE            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    DOT             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    STRING          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_GLOBAL      reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_INSTANCE    reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_CLASS       reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_LOCAL       reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_SYSTEM      reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    VAR_CONSTANT    reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    LBRACKET        reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    IDENTIFIER      reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    SUPER           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    LPAREN          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    BEGIN           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    CLASS           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    MODULE          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    DEF             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    ALIAS           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    UNDEF           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    DEFINED_OP      reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    DOUBLE_QUOTED   reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    PRINT           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    PUTS            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    NOT             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    NOT_SYMBOL      reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    FOR             reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    YIELD           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RETRY           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RETURN          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    BREAK           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    NEXT            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    REDO            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    CASE            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    NUMBER          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    THEN            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    WHEN            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RPAREN          reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    ELSIF           reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    OR_SYMBOL       reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)
    RKEY            reduce using rule 140 (begin_expression -> BEGIN expression RESCUE expression END .)


state 292

    (142) begin_expression -> BEGIN expression RESCUE expression ENSURE . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 324
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 293

    (143) begin_expression -> BEGIN expression RESCUE expression ELSE . expression END
    (145) begin_expression -> BEGIN expression RESCUE expression ELSE . expression ENSURE expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 325
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 294

    (141) begin_expression -> BEGIN expression ENSURE expression END .

    IF              reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    UNLESS          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    AND             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    OR              reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    NOTEQUAL        reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RANGE_INCLUSIVE reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RANGE_EXCLUSIVE reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    WHILE           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    UNTIL           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    DO              reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    LKEY            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    $end            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    END             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RESCUE          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    ENSURE          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    ELSE            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    DOT             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    STRING          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_GLOBAL      reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_INSTANCE    reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_CLASS       reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_LOCAL       reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_SYSTEM      reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    VAR_CONSTANT    reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    LBRACKET        reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    IDENTIFIER      reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    SUPER           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    LPAREN          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    BEGIN           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    CLASS           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    MODULE          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    DEF             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    ALIAS           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    UNDEF           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    DEFINED_OP      reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    DOUBLE_QUOTED   reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    PRINT           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    PUTS            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    NOT             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    NOT_SYMBOL      reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    FOR             reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    YIELD           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RETRY           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RETURN          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    BREAK           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    NEXT            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    REDO            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    CASE            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    NUMBER          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    THEN            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    WHEN            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RPAREN          reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    ELSIF           reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    OR_SYMBOL       reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)
    RKEY            reduce using rule 141 (begin_expression -> BEGIN expression ENSURE expression END .)


state 295

    (144) begin_expression -> BEGIN expression ELSE expression ENSURE . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 326
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 296

    (155) class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 327
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 297

    (156) singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .

    IF              reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    UNLESS          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    AND             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    OR              reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    NOTEQUAL        reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RANGE_INCLUSIVE reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    WHILE           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    UNTIL           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    DO              reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    LKEY            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    $end            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    END             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RESCUE          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    ENSURE          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    ELSE            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    DOT             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    STRING          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_GLOBAL      reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_INSTANCE    reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_CLASS       reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_LOCAL       reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_SYSTEM      reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    VAR_CONSTANT    reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    LBRACKET        reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    IDENTIFIER      reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    SUPER           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    LPAREN          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    BEGIN           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    CLASS           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    MODULE          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    DEF             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    ALIAS           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    UNDEF           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    DEFINED_OP      reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    DOUBLE_QUOTED   reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    PRINT           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    PUTS            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    NOT             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    NOT_SYMBOL      reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    FOR             reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    YIELD           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RETRY           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RETURN          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    BREAK           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    NEXT            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    REDO            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    CASE            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    NUMBER          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    THEN            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    WHEN            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RPAREN          reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    ELSIF           reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    OR_SYMBOL       reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)
    RKEY            reduce using rule 156 (singleton_class_definitions -> CLASS BINARY_LEFT_SHIFT_OP expression expression END .)


state 298

    (159) singleton_method_definitions -> DEF expression DOT IDENTIFIER expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 328
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 299

    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN . args_method RPAREN expression END
    (165) expression_operations -> LPAREN . opmate RPAREN
    (168) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (51) args_method -> . data
    (52) args_method -> . data COMMA args_method
    (170) opmate -> . data op data
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 74
    STRING          shift and go to state 126
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30

    args_method                    shift and go to state 329
    opmate                         shift and go to state 132
    data                           shift and go to state 330
    variable                       shift and go to state 127

state 300

    (45) function -> IDENTIFIER LPAREN args_method RPAREN .

    STRING          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    BEGIN           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    END             reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DEF             reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    PRINT           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    PUTS            reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    IF              reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    UNLESS          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    NOT             reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    NOT_SYMBOL      reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    WHILE           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    UNTIL           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    FOR             reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    YIELD           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    RETRY           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    RETURN          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    BREAK           reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    NEXT            reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    REDO            reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    CASE            reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 45 (function -> IDENTIFIER LPAREN args_method RPAREN .)


state 301

    (29) string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .

    IF              reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    UNLESS          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    AND             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    OR              reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NOTEQUAL        reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RANGE_INCLUSIVE reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RANGE_EXCLUSIVE reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    WHILE           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    UNTIL           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DO              reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LKEY            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    $end            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    END             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RESCUE          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ENSURE          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ELSE            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DOT             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    STRING          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_GLOBAL      reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_INSTANCE    reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_CLASS       reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_LOCAL       reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_SYSTEM      reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_CONSTANT    reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LBRACKET        reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    IDENTIFIER      reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    SUPER           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LPAREN          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    BEGIN           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    CLASS           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    MODULE          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DEF             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ALIAS           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    UNDEF           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DEFINED_OP      reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DOUBLE_QUOTED   reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    PRINT           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    PUTS            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NOT             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NOT_SYMBOL      reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    FOR             reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    YIELD           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RETRY           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RETURN          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    BREAK           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NEXT            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    REDO            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    CASE            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NUMBER          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    THEN            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    WHEN            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RPAREN          reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ELSIF           reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    OR_SYMBOL       reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    RKEY            reduce using rule 29 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)


state 302

    (30) concat -> NUMBER_SIGN LKEY IDENTIFIER . RKEY

    RKEY            shift and go to state 331


state 303

    (95) if -> IF expression expression elsif END .

    IF              reduce using rule 95 (if -> IF expression expression elsif END .)
    UNLESS          reduce using rule 95 (if -> IF expression expression elsif END .)
    AND             reduce using rule 95 (if -> IF expression expression elsif END .)
    OR              reduce using rule 95 (if -> IF expression expression elsif END .)
    NOTEQUAL        reduce using rule 95 (if -> IF expression expression elsif END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 95 (if -> IF expression expression elsif END .)
    RANGE_INCLUSIVE reduce using rule 95 (if -> IF expression expression elsif END .)
    RANGE_EXCLUSIVE reduce using rule 95 (if -> IF expression expression elsif END .)
    WHILE           reduce using rule 95 (if -> IF expression expression elsif END .)
    UNTIL           reduce using rule 95 (if -> IF expression expression elsif END .)
    DO              reduce using rule 95 (if -> IF expression expression elsif END .)
    LKEY            reduce using rule 95 (if -> IF expression expression elsif END .)
    $end            reduce using rule 95 (if -> IF expression expression elsif END .)
    END             reduce using rule 95 (if -> IF expression expression elsif END .)
    RESCUE          reduce using rule 95 (if -> IF expression expression elsif END .)
    ENSURE          reduce using rule 95 (if -> IF expression expression elsif END .)
    ELSE            reduce using rule 95 (if -> IF expression expression elsif END .)
    DOT             reduce using rule 95 (if -> IF expression expression elsif END .)
    STRING          reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_GLOBAL      reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_INSTANCE    reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_CLASS       reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_LOCAL       reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_SYSTEM      reduce using rule 95 (if -> IF expression expression elsif END .)
    VAR_CONSTANT    reduce using rule 95 (if -> IF expression expression elsif END .)
    LBRACKET        reduce using rule 95 (if -> IF expression expression elsif END .)
    IDENTIFIER      reduce using rule 95 (if -> IF expression expression elsif END .)
    SUPER           reduce using rule 95 (if -> IF expression expression elsif END .)
    LPAREN          reduce using rule 95 (if -> IF expression expression elsif END .)
    BEGIN           reduce using rule 95 (if -> IF expression expression elsif END .)
    CLASS           reduce using rule 95 (if -> IF expression expression elsif END .)
    MODULE          reduce using rule 95 (if -> IF expression expression elsif END .)
    DEF             reduce using rule 95 (if -> IF expression expression elsif END .)
    ALIAS           reduce using rule 95 (if -> IF expression expression elsif END .)
    UNDEF           reduce using rule 95 (if -> IF expression expression elsif END .)
    DEFINED_OP      reduce using rule 95 (if -> IF expression expression elsif END .)
    DOUBLE_QUOTED   reduce using rule 95 (if -> IF expression expression elsif END .)
    PRINT           reduce using rule 95 (if -> IF expression expression elsif END .)
    PUTS            reduce using rule 95 (if -> IF expression expression elsif END .)
    NOT             reduce using rule 95 (if -> IF expression expression elsif END .)
    NOT_SYMBOL      reduce using rule 95 (if -> IF expression expression elsif END .)
    FOR             reduce using rule 95 (if -> IF expression expression elsif END .)
    YIELD           reduce using rule 95 (if -> IF expression expression elsif END .)
    RETRY           reduce using rule 95 (if -> IF expression expression elsif END .)
    RETURN          reduce using rule 95 (if -> IF expression expression elsif END .)
    BREAK           reduce using rule 95 (if -> IF expression expression elsif END .)
    NEXT            reduce using rule 95 (if -> IF expression expression elsif END .)
    REDO            reduce using rule 95 (if -> IF expression expression elsif END .)
    CASE            reduce using rule 95 (if -> IF expression expression elsif END .)
    NUMBER          reduce using rule 95 (if -> IF expression expression elsif END .)
    THEN            reduce using rule 95 (if -> IF expression expression elsif END .)
    WHEN            reduce using rule 95 (if -> IF expression expression elsif END .)
    RPAREN          reduce using rule 95 (if -> IF expression expression elsif END .)
    ELSIF           reduce using rule 95 (if -> IF expression expression elsif END .)
    OR_SYMBOL       reduce using rule 95 (if -> IF expression expression elsif END .)
    RKEY            reduce using rule 95 (if -> IF expression expression elsif END .)


state 304

    (99) if -> IF expression expression elsif else . END

    END             shift and go to state 332


state 305

    (97) if -> IF expression expression else END .

    IF              reduce using rule 97 (if -> IF expression expression else END .)
    UNLESS          reduce using rule 97 (if -> IF expression expression else END .)
    AND             reduce using rule 97 (if -> IF expression expression else END .)
    OR              reduce using rule 97 (if -> IF expression expression else END .)
    NOTEQUAL        reduce using rule 97 (if -> IF expression expression else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 97 (if -> IF expression expression else END .)
    RANGE_INCLUSIVE reduce using rule 97 (if -> IF expression expression else END .)
    RANGE_EXCLUSIVE reduce using rule 97 (if -> IF expression expression else END .)
    WHILE           reduce using rule 97 (if -> IF expression expression else END .)
    UNTIL           reduce using rule 97 (if -> IF expression expression else END .)
    DO              reduce using rule 97 (if -> IF expression expression else END .)
    LKEY            reduce using rule 97 (if -> IF expression expression else END .)
    $end            reduce using rule 97 (if -> IF expression expression else END .)
    END             reduce using rule 97 (if -> IF expression expression else END .)
    RESCUE          reduce using rule 97 (if -> IF expression expression else END .)
    ENSURE          reduce using rule 97 (if -> IF expression expression else END .)
    ELSE            reduce using rule 97 (if -> IF expression expression else END .)
    DOT             reduce using rule 97 (if -> IF expression expression else END .)
    STRING          reduce using rule 97 (if -> IF expression expression else END .)
    VAR_GLOBAL      reduce using rule 97 (if -> IF expression expression else END .)
    VAR_INSTANCE    reduce using rule 97 (if -> IF expression expression else END .)
    VAR_CLASS       reduce using rule 97 (if -> IF expression expression else END .)
    VAR_LOCAL       reduce using rule 97 (if -> IF expression expression else END .)
    VAR_SYSTEM      reduce using rule 97 (if -> IF expression expression else END .)
    VAR_CONSTANT    reduce using rule 97 (if -> IF expression expression else END .)
    LBRACKET        reduce using rule 97 (if -> IF expression expression else END .)
    IDENTIFIER      reduce using rule 97 (if -> IF expression expression else END .)
    SUPER           reduce using rule 97 (if -> IF expression expression else END .)
    LPAREN          reduce using rule 97 (if -> IF expression expression else END .)
    BEGIN           reduce using rule 97 (if -> IF expression expression else END .)
    CLASS           reduce using rule 97 (if -> IF expression expression else END .)
    MODULE          reduce using rule 97 (if -> IF expression expression else END .)
    DEF             reduce using rule 97 (if -> IF expression expression else END .)
    ALIAS           reduce using rule 97 (if -> IF expression expression else END .)
    UNDEF           reduce using rule 97 (if -> IF expression expression else END .)
    DEFINED_OP      reduce using rule 97 (if -> IF expression expression else END .)
    DOUBLE_QUOTED   reduce using rule 97 (if -> IF expression expression else END .)
    PRINT           reduce using rule 97 (if -> IF expression expression else END .)
    PUTS            reduce using rule 97 (if -> IF expression expression else END .)
    NOT             reduce using rule 97 (if -> IF expression expression else END .)
    NOT_SYMBOL      reduce using rule 97 (if -> IF expression expression else END .)
    FOR             reduce using rule 97 (if -> IF expression expression else END .)
    YIELD           reduce using rule 97 (if -> IF expression expression else END .)
    RETRY           reduce using rule 97 (if -> IF expression expression else END .)
    RETURN          reduce using rule 97 (if -> IF expression expression else END .)
    BREAK           reduce using rule 97 (if -> IF expression expression else END .)
    NEXT            reduce using rule 97 (if -> IF expression expression else END .)
    REDO            reduce using rule 97 (if -> IF expression expression else END .)
    CASE            reduce using rule 97 (if -> IF expression expression else END .)
    NUMBER          reduce using rule 97 (if -> IF expression expression else END .)
    THEN            reduce using rule 97 (if -> IF expression expression else END .)
    WHEN            reduce using rule 97 (if -> IF expression expression else END .)
    RPAREN          reduce using rule 97 (if -> IF expression expression else END .)
    ELSIF           reduce using rule 97 (if -> IF expression expression else END .)
    OR_SYMBOL       reduce using rule 97 (if -> IF expression expression else END .)
    RKEY            reduce using rule 97 (if -> IF expression expression else END .)


state 306

    (101) elsif -> ELSIF expression . expression END
    (102) elsif -> ELSIF expression . THEN expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    THEN            shift and go to state 334
    IF              shift and go to state 207
    UNLESS          shift and go to state 208
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 209
    UNTIL           shift and go to state 210
    DO              shift and go to state 100
    LKEY            shift and go to state 211
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 333
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 307

    (94) if -> IF expression THEN expression END .

    IF              reduce using rule 94 (if -> IF expression THEN expression END .)
    UNLESS          reduce using rule 94 (if -> IF expression THEN expression END .)
    AND             reduce using rule 94 (if -> IF expression THEN expression END .)
    OR              reduce using rule 94 (if -> IF expression THEN expression END .)
    NOTEQUAL        reduce using rule 94 (if -> IF expression THEN expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 94 (if -> IF expression THEN expression END .)
    RANGE_INCLUSIVE reduce using rule 94 (if -> IF expression THEN expression END .)
    RANGE_EXCLUSIVE reduce using rule 94 (if -> IF expression THEN expression END .)
    WHILE           reduce using rule 94 (if -> IF expression THEN expression END .)
    UNTIL           reduce using rule 94 (if -> IF expression THEN expression END .)
    DO              reduce using rule 94 (if -> IF expression THEN expression END .)
    LKEY            reduce using rule 94 (if -> IF expression THEN expression END .)
    $end            reduce using rule 94 (if -> IF expression THEN expression END .)
    END             reduce using rule 94 (if -> IF expression THEN expression END .)
    RESCUE          reduce using rule 94 (if -> IF expression THEN expression END .)
    ENSURE          reduce using rule 94 (if -> IF expression THEN expression END .)
    ELSE            reduce using rule 94 (if -> IF expression THEN expression END .)
    DOT             reduce using rule 94 (if -> IF expression THEN expression END .)
    STRING          reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_GLOBAL      reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_INSTANCE    reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_CLASS       reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_LOCAL       reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_SYSTEM      reduce using rule 94 (if -> IF expression THEN expression END .)
    VAR_CONSTANT    reduce using rule 94 (if -> IF expression THEN expression END .)
    LBRACKET        reduce using rule 94 (if -> IF expression THEN expression END .)
    IDENTIFIER      reduce using rule 94 (if -> IF expression THEN expression END .)
    SUPER           reduce using rule 94 (if -> IF expression THEN expression END .)
    LPAREN          reduce using rule 94 (if -> IF expression THEN expression END .)
    BEGIN           reduce using rule 94 (if -> IF expression THEN expression END .)
    CLASS           reduce using rule 94 (if -> IF expression THEN expression END .)
    MODULE          reduce using rule 94 (if -> IF expression THEN expression END .)
    DEF             reduce using rule 94 (if -> IF expression THEN expression END .)
    ALIAS           reduce using rule 94 (if -> IF expression THEN expression END .)
    UNDEF           reduce using rule 94 (if -> IF expression THEN expression END .)
    DEFINED_OP      reduce using rule 94 (if -> IF expression THEN expression END .)
    DOUBLE_QUOTED   reduce using rule 94 (if -> IF expression THEN expression END .)
    PRINT           reduce using rule 94 (if -> IF expression THEN expression END .)
    PUTS            reduce using rule 94 (if -> IF expression THEN expression END .)
    NOT             reduce using rule 94 (if -> IF expression THEN expression END .)
    NOT_SYMBOL      reduce using rule 94 (if -> IF expression THEN expression END .)
    FOR             reduce using rule 94 (if -> IF expression THEN expression END .)
    YIELD           reduce using rule 94 (if -> IF expression THEN expression END .)
    RETRY           reduce using rule 94 (if -> IF expression THEN expression END .)
    RETURN          reduce using rule 94 (if -> IF expression THEN expression END .)
    BREAK           reduce using rule 94 (if -> IF expression THEN expression END .)
    NEXT            reduce using rule 94 (if -> IF expression THEN expression END .)
    REDO            reduce using rule 94 (if -> IF expression THEN expression END .)
    CASE            reduce using rule 94 (if -> IF expression THEN expression END .)
    NUMBER          reduce using rule 94 (if -> IF expression THEN expression END .)
    THEN            reduce using rule 94 (if -> IF expression THEN expression END .)
    WHEN            reduce using rule 94 (if -> IF expression THEN expression END .)
    RPAREN          reduce using rule 94 (if -> IF expression THEN expression END .)
    ELSIF           reduce using rule 94 (if -> IF expression THEN expression END .)
    OR_SYMBOL       reduce using rule 94 (if -> IF expression THEN expression END .)
    RKEY            reduce using rule 94 (if -> IF expression THEN expression END .)


state 308

    (96) if -> IF expression THEN expression elsif . END
    (100) if -> IF expression THEN expression elsif . else END
    (103) else -> . ELSE expression

    END             shift and go to state 335
    ELSE            shift and go to state 234

    else                           shift and go to state 336

state 309

    (98) if -> IF expression THEN expression else . END

    END             shift and go to state 337


state 310

    (106) unless -> UNLESS expression THEN expression END .

    IF              reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    UNLESS          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    AND             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    OR              reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    NOTEQUAL        reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RANGE_INCLUSIVE reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RANGE_EXCLUSIVE reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    WHILE           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    UNTIL           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    DO              reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    LKEY            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    $end            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    END             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RESCUE          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    ENSURE          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    ELSE            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    DOT             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    STRING          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_GLOBAL      reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_INSTANCE    reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_CLASS       reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_LOCAL       reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_SYSTEM      reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    VAR_CONSTANT    reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    LBRACKET        reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    IDENTIFIER      reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    SUPER           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    LPAREN          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    BEGIN           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    CLASS           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    MODULE          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    DEF             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    ALIAS           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    UNDEF           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    DEFINED_OP      reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    DOUBLE_QUOTED   reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    PRINT           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    PUTS            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    NOT             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    NOT_SYMBOL      reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    FOR             reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    YIELD           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RETRY           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RETURN          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    BREAK           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    NEXT            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    REDO            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    CASE            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    NUMBER          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    THEN            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    WHEN            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RPAREN          reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    ELSIF           reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    OR_SYMBOL       reduce using rule 106 (unless -> UNLESS expression THEN expression END .)
    RKEY            reduce using rule 106 (unless -> UNLESS expression THEN expression END .)


state 311

    (107) unless -> UNLESS expression THEN expression else . END

    END             shift and go to state 338


state 312

    (128) while -> WHILE expression DO expression END .

    IF              reduce using rule 128 (while -> WHILE expression DO expression END .)
    UNLESS          reduce using rule 128 (while -> WHILE expression DO expression END .)
    AND             reduce using rule 128 (while -> WHILE expression DO expression END .)
    OR              reduce using rule 128 (while -> WHILE expression DO expression END .)
    NOTEQUAL        reduce using rule 128 (while -> WHILE expression DO expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 128 (while -> WHILE expression DO expression END .)
    RANGE_INCLUSIVE reduce using rule 128 (while -> WHILE expression DO expression END .)
    RANGE_EXCLUSIVE reduce using rule 128 (while -> WHILE expression DO expression END .)
    WHILE           reduce using rule 128 (while -> WHILE expression DO expression END .)
    UNTIL           reduce using rule 128 (while -> WHILE expression DO expression END .)
    DO              reduce using rule 128 (while -> WHILE expression DO expression END .)
    LKEY            reduce using rule 128 (while -> WHILE expression DO expression END .)
    $end            reduce using rule 128 (while -> WHILE expression DO expression END .)
    END             reduce using rule 128 (while -> WHILE expression DO expression END .)
    RESCUE          reduce using rule 128 (while -> WHILE expression DO expression END .)
    ENSURE          reduce using rule 128 (while -> WHILE expression DO expression END .)
    ELSE            reduce using rule 128 (while -> WHILE expression DO expression END .)
    DOT             reduce using rule 128 (while -> WHILE expression DO expression END .)
    STRING          reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_GLOBAL      reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_INSTANCE    reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_CLASS       reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_LOCAL       reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_SYSTEM      reduce using rule 128 (while -> WHILE expression DO expression END .)
    VAR_CONSTANT    reduce using rule 128 (while -> WHILE expression DO expression END .)
    LBRACKET        reduce using rule 128 (while -> WHILE expression DO expression END .)
    IDENTIFIER      reduce using rule 128 (while -> WHILE expression DO expression END .)
    SUPER           reduce using rule 128 (while -> WHILE expression DO expression END .)
    LPAREN          reduce using rule 128 (while -> WHILE expression DO expression END .)
    BEGIN           reduce using rule 128 (while -> WHILE expression DO expression END .)
    CLASS           reduce using rule 128 (while -> WHILE expression DO expression END .)
    MODULE          reduce using rule 128 (while -> WHILE expression DO expression END .)
    DEF             reduce using rule 128 (while -> WHILE expression DO expression END .)
    ALIAS           reduce using rule 128 (while -> WHILE expression DO expression END .)
    UNDEF           reduce using rule 128 (while -> WHILE expression DO expression END .)
    DEFINED_OP      reduce using rule 128 (while -> WHILE expression DO expression END .)
    DOUBLE_QUOTED   reduce using rule 128 (while -> WHILE expression DO expression END .)
    PRINT           reduce using rule 128 (while -> WHILE expression DO expression END .)
    PUTS            reduce using rule 128 (while -> WHILE expression DO expression END .)
    NOT             reduce using rule 128 (while -> WHILE expression DO expression END .)
    NOT_SYMBOL      reduce using rule 128 (while -> WHILE expression DO expression END .)
    FOR             reduce using rule 128 (while -> WHILE expression DO expression END .)
    YIELD           reduce using rule 128 (while -> WHILE expression DO expression END .)
    RETRY           reduce using rule 128 (while -> WHILE expression DO expression END .)
    RETURN          reduce using rule 128 (while -> WHILE expression DO expression END .)
    BREAK           reduce using rule 128 (while -> WHILE expression DO expression END .)
    NEXT            reduce using rule 128 (while -> WHILE expression DO expression END .)
    REDO            reduce using rule 128 (while -> WHILE expression DO expression END .)
    CASE            reduce using rule 128 (while -> WHILE expression DO expression END .)
    NUMBER          reduce using rule 128 (while -> WHILE expression DO expression END .)
    THEN            reduce using rule 128 (while -> WHILE expression DO expression END .)
    WHEN            reduce using rule 128 (while -> WHILE expression DO expression END .)
    RPAREN          reduce using rule 128 (while -> WHILE expression DO expression END .)
    ELSIF           reduce using rule 128 (while -> WHILE expression DO expression END .)
    OR_SYMBOL       reduce using rule 128 (while -> WHILE expression DO expression END .)
    RKEY            reduce using rule 128 (while -> WHILE expression DO expression END .)


state 313

    (130) until -> UNTIL expression DO expression END .

    IF              reduce using rule 130 (until -> UNTIL expression DO expression END .)
    UNLESS          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    AND             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    OR              reduce using rule 130 (until -> UNTIL expression DO expression END .)
    NOTEQUAL        reduce using rule 130 (until -> UNTIL expression DO expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RANGE_INCLUSIVE reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RANGE_EXCLUSIVE reduce using rule 130 (until -> UNTIL expression DO expression END .)
    WHILE           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    UNTIL           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    DO              reduce using rule 130 (until -> UNTIL expression DO expression END .)
    LKEY            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    $end            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    END             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RESCUE          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    ENSURE          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    ELSE            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    DOT             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    STRING          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_GLOBAL      reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_INSTANCE    reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_CLASS       reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_LOCAL       reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_SYSTEM      reduce using rule 130 (until -> UNTIL expression DO expression END .)
    VAR_CONSTANT    reduce using rule 130 (until -> UNTIL expression DO expression END .)
    LBRACKET        reduce using rule 130 (until -> UNTIL expression DO expression END .)
    IDENTIFIER      reduce using rule 130 (until -> UNTIL expression DO expression END .)
    SUPER           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    LPAREN          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    BEGIN           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    CLASS           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    MODULE          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    DEF             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    ALIAS           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    UNDEF           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    DEFINED_OP      reduce using rule 130 (until -> UNTIL expression DO expression END .)
    DOUBLE_QUOTED   reduce using rule 130 (until -> UNTIL expression DO expression END .)
    PRINT           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    PUTS            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    NOT             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    NOT_SYMBOL      reduce using rule 130 (until -> UNTIL expression DO expression END .)
    FOR             reduce using rule 130 (until -> UNTIL expression DO expression END .)
    YIELD           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RETRY           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RETURN          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    BREAK           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    NEXT            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    REDO            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    CASE            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    NUMBER          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    THEN            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    WHEN            reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RPAREN          reduce using rule 130 (until -> UNTIL expression DO expression END .)
    ELSIF           reduce using rule 130 (until -> UNTIL expression DO expression END .)
    OR_SYMBOL       reduce using rule 130 (until -> UNTIL expression DO expression END .)
    RKEY            reduce using rule 130 (until -> UNTIL expression DO expression END .)


state 314

    (136) for -> FOR IDENTIFIER IN expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 339
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 315

    (135) for -> FOR IDENTIFIER IN expression DO . expression END
    (133) iterator -> expression DO . OR_SYMBOL expression OR_SYMBOL expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    OR_SYMBOL       shift and go to state 174
    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 340
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 316

    (112) case -> CASE expression when else END .

    IF              reduce using rule 112 (case -> CASE expression when else END .)
    UNLESS          reduce using rule 112 (case -> CASE expression when else END .)
    AND             reduce using rule 112 (case -> CASE expression when else END .)
    OR              reduce using rule 112 (case -> CASE expression when else END .)
    NOTEQUAL        reduce using rule 112 (case -> CASE expression when else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 112 (case -> CASE expression when else END .)
    RANGE_INCLUSIVE reduce using rule 112 (case -> CASE expression when else END .)
    RANGE_EXCLUSIVE reduce using rule 112 (case -> CASE expression when else END .)
    WHILE           reduce using rule 112 (case -> CASE expression when else END .)
    UNTIL           reduce using rule 112 (case -> CASE expression when else END .)
    DO              reduce using rule 112 (case -> CASE expression when else END .)
    LKEY            reduce using rule 112 (case -> CASE expression when else END .)
    $end            reduce using rule 112 (case -> CASE expression when else END .)
    END             reduce using rule 112 (case -> CASE expression when else END .)
    RESCUE          reduce using rule 112 (case -> CASE expression when else END .)
    ENSURE          reduce using rule 112 (case -> CASE expression when else END .)
    ELSE            reduce using rule 112 (case -> CASE expression when else END .)
    DOT             reduce using rule 112 (case -> CASE expression when else END .)
    STRING          reduce using rule 112 (case -> CASE expression when else END .)
    VAR_GLOBAL      reduce using rule 112 (case -> CASE expression when else END .)
    VAR_INSTANCE    reduce using rule 112 (case -> CASE expression when else END .)
    VAR_CLASS       reduce using rule 112 (case -> CASE expression when else END .)
    VAR_LOCAL       reduce using rule 112 (case -> CASE expression when else END .)
    VAR_SYSTEM      reduce using rule 112 (case -> CASE expression when else END .)
    VAR_CONSTANT    reduce using rule 112 (case -> CASE expression when else END .)
    LBRACKET        reduce using rule 112 (case -> CASE expression when else END .)
    IDENTIFIER      reduce using rule 112 (case -> CASE expression when else END .)
    SUPER           reduce using rule 112 (case -> CASE expression when else END .)
    LPAREN          reduce using rule 112 (case -> CASE expression when else END .)
    BEGIN           reduce using rule 112 (case -> CASE expression when else END .)
    CLASS           reduce using rule 112 (case -> CASE expression when else END .)
    MODULE          reduce using rule 112 (case -> CASE expression when else END .)
    DEF             reduce using rule 112 (case -> CASE expression when else END .)
    ALIAS           reduce using rule 112 (case -> CASE expression when else END .)
    UNDEF           reduce using rule 112 (case -> CASE expression when else END .)
    DEFINED_OP      reduce using rule 112 (case -> CASE expression when else END .)
    DOUBLE_QUOTED   reduce using rule 112 (case -> CASE expression when else END .)
    PRINT           reduce using rule 112 (case -> CASE expression when else END .)
    PUTS            reduce using rule 112 (case -> CASE expression when else END .)
    NOT             reduce using rule 112 (case -> CASE expression when else END .)
    NOT_SYMBOL      reduce using rule 112 (case -> CASE expression when else END .)
    FOR             reduce using rule 112 (case -> CASE expression when else END .)
    YIELD           reduce using rule 112 (case -> CASE expression when else END .)
    RETRY           reduce using rule 112 (case -> CASE expression when else END .)
    RETURN          reduce using rule 112 (case -> CASE expression when else END .)
    BREAK           reduce using rule 112 (case -> CASE expression when else END .)
    NEXT            reduce using rule 112 (case -> CASE expression when else END .)
    REDO            reduce using rule 112 (case -> CASE expression when else END .)
    CASE            reduce using rule 112 (case -> CASE expression when else END .)
    NUMBER          reduce using rule 112 (case -> CASE expression when else END .)
    THEN            reduce using rule 112 (case -> CASE expression when else END .)
    WHEN            reduce using rule 112 (case -> CASE expression when else END .)
    RPAREN          reduce using rule 112 (case -> CASE expression when else END .)
    ELSIF           reduce using rule 112 (case -> CASE expression when else END .)
    OR_SYMBOL       reduce using rule 112 (case -> CASE expression when else END .)
    RKEY            reduce using rule 112 (case -> CASE expression when else END .)


state 317

    (113) when -> WHEN it_expression THEN . expression
    (114) when -> WHEN it_expression THEN . expression when
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 341
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 318

    (115) when -> WHEN it_expression expression .
    (116) when -> WHEN it_expression expression . when
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (113) when -> . WHEN it_expression THEN expression
    (114) when -> . WHEN it_expression THEN expression when
    (115) when -> . WHEN it_expression expression
    (116) when -> . WHEN it_expression expression when

    END             reduce using rule 115 (when -> WHEN it_expression expression .)
    ELSE            reduce using rule 115 (when -> WHEN it_expression expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    WHEN            shift and go to state 233

    when                           shift and go to state 342

state 319

    (118) it_expression -> expression it_expression .

    THEN            reduce using rule 118 (it_expression -> expression it_expression .)
    STRING          reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_GLOBAL      reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_INSTANCE    reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_CLASS       reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_LOCAL       reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_SYSTEM      reduce using rule 118 (it_expression -> expression it_expression .)
    VAR_CONSTANT    reduce using rule 118 (it_expression -> expression it_expression .)
    LBRACKET        reduce using rule 118 (it_expression -> expression it_expression .)
    LKEY            reduce using rule 118 (it_expression -> expression it_expression .)
    IDENTIFIER      reduce using rule 118 (it_expression -> expression it_expression .)
    SUPER           reduce using rule 118 (it_expression -> expression it_expression .)
    LPAREN          reduce using rule 118 (it_expression -> expression it_expression .)
    BEGIN           reduce using rule 118 (it_expression -> expression it_expression .)
    END             reduce using rule 118 (it_expression -> expression it_expression .)
    CLASS           reduce using rule 118 (it_expression -> expression it_expression .)
    MODULE          reduce using rule 118 (it_expression -> expression it_expression .)
    DEF             reduce using rule 118 (it_expression -> expression it_expression .)
    ALIAS           reduce using rule 118 (it_expression -> expression it_expression .)
    UNDEF           reduce using rule 118 (it_expression -> expression it_expression .)
    DEFINED_OP      reduce using rule 118 (it_expression -> expression it_expression .)
    DOUBLE_QUOTED   reduce using rule 118 (it_expression -> expression it_expression .)
    PRINT           reduce using rule 118 (it_expression -> expression it_expression .)
    PUTS            reduce using rule 118 (it_expression -> expression it_expression .)
    IF              reduce using rule 118 (it_expression -> expression it_expression .)
    UNLESS          reduce using rule 118 (it_expression -> expression it_expression .)
    NOT             reduce using rule 118 (it_expression -> expression it_expression .)
    NOT_SYMBOL      reduce using rule 118 (it_expression -> expression it_expression .)
    WHILE           reduce using rule 118 (it_expression -> expression it_expression .)
    UNTIL           reduce using rule 118 (it_expression -> expression it_expression .)
    FOR             reduce using rule 118 (it_expression -> expression it_expression .)
    YIELD           reduce using rule 118 (it_expression -> expression it_expression .)
    RETRY           reduce using rule 118 (it_expression -> expression it_expression .)
    RETURN          reduce using rule 118 (it_expression -> expression it_expression .)
    BREAK           reduce using rule 118 (it_expression -> expression it_expression .)
    NEXT            reduce using rule 118 (it_expression -> expression it_expression .)
    REDO            reduce using rule 118 (it_expression -> expression it_expression .)
    CASE            reduce using rule 118 (it_expression -> expression it_expression .)
    NUMBER          reduce using rule 118 (it_expression -> expression it_expression .)


state 320

    (133) iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 343
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 321

    (134) iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression . RKEY
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    RKEY            shift and go to state 344
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 322

    (43) args_hash -> data HASH_ROCKET data COMMA args_hash .

    RKEY            reduce using rule 43 (args_hash -> data HASH_ROCKET data COMMA args_hash .)


state 323

    (49) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .

    EQUAL_SYMBOL    reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    IF              reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    UNLESS          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    AND             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    OR              reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NOTEQUAL        reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RANGE_INCLUSIVE reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    WHILE           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    UNTIL           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DO              reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    $end            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    END             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RESCUE          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ENSURE          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ELSE            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DOT             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    STRING          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    BEGIN           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DEF             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    PRINT           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    PUTS            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NOT             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NOT_SYMBOL      reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    FOR             reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    YIELD           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RETRY           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RETURN          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    BREAK           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NEXT            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    REDO            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    CASE            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    THEN            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    WHEN            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RPAREN          reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ELSIF           reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    OR_SYMBOL       reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    RKEY            reduce using rule 49 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)


state 324

    (142) begin_expression -> BEGIN expression RESCUE expression ENSURE expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 345
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 325

    (143) begin_expression -> BEGIN expression RESCUE expression ELSE expression . END
    (145) begin_expression -> BEGIN expression RESCUE expression ELSE expression . ENSURE expression END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 346
    ENSURE          shift and go to state 347
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 326

    (144) begin_expression -> BEGIN expression ELSE expression ENSURE expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 348
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 327

    (155) class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .

    IF              reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    UNLESS          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    AND             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    OR              reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    NOTEQUAL        reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RANGE_INCLUSIVE reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RANGE_EXCLUSIVE reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    WHILE           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    UNTIL           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    DO              reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    LKEY            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    $end            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    END             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RESCUE          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    ENSURE          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    ELSE            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    DOT             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    STRING          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_GLOBAL      reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_INSTANCE    reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_CLASS       reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_LOCAL       reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_SYSTEM      reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    VAR_CONSTANT    reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    LBRACKET        reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    IDENTIFIER      reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    SUPER           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    LPAREN          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    BEGIN           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    CLASS           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    MODULE          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    DEF             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    ALIAS           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    UNDEF           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    DEFINED_OP      reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    DOUBLE_QUOTED   reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    PRINT           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    PUTS            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    NOT             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    NOT_SYMBOL      reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    FOR             reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    YIELD           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RETRY           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RETURN          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    BREAK           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    NEXT            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    REDO            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    CASE            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    NUMBER          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    THEN            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    WHEN            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RPAREN          reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    ELSIF           reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    OR_SYMBOL       reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)
    RKEY            reduce using rule 155 (class_definitions -> CLASS IDENTIFIER LESSERTHAN SUPER expression END .)


state 328

    (159) singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .

    IF              reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    UNLESS          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    AND             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    OR              reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    NOTEQUAL        reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RANGE_INCLUSIVE reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RANGE_EXCLUSIVE reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    WHILE           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    UNTIL           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    DO              reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    LKEY            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    $end            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    END             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RESCUE          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    ENSURE          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    ELSE            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    DOT             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    STRING          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    LBRACKET        reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    SUPER           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    LPAREN          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    BEGIN           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    CLASS           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    MODULE          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    DEF             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    ALIAS           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    UNDEF           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    PRINT           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    PUTS            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    NOT             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    NOT_SYMBOL      reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    FOR             reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    YIELD           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RETRY           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RETURN          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    BREAK           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    NEXT            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    REDO            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    CASE            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    NUMBER          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    THEN            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    WHEN            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RPAREN          reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    ELSIF           reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    OR_SYMBOL       reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)
    RKEY            reduce using rule 159 (singleton_method_definitions -> DEF expression DOT IDENTIFIER expression END .)


state 329

    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method . RPAREN expression END

    RPAREN          shift and go to state 349


state 330

    (51) args_method -> data .
    (52) args_method -> data . COMMA args_method
    (170) opmate -> data . op data
    (171) op -> . PLUS
    (172) op -> . MINUS
    (173) op -> . TIMES
    (174) op -> . DIVIDE
    (175) op -> . MOD
    (176) op -> . EQUAL
    (177) op -> . NOTEQUAL
    (178) op -> . GREATERTHAN
    (179) op -> . GREATERTHANEQUAL
    (180) op -> . LESSERTHAN
    (181) op -> . LESSERTHANEQUAL

    RPAREN          reduce using rule 51 (args_method -> data .)
    COMMA           shift and go to state 229
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    EQUAL           shift and go to state 118
    NOTEQUAL        shift and go to state 119
    GREATERTHAN     shift and go to state 120
    GREATERTHANEQUAL shift and go to state 121
    LESSERTHAN      shift and go to state 122
    LESSERTHANEQUAL shift and go to state 123

    op                             shift and go to state 134

state 331

    (30) concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .

    DOUBLE_QUOTED   reduce using rule 30 (concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .)
    IDENTIFIER      reduce using rule 30 (concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .)


state 332

    (99) if -> IF expression expression elsif else END .

    IF              reduce using rule 99 (if -> IF expression expression elsif else END .)
    UNLESS          reduce using rule 99 (if -> IF expression expression elsif else END .)
    AND             reduce using rule 99 (if -> IF expression expression elsif else END .)
    OR              reduce using rule 99 (if -> IF expression expression elsif else END .)
    NOTEQUAL        reduce using rule 99 (if -> IF expression expression elsif else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 99 (if -> IF expression expression elsif else END .)
    RANGE_INCLUSIVE reduce using rule 99 (if -> IF expression expression elsif else END .)
    RANGE_EXCLUSIVE reduce using rule 99 (if -> IF expression expression elsif else END .)
    WHILE           reduce using rule 99 (if -> IF expression expression elsif else END .)
    UNTIL           reduce using rule 99 (if -> IF expression expression elsif else END .)
    DO              reduce using rule 99 (if -> IF expression expression elsif else END .)
    LKEY            reduce using rule 99 (if -> IF expression expression elsif else END .)
    $end            reduce using rule 99 (if -> IF expression expression elsif else END .)
    END             reduce using rule 99 (if -> IF expression expression elsif else END .)
    RESCUE          reduce using rule 99 (if -> IF expression expression elsif else END .)
    ENSURE          reduce using rule 99 (if -> IF expression expression elsif else END .)
    ELSE            reduce using rule 99 (if -> IF expression expression elsif else END .)
    DOT             reduce using rule 99 (if -> IF expression expression elsif else END .)
    STRING          reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_GLOBAL      reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_INSTANCE    reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_CLASS       reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_LOCAL       reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_SYSTEM      reduce using rule 99 (if -> IF expression expression elsif else END .)
    VAR_CONSTANT    reduce using rule 99 (if -> IF expression expression elsif else END .)
    LBRACKET        reduce using rule 99 (if -> IF expression expression elsif else END .)
    IDENTIFIER      reduce using rule 99 (if -> IF expression expression elsif else END .)
    SUPER           reduce using rule 99 (if -> IF expression expression elsif else END .)
    LPAREN          reduce using rule 99 (if -> IF expression expression elsif else END .)
    BEGIN           reduce using rule 99 (if -> IF expression expression elsif else END .)
    CLASS           reduce using rule 99 (if -> IF expression expression elsif else END .)
    MODULE          reduce using rule 99 (if -> IF expression expression elsif else END .)
    DEF             reduce using rule 99 (if -> IF expression expression elsif else END .)
    ALIAS           reduce using rule 99 (if -> IF expression expression elsif else END .)
    UNDEF           reduce using rule 99 (if -> IF expression expression elsif else END .)
    DEFINED_OP      reduce using rule 99 (if -> IF expression expression elsif else END .)
    DOUBLE_QUOTED   reduce using rule 99 (if -> IF expression expression elsif else END .)
    PRINT           reduce using rule 99 (if -> IF expression expression elsif else END .)
    PUTS            reduce using rule 99 (if -> IF expression expression elsif else END .)
    NOT             reduce using rule 99 (if -> IF expression expression elsif else END .)
    NOT_SYMBOL      reduce using rule 99 (if -> IF expression expression elsif else END .)
    FOR             reduce using rule 99 (if -> IF expression expression elsif else END .)
    YIELD           reduce using rule 99 (if -> IF expression expression elsif else END .)
    RETRY           reduce using rule 99 (if -> IF expression expression elsif else END .)
    RETURN          reduce using rule 99 (if -> IF expression expression elsif else END .)
    BREAK           reduce using rule 99 (if -> IF expression expression elsif else END .)
    NEXT            reduce using rule 99 (if -> IF expression expression elsif else END .)
    REDO            reduce using rule 99 (if -> IF expression expression elsif else END .)
    CASE            reduce using rule 99 (if -> IF expression expression elsif else END .)
    NUMBER          reduce using rule 99 (if -> IF expression expression elsif else END .)
    THEN            reduce using rule 99 (if -> IF expression expression elsif else END .)
    WHEN            reduce using rule 99 (if -> IF expression expression elsif else END .)
    RPAREN          reduce using rule 99 (if -> IF expression expression elsif else END .)
    ELSIF           reduce using rule 99 (if -> IF expression expression elsif else END .)
    OR_SYMBOL       reduce using rule 99 (if -> IF expression expression elsif else END .)
    RKEY            reduce using rule 99 (if -> IF expression expression elsif else END .)


state 333

    (101) elsif -> ELSIF expression expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 350
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 334

    (102) elsif -> ELSIF expression THEN . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 351
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 335

    (96) if -> IF expression THEN expression elsif END .

    IF              reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    UNLESS          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    AND             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    OR              reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    NOTEQUAL        reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RANGE_INCLUSIVE reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RANGE_EXCLUSIVE reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    WHILE           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    UNTIL           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    DO              reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    LKEY            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    $end            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    END             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RESCUE          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    ENSURE          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    ELSE            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    DOT             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    STRING          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_GLOBAL      reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_INSTANCE    reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_CLASS       reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_LOCAL       reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_SYSTEM      reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    VAR_CONSTANT    reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    LBRACKET        reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    IDENTIFIER      reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    SUPER           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    LPAREN          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    BEGIN           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    CLASS           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    MODULE          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    DEF             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    ALIAS           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    UNDEF           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    DEFINED_OP      reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    DOUBLE_QUOTED   reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    PRINT           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    PUTS            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    NOT             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    NOT_SYMBOL      reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    FOR             reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    YIELD           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RETRY           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RETURN          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    BREAK           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    NEXT            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    REDO            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    CASE            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    NUMBER          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    THEN            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    WHEN            reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RPAREN          reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    ELSIF           reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    OR_SYMBOL       reduce using rule 96 (if -> IF expression THEN expression elsif END .)
    RKEY            reduce using rule 96 (if -> IF expression THEN expression elsif END .)


state 336

    (100) if -> IF expression THEN expression elsif else . END

    END             shift and go to state 352


state 337

    (98) if -> IF expression THEN expression else END .

    IF              reduce using rule 98 (if -> IF expression THEN expression else END .)
    UNLESS          reduce using rule 98 (if -> IF expression THEN expression else END .)
    AND             reduce using rule 98 (if -> IF expression THEN expression else END .)
    OR              reduce using rule 98 (if -> IF expression THEN expression else END .)
    NOTEQUAL        reduce using rule 98 (if -> IF expression THEN expression else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 98 (if -> IF expression THEN expression else END .)
    RANGE_INCLUSIVE reduce using rule 98 (if -> IF expression THEN expression else END .)
    RANGE_EXCLUSIVE reduce using rule 98 (if -> IF expression THEN expression else END .)
    WHILE           reduce using rule 98 (if -> IF expression THEN expression else END .)
    UNTIL           reduce using rule 98 (if -> IF expression THEN expression else END .)
    DO              reduce using rule 98 (if -> IF expression THEN expression else END .)
    LKEY            reduce using rule 98 (if -> IF expression THEN expression else END .)
    $end            reduce using rule 98 (if -> IF expression THEN expression else END .)
    END             reduce using rule 98 (if -> IF expression THEN expression else END .)
    RESCUE          reduce using rule 98 (if -> IF expression THEN expression else END .)
    ENSURE          reduce using rule 98 (if -> IF expression THEN expression else END .)
    ELSE            reduce using rule 98 (if -> IF expression THEN expression else END .)
    DOT             reduce using rule 98 (if -> IF expression THEN expression else END .)
    STRING          reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_GLOBAL      reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_INSTANCE    reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_CLASS       reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_LOCAL       reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_SYSTEM      reduce using rule 98 (if -> IF expression THEN expression else END .)
    VAR_CONSTANT    reduce using rule 98 (if -> IF expression THEN expression else END .)
    LBRACKET        reduce using rule 98 (if -> IF expression THEN expression else END .)
    IDENTIFIER      reduce using rule 98 (if -> IF expression THEN expression else END .)
    SUPER           reduce using rule 98 (if -> IF expression THEN expression else END .)
    LPAREN          reduce using rule 98 (if -> IF expression THEN expression else END .)
    BEGIN           reduce using rule 98 (if -> IF expression THEN expression else END .)
    CLASS           reduce using rule 98 (if -> IF expression THEN expression else END .)
    MODULE          reduce using rule 98 (if -> IF expression THEN expression else END .)
    DEF             reduce using rule 98 (if -> IF expression THEN expression else END .)
    ALIAS           reduce using rule 98 (if -> IF expression THEN expression else END .)
    UNDEF           reduce using rule 98 (if -> IF expression THEN expression else END .)
    DEFINED_OP      reduce using rule 98 (if -> IF expression THEN expression else END .)
    DOUBLE_QUOTED   reduce using rule 98 (if -> IF expression THEN expression else END .)
    PRINT           reduce using rule 98 (if -> IF expression THEN expression else END .)
    PUTS            reduce using rule 98 (if -> IF expression THEN expression else END .)
    NOT             reduce using rule 98 (if -> IF expression THEN expression else END .)
    NOT_SYMBOL      reduce using rule 98 (if -> IF expression THEN expression else END .)
    FOR             reduce using rule 98 (if -> IF expression THEN expression else END .)
    YIELD           reduce using rule 98 (if -> IF expression THEN expression else END .)
    RETRY           reduce using rule 98 (if -> IF expression THEN expression else END .)
    RETURN          reduce using rule 98 (if -> IF expression THEN expression else END .)
    BREAK           reduce using rule 98 (if -> IF expression THEN expression else END .)
    NEXT            reduce using rule 98 (if -> IF expression THEN expression else END .)
    REDO            reduce using rule 98 (if -> IF expression THEN expression else END .)
    CASE            reduce using rule 98 (if -> IF expression THEN expression else END .)
    NUMBER          reduce using rule 98 (if -> IF expression THEN expression else END .)
    THEN            reduce using rule 98 (if -> IF expression THEN expression else END .)
    WHEN            reduce using rule 98 (if -> IF expression THEN expression else END .)
    RPAREN          reduce using rule 98 (if -> IF expression THEN expression else END .)
    ELSIF           reduce using rule 98 (if -> IF expression THEN expression else END .)
    OR_SYMBOL       reduce using rule 98 (if -> IF expression THEN expression else END .)
    RKEY            reduce using rule 98 (if -> IF expression THEN expression else END .)


state 338

    (107) unless -> UNLESS expression THEN expression else END .

    IF              reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    UNLESS          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    AND             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    OR              reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    NOTEQUAL        reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RANGE_INCLUSIVE reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RANGE_EXCLUSIVE reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    WHILE           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    UNTIL           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    DO              reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    LKEY            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    $end            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    END             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RESCUE          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    ENSURE          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    ELSE            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    DOT             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    STRING          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_GLOBAL      reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_INSTANCE    reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_CLASS       reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_LOCAL       reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_SYSTEM      reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    VAR_CONSTANT    reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    LBRACKET        reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    IDENTIFIER      reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    SUPER           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    LPAREN          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    BEGIN           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    CLASS           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    MODULE          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    DEF             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    ALIAS           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    UNDEF           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    DEFINED_OP      reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    DOUBLE_QUOTED   reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    PRINT           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    PUTS            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    NOT             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    NOT_SYMBOL      reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    FOR             reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    YIELD           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RETRY           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RETURN          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    BREAK           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    NEXT            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    REDO            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    CASE            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    NUMBER          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    THEN            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    WHEN            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RPAREN          reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    ELSIF           reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    OR_SYMBOL       reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)
    RKEY            reduce using rule 107 (unless -> UNLESS expression THEN expression else END .)


state 339

    (136) for -> FOR IDENTIFIER IN expression expression END .

    IF              reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    UNLESS          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    AND             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    OR              reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    NOTEQUAL        reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RANGE_INCLUSIVE reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RANGE_EXCLUSIVE reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    WHILE           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    UNTIL           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    DO              reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    LKEY            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    $end            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    END             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RESCUE          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    ENSURE          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    ELSE            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    DOT             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    STRING          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_GLOBAL      reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_INSTANCE    reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_CLASS       reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_LOCAL       reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_SYSTEM      reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    VAR_CONSTANT    reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    LBRACKET        reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    IDENTIFIER      reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    SUPER           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    LPAREN          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    BEGIN           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    CLASS           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    MODULE          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    DEF             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    ALIAS           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    UNDEF           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    DEFINED_OP      reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    DOUBLE_QUOTED   reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    PRINT           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    PUTS            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    NOT             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    NOT_SYMBOL      reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    FOR             reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    YIELD           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RETRY           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RETURN          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    BREAK           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    NEXT            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    REDO            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    CASE            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    NUMBER          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    THEN            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    WHEN            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RPAREN          reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    ELSIF           reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    OR_SYMBOL       reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)
    RKEY            reduce using rule 136 (for -> FOR IDENTIFIER IN expression expression END .)


state 340

    (135) for -> FOR IDENTIFIER IN expression DO expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 353
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 341

    (113) when -> WHEN it_expression THEN expression .
    (114) when -> WHEN it_expression THEN expression . when
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (113) when -> . WHEN it_expression THEN expression
    (114) when -> . WHEN it_expression THEN expression when
    (115) when -> . WHEN it_expression expression
    (116) when -> . WHEN it_expression expression when

    END             reduce using rule 113 (when -> WHEN it_expression THEN expression .)
    ELSE            reduce using rule 113 (when -> WHEN it_expression THEN expression .)
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101
    WHEN            shift and go to state 233

    when                           shift and go to state 354

state 342

    (116) when -> WHEN it_expression expression when .

    END             reduce using rule 116 (when -> WHEN it_expression expression when .)
    ELSE            reduce using rule 116 (when -> WHEN it_expression expression when .)


state 343

    (133) iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .

    IF              reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    UNLESS          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    AND             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    OR              reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    NOTEQUAL        reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RANGE_INCLUSIVE reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RANGE_EXCLUSIVE reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    WHILE           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    UNTIL           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    DO              reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    LKEY            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    $end            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    END             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RESCUE          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    ENSURE          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    ELSE            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    DOT             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    STRING          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_GLOBAL      reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_INSTANCE    reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_CLASS       reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_LOCAL       reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_SYSTEM      reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    VAR_CONSTANT    reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    LBRACKET        reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    IDENTIFIER      reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    SUPER           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    LPAREN          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    BEGIN           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    CLASS           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    MODULE          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    DEF             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    ALIAS           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    UNDEF           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    DEFINED_OP      reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    DOUBLE_QUOTED   reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    PRINT           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    PUTS            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    NOT             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    NOT_SYMBOL      reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    FOR             reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    YIELD           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RETRY           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RETURN          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    BREAK           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    NEXT            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    REDO            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    CASE            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    NUMBER          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    THEN            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    WHEN            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RPAREN          reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    ELSIF           reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    OR_SYMBOL       reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)
    RKEY            reduce using rule 133 (iterator -> expression DO OR_SYMBOL expression OR_SYMBOL expression END .)


state 344

    (134) iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .

    IF              reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    UNLESS          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    AND             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    OR              reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    NOTEQUAL        reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RANGE_INCLUSIVE reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RANGE_EXCLUSIVE reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    WHILE           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    UNTIL           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    DO              reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    LKEY            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    $end            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    END             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RESCUE          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    ENSURE          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    ELSE            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    DOT             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    STRING          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_GLOBAL      reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_INSTANCE    reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_CLASS       reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_LOCAL       reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_SYSTEM      reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    VAR_CONSTANT    reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    LBRACKET        reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    IDENTIFIER      reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    SUPER           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    LPAREN          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    BEGIN           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    CLASS           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    MODULE          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    DEF             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    ALIAS           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    UNDEF           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    DEFINED_OP      reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    DOUBLE_QUOTED   reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    PRINT           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    PUTS            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    NOT             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    NOT_SYMBOL      reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    FOR             reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    YIELD           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RETRY           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RETURN          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    BREAK           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    NEXT            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    REDO            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    CASE            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    NUMBER          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    THEN            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    WHEN            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RPAREN          reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    ELSIF           reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    OR_SYMBOL       reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)
    RKEY            reduce using rule 134 (iterator -> expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY .)


state 345

    (142) begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .

    IF              reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    UNLESS          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    AND             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    OR              reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    NOTEQUAL        reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RANGE_INCLUSIVE reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RANGE_EXCLUSIVE reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    WHILE           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    UNTIL           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    DO              reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    LKEY            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    $end            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    END             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RESCUE          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    ENSURE          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    ELSE            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    DOT             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    STRING          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_GLOBAL      reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_INSTANCE    reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_CLASS       reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_LOCAL       reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_SYSTEM      reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    VAR_CONSTANT    reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    LBRACKET        reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    IDENTIFIER      reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    SUPER           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    LPAREN          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    BEGIN           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    CLASS           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    MODULE          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    DEF             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    ALIAS           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    UNDEF           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    DEFINED_OP      reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    DOUBLE_QUOTED   reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    PRINT           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    PUTS            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    NOT             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    NOT_SYMBOL      reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    FOR             reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    YIELD           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RETRY           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RETURN          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    BREAK           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    NEXT            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    REDO            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    CASE            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    NUMBER          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    THEN            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    WHEN            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RPAREN          reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    ELSIF           reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    OR_SYMBOL       reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)
    RKEY            reduce using rule 142 (begin_expression -> BEGIN expression RESCUE expression ENSURE expression END .)


state 346

    (143) begin_expression -> BEGIN expression RESCUE expression ELSE expression END .

    IF              reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    UNLESS          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    AND             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    OR              reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    NOTEQUAL        reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RANGE_INCLUSIVE reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RANGE_EXCLUSIVE reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    WHILE           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    UNTIL           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    DO              reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    LKEY            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    $end            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    END             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RESCUE          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    ENSURE          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    ELSE            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    DOT             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    STRING          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_GLOBAL      reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_INSTANCE    reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_CLASS       reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_LOCAL       reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_SYSTEM      reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    VAR_CONSTANT    reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    LBRACKET        reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    IDENTIFIER      reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    SUPER           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    LPAREN          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    BEGIN           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    CLASS           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    MODULE          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    DEF             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    ALIAS           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    UNDEF           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    DEFINED_OP      reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    DOUBLE_QUOTED   reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    PRINT           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    PUTS            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    NOT             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    NOT_SYMBOL      reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    FOR             reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    YIELD           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RETRY           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RETURN          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    BREAK           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    NEXT            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    REDO            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    CASE            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    NUMBER          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    THEN            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    WHEN            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RPAREN          reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    ELSIF           reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    OR_SYMBOL       reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)
    RKEY            reduce using rule 143 (begin_expression -> BEGIN expression RESCUE expression ELSE expression END .)


state 347

    (145) begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 355
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 348

    (144) begin_expression -> BEGIN expression ELSE expression ENSURE expression END .

    IF              reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    UNLESS          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    AND             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    OR              reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    NOTEQUAL        reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RANGE_INCLUSIVE reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RANGE_EXCLUSIVE reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    WHILE           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    UNTIL           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    DO              reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    LKEY            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    $end            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    END             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RESCUE          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    ENSURE          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    ELSE            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    DOT             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    STRING          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_GLOBAL      reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_INSTANCE    reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_CLASS       reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_LOCAL       reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_SYSTEM      reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    VAR_CONSTANT    reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    LBRACKET        reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    IDENTIFIER      reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    SUPER           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    LPAREN          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    BEGIN           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    CLASS           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    MODULE          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    DEF             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    ALIAS           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    UNDEF           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    DEFINED_OP      reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    DOUBLE_QUOTED   reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    PRINT           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    PUTS            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    NOT             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    NOT_SYMBOL      reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    FOR             reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    YIELD           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RETRY           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RETURN          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    BREAK           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    NEXT            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    REDO            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    CASE            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    NUMBER          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    THEN            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    WHEN            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RPAREN          reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    ELSIF           reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    OR_SYMBOL       reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)
    RKEY            reduce using rule 144 (begin_expression -> BEGIN expression ELSE expression ENSURE expression END .)


state 349

    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN . expression END
    (2) expression -> . string_literals
    (3) expression -> . prints
    (4) expression -> . variable
    (5) expression -> . array
    (6) expression -> . hash
    (7) expression -> . method_invocation
    (8) expression -> . super
    (9) expression -> . assignment
    (10) expression -> . expression_operations
    (11) expression -> . control_structure
    (12) expression -> . class_definitions
    (13) expression -> . singleton_class_definitions
    (14) expression -> . module_definitions
    (15) expression -> . method_definitions
    (16) expression -> . singleton_method_definitions
    (17) expression -> . alias
    (18) expression -> . undef
    (19) expression -> . defined
    (26) string_literals -> . STRING
    (27) string_literals -> . string_concat
    (31) prints -> . print
    (32) prints -> . puts
    (20) variable -> . VAR_GLOBAL
    (21) variable -> . VAR_INSTANCE
    (22) variable -> . VAR_CLASS
    (23) variable -> . VAR_LOCAL
    (24) variable -> . VAR_SYSTEM
    (25) variable -> . VAR_CONSTANT
    (37) array -> . LBRACKET args_array RBRACKET
    (41) hash -> . LKEY args_hash RKEY
    (48) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (49) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (50) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (46) super -> . SUPER LPAREN RPAREN
    (47) super -> . SUPER LPAREN args_method RPAREN
    (53) assignment -> . variable EQUAL_SYMBOL data
    (54) assignment -> . array_data EQUAL_SYMBOL data
    (55) assignment -> . method_invocation EQUAL_SYMBOL data
    (56) assignment -> . self_assigment
    (57) assignment -> . mult_assigment
    (164) expression_operations -> . opmate
    (165) expression_operations -> . LPAREN opmate RPAREN
    (166) expression_operations -> . expression_operations op expression_operations
    (167) expression_operations -> . expression_operations op opmate
    (168) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (169) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (69) control_structure -> . if
    (70) control_structure -> . if_modifier
    (71) control_structure -> . unless
    (72) control_structure -> . unless_modifier
    (73) control_structure -> . and
    (74) control_structure -> . or
    (75) control_structure -> . not
    (76) control_structure -> . range_expressions
    (77) control_structure -> . while
    (78) control_structure -> . while_modifier
    (79) control_structure -> . until
    (80) control_structure -> . until_modifier
    (81) control_structure -> . iterator
    (82) control_structure -> . for
    (83) control_structure -> . yield
    (84) control_structure -> . begin_expression
    (85) control_structure -> . retry
    (86) control_structure -> . return
    (87) control_structure -> . break
    (88) control_structure -> . next
    (89) control_structure -> . redo
    (90) control_structure -> . BEGIN
    (91) control_structure -> . END
    (92) control_structure -> . case
    (154) class_definitions -> . CLASS IDENTIFIER expression END
    (155) class_definitions -> . CLASS IDENTIFIER LESSERTHAN SUPER expression END
    (156) singleton_class_definitions -> . CLASS BINARY_LEFT_SHIFT_OP expression expression END
    (157) module_definitions -> . MODULE IDENTIFIER expression END
    (158) method_definitions -> . DEF function expression END
    (159) singleton_method_definitions -> . DEF expression DOT IDENTIFIER expression END
    (160) singleton_method_definitions -> . DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END
    (161) alias -> . ALIAS expression expression
    (162) undef -> . UNDEF expression
    (163) defined -> . DEFINED_OP expression
    (28) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (29) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (33) print -> . PRINT expression
    (34) print -> . PRINT LPAREN expression RPAREN
    (35) puts -> . PUTS expression
    (36) puts -> . PUTS LPAREN expression RPAREN
    (38) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (58) self_assigment -> . variable op_assigment data
    (65) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (170) opmate -> . data op data
    (93) if -> . IF expression expression END
    (94) if -> . IF expression THEN expression END
    (95) if -> . IF expression expression elsif END
    (96) if -> . IF expression THEN expression elsif END
    (97) if -> . IF expression expression else END
    (98) if -> . IF expression THEN expression else END
    (99) if -> . IF expression expression elsif else END
    (100) if -> . IF expression THEN expression elsif else END
    (104) if_modifier -> . expression IF expression
    (105) unless -> . UNLESS expression expression END
    (106) unless -> . UNLESS expression THEN expression END
    (107) unless -> . UNLESS expression THEN expression else END
    (108) unless_modifier -> . expression UNLESS expression
    (119) and -> . expression AND expression
    (120) or -> . expression OR expression
    (121) not -> . NOT expression
    (122) not -> . NOT_SYMBOL expression
    (123) not -> . expression NOTEQUAL expression
    (124) not -> . expression OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> . expression RANGE_INCLUSIVE expression
    (126) range_expressions -> . expression RANGE_EXCLUSIVE expression
    (127) while -> . WHILE expression expression END
    (128) while -> . WHILE expression DO expression END
    (129) while_modifier -> . expression WHILE expression
    (130) until -> . UNTIL expression DO expression END
    (131) until -> . UNTIL expression expression END
    (132) until_modifier -> . expression UNTIL expression
    (133) iterator -> . expression DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> . expression LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY
    (135) for -> . FOR IDENTIFIER IN expression DO expression END
    (136) for -> . FOR IDENTIFIER IN expression expression END
    (137) yield -> . YIELD LPAREN expression RPAREN
    (138) yield -> . YIELD expression
    (139) begin_expression -> . BEGIN expression END
    (140) begin_expression -> . BEGIN expression RESCUE expression END
    (141) begin_expression -> . BEGIN expression ENSURE expression END
    (142) begin_expression -> . BEGIN expression RESCUE expression ENSURE expression END
    (143) begin_expression -> . BEGIN expression RESCUE expression ELSE expression END
    (144) begin_expression -> . BEGIN expression ELSE expression ENSURE expression END
    (145) begin_expression -> . BEGIN expression RESCUE expression ELSE expression ENSURE expression END
    (146) retry -> . RETRY
    (147) return -> . RETURN
    (148) return -> . RETURN args_method
    (149) break -> . BREAK
    (150) next -> . NEXT
    (151) redo -> . REDO
    (109) case -> . CASE expression END
    (110) case -> . CASE expression when END
    (111) case -> . CASE expression else END
    (112) case -> . CASE expression when else END
    (66) list_var -> . variable COMMA
    (67) list_var -> . variable COMMA list_var
    (68) list_var -> . variable
    (182) data -> . NUMBER
    (183) data -> . STRING
    (184) data -> . variable

    STRING          shift and go to state 21
    VAR_GLOBAL      shift and go to state 25
    VAR_INSTANCE    shift and go to state 26
    VAR_CLASS       shift and go to state 27
    VAR_LOCAL       shift and go to state 28
    VAR_SYSTEM      shift and go to state 29
    VAR_CONSTANT    shift and go to state 30
    LBRACKET        shift and go to state 31
    LKEY            shift and go to state 32
    IDENTIFIER      shift and go to state 33
    SUPER           shift and go to state 35
    LPAREN          shift and go to state 34
    BEGIN           shift and go to state 62
    END             shift and go to state 63
    CLASS           shift and go to state 65
    MODULE          shift and go to state 66
    DEF             shift and go to state 67
    ALIAS           shift and go to state 68
    UNDEF           shift and go to state 69
    DEFINED_OP      shift and go to state 70
    DOUBLE_QUOTED   shift and go to state 71
    PRINT           shift and go to state 72
    PUTS            shift and go to state 73
    IF              shift and go to state 76
    UNLESS          shift and go to state 77
    NOT             shift and go to state 78
    NOT_SYMBOL      shift and go to state 79
    WHILE           shift and go to state 80
    UNTIL           shift and go to state 81
    FOR             shift and go to state 82
    YIELD           shift and go to state 83
    RETRY           shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    REDO            shift and go to state 88
    CASE            shift and go to state 89
    NUMBER          shift and go to state 74

    expression                     shift and go to state 356
    string_literals                shift and go to state 3
    prints                         shift and go to state 4
    variable                       shift and go to state 5
    array                          shift and go to state 6
    hash                           shift and go to state 7
    method_invocation              shift and go to state 8
    super                          shift and go to state 9
    assignment                     shift and go to state 10
    expression_operations          shift and go to state 11
    control_structure              shift and go to state 12
    class_definitions              shift and go to state 13
    singleton_class_definitions    shift and go to state 14
    module_definitions             shift and go to state 15
    method_definitions             shift and go to state 16
    singleton_method_definitions   shift and go to state 17
    alias                          shift and go to state 18
    undef                          shift and go to state 19
    defined                        shift and go to state 20
    string_concat                  shift and go to state 22
    print                          shift and go to state 23
    puts                           shift and go to state 24
    data                           shift and go to state 36
    array_data                     shift and go to state 37
    self_assigment                 shift and go to state 38
    mult_assigment                 shift and go to state 39
    opmate                         shift and go to state 40
    if                             shift and go to state 41
    if_modifier                    shift and go to state 42
    unless                         shift and go to state 43
    unless_modifier                shift and go to state 44
    and                            shift and go to state 45
    or                             shift and go to state 46
    not                            shift and go to state 47
    range_expressions              shift and go to state 48
    while                          shift and go to state 49
    while_modifier                 shift and go to state 50
    until                          shift and go to state 51
    until_modifier                 shift and go to state 52
    iterator                       shift and go to state 53
    for                            shift and go to state 54
    yield                          shift and go to state 55
    begin_expression               shift and go to state 56
    retry                          shift and go to state 57
    return                         shift and go to state 58
    break                          shift and go to state 59
    next                           shift and go to state 60
    redo                           shift and go to state 61
    case                           shift and go to state 64
    list_var                       shift and go to state 75

state 350

    (101) elsif -> ELSIF expression expression END .

    END             reduce using rule 101 (elsif -> ELSIF expression expression END .)
    ELSE            reduce using rule 101 (elsif -> ELSIF expression expression END .)


state 351

    (102) elsif -> ELSIF expression THEN expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 357
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 352

    (100) if -> IF expression THEN expression elsif else END .

    IF              reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    UNLESS          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    AND             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    OR              reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    NOTEQUAL        reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RANGE_INCLUSIVE reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RANGE_EXCLUSIVE reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    WHILE           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    UNTIL           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    DO              reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    LKEY            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    $end            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    END             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RESCUE          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    ENSURE          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    ELSE            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    DOT             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    STRING          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_GLOBAL      reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_INSTANCE    reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_CLASS       reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_LOCAL       reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_SYSTEM      reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    VAR_CONSTANT    reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    LBRACKET        reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    IDENTIFIER      reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    SUPER           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    LPAREN          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    BEGIN           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    CLASS           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    MODULE          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    DEF             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    ALIAS           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    UNDEF           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    DEFINED_OP      reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    DOUBLE_QUOTED   reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    PRINT           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    PUTS            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    NOT             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    NOT_SYMBOL      reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    FOR             reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    YIELD           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RETRY           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RETURN          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    BREAK           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    NEXT            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    REDO            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    CASE            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    NUMBER          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    THEN            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    WHEN            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RPAREN          reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    ELSIF           reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    OR_SYMBOL       reduce using rule 100 (if -> IF expression THEN expression elsif else END .)
    RKEY            reduce using rule 100 (if -> IF expression THEN expression elsif else END .)


state 353

    (135) for -> FOR IDENTIFIER IN expression DO expression END .

    IF              reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    UNLESS          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    AND             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    OR              reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    NOTEQUAL        reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RANGE_INCLUSIVE reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RANGE_EXCLUSIVE reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    WHILE           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    UNTIL           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    DO              reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    LKEY            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    $end            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    END             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RESCUE          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    ENSURE          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    ELSE            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    DOT             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    STRING          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_GLOBAL      reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_INSTANCE    reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_CLASS       reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_LOCAL       reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_SYSTEM      reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    VAR_CONSTANT    reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    LBRACKET        reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    IDENTIFIER      reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    SUPER           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    LPAREN          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    BEGIN           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    CLASS           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    MODULE          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    DEF             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    ALIAS           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    UNDEF           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    DEFINED_OP      reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    DOUBLE_QUOTED   reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    PRINT           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    PUTS            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    NOT             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    NOT_SYMBOL      reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    FOR             reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    YIELD           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RETRY           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RETURN          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    BREAK           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    NEXT            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    REDO            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    CASE            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    NUMBER          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    THEN            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    WHEN            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RPAREN          reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    ELSIF           reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    OR_SYMBOL       reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)
    RKEY            reduce using rule 135 (for -> FOR IDENTIFIER IN expression DO expression END .)


state 354

    (114) when -> WHEN it_expression THEN expression when .

    END             reduce using rule 114 (when -> WHEN it_expression THEN expression when .)
    ELSE            reduce using rule 114 (when -> WHEN it_expression THEN expression when .)


state 355

    (145) begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 358
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 356

    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression . END
    (104) if_modifier -> expression . IF expression
    (108) unless_modifier -> expression . UNLESS expression
    (119) and -> expression . AND expression
    (120) or -> expression . OR expression
    (123) not -> expression . NOTEQUAL expression
    (124) not -> expression . OPPOSITE_MATCHED_STRINGS_OP expression
    (125) range_expressions -> expression . RANGE_INCLUSIVE expression
    (126) range_expressions -> expression . RANGE_EXCLUSIVE expression
    (129) while_modifier -> expression . WHILE expression
    (132) until_modifier -> expression . UNTIL expression
    (133) iterator -> expression . DO OR_SYMBOL expression OR_SYMBOL expression END
    (134) iterator -> expression . LKEY OR_SYMBOL expression OR_SYMBOL expression RKEY

    END             shift and go to state 359
    IF              shift and go to state 90
    UNLESS          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    NOTEQUAL        shift and go to state 94
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 95
    RANGE_INCLUSIVE shift and go to state 96
    RANGE_EXCLUSIVE shift and go to state 97
    WHILE           shift and go to state 98
    UNTIL           shift and go to state 99
    DO              shift and go to state 100
    LKEY            shift and go to state 101


state 357

    (102) elsif -> ELSIF expression THEN expression END .

    END             reduce using rule 102 (elsif -> ELSIF expression THEN expression END .)
    ELSE            reduce using rule 102 (elsif -> ELSIF expression THEN expression END .)


state 358

    (145) begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .

    IF              reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    UNLESS          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    AND             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    OR              reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    NOTEQUAL        reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RANGE_INCLUSIVE reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RANGE_EXCLUSIVE reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    WHILE           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    UNTIL           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    DO              reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    LKEY            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    $end            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    END             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RESCUE          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    ENSURE          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    ELSE            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    DOT             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    STRING          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_GLOBAL      reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_INSTANCE    reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_CLASS       reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_LOCAL       reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_SYSTEM      reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    VAR_CONSTANT    reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    LBRACKET        reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    IDENTIFIER      reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    SUPER           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    LPAREN          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    BEGIN           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    CLASS           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    MODULE          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    DEF             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    ALIAS           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    UNDEF           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    DEFINED_OP      reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    DOUBLE_QUOTED   reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    PRINT           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    PUTS            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    NOT             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    NOT_SYMBOL      reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    FOR             reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    YIELD           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RETRY           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RETURN          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    BREAK           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    NEXT            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    REDO            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    CASE            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    NUMBER          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    THEN            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    WHEN            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RPAREN          reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    ELSIF           reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    OR_SYMBOL       reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)
    RKEY            reduce using rule 145 (begin_expression -> BEGIN expression RESCUE expression ELSE expression ENSURE expression END .)


state 359

    (160) singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .

    IF              reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    UNLESS          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    AND             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    OR              reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    NOTEQUAL        reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RANGE_INCLUSIVE reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RANGE_EXCLUSIVE reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    WHILE           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    UNTIL           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    DO              reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    LKEY            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    $end            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    END             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RESCUE          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    ENSURE          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    ELSE            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    DOT             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    STRING          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_GLOBAL      reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_INSTANCE    reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_CLASS       reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_LOCAL       reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_SYSTEM      reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    VAR_CONSTANT    reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    LBRACKET        reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    IDENTIFIER      reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    SUPER           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    LPAREN          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    BEGIN           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    CLASS           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    MODULE          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    DEF             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    ALIAS           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    UNDEF           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    DEFINED_OP      reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    DOUBLE_QUOTED   reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    PRINT           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    PUTS            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    NOT             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    NOT_SYMBOL      reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    FOR             reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    YIELD           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RETRY           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RETURN          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    BREAK           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    NEXT            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    REDO            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    CASE            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    NUMBER          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    THEN            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    WHEN            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RPAREN          reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    ELSIF           reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    OR_SYMBOL       reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)
    RKEY            reduce using rule 160 (singleton_method_definitions -> DEF expression DOT IDENTIFIER LPAREN args_method RPAREN expression END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL_SYMBOL in state 5 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 11 resolved as shift
WARNING: shift/reduce conflict for STRING in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 62 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 62 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 62 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 62 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 62 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 62 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 62 resolved as shift
WARNING: shift/reduce conflict for END in state 62 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 62 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 62 resolved as shift
WARNING: shift/reduce conflict for DEF in state 62 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 62 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 62 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 62 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 62 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 62 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 62 resolved as shift
WARNING: shift/reduce conflict for NOT in state 62 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 62 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 62 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 62 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 62 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 62 resolved as shift
WARNING: shift/reduce conflict for REDO in state 62 resolved as shift
WARNING: shift/reduce conflict for CASE in state 62 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 62 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 144 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 144 resolved as shift
WARNING: shift/reduce conflict for AND in state 144 resolved as shift
WARNING: shift/reduce conflict for OR in state 144 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 144 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 144 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 144 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 144 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 144 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 144 resolved as shift
WARNING: shift/reduce conflict for DO in state 144 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 144 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 145 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 145 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 145 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 145 resolved as shift
WARNING: shift/reduce conflict for DO in state 145 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 147 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 147 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 147 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 147 resolved as shift
WARNING: shift/reduce conflict for DO in state 147 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 149 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR in state 149 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 149 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 149 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 149 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 149 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 149 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 149 resolved as shift
WARNING: shift/reduce conflict for DO in state 149 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 149 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 154 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 154 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 154 resolved as shift
WARNING: shift/reduce conflict for DO in state 154 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 155 resolved as shift
WARNING: shift/reduce conflict for AND in state 155 resolved as shift
WARNING: shift/reduce conflict for OR in state 155 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 155 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 155 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 155 resolved as shift
WARNING: shift/reduce conflict for DO in state 155 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 160 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 160 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 160 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 160 resolved as shift
WARNING: shift/reduce conflict for DO in state 160 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 164 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 164 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 164 resolved as shift
WARNING: shift/reduce conflict for DO in state 164 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 165 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 165 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 165 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 165 resolved as shift
WARNING: shift/reduce conflict for DO in state 165 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 166 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 166 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 166 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 166 resolved as shift
WARNING: shift/reduce conflict for DO in state 166 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 166 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 167 resolved as shift
WARNING: shift/reduce conflict for AND in state 167 resolved as shift
WARNING: shift/reduce conflict for OR in state 167 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 167 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 167 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 167 resolved as shift
WARNING: shift/reduce conflict for DO in state 167 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 168 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 168 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 168 resolved as shift
WARNING: shift/reduce conflict for DO in state 168 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 169 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 169 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 169 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 169 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 169 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 169 resolved as shift
WARNING: shift/reduce conflict for DO in state 169 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 169 resolved as shift
WARNING: shift/reduce conflict for IF in state 170 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 170 resolved as shift
WARNING: shift/reduce conflict for AND in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 170 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 170 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 170 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 170 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 170 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 170 resolved as shift
WARNING: shift/reduce conflict for DO in state 170 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 170 resolved as shift
WARNING: shift/reduce conflict for IF in state 171 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 171 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 171 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 171 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 171 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 171 resolved as shift
WARNING: shift/reduce conflict for DO in state 171 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 171 resolved as shift
WARNING: shift/reduce conflict for IF in state 172 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 172 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 172 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 172 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 172 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 172 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 172 resolved as shift
WARNING: shift/reduce conflict for DO in state 172 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 172 resolved as shift
WARNING: shift/reduce conflict for IF in state 173 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 173 resolved as shift
WARNING: shift/reduce conflict for OR in state 173 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 173 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 173 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 173 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 173 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 173 resolved as shift
WARNING: shift/reduce conflict for DO in state 173 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 181 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 181 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 181 resolved as shift
WARNING: shift/reduce conflict for MOD in state 181 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 181 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 181 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 181 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 181 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 181 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 181 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for MOD in state 190 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 206 resolved as shift
WARNING: shift/reduce conflict for AND in state 206 resolved as shift
WARNING: shift/reduce conflict for OR in state 206 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 206 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 206 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 206 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 206 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 206 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 206 resolved as shift
WARNING: shift/reduce conflict for DO in state 206 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 206 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 215 resolved as shift
WARNING: shift/reduce conflict for EQUAL_SYMBOL in state 216 resolved as shift
WARNING: shift/reduce conflict for THEN in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 255 resolved as shift
WARNING: shift/reduce conflict for AND in state 255 resolved as shift
WARNING: shift/reduce conflict for OR in state 255 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 255 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 255 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 255 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 255 resolved as shift
WARNING: shift/reduce conflict for DO in state 255 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 255 resolved as shift
WARNING: shift/reduce conflict for STRING in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 255 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 255 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 255 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 255 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 255 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 255 resolved as shift
WARNING: shift/reduce conflict for END in state 255 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 255 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 255 resolved as shift
WARNING: shift/reduce conflict for DEF in state 255 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 255 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 255 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 255 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 255 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 255 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 255 resolved as shift
WARNING: shift/reduce conflict for NOT in state 255 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 255 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 255 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 255 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 255 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 255 resolved as shift
WARNING: shift/reduce conflict for REDO in state 255 resolved as shift
WARNING: shift/reduce conflict for CASE in state 255 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 255 resolved as shift
WARNING: shift/reduce conflict for THEN in state 256 resolved as shift
WARNING: shift/reduce conflict for IF in state 256 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 256 resolved as shift
WARNING: shift/reduce conflict for AND in state 256 resolved as shift
WARNING: shift/reduce conflict for OR in state 256 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 256 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 256 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 256 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 256 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 256 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 256 resolved as shift
WARNING: shift/reduce conflict for DO in state 256 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 256 resolved as shift
WARNING: shift/reduce conflict for STRING in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 256 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 256 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 256 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 256 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 256 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 256 resolved as shift
WARNING: shift/reduce conflict for END in state 256 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 256 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 256 resolved as shift
WARNING: shift/reduce conflict for DEF in state 256 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 256 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 256 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 256 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 256 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 256 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 256 resolved as shift
WARNING: shift/reduce conflict for NOT in state 256 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 256 resolved as shift
WARNING: shift/reduce conflict for FOR in state 256 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 256 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 256 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 256 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 256 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 256 resolved as shift
WARNING: shift/reduce conflict for REDO in state 256 resolved as shift
WARNING: shift/reduce conflict for CASE in state 256 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 256 resolved as shift
WARNING: shift/reduce conflict for DO in state 257 resolved as shift
WARNING: shift/reduce conflict for IF in state 257 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 257 resolved as shift
WARNING: shift/reduce conflict for AND in state 257 resolved as shift
WARNING: shift/reduce conflict for OR in state 257 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 257 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 257 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 257 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 257 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 257 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 257 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 257 resolved as shift
WARNING: shift/reduce conflict for STRING in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 257 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 257 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 257 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 257 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 257 resolved as shift
WARNING: shift/reduce conflict for END in state 257 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 257 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 257 resolved as shift
WARNING: shift/reduce conflict for DEF in state 257 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 257 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 257 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 257 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 257 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 257 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 257 resolved as shift
WARNING: shift/reduce conflict for NOT in state 257 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 257 resolved as shift
WARNING: shift/reduce conflict for FOR in state 257 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 257 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 257 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 257 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 257 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 257 resolved as shift
WARNING: shift/reduce conflict for REDO in state 257 resolved as shift
WARNING: shift/reduce conflict for CASE in state 257 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 257 resolved as shift
WARNING: shift/reduce conflict for DO in state 258 resolved as shift
WARNING: shift/reduce conflict for IF in state 258 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 258 resolved as shift
WARNING: shift/reduce conflict for AND in state 258 resolved as shift
WARNING: shift/reduce conflict for OR in state 258 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 258 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 258 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 258 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 258 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 258 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 258 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 258 resolved as shift
WARNING: shift/reduce conflict for STRING in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 258 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 258 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 258 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 258 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 258 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 258 resolved as shift
WARNING: shift/reduce conflict for END in state 258 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 258 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 258 resolved as shift
WARNING: shift/reduce conflict for DEF in state 258 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 258 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 258 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 258 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 258 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 258 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 258 resolved as shift
WARNING: shift/reduce conflict for NOT in state 258 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 258 resolved as shift
WARNING: shift/reduce conflict for FOR in state 258 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 258 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 258 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 258 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 258 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 258 resolved as shift
WARNING: shift/reduce conflict for REDO in state 258 resolved as shift
WARNING: shift/reduce conflict for CASE in state 258 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 258 resolved as shift
WARNING: shift/reduce conflict for IF in state 282 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 282 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 282 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 282 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_SYSTEM in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR_CONSTANT in state 282 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 282 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 282 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 282 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 282 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 282 resolved as shift
WARNING: shift/reduce conflict for END in state 282 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 282 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 282 resolved as shift
WARNING: shift/reduce conflict for DEF in state 282 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 282 resolved as shift
WARNING: shift/reduce conflict for UNDEF in state 282 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 282 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTED in state 282 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 282 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 282 resolved as shift
WARNING: shift/reduce conflict for NOT in state 282 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 282 resolved as shift
WARNING: shift/reduce conflict for FOR in state 282 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 282 resolved as shift
WARNING: shift/reduce conflict for RETRY in state 282 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 282 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 282 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 282 resolved as shift
WARNING: shift/reduce conflict for REDO in state 282 resolved as shift
WARNING: shift/reduce conflict for CASE in state 282 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 282 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 286 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 286 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 286 resolved as shift
WARNING: shift/reduce conflict for MOD in state 286 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 286 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 286 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 286 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 286 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 286 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 286 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 290 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 290 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 290 resolved as shift
WARNING: shift/reduce conflict for MOD in state 290 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 290 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 290 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 290 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 290 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 290 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 290 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (expression -> variable)
WARNING: rejected rule (data -> variable) in state 5
WARNING: reduce/reduce conflict in state 21 resolved using rule (string_literals -> STRING)
WARNING: rejected rule (data -> STRING) in state 21
WARNING: reduce/reduce conflict in state 182 resolved using rule (expression_operations -> opmate)
WARNING: rejected rule (expression_operations -> expression_operations op opmate) in state 182
WARNING: reduce/reduce conflict in state 216 resolved using rule (expression -> variable)
WARNING: rejected rule (data -> variable) in state 216
WARNING: reduce/reduce conflict in state 286 resolved using rule (expression_operations -> LPAREN opmate RPAREN)
WARNING: rejected rule (expression_operations -> expression_operations op LPAREN opmate RPAREN) in state 286
WARNING: Rule (expression_operations -> expression_operations op opmate) is never reduced
WARNING: Rule (expression_operations -> expression_operations op LPAREN opmate RPAREN) is never reduced
