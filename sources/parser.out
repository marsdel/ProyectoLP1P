Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AND_EQUAL
    BEGIN
    BINARY_AND_OP
    BINARY_LEFT_EQUAL
    BINARY_LEFT_SHIFT_OP
    BINARY_RIGHT_EQUAL
    BINARY_RIGHT_SHIFT_OP
    BINARY_XOR_OP
    BREAK
    CASE
    CASE_EQUALITY
    COMBINED_COMPARISON_OP
    COMPLEMENT_OP
    DEFINED
    DO
    ENSURE
    EXPONENT_AND
    FALSE
    FOR
    IN
    MATCHED_STRINGS_OP
    NEXT
    NIL
    NOT
    NOT_SYMBOL
    OPPOSITE_MATCHED_STRINGS_OP
    OPTIONAL_SYMBOL
    OR
    OR_EQUAL
    OR_SYMBOL
    OVERLOAD_MINUS
    OVERLOAD_PLUS
    POW
    PUTS
    RANGE_EXCLUSIVE
    RANGE_INCLUSIVE
    REDO
    RESCUE
    RETRY
    RETURN
    SELF
    SINGLE_AND_EQUAL
    SINGLE_OR_EQUAL
    SYMBOL
    TERM
    TRUE
    UNARY_OP
    UNLESS
    UNTIL
    WHEN
    WHILE
    XOR_EQUAL
    YIELD
    _FILE_
    _LINE_

Grammar

Rule 0     S' -> program
Rule 1     program -> expression
Rule 2     expression -> string_literals
Rule 3     expression -> variable
Rule 4     expression -> array
Rule 5     expression -> hash
Rule 6     expression -> method_invocation
Rule 7     expression -> super
Rule 8     expression -> assignment
Rule 9     expression -> expression_operations
Rule 10    expression -> control_structure
Rule 11    expression -> class_definition
Rule 12    expression -> module_definition
Rule 13    expression -> method_definition
Rule 14    expression -> alias
Rule 15    expression -> undef
Rule 16    expression -> defined
Rule 17    variable -> VAR_GLOBAL
Rule 18    variable -> VAR_INSTANCE
Rule 19    variable -> VAR_CLASS
Rule 20    variable -> VAR_LOCAL
Rule 21    variable -> VAR_SYSTEM
Rule 22    variable -> VAR_CONSTANT
Rule 23    string_literals -> STRING
Rule 24    string_literals -> string_concat
Rule 25    string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
Rule 26    string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
Rule 27    concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY
Rule 28    array -> LBRACKET args_array RBRACKET
Rule 29    array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET
Rule 30    args_array -> data
Rule 31    args_array -> data COMMA args_array
Rule 32    hash -> LKEY args_hash RKEY
Rule 33    args_hash -> data HASH_ROCKET data
Rule 34    args_hash -> data HASH_ROCKET data COMMA args_hash
Rule 35    function -> IDENTIFIER LPAREN RPAREN
Rule 36    function -> IDENTIFIER LPAREN args_method RPAREN
Rule 37    super -> SUPER LPAREN RPAREN
Rule 38    super -> SUPER LPAREN args_method RPAREN
Rule 39    method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
Rule 40    method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
Rule 41    method_invocation -> IDENTIFIER DOT IDENTIFIER
Rule 42    args_method -> data
Rule 43    args_method -> data COMMA args_method
Rule 44    assignment -> variable EQUAL_SYMBOL data
Rule 45    assignment -> array_data EQUAL_SYMBOL data
Rule 46    assignment -> method_invocation EQUAL_SYMBOL data
Rule 47    assignment -> self_assigment
Rule 48    assignment -> mult_assigment
Rule 49    self_assigment -> variable op_assigment data
Rule 50    op_assigment -> PLUS_EQUAL
Rule 51    op_assigment -> MINUS_EQUAL
Rule 52    op_assigment -> TIMES_EQUAL
Rule 53    op_assigment -> DIVIDE_EQUAL
Rule 54    op_assigment -> MOD_EQUAL
Rule 55    op_assigment -> POW_EQUAL
Rule 56    mult_assigment -> list_var EQUAL_SYMBOL args_method
Rule 57    list_var -> variable COMMA
Rule 58    list_var -> variable COMMA list_var
Rule 59    list_var -> variable
Rule 60    control_structure -> if
Rule 61    if -> IF expression expression END
Rule 62    if -> IF expression THEN expression END
Rule 63    if -> IF expression expression elsif END
Rule 64    if -> IF expression THEN expression elsif END
Rule 65    if -> IF expression expression else END
Rule 66    if -> IF expression THEN expression else END
Rule 67    if -> IF expression expression elsif else END
Rule 68    if -> IF expression THEN expression elsif else END
Rule 69    elsif -> ELSIF expression expression
Rule 70    elsif -> ELSIF expression THEN expression
Rule 71    else -> ELSE expression
Rule 72    class_definition -> CLASS IDENTIFIER expression END
Rule 73    class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
Rule 74    module_definition -> MODULE IDENTIFIER expression END
Rule 75    method_definition -> DEF function expression END
Rule 76    alias -> ALIAS IDENTIFIER IDENTIFIER
Rule 77    alias -> ALIAS VAR_GLOBAL VAR_GLOBAL
Rule 78    undef -> UNDEF IDENTIFIER
Rule 79    defined -> DEFINED_OP expression
Rule 80    expression_operations -> opmate
Rule 81    expression_operations -> LPAREN opmate RPAREN
Rule 82    expression_operations -> expression_operations op expression_operations
Rule 83    expression_operations -> expression_operations op opmate
Rule 84    expression_operations -> LPAREN opmate RPAREN op expression_operations
Rule 85    expression_operations -> expression_operations op LPAREN opmate RPAREN
Rule 86    opmate -> data op data
Rule 87    op -> PLUS
Rule 88    op -> MINUS
Rule 89    op -> TIMES
Rule 90    op -> DIVIDE
Rule 91    op -> MOD
Rule 92    op -> EQUAL
Rule 93    op -> NOTEQUAL
Rule 94    op -> GREATERTHAN
Rule 95    op -> GREATERTHANEQUAL
Rule 96    op -> LESSERTHAN
Rule 97    op -> LESSERTHANEQUAL
Rule 98    data -> NUMBER
Rule 99    data -> STRING
Rule 100   data -> variable

Terminals, with rules where they appear

ALIAS                : 76 77
AND                  : 
AND_EQUAL            : 
BEGIN                : 
BINARY_AND_OP        : 
BINARY_LEFT_EQUAL    : 
BINARY_LEFT_SHIFT_OP : 
BINARY_RIGHT_EQUAL   : 
BINARY_RIGHT_SHIFT_OP : 
BINARY_XOR_OP        : 
BREAK                : 
CASE                 : 
CASE_EQUALITY        : 
CLASS                : 72 73
COMBINED_COMPARISON_OP : 
COMMA                : 31 34 43 57 58
COMPLEMENT_OP        : 
DEF                  : 75
DEFINED              : 
DEFINED_OP           : 79
DIVIDE               : 90
DIVIDE_EQUAL         : 53
DO                   : 
DOT                  : 39 40 41
DOUBLE_QUOTED        : 25 25 26 26
ELSE                 : 71
ELSIF                : 69 70
END                  : 61 62 63 64 65 66 67 68 72 73 74 75
ENSURE               : 
EQUAL                : 92
EQUAL_SYMBOL         : 44 45 46 56
EXPONENT_AND         : 
FALSE                : 
FOR                  : 
GREATERTHAN          : 94
GREATERTHANEQUAL     : 95
HASH_ROCKET          : 33 34
IDENTIFIER           : 25 26 26 27 29 35 36 39 39 40 40 41 41 72 73 73 74 76 76 78
IF                   : 61 62 63 64 65 66 67 68
IN                   : 
LBRACKET             : 28 29
LESSERTHAN           : 73 96
LESSERTHANEQUAL      : 97
LKEY                 : 27 32
LPAREN               : 35 36 37 38 39 40 81 84 85
MATCHED_STRINGS_OP   : 
MINUS                : 88
MINUS_EQUAL          : 51
MOD                  : 91
MODULE               : 74
MOD_EQUAL            : 54
NEXT                 : 
NIL                  : 
NOT                  : 
NOTEQUAL             : 93
NOT_SYMBOL           : 
NUMBER               : 29 98
NUMBER_SIGN          : 27
OPPOSITE_MATCHED_STRINGS_OP : 
OPTIONAL_SYMBOL      : 
OR                   : 
OR_EQUAL             : 
OR_SYMBOL            : 
OVERLOAD_MINUS       : 
OVERLOAD_PLUS        : 
PLUS                 : 87
PLUS_EQUAL           : 50
POW                  : 
POW_EQUAL            : 55
PUTS                 : 
RANGE_EXCLUSIVE      : 
RANGE_INCLUSIVE      : 
RBRACKET             : 28 29
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RKEY                 : 27 32
RPAREN               : 35 36 37 38 39 40 81 84 85
SELF                 : 
SINGLE_AND_EQUAL     : 
SINGLE_OR_EQUAL      : 
STRING               : 23 99
SUPER                : 37 38
SYMBOL               : 
TERM                 : 
THEN                 : 62 64 66 68 70
TIMES                : 89
TIMES_EQUAL          : 52
TRUE                 : 
UNARY_OP             : 
UNDEF                : 78
UNLESS               : 
UNTIL                : 
VAR_CLASS            : 19
VAR_CONSTANT         : 22
VAR_GLOBAL           : 17 77 77
VAR_INSTANCE         : 18
VAR_LOCAL            : 20
VAR_SYSTEM           : 21
WHEN                 : 
WHILE                : 
XOR_EQUAL            : 
YIELD                : 
_FILE_               : 
_LINE_               : 
error                : 

Nonterminals, with rules where they appear

alias                : 14
args_array           : 28 31
args_hash            : 32 34
args_method          : 36 38 40 43 56
array                : 4
array_data           : 45
assignment           : 8
class_definition     : 11
concat               : 25 26
control_structure    : 10
data                 : 30 31 33 33 34 34 42 43 44 45 46 49 86 86
defined              : 16
else                 : 65 66 67 68
elsif                : 63 64 67 68
expression           : 1 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 72 73 74 75 79
expression_operations : 9 82 82 83 84 85
function             : 75
hash                 : 5
if                   : 60
list_var             : 56 58
method_definition    : 13
method_invocation    : 6 46
module_definition    : 12
mult_assigment       : 48
op                   : 82 83 84 85 86
op_assigment         : 49
opmate               : 80 81 83 84 85
program              : 0
self_assigment       : 47
string_concat        : 24
string_literals      : 2
super                : 7
undef                : 15
variable             : 3 44 49 57 58 59 100

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    program                        shift and go to state 1
    expression                     shift and go to state 2
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 1

    (0) S' -> program .



state 2

    (1) program -> expression .

    $end            reduce using rule 1 (program -> expression .)


state 3

    (2) expression -> string_literals .

    $end            reduce using rule 2 (expression -> string_literals .)
    THEN            reduce using rule 2 (expression -> string_literals .)
    STRING          reduce using rule 2 (expression -> string_literals .)
    VAR_GLOBAL      reduce using rule 2 (expression -> string_literals .)
    VAR_INSTANCE    reduce using rule 2 (expression -> string_literals .)
    VAR_CLASS       reduce using rule 2 (expression -> string_literals .)
    VAR_LOCAL       reduce using rule 2 (expression -> string_literals .)
    VAR_SYSTEM      reduce using rule 2 (expression -> string_literals .)
    VAR_CONSTANT    reduce using rule 2 (expression -> string_literals .)
    LBRACKET        reduce using rule 2 (expression -> string_literals .)
    LKEY            reduce using rule 2 (expression -> string_literals .)
    IDENTIFIER      reduce using rule 2 (expression -> string_literals .)
    SUPER           reduce using rule 2 (expression -> string_literals .)
    LPAREN          reduce using rule 2 (expression -> string_literals .)
    CLASS           reduce using rule 2 (expression -> string_literals .)
    MODULE          reduce using rule 2 (expression -> string_literals .)
    DEF             reduce using rule 2 (expression -> string_literals .)
    ALIAS           reduce using rule 2 (expression -> string_literals .)
    UNDEF           reduce using rule 2 (expression -> string_literals .)
    DEFINED_OP      reduce using rule 2 (expression -> string_literals .)
    DOUBLE_QUOTED   reduce using rule 2 (expression -> string_literals .)
    IF              reduce using rule 2 (expression -> string_literals .)
    NUMBER          reduce using rule 2 (expression -> string_literals .)
    END             reduce using rule 2 (expression -> string_literals .)
    ELSIF           reduce using rule 2 (expression -> string_literals .)
    ELSE            reduce using rule 2 (expression -> string_literals .)


state 4

    (3) expression -> variable .
    (44) assignment -> variable . EQUAL_SYMBOL data
    (49) self_assigment -> variable . op_assigment data
    (57) list_var -> variable . COMMA
    (58) list_var -> variable . COMMA list_var
    (59) list_var -> variable .
    (100) data -> variable .
    (50) op_assigment -> . PLUS_EQUAL
    (51) op_assigment -> . MINUS_EQUAL
    (52) op_assigment -> . TIMES_EQUAL
    (53) op_assigment -> . DIVIDE_EQUAL
    (54) op_assigment -> . MOD_EQUAL
    (55) op_assigment -> . POW_EQUAL

  ! shift/reduce conflict for EQUAL_SYMBOL resolved as shift
    $end            reduce using rule 3 (expression -> variable .)
    THEN            reduce using rule 3 (expression -> variable .)
    STRING          reduce using rule 3 (expression -> variable .)
    VAR_GLOBAL      reduce using rule 3 (expression -> variable .)
    VAR_INSTANCE    reduce using rule 3 (expression -> variable .)
    VAR_CLASS       reduce using rule 3 (expression -> variable .)
    VAR_LOCAL       reduce using rule 3 (expression -> variable .)
    VAR_SYSTEM      reduce using rule 3 (expression -> variable .)
    VAR_CONSTANT    reduce using rule 3 (expression -> variable .)
    LBRACKET        reduce using rule 3 (expression -> variable .)
    LKEY            reduce using rule 3 (expression -> variable .)
    IDENTIFIER      reduce using rule 3 (expression -> variable .)
    SUPER           reduce using rule 3 (expression -> variable .)
    LPAREN          reduce using rule 3 (expression -> variable .)
    CLASS           reduce using rule 3 (expression -> variable .)
    MODULE          reduce using rule 3 (expression -> variable .)
    DEF             reduce using rule 3 (expression -> variable .)
    ALIAS           reduce using rule 3 (expression -> variable .)
    UNDEF           reduce using rule 3 (expression -> variable .)
    DEFINED_OP      reduce using rule 3 (expression -> variable .)
    DOUBLE_QUOTED   reduce using rule 3 (expression -> variable .)
    IF              reduce using rule 3 (expression -> variable .)
    NUMBER          reduce using rule 3 (expression -> variable .)
    END             reduce using rule 3 (expression -> variable .)
    ELSIF           reduce using rule 3 (expression -> variable .)
    ELSE            reduce using rule 3 (expression -> variable .)
    EQUAL_SYMBOL    shift and go to state 47
    COMMA           shift and go to state 49
    PLUS            reduce using rule 100 (data -> variable .)
    MINUS           reduce using rule 100 (data -> variable .)
    TIMES           reduce using rule 100 (data -> variable .)
    DIVIDE          reduce using rule 100 (data -> variable .)
    MOD             reduce using rule 100 (data -> variable .)
    EQUAL           reduce using rule 100 (data -> variable .)
    NOTEQUAL        reduce using rule 100 (data -> variable .)
    GREATERTHAN     reduce using rule 100 (data -> variable .)
    GREATERTHANEQUAL reduce using rule 100 (data -> variable .)
    LESSERTHAN      reduce using rule 100 (data -> variable .)
    LESSERTHANEQUAL reduce using rule 100 (data -> variable .)
    PLUS_EQUAL      shift and go to state 50
    MINUS_EQUAL     shift and go to state 51
    TIMES_EQUAL     shift and go to state 52
    DIVIDE_EQUAL    shift and go to state 53
    MOD_EQUAL       shift and go to state 54
    POW_EQUAL       shift and go to state 55

  ! EQUAL_SYMBOL    [ reduce using rule 59 (list_var -> variable .) ]

    op_assigment                   shift and go to state 48

state 5

    (4) expression -> array .

    $end            reduce using rule 4 (expression -> array .)
    THEN            reduce using rule 4 (expression -> array .)
    STRING          reduce using rule 4 (expression -> array .)
    VAR_GLOBAL      reduce using rule 4 (expression -> array .)
    VAR_INSTANCE    reduce using rule 4 (expression -> array .)
    VAR_CLASS       reduce using rule 4 (expression -> array .)
    VAR_LOCAL       reduce using rule 4 (expression -> array .)
    VAR_SYSTEM      reduce using rule 4 (expression -> array .)
    VAR_CONSTANT    reduce using rule 4 (expression -> array .)
    LBRACKET        reduce using rule 4 (expression -> array .)
    LKEY            reduce using rule 4 (expression -> array .)
    IDENTIFIER      reduce using rule 4 (expression -> array .)
    SUPER           reduce using rule 4 (expression -> array .)
    LPAREN          reduce using rule 4 (expression -> array .)
    CLASS           reduce using rule 4 (expression -> array .)
    MODULE          reduce using rule 4 (expression -> array .)
    DEF             reduce using rule 4 (expression -> array .)
    ALIAS           reduce using rule 4 (expression -> array .)
    UNDEF           reduce using rule 4 (expression -> array .)
    DEFINED_OP      reduce using rule 4 (expression -> array .)
    DOUBLE_QUOTED   reduce using rule 4 (expression -> array .)
    IF              reduce using rule 4 (expression -> array .)
    NUMBER          reduce using rule 4 (expression -> array .)
    END             reduce using rule 4 (expression -> array .)
    ELSIF           reduce using rule 4 (expression -> array .)
    ELSE            reduce using rule 4 (expression -> array .)


state 6

    (5) expression -> hash .

    $end            reduce using rule 5 (expression -> hash .)
    THEN            reduce using rule 5 (expression -> hash .)
    STRING          reduce using rule 5 (expression -> hash .)
    VAR_GLOBAL      reduce using rule 5 (expression -> hash .)
    VAR_INSTANCE    reduce using rule 5 (expression -> hash .)
    VAR_CLASS       reduce using rule 5 (expression -> hash .)
    VAR_LOCAL       reduce using rule 5 (expression -> hash .)
    VAR_SYSTEM      reduce using rule 5 (expression -> hash .)
    VAR_CONSTANT    reduce using rule 5 (expression -> hash .)
    LBRACKET        reduce using rule 5 (expression -> hash .)
    LKEY            reduce using rule 5 (expression -> hash .)
    IDENTIFIER      reduce using rule 5 (expression -> hash .)
    SUPER           reduce using rule 5 (expression -> hash .)
    LPAREN          reduce using rule 5 (expression -> hash .)
    CLASS           reduce using rule 5 (expression -> hash .)
    MODULE          reduce using rule 5 (expression -> hash .)
    DEF             reduce using rule 5 (expression -> hash .)
    ALIAS           reduce using rule 5 (expression -> hash .)
    UNDEF           reduce using rule 5 (expression -> hash .)
    DEFINED_OP      reduce using rule 5 (expression -> hash .)
    DOUBLE_QUOTED   reduce using rule 5 (expression -> hash .)
    IF              reduce using rule 5 (expression -> hash .)
    NUMBER          reduce using rule 5 (expression -> hash .)
    END             reduce using rule 5 (expression -> hash .)
    ELSIF           reduce using rule 5 (expression -> hash .)
    ELSE            reduce using rule 5 (expression -> hash .)


state 7

    (6) expression -> method_invocation .
    (46) assignment -> method_invocation . EQUAL_SYMBOL data

    $end            reduce using rule 6 (expression -> method_invocation .)
    THEN            reduce using rule 6 (expression -> method_invocation .)
    STRING          reduce using rule 6 (expression -> method_invocation .)
    VAR_GLOBAL      reduce using rule 6 (expression -> method_invocation .)
    VAR_INSTANCE    reduce using rule 6 (expression -> method_invocation .)
    VAR_CLASS       reduce using rule 6 (expression -> method_invocation .)
    VAR_LOCAL       reduce using rule 6 (expression -> method_invocation .)
    VAR_SYSTEM      reduce using rule 6 (expression -> method_invocation .)
    VAR_CONSTANT    reduce using rule 6 (expression -> method_invocation .)
    LBRACKET        reduce using rule 6 (expression -> method_invocation .)
    LKEY            reduce using rule 6 (expression -> method_invocation .)
    IDENTIFIER      reduce using rule 6 (expression -> method_invocation .)
    SUPER           reduce using rule 6 (expression -> method_invocation .)
    LPAREN          reduce using rule 6 (expression -> method_invocation .)
    CLASS           reduce using rule 6 (expression -> method_invocation .)
    MODULE          reduce using rule 6 (expression -> method_invocation .)
    DEF             reduce using rule 6 (expression -> method_invocation .)
    ALIAS           reduce using rule 6 (expression -> method_invocation .)
    UNDEF           reduce using rule 6 (expression -> method_invocation .)
    DEFINED_OP      reduce using rule 6 (expression -> method_invocation .)
    DOUBLE_QUOTED   reduce using rule 6 (expression -> method_invocation .)
    IF              reduce using rule 6 (expression -> method_invocation .)
    NUMBER          reduce using rule 6 (expression -> method_invocation .)
    END             reduce using rule 6 (expression -> method_invocation .)
    ELSIF           reduce using rule 6 (expression -> method_invocation .)
    ELSE            reduce using rule 6 (expression -> method_invocation .)
    EQUAL_SYMBOL    shift and go to state 56


state 8

    (7) expression -> super .

    $end            reduce using rule 7 (expression -> super .)
    THEN            reduce using rule 7 (expression -> super .)
    STRING          reduce using rule 7 (expression -> super .)
    VAR_GLOBAL      reduce using rule 7 (expression -> super .)
    VAR_INSTANCE    reduce using rule 7 (expression -> super .)
    VAR_CLASS       reduce using rule 7 (expression -> super .)
    VAR_LOCAL       reduce using rule 7 (expression -> super .)
    VAR_SYSTEM      reduce using rule 7 (expression -> super .)
    VAR_CONSTANT    reduce using rule 7 (expression -> super .)
    LBRACKET        reduce using rule 7 (expression -> super .)
    LKEY            reduce using rule 7 (expression -> super .)
    IDENTIFIER      reduce using rule 7 (expression -> super .)
    SUPER           reduce using rule 7 (expression -> super .)
    LPAREN          reduce using rule 7 (expression -> super .)
    CLASS           reduce using rule 7 (expression -> super .)
    MODULE          reduce using rule 7 (expression -> super .)
    DEF             reduce using rule 7 (expression -> super .)
    ALIAS           reduce using rule 7 (expression -> super .)
    UNDEF           reduce using rule 7 (expression -> super .)
    DEFINED_OP      reduce using rule 7 (expression -> super .)
    DOUBLE_QUOTED   reduce using rule 7 (expression -> super .)
    IF              reduce using rule 7 (expression -> super .)
    NUMBER          reduce using rule 7 (expression -> super .)
    END             reduce using rule 7 (expression -> super .)
    ELSIF           reduce using rule 7 (expression -> super .)
    ELSE            reduce using rule 7 (expression -> super .)


state 9

    (8) expression -> assignment .

    $end            reduce using rule 8 (expression -> assignment .)
    THEN            reduce using rule 8 (expression -> assignment .)
    STRING          reduce using rule 8 (expression -> assignment .)
    VAR_GLOBAL      reduce using rule 8 (expression -> assignment .)
    VAR_INSTANCE    reduce using rule 8 (expression -> assignment .)
    VAR_CLASS       reduce using rule 8 (expression -> assignment .)
    VAR_LOCAL       reduce using rule 8 (expression -> assignment .)
    VAR_SYSTEM      reduce using rule 8 (expression -> assignment .)
    VAR_CONSTANT    reduce using rule 8 (expression -> assignment .)
    LBRACKET        reduce using rule 8 (expression -> assignment .)
    LKEY            reduce using rule 8 (expression -> assignment .)
    IDENTIFIER      reduce using rule 8 (expression -> assignment .)
    SUPER           reduce using rule 8 (expression -> assignment .)
    LPAREN          reduce using rule 8 (expression -> assignment .)
    CLASS           reduce using rule 8 (expression -> assignment .)
    MODULE          reduce using rule 8 (expression -> assignment .)
    DEF             reduce using rule 8 (expression -> assignment .)
    ALIAS           reduce using rule 8 (expression -> assignment .)
    UNDEF           reduce using rule 8 (expression -> assignment .)
    DEFINED_OP      reduce using rule 8 (expression -> assignment .)
    DOUBLE_QUOTED   reduce using rule 8 (expression -> assignment .)
    IF              reduce using rule 8 (expression -> assignment .)
    NUMBER          reduce using rule 8 (expression -> assignment .)
    END             reduce using rule 8 (expression -> assignment .)
    ELSIF           reduce using rule 8 (expression -> assignment .)
    ELSE            reduce using rule 8 (expression -> assignment .)


state 10

    (9) expression -> expression_operations .
    (82) expression_operations -> expression_operations . op expression_operations
    (83) expression_operations -> expression_operations . op opmate
    (85) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

    $end            reduce using rule 9 (expression -> expression_operations .)
    THEN            reduce using rule 9 (expression -> expression_operations .)
    STRING          reduce using rule 9 (expression -> expression_operations .)
    VAR_GLOBAL      reduce using rule 9 (expression -> expression_operations .)
    VAR_INSTANCE    reduce using rule 9 (expression -> expression_operations .)
    VAR_CLASS       reduce using rule 9 (expression -> expression_operations .)
    VAR_LOCAL       reduce using rule 9 (expression -> expression_operations .)
    VAR_SYSTEM      reduce using rule 9 (expression -> expression_operations .)
    VAR_CONSTANT    reduce using rule 9 (expression -> expression_operations .)
    LBRACKET        reduce using rule 9 (expression -> expression_operations .)
    LKEY            reduce using rule 9 (expression -> expression_operations .)
    IDENTIFIER      reduce using rule 9 (expression -> expression_operations .)
    SUPER           reduce using rule 9 (expression -> expression_operations .)
    LPAREN          reduce using rule 9 (expression -> expression_operations .)
    CLASS           reduce using rule 9 (expression -> expression_operations .)
    MODULE          reduce using rule 9 (expression -> expression_operations .)
    DEF             reduce using rule 9 (expression -> expression_operations .)
    ALIAS           reduce using rule 9 (expression -> expression_operations .)
    UNDEF           reduce using rule 9 (expression -> expression_operations .)
    DEFINED_OP      reduce using rule 9 (expression -> expression_operations .)
    DOUBLE_QUOTED   reduce using rule 9 (expression -> expression_operations .)
    IF              reduce using rule 9 (expression -> expression_operations .)
    NUMBER          reduce using rule 9 (expression -> expression_operations .)
    END             reduce using rule 9 (expression -> expression_operations .)
    ELSIF           reduce using rule 9 (expression -> expression_operations .)
    ELSE            reduce using rule 9 (expression -> expression_operations .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

    op                             shift and go to state 57

state 11

    (10) expression -> control_structure .

    $end            reduce using rule 10 (expression -> control_structure .)
    THEN            reduce using rule 10 (expression -> control_structure .)
    STRING          reduce using rule 10 (expression -> control_structure .)
    VAR_GLOBAL      reduce using rule 10 (expression -> control_structure .)
    VAR_INSTANCE    reduce using rule 10 (expression -> control_structure .)
    VAR_CLASS       reduce using rule 10 (expression -> control_structure .)
    VAR_LOCAL       reduce using rule 10 (expression -> control_structure .)
    VAR_SYSTEM      reduce using rule 10 (expression -> control_structure .)
    VAR_CONSTANT    reduce using rule 10 (expression -> control_structure .)
    LBRACKET        reduce using rule 10 (expression -> control_structure .)
    LKEY            reduce using rule 10 (expression -> control_structure .)
    IDENTIFIER      reduce using rule 10 (expression -> control_structure .)
    SUPER           reduce using rule 10 (expression -> control_structure .)
    LPAREN          reduce using rule 10 (expression -> control_structure .)
    CLASS           reduce using rule 10 (expression -> control_structure .)
    MODULE          reduce using rule 10 (expression -> control_structure .)
    DEF             reduce using rule 10 (expression -> control_structure .)
    ALIAS           reduce using rule 10 (expression -> control_structure .)
    UNDEF           reduce using rule 10 (expression -> control_structure .)
    DEFINED_OP      reduce using rule 10 (expression -> control_structure .)
    DOUBLE_QUOTED   reduce using rule 10 (expression -> control_structure .)
    IF              reduce using rule 10 (expression -> control_structure .)
    NUMBER          reduce using rule 10 (expression -> control_structure .)
    END             reduce using rule 10 (expression -> control_structure .)
    ELSIF           reduce using rule 10 (expression -> control_structure .)
    ELSE            reduce using rule 10 (expression -> control_structure .)


state 12

    (11) expression -> class_definition .

    $end            reduce using rule 11 (expression -> class_definition .)
    THEN            reduce using rule 11 (expression -> class_definition .)
    STRING          reduce using rule 11 (expression -> class_definition .)
    VAR_GLOBAL      reduce using rule 11 (expression -> class_definition .)
    VAR_INSTANCE    reduce using rule 11 (expression -> class_definition .)
    VAR_CLASS       reduce using rule 11 (expression -> class_definition .)
    VAR_LOCAL       reduce using rule 11 (expression -> class_definition .)
    VAR_SYSTEM      reduce using rule 11 (expression -> class_definition .)
    VAR_CONSTANT    reduce using rule 11 (expression -> class_definition .)
    LBRACKET        reduce using rule 11 (expression -> class_definition .)
    LKEY            reduce using rule 11 (expression -> class_definition .)
    IDENTIFIER      reduce using rule 11 (expression -> class_definition .)
    SUPER           reduce using rule 11 (expression -> class_definition .)
    LPAREN          reduce using rule 11 (expression -> class_definition .)
    CLASS           reduce using rule 11 (expression -> class_definition .)
    MODULE          reduce using rule 11 (expression -> class_definition .)
    DEF             reduce using rule 11 (expression -> class_definition .)
    ALIAS           reduce using rule 11 (expression -> class_definition .)
    UNDEF           reduce using rule 11 (expression -> class_definition .)
    DEFINED_OP      reduce using rule 11 (expression -> class_definition .)
    DOUBLE_QUOTED   reduce using rule 11 (expression -> class_definition .)
    IF              reduce using rule 11 (expression -> class_definition .)
    NUMBER          reduce using rule 11 (expression -> class_definition .)
    END             reduce using rule 11 (expression -> class_definition .)
    ELSIF           reduce using rule 11 (expression -> class_definition .)
    ELSE            reduce using rule 11 (expression -> class_definition .)


state 13

    (12) expression -> module_definition .

    $end            reduce using rule 12 (expression -> module_definition .)
    THEN            reduce using rule 12 (expression -> module_definition .)
    STRING          reduce using rule 12 (expression -> module_definition .)
    VAR_GLOBAL      reduce using rule 12 (expression -> module_definition .)
    VAR_INSTANCE    reduce using rule 12 (expression -> module_definition .)
    VAR_CLASS       reduce using rule 12 (expression -> module_definition .)
    VAR_LOCAL       reduce using rule 12 (expression -> module_definition .)
    VAR_SYSTEM      reduce using rule 12 (expression -> module_definition .)
    VAR_CONSTANT    reduce using rule 12 (expression -> module_definition .)
    LBRACKET        reduce using rule 12 (expression -> module_definition .)
    LKEY            reduce using rule 12 (expression -> module_definition .)
    IDENTIFIER      reduce using rule 12 (expression -> module_definition .)
    SUPER           reduce using rule 12 (expression -> module_definition .)
    LPAREN          reduce using rule 12 (expression -> module_definition .)
    CLASS           reduce using rule 12 (expression -> module_definition .)
    MODULE          reduce using rule 12 (expression -> module_definition .)
    DEF             reduce using rule 12 (expression -> module_definition .)
    ALIAS           reduce using rule 12 (expression -> module_definition .)
    UNDEF           reduce using rule 12 (expression -> module_definition .)
    DEFINED_OP      reduce using rule 12 (expression -> module_definition .)
    DOUBLE_QUOTED   reduce using rule 12 (expression -> module_definition .)
    IF              reduce using rule 12 (expression -> module_definition .)
    NUMBER          reduce using rule 12 (expression -> module_definition .)
    END             reduce using rule 12 (expression -> module_definition .)
    ELSIF           reduce using rule 12 (expression -> module_definition .)
    ELSE            reduce using rule 12 (expression -> module_definition .)


state 14

    (13) expression -> method_definition .

    $end            reduce using rule 13 (expression -> method_definition .)
    THEN            reduce using rule 13 (expression -> method_definition .)
    STRING          reduce using rule 13 (expression -> method_definition .)
    VAR_GLOBAL      reduce using rule 13 (expression -> method_definition .)
    VAR_INSTANCE    reduce using rule 13 (expression -> method_definition .)
    VAR_CLASS       reduce using rule 13 (expression -> method_definition .)
    VAR_LOCAL       reduce using rule 13 (expression -> method_definition .)
    VAR_SYSTEM      reduce using rule 13 (expression -> method_definition .)
    VAR_CONSTANT    reduce using rule 13 (expression -> method_definition .)
    LBRACKET        reduce using rule 13 (expression -> method_definition .)
    LKEY            reduce using rule 13 (expression -> method_definition .)
    IDENTIFIER      reduce using rule 13 (expression -> method_definition .)
    SUPER           reduce using rule 13 (expression -> method_definition .)
    LPAREN          reduce using rule 13 (expression -> method_definition .)
    CLASS           reduce using rule 13 (expression -> method_definition .)
    MODULE          reduce using rule 13 (expression -> method_definition .)
    DEF             reduce using rule 13 (expression -> method_definition .)
    ALIAS           reduce using rule 13 (expression -> method_definition .)
    UNDEF           reduce using rule 13 (expression -> method_definition .)
    DEFINED_OP      reduce using rule 13 (expression -> method_definition .)
    DOUBLE_QUOTED   reduce using rule 13 (expression -> method_definition .)
    IF              reduce using rule 13 (expression -> method_definition .)
    NUMBER          reduce using rule 13 (expression -> method_definition .)
    END             reduce using rule 13 (expression -> method_definition .)
    ELSIF           reduce using rule 13 (expression -> method_definition .)
    ELSE            reduce using rule 13 (expression -> method_definition .)


state 15

    (14) expression -> alias .

    $end            reduce using rule 14 (expression -> alias .)
    THEN            reduce using rule 14 (expression -> alias .)
    STRING          reduce using rule 14 (expression -> alias .)
    VAR_GLOBAL      reduce using rule 14 (expression -> alias .)
    VAR_INSTANCE    reduce using rule 14 (expression -> alias .)
    VAR_CLASS       reduce using rule 14 (expression -> alias .)
    VAR_LOCAL       reduce using rule 14 (expression -> alias .)
    VAR_SYSTEM      reduce using rule 14 (expression -> alias .)
    VAR_CONSTANT    reduce using rule 14 (expression -> alias .)
    LBRACKET        reduce using rule 14 (expression -> alias .)
    LKEY            reduce using rule 14 (expression -> alias .)
    IDENTIFIER      reduce using rule 14 (expression -> alias .)
    SUPER           reduce using rule 14 (expression -> alias .)
    LPAREN          reduce using rule 14 (expression -> alias .)
    CLASS           reduce using rule 14 (expression -> alias .)
    MODULE          reduce using rule 14 (expression -> alias .)
    DEF             reduce using rule 14 (expression -> alias .)
    ALIAS           reduce using rule 14 (expression -> alias .)
    UNDEF           reduce using rule 14 (expression -> alias .)
    DEFINED_OP      reduce using rule 14 (expression -> alias .)
    DOUBLE_QUOTED   reduce using rule 14 (expression -> alias .)
    IF              reduce using rule 14 (expression -> alias .)
    NUMBER          reduce using rule 14 (expression -> alias .)
    END             reduce using rule 14 (expression -> alias .)
    ELSIF           reduce using rule 14 (expression -> alias .)
    ELSE            reduce using rule 14 (expression -> alias .)


state 16

    (15) expression -> undef .

    $end            reduce using rule 15 (expression -> undef .)
    THEN            reduce using rule 15 (expression -> undef .)
    STRING          reduce using rule 15 (expression -> undef .)
    VAR_GLOBAL      reduce using rule 15 (expression -> undef .)
    VAR_INSTANCE    reduce using rule 15 (expression -> undef .)
    VAR_CLASS       reduce using rule 15 (expression -> undef .)
    VAR_LOCAL       reduce using rule 15 (expression -> undef .)
    VAR_SYSTEM      reduce using rule 15 (expression -> undef .)
    VAR_CONSTANT    reduce using rule 15 (expression -> undef .)
    LBRACKET        reduce using rule 15 (expression -> undef .)
    LKEY            reduce using rule 15 (expression -> undef .)
    IDENTIFIER      reduce using rule 15 (expression -> undef .)
    SUPER           reduce using rule 15 (expression -> undef .)
    LPAREN          reduce using rule 15 (expression -> undef .)
    CLASS           reduce using rule 15 (expression -> undef .)
    MODULE          reduce using rule 15 (expression -> undef .)
    DEF             reduce using rule 15 (expression -> undef .)
    ALIAS           reduce using rule 15 (expression -> undef .)
    UNDEF           reduce using rule 15 (expression -> undef .)
    DEFINED_OP      reduce using rule 15 (expression -> undef .)
    DOUBLE_QUOTED   reduce using rule 15 (expression -> undef .)
    IF              reduce using rule 15 (expression -> undef .)
    NUMBER          reduce using rule 15 (expression -> undef .)
    END             reduce using rule 15 (expression -> undef .)
    ELSIF           reduce using rule 15 (expression -> undef .)
    ELSE            reduce using rule 15 (expression -> undef .)


state 17

    (16) expression -> defined .

    $end            reduce using rule 16 (expression -> defined .)
    THEN            reduce using rule 16 (expression -> defined .)
    STRING          reduce using rule 16 (expression -> defined .)
    VAR_GLOBAL      reduce using rule 16 (expression -> defined .)
    VAR_INSTANCE    reduce using rule 16 (expression -> defined .)
    VAR_CLASS       reduce using rule 16 (expression -> defined .)
    VAR_LOCAL       reduce using rule 16 (expression -> defined .)
    VAR_SYSTEM      reduce using rule 16 (expression -> defined .)
    VAR_CONSTANT    reduce using rule 16 (expression -> defined .)
    LBRACKET        reduce using rule 16 (expression -> defined .)
    LKEY            reduce using rule 16 (expression -> defined .)
    IDENTIFIER      reduce using rule 16 (expression -> defined .)
    SUPER           reduce using rule 16 (expression -> defined .)
    LPAREN          reduce using rule 16 (expression -> defined .)
    CLASS           reduce using rule 16 (expression -> defined .)
    MODULE          reduce using rule 16 (expression -> defined .)
    DEF             reduce using rule 16 (expression -> defined .)
    ALIAS           reduce using rule 16 (expression -> defined .)
    UNDEF           reduce using rule 16 (expression -> defined .)
    DEFINED_OP      reduce using rule 16 (expression -> defined .)
    DOUBLE_QUOTED   reduce using rule 16 (expression -> defined .)
    IF              reduce using rule 16 (expression -> defined .)
    NUMBER          reduce using rule 16 (expression -> defined .)
    END             reduce using rule 16 (expression -> defined .)
    ELSIF           reduce using rule 16 (expression -> defined .)
    ELSE            reduce using rule 16 (expression -> defined .)


state 18

    (23) string_literals -> STRING .
    (99) data -> STRING .

    $end            reduce using rule 23 (string_literals -> STRING .)
    THEN            reduce using rule 23 (string_literals -> STRING .)
    STRING          reduce using rule 23 (string_literals -> STRING .)
    VAR_GLOBAL      reduce using rule 23 (string_literals -> STRING .)
    VAR_INSTANCE    reduce using rule 23 (string_literals -> STRING .)
    VAR_CLASS       reduce using rule 23 (string_literals -> STRING .)
    VAR_LOCAL       reduce using rule 23 (string_literals -> STRING .)
    VAR_SYSTEM      reduce using rule 23 (string_literals -> STRING .)
    VAR_CONSTANT    reduce using rule 23 (string_literals -> STRING .)
    LBRACKET        reduce using rule 23 (string_literals -> STRING .)
    LKEY            reduce using rule 23 (string_literals -> STRING .)
    IDENTIFIER      reduce using rule 23 (string_literals -> STRING .)
    SUPER           reduce using rule 23 (string_literals -> STRING .)
    LPAREN          reduce using rule 23 (string_literals -> STRING .)
    CLASS           reduce using rule 23 (string_literals -> STRING .)
    MODULE          reduce using rule 23 (string_literals -> STRING .)
    DEF             reduce using rule 23 (string_literals -> STRING .)
    ALIAS           reduce using rule 23 (string_literals -> STRING .)
    UNDEF           reduce using rule 23 (string_literals -> STRING .)
    DEFINED_OP      reduce using rule 23 (string_literals -> STRING .)
    DOUBLE_QUOTED   reduce using rule 23 (string_literals -> STRING .)
    IF              reduce using rule 23 (string_literals -> STRING .)
    NUMBER          reduce using rule 23 (string_literals -> STRING .)
    END             reduce using rule 23 (string_literals -> STRING .)
    ELSIF           reduce using rule 23 (string_literals -> STRING .)
    ELSE            reduce using rule 23 (string_literals -> STRING .)
    PLUS            reduce using rule 99 (data -> STRING .)
    MINUS           reduce using rule 99 (data -> STRING .)
    TIMES           reduce using rule 99 (data -> STRING .)
    DIVIDE          reduce using rule 99 (data -> STRING .)
    MOD             reduce using rule 99 (data -> STRING .)
    EQUAL           reduce using rule 99 (data -> STRING .)
    NOTEQUAL        reduce using rule 99 (data -> STRING .)
    GREATERTHAN     reduce using rule 99 (data -> STRING .)
    GREATERTHANEQUAL reduce using rule 99 (data -> STRING .)
    LESSERTHAN      reduce using rule 99 (data -> STRING .)
    LESSERTHANEQUAL reduce using rule 99 (data -> STRING .)


state 19

    (24) string_literals -> string_concat .

    $end            reduce using rule 24 (string_literals -> string_concat .)
    THEN            reduce using rule 24 (string_literals -> string_concat .)
    STRING          reduce using rule 24 (string_literals -> string_concat .)
    VAR_GLOBAL      reduce using rule 24 (string_literals -> string_concat .)
    VAR_INSTANCE    reduce using rule 24 (string_literals -> string_concat .)
    VAR_CLASS       reduce using rule 24 (string_literals -> string_concat .)
    VAR_LOCAL       reduce using rule 24 (string_literals -> string_concat .)
    VAR_SYSTEM      reduce using rule 24 (string_literals -> string_concat .)
    VAR_CONSTANT    reduce using rule 24 (string_literals -> string_concat .)
    LBRACKET        reduce using rule 24 (string_literals -> string_concat .)
    LKEY            reduce using rule 24 (string_literals -> string_concat .)
    IDENTIFIER      reduce using rule 24 (string_literals -> string_concat .)
    SUPER           reduce using rule 24 (string_literals -> string_concat .)
    LPAREN          reduce using rule 24 (string_literals -> string_concat .)
    CLASS           reduce using rule 24 (string_literals -> string_concat .)
    MODULE          reduce using rule 24 (string_literals -> string_concat .)
    DEF             reduce using rule 24 (string_literals -> string_concat .)
    ALIAS           reduce using rule 24 (string_literals -> string_concat .)
    UNDEF           reduce using rule 24 (string_literals -> string_concat .)
    DEFINED_OP      reduce using rule 24 (string_literals -> string_concat .)
    DOUBLE_QUOTED   reduce using rule 24 (string_literals -> string_concat .)
    IF              reduce using rule 24 (string_literals -> string_concat .)
    NUMBER          reduce using rule 24 (string_literals -> string_concat .)
    END             reduce using rule 24 (string_literals -> string_concat .)
    ELSIF           reduce using rule 24 (string_literals -> string_concat .)
    ELSE            reduce using rule 24 (string_literals -> string_concat .)


state 20

    (17) variable -> VAR_GLOBAL .

    EQUAL_SYMBOL    reduce using rule 17 (variable -> VAR_GLOBAL .)
    COMMA           reduce using rule 17 (variable -> VAR_GLOBAL .)
    PLUS_EQUAL      reduce using rule 17 (variable -> VAR_GLOBAL .)
    MINUS_EQUAL     reduce using rule 17 (variable -> VAR_GLOBAL .)
    TIMES_EQUAL     reduce using rule 17 (variable -> VAR_GLOBAL .)
    DIVIDE_EQUAL    reduce using rule 17 (variable -> VAR_GLOBAL .)
    MOD_EQUAL       reduce using rule 17 (variable -> VAR_GLOBAL .)
    POW_EQUAL       reduce using rule 17 (variable -> VAR_GLOBAL .)
    $end            reduce using rule 17 (variable -> VAR_GLOBAL .)
    PLUS            reduce using rule 17 (variable -> VAR_GLOBAL .)
    MINUS           reduce using rule 17 (variable -> VAR_GLOBAL .)
    TIMES           reduce using rule 17 (variable -> VAR_GLOBAL .)
    DIVIDE          reduce using rule 17 (variable -> VAR_GLOBAL .)
    MOD             reduce using rule 17 (variable -> VAR_GLOBAL .)
    EQUAL           reduce using rule 17 (variable -> VAR_GLOBAL .)
    NOTEQUAL        reduce using rule 17 (variable -> VAR_GLOBAL .)
    GREATERTHAN     reduce using rule 17 (variable -> VAR_GLOBAL .)
    GREATERTHANEQUAL reduce using rule 17 (variable -> VAR_GLOBAL .)
    LESSERTHAN      reduce using rule 17 (variable -> VAR_GLOBAL .)
    LESSERTHANEQUAL reduce using rule 17 (variable -> VAR_GLOBAL .)
    RBRACKET        reduce using rule 17 (variable -> VAR_GLOBAL .)
    HASH_ROCKET     reduce using rule 17 (variable -> VAR_GLOBAL .)
    THEN            reduce using rule 17 (variable -> VAR_GLOBAL .)
    STRING          reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_GLOBAL      reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_INSTANCE    reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_CLASS       reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_LOCAL       reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_SYSTEM      reduce using rule 17 (variable -> VAR_GLOBAL .)
    VAR_CONSTANT    reduce using rule 17 (variable -> VAR_GLOBAL .)
    LBRACKET        reduce using rule 17 (variable -> VAR_GLOBAL .)
    LKEY            reduce using rule 17 (variable -> VAR_GLOBAL .)
    IDENTIFIER      reduce using rule 17 (variable -> VAR_GLOBAL .)
    SUPER           reduce using rule 17 (variable -> VAR_GLOBAL .)
    LPAREN          reduce using rule 17 (variable -> VAR_GLOBAL .)
    CLASS           reduce using rule 17 (variable -> VAR_GLOBAL .)
    MODULE          reduce using rule 17 (variable -> VAR_GLOBAL .)
    DEF             reduce using rule 17 (variable -> VAR_GLOBAL .)
    ALIAS           reduce using rule 17 (variable -> VAR_GLOBAL .)
    UNDEF           reduce using rule 17 (variable -> VAR_GLOBAL .)
    DEFINED_OP      reduce using rule 17 (variable -> VAR_GLOBAL .)
    DOUBLE_QUOTED   reduce using rule 17 (variable -> VAR_GLOBAL .)
    IF              reduce using rule 17 (variable -> VAR_GLOBAL .)
    NUMBER          reduce using rule 17 (variable -> VAR_GLOBAL .)
    END             reduce using rule 17 (variable -> VAR_GLOBAL .)
    ELSIF           reduce using rule 17 (variable -> VAR_GLOBAL .)
    ELSE            reduce using rule 17 (variable -> VAR_GLOBAL .)
    RPAREN          reduce using rule 17 (variable -> VAR_GLOBAL .)
    RKEY            reduce using rule 17 (variable -> VAR_GLOBAL .)


state 21

    (18) variable -> VAR_INSTANCE .

    EQUAL_SYMBOL    reduce using rule 18 (variable -> VAR_INSTANCE .)
    COMMA           reduce using rule 18 (variable -> VAR_INSTANCE .)
    PLUS_EQUAL      reduce using rule 18 (variable -> VAR_INSTANCE .)
    MINUS_EQUAL     reduce using rule 18 (variable -> VAR_INSTANCE .)
    TIMES_EQUAL     reduce using rule 18 (variable -> VAR_INSTANCE .)
    DIVIDE_EQUAL    reduce using rule 18 (variable -> VAR_INSTANCE .)
    MOD_EQUAL       reduce using rule 18 (variable -> VAR_INSTANCE .)
    POW_EQUAL       reduce using rule 18 (variable -> VAR_INSTANCE .)
    $end            reduce using rule 18 (variable -> VAR_INSTANCE .)
    PLUS            reduce using rule 18 (variable -> VAR_INSTANCE .)
    MINUS           reduce using rule 18 (variable -> VAR_INSTANCE .)
    TIMES           reduce using rule 18 (variable -> VAR_INSTANCE .)
    DIVIDE          reduce using rule 18 (variable -> VAR_INSTANCE .)
    MOD             reduce using rule 18 (variable -> VAR_INSTANCE .)
    EQUAL           reduce using rule 18 (variable -> VAR_INSTANCE .)
    NOTEQUAL        reduce using rule 18 (variable -> VAR_INSTANCE .)
    GREATERTHAN     reduce using rule 18 (variable -> VAR_INSTANCE .)
    GREATERTHANEQUAL reduce using rule 18 (variable -> VAR_INSTANCE .)
    LESSERTHAN      reduce using rule 18 (variable -> VAR_INSTANCE .)
    LESSERTHANEQUAL reduce using rule 18 (variable -> VAR_INSTANCE .)
    RBRACKET        reduce using rule 18 (variable -> VAR_INSTANCE .)
    HASH_ROCKET     reduce using rule 18 (variable -> VAR_INSTANCE .)
    THEN            reduce using rule 18 (variable -> VAR_INSTANCE .)
    STRING          reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_GLOBAL      reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_INSTANCE    reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_CLASS       reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_LOCAL       reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_SYSTEM      reduce using rule 18 (variable -> VAR_INSTANCE .)
    VAR_CONSTANT    reduce using rule 18 (variable -> VAR_INSTANCE .)
    LBRACKET        reduce using rule 18 (variable -> VAR_INSTANCE .)
    LKEY            reduce using rule 18 (variable -> VAR_INSTANCE .)
    IDENTIFIER      reduce using rule 18 (variable -> VAR_INSTANCE .)
    SUPER           reduce using rule 18 (variable -> VAR_INSTANCE .)
    LPAREN          reduce using rule 18 (variable -> VAR_INSTANCE .)
    CLASS           reduce using rule 18 (variable -> VAR_INSTANCE .)
    MODULE          reduce using rule 18 (variable -> VAR_INSTANCE .)
    DEF             reduce using rule 18 (variable -> VAR_INSTANCE .)
    ALIAS           reduce using rule 18 (variable -> VAR_INSTANCE .)
    UNDEF           reduce using rule 18 (variable -> VAR_INSTANCE .)
    DEFINED_OP      reduce using rule 18 (variable -> VAR_INSTANCE .)
    DOUBLE_QUOTED   reduce using rule 18 (variable -> VAR_INSTANCE .)
    IF              reduce using rule 18 (variable -> VAR_INSTANCE .)
    NUMBER          reduce using rule 18 (variable -> VAR_INSTANCE .)
    END             reduce using rule 18 (variable -> VAR_INSTANCE .)
    ELSIF           reduce using rule 18 (variable -> VAR_INSTANCE .)
    ELSE            reduce using rule 18 (variable -> VAR_INSTANCE .)
    RPAREN          reduce using rule 18 (variable -> VAR_INSTANCE .)
    RKEY            reduce using rule 18 (variable -> VAR_INSTANCE .)


state 22

    (19) variable -> VAR_CLASS .

    EQUAL_SYMBOL    reduce using rule 19 (variable -> VAR_CLASS .)
    COMMA           reduce using rule 19 (variable -> VAR_CLASS .)
    PLUS_EQUAL      reduce using rule 19 (variable -> VAR_CLASS .)
    MINUS_EQUAL     reduce using rule 19 (variable -> VAR_CLASS .)
    TIMES_EQUAL     reduce using rule 19 (variable -> VAR_CLASS .)
    DIVIDE_EQUAL    reduce using rule 19 (variable -> VAR_CLASS .)
    MOD_EQUAL       reduce using rule 19 (variable -> VAR_CLASS .)
    POW_EQUAL       reduce using rule 19 (variable -> VAR_CLASS .)
    $end            reduce using rule 19 (variable -> VAR_CLASS .)
    PLUS            reduce using rule 19 (variable -> VAR_CLASS .)
    MINUS           reduce using rule 19 (variable -> VAR_CLASS .)
    TIMES           reduce using rule 19 (variable -> VAR_CLASS .)
    DIVIDE          reduce using rule 19 (variable -> VAR_CLASS .)
    MOD             reduce using rule 19 (variable -> VAR_CLASS .)
    EQUAL           reduce using rule 19 (variable -> VAR_CLASS .)
    NOTEQUAL        reduce using rule 19 (variable -> VAR_CLASS .)
    GREATERTHAN     reduce using rule 19 (variable -> VAR_CLASS .)
    GREATERTHANEQUAL reduce using rule 19 (variable -> VAR_CLASS .)
    LESSERTHAN      reduce using rule 19 (variable -> VAR_CLASS .)
    LESSERTHANEQUAL reduce using rule 19 (variable -> VAR_CLASS .)
    RBRACKET        reduce using rule 19 (variable -> VAR_CLASS .)
    HASH_ROCKET     reduce using rule 19 (variable -> VAR_CLASS .)
    THEN            reduce using rule 19 (variable -> VAR_CLASS .)
    STRING          reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_GLOBAL      reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_INSTANCE    reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_CLASS       reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_LOCAL       reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_SYSTEM      reduce using rule 19 (variable -> VAR_CLASS .)
    VAR_CONSTANT    reduce using rule 19 (variable -> VAR_CLASS .)
    LBRACKET        reduce using rule 19 (variable -> VAR_CLASS .)
    LKEY            reduce using rule 19 (variable -> VAR_CLASS .)
    IDENTIFIER      reduce using rule 19 (variable -> VAR_CLASS .)
    SUPER           reduce using rule 19 (variable -> VAR_CLASS .)
    LPAREN          reduce using rule 19 (variable -> VAR_CLASS .)
    CLASS           reduce using rule 19 (variable -> VAR_CLASS .)
    MODULE          reduce using rule 19 (variable -> VAR_CLASS .)
    DEF             reduce using rule 19 (variable -> VAR_CLASS .)
    ALIAS           reduce using rule 19 (variable -> VAR_CLASS .)
    UNDEF           reduce using rule 19 (variable -> VAR_CLASS .)
    DEFINED_OP      reduce using rule 19 (variable -> VAR_CLASS .)
    DOUBLE_QUOTED   reduce using rule 19 (variable -> VAR_CLASS .)
    IF              reduce using rule 19 (variable -> VAR_CLASS .)
    NUMBER          reduce using rule 19 (variable -> VAR_CLASS .)
    END             reduce using rule 19 (variable -> VAR_CLASS .)
    ELSIF           reduce using rule 19 (variable -> VAR_CLASS .)
    ELSE            reduce using rule 19 (variable -> VAR_CLASS .)
    RPAREN          reduce using rule 19 (variable -> VAR_CLASS .)
    RKEY            reduce using rule 19 (variable -> VAR_CLASS .)


state 23

    (20) variable -> VAR_LOCAL .

    EQUAL_SYMBOL    reduce using rule 20 (variable -> VAR_LOCAL .)
    COMMA           reduce using rule 20 (variable -> VAR_LOCAL .)
    PLUS_EQUAL      reduce using rule 20 (variable -> VAR_LOCAL .)
    MINUS_EQUAL     reduce using rule 20 (variable -> VAR_LOCAL .)
    TIMES_EQUAL     reduce using rule 20 (variable -> VAR_LOCAL .)
    DIVIDE_EQUAL    reduce using rule 20 (variable -> VAR_LOCAL .)
    MOD_EQUAL       reduce using rule 20 (variable -> VAR_LOCAL .)
    POW_EQUAL       reduce using rule 20 (variable -> VAR_LOCAL .)
    $end            reduce using rule 20 (variable -> VAR_LOCAL .)
    PLUS            reduce using rule 20 (variable -> VAR_LOCAL .)
    MINUS           reduce using rule 20 (variable -> VAR_LOCAL .)
    TIMES           reduce using rule 20 (variable -> VAR_LOCAL .)
    DIVIDE          reduce using rule 20 (variable -> VAR_LOCAL .)
    MOD             reduce using rule 20 (variable -> VAR_LOCAL .)
    EQUAL           reduce using rule 20 (variable -> VAR_LOCAL .)
    NOTEQUAL        reduce using rule 20 (variable -> VAR_LOCAL .)
    GREATERTHAN     reduce using rule 20 (variable -> VAR_LOCAL .)
    GREATERTHANEQUAL reduce using rule 20 (variable -> VAR_LOCAL .)
    LESSERTHAN      reduce using rule 20 (variable -> VAR_LOCAL .)
    LESSERTHANEQUAL reduce using rule 20 (variable -> VAR_LOCAL .)
    RBRACKET        reduce using rule 20 (variable -> VAR_LOCAL .)
    HASH_ROCKET     reduce using rule 20 (variable -> VAR_LOCAL .)
    THEN            reduce using rule 20 (variable -> VAR_LOCAL .)
    STRING          reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_GLOBAL      reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_INSTANCE    reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_CLASS       reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_LOCAL       reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_SYSTEM      reduce using rule 20 (variable -> VAR_LOCAL .)
    VAR_CONSTANT    reduce using rule 20 (variable -> VAR_LOCAL .)
    LBRACKET        reduce using rule 20 (variable -> VAR_LOCAL .)
    LKEY            reduce using rule 20 (variable -> VAR_LOCAL .)
    IDENTIFIER      reduce using rule 20 (variable -> VAR_LOCAL .)
    SUPER           reduce using rule 20 (variable -> VAR_LOCAL .)
    LPAREN          reduce using rule 20 (variable -> VAR_LOCAL .)
    CLASS           reduce using rule 20 (variable -> VAR_LOCAL .)
    MODULE          reduce using rule 20 (variable -> VAR_LOCAL .)
    DEF             reduce using rule 20 (variable -> VAR_LOCAL .)
    ALIAS           reduce using rule 20 (variable -> VAR_LOCAL .)
    UNDEF           reduce using rule 20 (variable -> VAR_LOCAL .)
    DEFINED_OP      reduce using rule 20 (variable -> VAR_LOCAL .)
    DOUBLE_QUOTED   reduce using rule 20 (variable -> VAR_LOCAL .)
    IF              reduce using rule 20 (variable -> VAR_LOCAL .)
    NUMBER          reduce using rule 20 (variable -> VAR_LOCAL .)
    END             reduce using rule 20 (variable -> VAR_LOCAL .)
    ELSIF           reduce using rule 20 (variable -> VAR_LOCAL .)
    ELSE            reduce using rule 20 (variable -> VAR_LOCAL .)
    RPAREN          reduce using rule 20 (variable -> VAR_LOCAL .)
    RKEY            reduce using rule 20 (variable -> VAR_LOCAL .)


state 24

    (21) variable -> VAR_SYSTEM .

    EQUAL_SYMBOL    reduce using rule 21 (variable -> VAR_SYSTEM .)
    COMMA           reduce using rule 21 (variable -> VAR_SYSTEM .)
    PLUS_EQUAL      reduce using rule 21 (variable -> VAR_SYSTEM .)
    MINUS_EQUAL     reduce using rule 21 (variable -> VAR_SYSTEM .)
    TIMES_EQUAL     reduce using rule 21 (variable -> VAR_SYSTEM .)
    DIVIDE_EQUAL    reduce using rule 21 (variable -> VAR_SYSTEM .)
    MOD_EQUAL       reduce using rule 21 (variable -> VAR_SYSTEM .)
    POW_EQUAL       reduce using rule 21 (variable -> VAR_SYSTEM .)
    $end            reduce using rule 21 (variable -> VAR_SYSTEM .)
    PLUS            reduce using rule 21 (variable -> VAR_SYSTEM .)
    MINUS           reduce using rule 21 (variable -> VAR_SYSTEM .)
    TIMES           reduce using rule 21 (variable -> VAR_SYSTEM .)
    DIVIDE          reduce using rule 21 (variable -> VAR_SYSTEM .)
    MOD             reduce using rule 21 (variable -> VAR_SYSTEM .)
    EQUAL           reduce using rule 21 (variable -> VAR_SYSTEM .)
    NOTEQUAL        reduce using rule 21 (variable -> VAR_SYSTEM .)
    GREATERTHAN     reduce using rule 21 (variable -> VAR_SYSTEM .)
    GREATERTHANEQUAL reduce using rule 21 (variable -> VAR_SYSTEM .)
    LESSERTHAN      reduce using rule 21 (variable -> VAR_SYSTEM .)
    LESSERTHANEQUAL reduce using rule 21 (variable -> VAR_SYSTEM .)
    RBRACKET        reduce using rule 21 (variable -> VAR_SYSTEM .)
    HASH_ROCKET     reduce using rule 21 (variable -> VAR_SYSTEM .)
    THEN            reduce using rule 21 (variable -> VAR_SYSTEM .)
    STRING          reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_GLOBAL      reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_INSTANCE    reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_CLASS       reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_LOCAL       reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_SYSTEM      reduce using rule 21 (variable -> VAR_SYSTEM .)
    VAR_CONSTANT    reduce using rule 21 (variable -> VAR_SYSTEM .)
    LBRACKET        reduce using rule 21 (variable -> VAR_SYSTEM .)
    LKEY            reduce using rule 21 (variable -> VAR_SYSTEM .)
    IDENTIFIER      reduce using rule 21 (variable -> VAR_SYSTEM .)
    SUPER           reduce using rule 21 (variable -> VAR_SYSTEM .)
    LPAREN          reduce using rule 21 (variable -> VAR_SYSTEM .)
    CLASS           reduce using rule 21 (variable -> VAR_SYSTEM .)
    MODULE          reduce using rule 21 (variable -> VAR_SYSTEM .)
    DEF             reduce using rule 21 (variable -> VAR_SYSTEM .)
    ALIAS           reduce using rule 21 (variable -> VAR_SYSTEM .)
    UNDEF           reduce using rule 21 (variable -> VAR_SYSTEM .)
    DEFINED_OP      reduce using rule 21 (variable -> VAR_SYSTEM .)
    DOUBLE_QUOTED   reduce using rule 21 (variable -> VAR_SYSTEM .)
    IF              reduce using rule 21 (variable -> VAR_SYSTEM .)
    NUMBER          reduce using rule 21 (variable -> VAR_SYSTEM .)
    END             reduce using rule 21 (variable -> VAR_SYSTEM .)
    ELSIF           reduce using rule 21 (variable -> VAR_SYSTEM .)
    ELSE            reduce using rule 21 (variable -> VAR_SYSTEM .)
    RPAREN          reduce using rule 21 (variable -> VAR_SYSTEM .)
    RKEY            reduce using rule 21 (variable -> VAR_SYSTEM .)


state 25

    (22) variable -> VAR_CONSTANT .

    EQUAL_SYMBOL    reduce using rule 22 (variable -> VAR_CONSTANT .)
    COMMA           reduce using rule 22 (variable -> VAR_CONSTANT .)
    PLUS_EQUAL      reduce using rule 22 (variable -> VAR_CONSTANT .)
    MINUS_EQUAL     reduce using rule 22 (variable -> VAR_CONSTANT .)
    TIMES_EQUAL     reduce using rule 22 (variable -> VAR_CONSTANT .)
    DIVIDE_EQUAL    reduce using rule 22 (variable -> VAR_CONSTANT .)
    MOD_EQUAL       reduce using rule 22 (variable -> VAR_CONSTANT .)
    POW_EQUAL       reduce using rule 22 (variable -> VAR_CONSTANT .)
    $end            reduce using rule 22 (variable -> VAR_CONSTANT .)
    PLUS            reduce using rule 22 (variable -> VAR_CONSTANT .)
    MINUS           reduce using rule 22 (variable -> VAR_CONSTANT .)
    TIMES           reduce using rule 22 (variable -> VAR_CONSTANT .)
    DIVIDE          reduce using rule 22 (variable -> VAR_CONSTANT .)
    MOD             reduce using rule 22 (variable -> VAR_CONSTANT .)
    EQUAL           reduce using rule 22 (variable -> VAR_CONSTANT .)
    NOTEQUAL        reduce using rule 22 (variable -> VAR_CONSTANT .)
    GREATERTHAN     reduce using rule 22 (variable -> VAR_CONSTANT .)
    GREATERTHANEQUAL reduce using rule 22 (variable -> VAR_CONSTANT .)
    LESSERTHAN      reduce using rule 22 (variable -> VAR_CONSTANT .)
    LESSERTHANEQUAL reduce using rule 22 (variable -> VAR_CONSTANT .)
    RBRACKET        reduce using rule 22 (variable -> VAR_CONSTANT .)
    HASH_ROCKET     reduce using rule 22 (variable -> VAR_CONSTANT .)
    THEN            reduce using rule 22 (variable -> VAR_CONSTANT .)
    STRING          reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_GLOBAL      reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_INSTANCE    reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_CLASS       reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_LOCAL       reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_SYSTEM      reduce using rule 22 (variable -> VAR_CONSTANT .)
    VAR_CONSTANT    reduce using rule 22 (variable -> VAR_CONSTANT .)
    LBRACKET        reduce using rule 22 (variable -> VAR_CONSTANT .)
    LKEY            reduce using rule 22 (variable -> VAR_CONSTANT .)
    IDENTIFIER      reduce using rule 22 (variable -> VAR_CONSTANT .)
    SUPER           reduce using rule 22 (variable -> VAR_CONSTANT .)
    LPAREN          reduce using rule 22 (variable -> VAR_CONSTANT .)
    CLASS           reduce using rule 22 (variable -> VAR_CONSTANT .)
    MODULE          reduce using rule 22 (variable -> VAR_CONSTANT .)
    DEF             reduce using rule 22 (variable -> VAR_CONSTANT .)
    ALIAS           reduce using rule 22 (variable -> VAR_CONSTANT .)
    UNDEF           reduce using rule 22 (variable -> VAR_CONSTANT .)
    DEFINED_OP      reduce using rule 22 (variable -> VAR_CONSTANT .)
    DOUBLE_QUOTED   reduce using rule 22 (variable -> VAR_CONSTANT .)
    IF              reduce using rule 22 (variable -> VAR_CONSTANT .)
    NUMBER          reduce using rule 22 (variable -> VAR_CONSTANT .)
    END             reduce using rule 22 (variable -> VAR_CONSTANT .)
    ELSIF           reduce using rule 22 (variable -> VAR_CONSTANT .)
    ELSE            reduce using rule 22 (variable -> VAR_CONSTANT .)
    RPAREN          reduce using rule 22 (variable -> VAR_CONSTANT .)
    RKEY            reduce using rule 22 (variable -> VAR_CONSTANT .)


state 26

    (28) array -> LBRACKET . args_array RBRACKET
    (30) args_array -> . data
    (31) args_array -> . data COMMA args_array
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_array                     shift and go to state 69
    data                           shift and go to state 70
    variable                       shift and go to state 72

state 27

    (32) hash -> LKEY . args_hash RKEY
    (33) args_hash -> . data HASH_ROCKET data
    (34) args_hash -> . data HASH_ROCKET data COMMA args_hash
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_hash                      shift and go to state 73
    data                           shift and go to state 74
    variable                       shift and go to state 72

state 28

    (39) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> IDENTIFIER . DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> IDENTIFIER . DOT IDENTIFIER
    (29) array_data -> IDENTIFIER . LBRACKET NUMBER RBRACKET

    DOT             shift and go to state 75
    LBRACKET        shift and go to state 76


state 29

    (81) expression_operations -> LPAREN . opmate RPAREN
    (84) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (86) opmate -> . data op data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    opmate                         shift and go to state 77
    data                           shift and go to state 31
    variable                       shift and go to state 72

state 30

    (37) super -> SUPER . LPAREN RPAREN
    (38) super -> SUPER . LPAREN args_method RPAREN

    LPAREN          shift and go to state 78


state 31

    (86) opmate -> data . op data
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

    op                             shift and go to state 79

state 32

    (45) assignment -> array_data . EQUAL_SYMBOL data

    EQUAL_SYMBOL    shift and go to state 80


state 33

    (47) assignment -> self_assigment .

    $end            reduce using rule 47 (assignment -> self_assigment .)
    THEN            reduce using rule 47 (assignment -> self_assigment .)
    STRING          reduce using rule 47 (assignment -> self_assigment .)
    VAR_GLOBAL      reduce using rule 47 (assignment -> self_assigment .)
    VAR_INSTANCE    reduce using rule 47 (assignment -> self_assigment .)
    VAR_CLASS       reduce using rule 47 (assignment -> self_assigment .)
    VAR_LOCAL       reduce using rule 47 (assignment -> self_assigment .)
    VAR_SYSTEM      reduce using rule 47 (assignment -> self_assigment .)
    VAR_CONSTANT    reduce using rule 47 (assignment -> self_assigment .)
    LBRACKET        reduce using rule 47 (assignment -> self_assigment .)
    LKEY            reduce using rule 47 (assignment -> self_assigment .)
    IDENTIFIER      reduce using rule 47 (assignment -> self_assigment .)
    SUPER           reduce using rule 47 (assignment -> self_assigment .)
    LPAREN          reduce using rule 47 (assignment -> self_assigment .)
    CLASS           reduce using rule 47 (assignment -> self_assigment .)
    MODULE          reduce using rule 47 (assignment -> self_assigment .)
    DEF             reduce using rule 47 (assignment -> self_assigment .)
    ALIAS           reduce using rule 47 (assignment -> self_assigment .)
    UNDEF           reduce using rule 47 (assignment -> self_assigment .)
    DEFINED_OP      reduce using rule 47 (assignment -> self_assigment .)
    DOUBLE_QUOTED   reduce using rule 47 (assignment -> self_assigment .)
    IF              reduce using rule 47 (assignment -> self_assigment .)
    NUMBER          reduce using rule 47 (assignment -> self_assigment .)
    END             reduce using rule 47 (assignment -> self_assigment .)
    ELSIF           reduce using rule 47 (assignment -> self_assigment .)
    ELSE            reduce using rule 47 (assignment -> self_assigment .)


state 34

    (48) assignment -> mult_assigment .

    $end            reduce using rule 48 (assignment -> mult_assigment .)
    THEN            reduce using rule 48 (assignment -> mult_assigment .)
    STRING          reduce using rule 48 (assignment -> mult_assigment .)
    VAR_GLOBAL      reduce using rule 48 (assignment -> mult_assigment .)
    VAR_INSTANCE    reduce using rule 48 (assignment -> mult_assigment .)
    VAR_CLASS       reduce using rule 48 (assignment -> mult_assigment .)
    VAR_LOCAL       reduce using rule 48 (assignment -> mult_assigment .)
    VAR_SYSTEM      reduce using rule 48 (assignment -> mult_assigment .)
    VAR_CONSTANT    reduce using rule 48 (assignment -> mult_assigment .)
    LBRACKET        reduce using rule 48 (assignment -> mult_assigment .)
    LKEY            reduce using rule 48 (assignment -> mult_assigment .)
    IDENTIFIER      reduce using rule 48 (assignment -> mult_assigment .)
    SUPER           reduce using rule 48 (assignment -> mult_assigment .)
    LPAREN          reduce using rule 48 (assignment -> mult_assigment .)
    CLASS           reduce using rule 48 (assignment -> mult_assigment .)
    MODULE          reduce using rule 48 (assignment -> mult_assigment .)
    DEF             reduce using rule 48 (assignment -> mult_assigment .)
    ALIAS           reduce using rule 48 (assignment -> mult_assigment .)
    UNDEF           reduce using rule 48 (assignment -> mult_assigment .)
    DEFINED_OP      reduce using rule 48 (assignment -> mult_assigment .)
    DOUBLE_QUOTED   reduce using rule 48 (assignment -> mult_assigment .)
    IF              reduce using rule 48 (assignment -> mult_assigment .)
    NUMBER          reduce using rule 48 (assignment -> mult_assigment .)
    END             reduce using rule 48 (assignment -> mult_assigment .)
    ELSIF           reduce using rule 48 (assignment -> mult_assigment .)
    ELSE            reduce using rule 48 (assignment -> mult_assigment .)


state 35

    (80) expression_operations -> opmate .

    PLUS            reduce using rule 80 (expression_operations -> opmate .)
    MINUS           reduce using rule 80 (expression_operations -> opmate .)
    TIMES           reduce using rule 80 (expression_operations -> opmate .)
    DIVIDE          reduce using rule 80 (expression_operations -> opmate .)
    MOD             reduce using rule 80 (expression_operations -> opmate .)
    EQUAL           reduce using rule 80 (expression_operations -> opmate .)
    NOTEQUAL        reduce using rule 80 (expression_operations -> opmate .)
    GREATERTHAN     reduce using rule 80 (expression_operations -> opmate .)
    GREATERTHANEQUAL reduce using rule 80 (expression_operations -> opmate .)
    LESSERTHAN      reduce using rule 80 (expression_operations -> opmate .)
    LESSERTHANEQUAL reduce using rule 80 (expression_operations -> opmate .)
    $end            reduce using rule 80 (expression_operations -> opmate .)
    THEN            reduce using rule 80 (expression_operations -> opmate .)
    STRING          reduce using rule 80 (expression_operations -> opmate .)
    VAR_GLOBAL      reduce using rule 80 (expression_operations -> opmate .)
    VAR_INSTANCE    reduce using rule 80 (expression_operations -> opmate .)
    VAR_CLASS       reduce using rule 80 (expression_operations -> opmate .)
    VAR_LOCAL       reduce using rule 80 (expression_operations -> opmate .)
    VAR_SYSTEM      reduce using rule 80 (expression_operations -> opmate .)
    VAR_CONSTANT    reduce using rule 80 (expression_operations -> opmate .)
    LBRACKET        reduce using rule 80 (expression_operations -> opmate .)
    LKEY            reduce using rule 80 (expression_operations -> opmate .)
    IDENTIFIER      reduce using rule 80 (expression_operations -> opmate .)
    SUPER           reduce using rule 80 (expression_operations -> opmate .)
    LPAREN          reduce using rule 80 (expression_operations -> opmate .)
    CLASS           reduce using rule 80 (expression_operations -> opmate .)
    MODULE          reduce using rule 80 (expression_operations -> opmate .)
    DEF             reduce using rule 80 (expression_operations -> opmate .)
    ALIAS           reduce using rule 80 (expression_operations -> opmate .)
    UNDEF           reduce using rule 80 (expression_operations -> opmate .)
    DEFINED_OP      reduce using rule 80 (expression_operations -> opmate .)
    DOUBLE_QUOTED   reduce using rule 80 (expression_operations -> opmate .)
    IF              reduce using rule 80 (expression_operations -> opmate .)
    NUMBER          reduce using rule 80 (expression_operations -> opmate .)
    END             reduce using rule 80 (expression_operations -> opmate .)
    ELSIF           reduce using rule 80 (expression_operations -> opmate .)
    ELSE            reduce using rule 80 (expression_operations -> opmate .)


state 36

    (60) control_structure -> if .

    $end            reduce using rule 60 (control_structure -> if .)
    THEN            reduce using rule 60 (control_structure -> if .)
    STRING          reduce using rule 60 (control_structure -> if .)
    VAR_GLOBAL      reduce using rule 60 (control_structure -> if .)
    VAR_INSTANCE    reduce using rule 60 (control_structure -> if .)
    VAR_CLASS       reduce using rule 60 (control_structure -> if .)
    VAR_LOCAL       reduce using rule 60 (control_structure -> if .)
    VAR_SYSTEM      reduce using rule 60 (control_structure -> if .)
    VAR_CONSTANT    reduce using rule 60 (control_structure -> if .)
    LBRACKET        reduce using rule 60 (control_structure -> if .)
    LKEY            reduce using rule 60 (control_structure -> if .)
    IDENTIFIER      reduce using rule 60 (control_structure -> if .)
    SUPER           reduce using rule 60 (control_structure -> if .)
    LPAREN          reduce using rule 60 (control_structure -> if .)
    CLASS           reduce using rule 60 (control_structure -> if .)
    MODULE          reduce using rule 60 (control_structure -> if .)
    DEF             reduce using rule 60 (control_structure -> if .)
    ALIAS           reduce using rule 60 (control_structure -> if .)
    UNDEF           reduce using rule 60 (control_structure -> if .)
    DEFINED_OP      reduce using rule 60 (control_structure -> if .)
    DOUBLE_QUOTED   reduce using rule 60 (control_structure -> if .)
    IF              reduce using rule 60 (control_structure -> if .)
    NUMBER          reduce using rule 60 (control_structure -> if .)
    END             reduce using rule 60 (control_structure -> if .)
    ELSIF           reduce using rule 60 (control_structure -> if .)
    ELSE            reduce using rule 60 (control_structure -> if .)


state 37

    (72) class_definition -> CLASS . IDENTIFIER expression END
    (73) class_definition -> CLASS . IDENTIFIER LESSERTHAN IDENTIFIER expression END

    IDENTIFIER      shift and go to state 81


state 38

    (74) module_definition -> MODULE . IDENTIFIER expression END

    IDENTIFIER      shift and go to state 82


state 39

    (75) method_definition -> DEF . function expression END
    (35) function -> . IDENTIFIER LPAREN RPAREN
    (36) function -> . IDENTIFIER LPAREN args_method RPAREN

    IDENTIFIER      shift and go to state 84

    function                       shift and go to state 83

state 40

    (76) alias -> ALIAS . IDENTIFIER IDENTIFIER
    (77) alias -> ALIAS . VAR_GLOBAL VAR_GLOBAL

    IDENTIFIER      shift and go to state 85
    VAR_GLOBAL      shift and go to state 86


state 41

    (78) undef -> UNDEF . IDENTIFIER

    IDENTIFIER      shift and go to state 87


state 42

    (79) defined -> DEFINED_OP . expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 88
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 43

    (25) string_concat -> DOUBLE_QUOTED . IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> DOUBLE_QUOTED . IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED

    IDENTIFIER      shift and go to state 89


state 44

    (98) data -> NUMBER .

    PLUS            reduce using rule 98 (data -> NUMBER .)
    MINUS           reduce using rule 98 (data -> NUMBER .)
    TIMES           reduce using rule 98 (data -> NUMBER .)
    DIVIDE          reduce using rule 98 (data -> NUMBER .)
    MOD             reduce using rule 98 (data -> NUMBER .)
    EQUAL           reduce using rule 98 (data -> NUMBER .)
    NOTEQUAL        reduce using rule 98 (data -> NUMBER .)
    GREATERTHAN     reduce using rule 98 (data -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 98 (data -> NUMBER .)
    LESSERTHAN      reduce using rule 98 (data -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 98 (data -> NUMBER .)
    COMMA           reduce using rule 98 (data -> NUMBER .)
    RBRACKET        reduce using rule 98 (data -> NUMBER .)
    HASH_ROCKET     reduce using rule 98 (data -> NUMBER .)
    $end            reduce using rule 98 (data -> NUMBER .)
    THEN            reduce using rule 98 (data -> NUMBER .)
    STRING          reduce using rule 98 (data -> NUMBER .)
    VAR_GLOBAL      reduce using rule 98 (data -> NUMBER .)
    VAR_INSTANCE    reduce using rule 98 (data -> NUMBER .)
    VAR_CLASS       reduce using rule 98 (data -> NUMBER .)
    VAR_LOCAL       reduce using rule 98 (data -> NUMBER .)
    VAR_SYSTEM      reduce using rule 98 (data -> NUMBER .)
    VAR_CONSTANT    reduce using rule 98 (data -> NUMBER .)
    LBRACKET        reduce using rule 98 (data -> NUMBER .)
    LKEY            reduce using rule 98 (data -> NUMBER .)
    IDENTIFIER      reduce using rule 98 (data -> NUMBER .)
    SUPER           reduce using rule 98 (data -> NUMBER .)
    LPAREN          reduce using rule 98 (data -> NUMBER .)
    CLASS           reduce using rule 98 (data -> NUMBER .)
    MODULE          reduce using rule 98 (data -> NUMBER .)
    DEF             reduce using rule 98 (data -> NUMBER .)
    ALIAS           reduce using rule 98 (data -> NUMBER .)
    UNDEF           reduce using rule 98 (data -> NUMBER .)
    DEFINED_OP      reduce using rule 98 (data -> NUMBER .)
    DOUBLE_QUOTED   reduce using rule 98 (data -> NUMBER .)
    IF              reduce using rule 98 (data -> NUMBER .)
    NUMBER          reduce using rule 98 (data -> NUMBER .)
    END             reduce using rule 98 (data -> NUMBER .)
    ELSIF           reduce using rule 98 (data -> NUMBER .)
    ELSE            reduce using rule 98 (data -> NUMBER .)
    RPAREN          reduce using rule 98 (data -> NUMBER .)
    RKEY            reduce using rule 98 (data -> NUMBER .)


state 45

    (56) mult_assigment -> list_var . EQUAL_SYMBOL args_method

    EQUAL_SYMBOL    shift and go to state 90


state 46

    (61) if -> IF . expression expression END
    (62) if -> IF . expression THEN expression END
    (63) if -> IF . expression expression elsif END
    (64) if -> IF . expression THEN expression elsif END
    (65) if -> IF . expression expression else END
    (66) if -> IF . expression THEN expression else END
    (67) if -> IF . expression expression elsif else END
    (68) if -> IF . expression THEN expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 91
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 47

    (44) assignment -> variable EQUAL_SYMBOL . data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    variable                       shift and go to state 72
    data                           shift and go to state 92

state 48

    (49) self_assigment -> variable op_assigment . data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    variable                       shift and go to state 72
    data                           shift and go to state 93

state 49

    (57) list_var -> variable COMMA .
    (58) list_var -> variable COMMA . list_var
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    EQUAL_SYMBOL    reduce using rule 57 (list_var -> variable COMMA .)
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    variable                       shift and go to state 94
    list_var                       shift and go to state 95

state 50

    (50) op_assigment -> PLUS_EQUAL .

    NUMBER          reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    STRING          reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_CLASS       reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_LOCAL       reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_SYSTEM      reduce using rule 50 (op_assigment -> PLUS_EQUAL .)
    VAR_CONSTANT    reduce using rule 50 (op_assigment -> PLUS_EQUAL .)


state 51

    (51) op_assigment -> MINUS_EQUAL .

    NUMBER          reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    STRING          reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_CLASS       reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_LOCAL       reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_SYSTEM      reduce using rule 51 (op_assigment -> MINUS_EQUAL .)
    VAR_CONSTANT    reduce using rule 51 (op_assigment -> MINUS_EQUAL .)


state 52

    (52) op_assigment -> TIMES_EQUAL .

    NUMBER          reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    STRING          reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_GLOBAL      reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_INSTANCE    reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_CLASS       reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_LOCAL       reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_SYSTEM      reduce using rule 52 (op_assigment -> TIMES_EQUAL .)
    VAR_CONSTANT    reduce using rule 52 (op_assigment -> TIMES_EQUAL .)


state 53

    (53) op_assigment -> DIVIDE_EQUAL .

    NUMBER          reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    STRING          reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_GLOBAL      reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_INSTANCE    reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_CLASS       reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_LOCAL       reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_SYSTEM      reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)
    VAR_CONSTANT    reduce using rule 53 (op_assigment -> DIVIDE_EQUAL .)


state 54

    (54) op_assigment -> MOD_EQUAL .

    NUMBER          reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    STRING          reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_GLOBAL      reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_INSTANCE    reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_CLASS       reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_LOCAL       reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_SYSTEM      reduce using rule 54 (op_assigment -> MOD_EQUAL .)
    VAR_CONSTANT    reduce using rule 54 (op_assigment -> MOD_EQUAL .)


state 55

    (55) op_assigment -> POW_EQUAL .

    NUMBER          reduce using rule 55 (op_assigment -> POW_EQUAL .)
    STRING          reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_GLOBAL      reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_INSTANCE    reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_CLASS       reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_LOCAL       reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_SYSTEM      reduce using rule 55 (op_assigment -> POW_EQUAL .)
    VAR_CONSTANT    reduce using rule 55 (op_assigment -> POW_EQUAL .)


state 56

    (46) assignment -> method_invocation EQUAL_SYMBOL . data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 96
    variable                       shift and go to state 72

state 57

    (82) expression_operations -> expression_operations op . expression_operations
    (83) expression_operations -> expression_operations op . opmate
    (85) expression_operations -> expression_operations op . LPAREN opmate RPAREN
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (86) opmate -> . data op data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    LPAREN          shift and go to state 99
    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    expression_operations          shift and go to state 97
    opmate                         shift and go to state 98
    data                           shift and go to state 31
    variable                       shift and go to state 72

state 58

    (87) op -> PLUS .

    LPAREN          reduce using rule 87 (op -> PLUS .)
    NUMBER          reduce using rule 87 (op -> PLUS .)
    STRING          reduce using rule 87 (op -> PLUS .)
    VAR_GLOBAL      reduce using rule 87 (op -> PLUS .)
    VAR_INSTANCE    reduce using rule 87 (op -> PLUS .)
    VAR_CLASS       reduce using rule 87 (op -> PLUS .)
    VAR_LOCAL       reduce using rule 87 (op -> PLUS .)
    VAR_SYSTEM      reduce using rule 87 (op -> PLUS .)
    VAR_CONSTANT    reduce using rule 87 (op -> PLUS .)


state 59

    (88) op -> MINUS .

    LPAREN          reduce using rule 88 (op -> MINUS .)
    NUMBER          reduce using rule 88 (op -> MINUS .)
    STRING          reduce using rule 88 (op -> MINUS .)
    VAR_GLOBAL      reduce using rule 88 (op -> MINUS .)
    VAR_INSTANCE    reduce using rule 88 (op -> MINUS .)
    VAR_CLASS       reduce using rule 88 (op -> MINUS .)
    VAR_LOCAL       reduce using rule 88 (op -> MINUS .)
    VAR_SYSTEM      reduce using rule 88 (op -> MINUS .)
    VAR_CONSTANT    reduce using rule 88 (op -> MINUS .)


state 60

    (89) op -> TIMES .

    LPAREN          reduce using rule 89 (op -> TIMES .)
    NUMBER          reduce using rule 89 (op -> TIMES .)
    STRING          reduce using rule 89 (op -> TIMES .)
    VAR_GLOBAL      reduce using rule 89 (op -> TIMES .)
    VAR_INSTANCE    reduce using rule 89 (op -> TIMES .)
    VAR_CLASS       reduce using rule 89 (op -> TIMES .)
    VAR_LOCAL       reduce using rule 89 (op -> TIMES .)
    VAR_SYSTEM      reduce using rule 89 (op -> TIMES .)
    VAR_CONSTANT    reduce using rule 89 (op -> TIMES .)


state 61

    (90) op -> DIVIDE .

    LPAREN          reduce using rule 90 (op -> DIVIDE .)
    NUMBER          reduce using rule 90 (op -> DIVIDE .)
    STRING          reduce using rule 90 (op -> DIVIDE .)
    VAR_GLOBAL      reduce using rule 90 (op -> DIVIDE .)
    VAR_INSTANCE    reduce using rule 90 (op -> DIVIDE .)
    VAR_CLASS       reduce using rule 90 (op -> DIVIDE .)
    VAR_LOCAL       reduce using rule 90 (op -> DIVIDE .)
    VAR_SYSTEM      reduce using rule 90 (op -> DIVIDE .)
    VAR_CONSTANT    reduce using rule 90 (op -> DIVIDE .)


state 62

    (91) op -> MOD .

    LPAREN          reduce using rule 91 (op -> MOD .)
    NUMBER          reduce using rule 91 (op -> MOD .)
    STRING          reduce using rule 91 (op -> MOD .)
    VAR_GLOBAL      reduce using rule 91 (op -> MOD .)
    VAR_INSTANCE    reduce using rule 91 (op -> MOD .)
    VAR_CLASS       reduce using rule 91 (op -> MOD .)
    VAR_LOCAL       reduce using rule 91 (op -> MOD .)
    VAR_SYSTEM      reduce using rule 91 (op -> MOD .)
    VAR_CONSTANT    reduce using rule 91 (op -> MOD .)


state 63

    (92) op -> EQUAL .

    LPAREN          reduce using rule 92 (op -> EQUAL .)
    NUMBER          reduce using rule 92 (op -> EQUAL .)
    STRING          reduce using rule 92 (op -> EQUAL .)
    VAR_GLOBAL      reduce using rule 92 (op -> EQUAL .)
    VAR_INSTANCE    reduce using rule 92 (op -> EQUAL .)
    VAR_CLASS       reduce using rule 92 (op -> EQUAL .)
    VAR_LOCAL       reduce using rule 92 (op -> EQUAL .)
    VAR_SYSTEM      reduce using rule 92 (op -> EQUAL .)
    VAR_CONSTANT    reduce using rule 92 (op -> EQUAL .)


state 64

    (93) op -> NOTEQUAL .

    LPAREN          reduce using rule 93 (op -> NOTEQUAL .)
    NUMBER          reduce using rule 93 (op -> NOTEQUAL .)
    STRING          reduce using rule 93 (op -> NOTEQUAL .)
    VAR_GLOBAL      reduce using rule 93 (op -> NOTEQUAL .)
    VAR_INSTANCE    reduce using rule 93 (op -> NOTEQUAL .)
    VAR_CLASS       reduce using rule 93 (op -> NOTEQUAL .)
    VAR_LOCAL       reduce using rule 93 (op -> NOTEQUAL .)
    VAR_SYSTEM      reduce using rule 93 (op -> NOTEQUAL .)
    VAR_CONSTANT    reduce using rule 93 (op -> NOTEQUAL .)


state 65

    (94) op -> GREATERTHAN .

    LPAREN          reduce using rule 94 (op -> GREATERTHAN .)
    NUMBER          reduce using rule 94 (op -> GREATERTHAN .)
    STRING          reduce using rule 94 (op -> GREATERTHAN .)
    VAR_GLOBAL      reduce using rule 94 (op -> GREATERTHAN .)
    VAR_INSTANCE    reduce using rule 94 (op -> GREATERTHAN .)
    VAR_CLASS       reduce using rule 94 (op -> GREATERTHAN .)
    VAR_LOCAL       reduce using rule 94 (op -> GREATERTHAN .)
    VAR_SYSTEM      reduce using rule 94 (op -> GREATERTHAN .)
    VAR_CONSTANT    reduce using rule 94 (op -> GREATERTHAN .)


state 66

    (95) op -> GREATERTHANEQUAL .

    LPAREN          reduce using rule 95 (op -> GREATERTHANEQUAL .)
    NUMBER          reduce using rule 95 (op -> GREATERTHANEQUAL .)
    STRING          reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_CLASS       reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_SYSTEM      reduce using rule 95 (op -> GREATERTHANEQUAL .)
    VAR_CONSTANT    reduce using rule 95 (op -> GREATERTHANEQUAL .)


state 67

    (96) op -> LESSERTHAN .

    LPAREN          reduce using rule 96 (op -> LESSERTHAN .)
    NUMBER          reduce using rule 96 (op -> LESSERTHAN .)
    STRING          reduce using rule 96 (op -> LESSERTHAN .)
    VAR_GLOBAL      reduce using rule 96 (op -> LESSERTHAN .)
    VAR_INSTANCE    reduce using rule 96 (op -> LESSERTHAN .)
    VAR_CLASS       reduce using rule 96 (op -> LESSERTHAN .)
    VAR_LOCAL       reduce using rule 96 (op -> LESSERTHAN .)
    VAR_SYSTEM      reduce using rule 96 (op -> LESSERTHAN .)
    VAR_CONSTANT    reduce using rule 96 (op -> LESSERTHAN .)


state 68

    (97) op -> LESSERTHANEQUAL .

    LPAREN          reduce using rule 97 (op -> LESSERTHANEQUAL .)
    NUMBER          reduce using rule 97 (op -> LESSERTHANEQUAL .)
    STRING          reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_CLASS       reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_SYSTEM      reduce using rule 97 (op -> LESSERTHANEQUAL .)
    VAR_CONSTANT    reduce using rule 97 (op -> LESSERTHANEQUAL .)


state 69

    (28) array -> LBRACKET args_array . RBRACKET

    RBRACKET        shift and go to state 100


state 70

    (30) args_array -> data .
    (31) args_array -> data . COMMA args_array

    RBRACKET        reduce using rule 30 (args_array -> data .)
    COMMA           shift and go to state 101


state 71

    (99) data -> STRING .

    COMMA           reduce using rule 99 (data -> STRING .)
    RBRACKET        reduce using rule 99 (data -> STRING .)
    HASH_ROCKET     reduce using rule 99 (data -> STRING .)
    PLUS            reduce using rule 99 (data -> STRING .)
    MINUS           reduce using rule 99 (data -> STRING .)
    TIMES           reduce using rule 99 (data -> STRING .)
    DIVIDE          reduce using rule 99 (data -> STRING .)
    MOD             reduce using rule 99 (data -> STRING .)
    EQUAL           reduce using rule 99 (data -> STRING .)
    NOTEQUAL        reduce using rule 99 (data -> STRING .)
    GREATERTHAN     reduce using rule 99 (data -> STRING .)
    GREATERTHANEQUAL reduce using rule 99 (data -> STRING .)
    LESSERTHAN      reduce using rule 99 (data -> STRING .)
    LESSERTHANEQUAL reduce using rule 99 (data -> STRING .)
    $end            reduce using rule 99 (data -> STRING .)
    THEN            reduce using rule 99 (data -> STRING .)
    STRING          reduce using rule 99 (data -> STRING .)
    VAR_GLOBAL      reduce using rule 99 (data -> STRING .)
    VAR_INSTANCE    reduce using rule 99 (data -> STRING .)
    VAR_CLASS       reduce using rule 99 (data -> STRING .)
    VAR_LOCAL       reduce using rule 99 (data -> STRING .)
    VAR_SYSTEM      reduce using rule 99 (data -> STRING .)
    VAR_CONSTANT    reduce using rule 99 (data -> STRING .)
    LBRACKET        reduce using rule 99 (data -> STRING .)
    LKEY            reduce using rule 99 (data -> STRING .)
    IDENTIFIER      reduce using rule 99 (data -> STRING .)
    SUPER           reduce using rule 99 (data -> STRING .)
    LPAREN          reduce using rule 99 (data -> STRING .)
    CLASS           reduce using rule 99 (data -> STRING .)
    MODULE          reduce using rule 99 (data -> STRING .)
    DEF             reduce using rule 99 (data -> STRING .)
    ALIAS           reduce using rule 99 (data -> STRING .)
    UNDEF           reduce using rule 99 (data -> STRING .)
    DEFINED_OP      reduce using rule 99 (data -> STRING .)
    DOUBLE_QUOTED   reduce using rule 99 (data -> STRING .)
    IF              reduce using rule 99 (data -> STRING .)
    NUMBER          reduce using rule 99 (data -> STRING .)
    END             reduce using rule 99 (data -> STRING .)
    ELSIF           reduce using rule 99 (data -> STRING .)
    ELSE            reduce using rule 99 (data -> STRING .)
    RPAREN          reduce using rule 99 (data -> STRING .)
    RKEY            reduce using rule 99 (data -> STRING .)


state 72

    (100) data -> variable .

    COMMA           reduce using rule 100 (data -> variable .)
    RBRACKET        reduce using rule 100 (data -> variable .)
    HASH_ROCKET     reduce using rule 100 (data -> variable .)
    PLUS            reduce using rule 100 (data -> variable .)
    MINUS           reduce using rule 100 (data -> variable .)
    TIMES           reduce using rule 100 (data -> variable .)
    DIVIDE          reduce using rule 100 (data -> variable .)
    MOD             reduce using rule 100 (data -> variable .)
    EQUAL           reduce using rule 100 (data -> variable .)
    NOTEQUAL        reduce using rule 100 (data -> variable .)
    GREATERTHAN     reduce using rule 100 (data -> variable .)
    GREATERTHANEQUAL reduce using rule 100 (data -> variable .)
    LESSERTHAN      reduce using rule 100 (data -> variable .)
    LESSERTHANEQUAL reduce using rule 100 (data -> variable .)
    $end            reduce using rule 100 (data -> variable .)
    THEN            reduce using rule 100 (data -> variable .)
    STRING          reduce using rule 100 (data -> variable .)
    VAR_GLOBAL      reduce using rule 100 (data -> variable .)
    VAR_INSTANCE    reduce using rule 100 (data -> variable .)
    VAR_CLASS       reduce using rule 100 (data -> variable .)
    VAR_LOCAL       reduce using rule 100 (data -> variable .)
    VAR_SYSTEM      reduce using rule 100 (data -> variable .)
    VAR_CONSTANT    reduce using rule 100 (data -> variable .)
    LBRACKET        reduce using rule 100 (data -> variable .)
    LKEY            reduce using rule 100 (data -> variable .)
    IDENTIFIER      reduce using rule 100 (data -> variable .)
    SUPER           reduce using rule 100 (data -> variable .)
    LPAREN          reduce using rule 100 (data -> variable .)
    CLASS           reduce using rule 100 (data -> variable .)
    MODULE          reduce using rule 100 (data -> variable .)
    DEF             reduce using rule 100 (data -> variable .)
    ALIAS           reduce using rule 100 (data -> variable .)
    UNDEF           reduce using rule 100 (data -> variable .)
    DEFINED_OP      reduce using rule 100 (data -> variable .)
    DOUBLE_QUOTED   reduce using rule 100 (data -> variable .)
    IF              reduce using rule 100 (data -> variable .)
    NUMBER          reduce using rule 100 (data -> variable .)
    END             reduce using rule 100 (data -> variable .)
    ELSIF           reduce using rule 100 (data -> variable .)
    ELSE            reduce using rule 100 (data -> variable .)
    RPAREN          reduce using rule 100 (data -> variable .)
    RKEY            reduce using rule 100 (data -> variable .)


state 73

    (32) hash -> LKEY args_hash . RKEY

    RKEY            shift and go to state 102


state 74

    (33) args_hash -> data . HASH_ROCKET data
    (34) args_hash -> data . HASH_ROCKET data COMMA args_hash

    HASH_ROCKET     shift and go to state 103


state 75

    (39) method_invocation -> IDENTIFIER DOT . IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> IDENTIFIER DOT . IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 104


state 76

    (29) array_data -> IDENTIFIER LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 105


state 77

    (81) expression_operations -> LPAREN opmate . RPAREN
    (84) expression_operations -> LPAREN opmate . RPAREN op expression_operations

    RPAREN          shift and go to state 106


state 78

    (37) super -> SUPER LPAREN . RPAREN
    (38) super -> SUPER LPAREN . args_method RPAREN
    (42) args_method -> . data
    (43) args_method -> . data COMMA args_method
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 107
    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_method                    shift and go to state 108
    data                           shift and go to state 109
    variable                       shift and go to state 72

state 79

    (86) opmate -> data op . data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 110
    variable                       shift and go to state 72

state 80

    (45) assignment -> array_data EQUAL_SYMBOL . data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 111
    variable                       shift and go to state 72

state 81

    (72) class_definition -> CLASS IDENTIFIER . expression END
    (73) class_definition -> CLASS IDENTIFIER . LESSERTHAN IDENTIFIER expression END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    LESSERTHAN      shift and go to state 113
    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 112
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 82

    (74) module_definition -> MODULE IDENTIFIER . expression END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 114
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 83

    (75) method_definition -> DEF function . expression END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 115
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 84

    (35) function -> IDENTIFIER . LPAREN RPAREN
    (36) function -> IDENTIFIER . LPAREN args_method RPAREN

    LPAREN          shift and go to state 116


state 85

    (76) alias -> ALIAS IDENTIFIER . IDENTIFIER

    IDENTIFIER      shift and go to state 117


state 86

    (77) alias -> ALIAS VAR_GLOBAL . VAR_GLOBAL

    VAR_GLOBAL      shift and go to state 118


state 87

    (78) undef -> UNDEF IDENTIFIER .

    $end            reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    THEN            reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    STRING          reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_CLASS       reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_LOCAL       reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_SYSTEM      reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    VAR_CONSTANT    reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    LBRACKET        reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    LKEY            reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    IDENTIFIER      reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    SUPER           reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    LPAREN          reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    CLASS           reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    MODULE          reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    DEF             reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    ALIAS           reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    UNDEF           reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    DEFINED_OP      reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    DOUBLE_QUOTED   reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    IF              reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    NUMBER          reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    END             reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    ELSIF           reduce using rule 78 (undef -> UNDEF IDENTIFIER .)
    ELSE            reduce using rule 78 (undef -> UNDEF IDENTIFIER .)


state 88

    (79) defined -> DEFINED_OP expression .

    $end            reduce using rule 79 (defined -> DEFINED_OP expression .)
    THEN            reduce using rule 79 (defined -> DEFINED_OP expression .)
    STRING          reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_GLOBAL      reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_INSTANCE    reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_CLASS       reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_LOCAL       reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_SYSTEM      reduce using rule 79 (defined -> DEFINED_OP expression .)
    VAR_CONSTANT    reduce using rule 79 (defined -> DEFINED_OP expression .)
    LBRACKET        reduce using rule 79 (defined -> DEFINED_OP expression .)
    LKEY            reduce using rule 79 (defined -> DEFINED_OP expression .)
    IDENTIFIER      reduce using rule 79 (defined -> DEFINED_OP expression .)
    SUPER           reduce using rule 79 (defined -> DEFINED_OP expression .)
    LPAREN          reduce using rule 79 (defined -> DEFINED_OP expression .)
    CLASS           reduce using rule 79 (defined -> DEFINED_OP expression .)
    MODULE          reduce using rule 79 (defined -> DEFINED_OP expression .)
    DEF             reduce using rule 79 (defined -> DEFINED_OP expression .)
    ALIAS           reduce using rule 79 (defined -> DEFINED_OP expression .)
    UNDEF           reduce using rule 79 (defined -> DEFINED_OP expression .)
    DEFINED_OP      reduce using rule 79 (defined -> DEFINED_OP expression .)
    DOUBLE_QUOTED   reduce using rule 79 (defined -> DEFINED_OP expression .)
    IF              reduce using rule 79 (defined -> DEFINED_OP expression .)
    NUMBER          reduce using rule 79 (defined -> DEFINED_OP expression .)
    END             reduce using rule 79 (defined -> DEFINED_OP expression .)
    ELSIF           reduce using rule 79 (defined -> DEFINED_OP expression .)
    ELSE            reduce using rule 79 (defined -> DEFINED_OP expression .)


state 89

    (25) string_concat -> DOUBLE_QUOTED IDENTIFIER . concat DOUBLE_QUOTED
    (26) string_concat -> DOUBLE_QUOTED IDENTIFIER . concat IDENTIFIER DOUBLE_QUOTED
    (27) concat -> . NUMBER_SIGN LKEY IDENTIFIER RKEY

    NUMBER_SIGN     shift and go to state 120

    concat                         shift and go to state 119

state 90

    (56) mult_assigment -> list_var EQUAL_SYMBOL . args_method
    (42) args_method -> . data
    (43) args_method -> . data COMMA args_method
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_method                    shift and go to state 121
    data                           shift and go to state 109
    variable                       shift and go to state 72

state 91

    (61) if -> IF expression . expression END
    (62) if -> IF expression . THEN expression END
    (63) if -> IF expression . expression elsif END
    (64) if -> IF expression . THEN expression elsif END
    (65) if -> IF expression . expression else END
    (66) if -> IF expression . THEN expression else END
    (67) if -> IF expression . expression elsif else END
    (68) if -> IF expression . THEN expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    THEN            shift and go to state 123
    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 122
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 92

    (44) assignment -> variable EQUAL_SYMBOL data .

    $end            reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    THEN            reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    STRING          reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    LKEY            reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    SUPER           reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    CLASS           reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    MODULE          reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    DEF             reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    IF              reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    END             reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)
    ELSE            reduce using rule 44 (assignment -> variable EQUAL_SYMBOL data .)


state 93

    (49) self_assigment -> variable op_assigment data .

    $end            reduce using rule 49 (self_assigment -> variable op_assigment data .)
    THEN            reduce using rule 49 (self_assigment -> variable op_assigment data .)
    STRING          reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_GLOBAL      reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_INSTANCE    reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_CLASS       reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_LOCAL       reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_SYSTEM      reduce using rule 49 (self_assigment -> variable op_assigment data .)
    VAR_CONSTANT    reduce using rule 49 (self_assigment -> variable op_assigment data .)
    LBRACKET        reduce using rule 49 (self_assigment -> variable op_assigment data .)
    LKEY            reduce using rule 49 (self_assigment -> variable op_assigment data .)
    IDENTIFIER      reduce using rule 49 (self_assigment -> variable op_assigment data .)
    SUPER           reduce using rule 49 (self_assigment -> variable op_assigment data .)
    LPAREN          reduce using rule 49 (self_assigment -> variable op_assigment data .)
    CLASS           reduce using rule 49 (self_assigment -> variable op_assigment data .)
    MODULE          reduce using rule 49 (self_assigment -> variable op_assigment data .)
    DEF             reduce using rule 49 (self_assigment -> variable op_assigment data .)
    ALIAS           reduce using rule 49 (self_assigment -> variable op_assigment data .)
    UNDEF           reduce using rule 49 (self_assigment -> variable op_assigment data .)
    DEFINED_OP      reduce using rule 49 (self_assigment -> variable op_assigment data .)
    DOUBLE_QUOTED   reduce using rule 49 (self_assigment -> variable op_assigment data .)
    IF              reduce using rule 49 (self_assigment -> variable op_assigment data .)
    NUMBER          reduce using rule 49 (self_assigment -> variable op_assigment data .)
    END             reduce using rule 49 (self_assigment -> variable op_assigment data .)
    ELSIF           reduce using rule 49 (self_assigment -> variable op_assigment data .)
    ELSE            reduce using rule 49 (self_assigment -> variable op_assigment data .)


state 94

    (57) list_var -> variable . COMMA
    (58) list_var -> variable . COMMA list_var
    (59) list_var -> variable .

    COMMA           shift and go to state 49
    EQUAL_SYMBOL    reduce using rule 59 (list_var -> variable .)


state 95

    (58) list_var -> variable COMMA list_var .

    EQUAL_SYMBOL    reduce using rule 58 (list_var -> variable COMMA list_var .)


state 96

    (46) assignment -> method_invocation EQUAL_SYMBOL data .

    $end            reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    THEN            reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    STRING          reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LKEY            reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    SUPER           reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    CLASS           reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    MODULE          reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DEF             reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    IF              reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    END             reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)
    ELSE            reduce using rule 46 (assignment -> method_invocation EQUAL_SYMBOL data .)


state 97

    (82) expression_operations -> expression_operations op expression_operations .
    (82) expression_operations -> expression_operations . op expression_operations
    (83) expression_operations -> expression_operations . op opmate
    (85) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    $end            reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    THEN            reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    STRING          reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_GLOBAL      reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_INSTANCE    reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_CLASS       reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_LOCAL       reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_SYSTEM      reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    VAR_CONSTANT    reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    LBRACKET        reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    LKEY            reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    IDENTIFIER      reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    SUPER           reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    LPAREN          reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    CLASS           reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    MODULE          reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    DEF             reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    ALIAS           reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    UNDEF           reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    DEFINED_OP      reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    DOUBLE_QUOTED   reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    IF              reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    NUMBER          reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    END             reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    ELSIF           reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    ELSE            reduce using rule 82 (expression_operations -> expression_operations op expression_operations .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

  ! PLUS            [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! MINUS           [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! TIMES           [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! DIVIDE          [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! MOD             [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! EQUAL           [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! NOTEQUAL        [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! GREATERTHAN     [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! GREATERTHANEQUAL [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! LESSERTHAN      [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]
  ! LESSERTHANEQUAL [ reduce using rule 82 (expression_operations -> expression_operations op expression_operations .) ]

    op                             shift and go to state 57

state 98

    (83) expression_operations -> expression_operations op opmate .
    (80) expression_operations -> opmate .

  ! reduce/reduce conflict for PLUS resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MOD resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for EQUAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for $end resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for THEN resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_SYSTEM resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for VAR_CONSTANT resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LKEY resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for SUPER resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for LPAREN resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for CLASS resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for MODULE resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DEF resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ALIAS resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for UNDEF resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for DOUBLE_QUOTED resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for IF resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for NUMBER resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for END resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ELSIF resolved using rule 80 (expression_operations -> opmate .)
  ! reduce/reduce conflict for ELSE resolved using rule 80 (expression_operations -> opmate .)
    PLUS            reduce using rule 80 (expression_operations -> opmate .)
    MINUS           reduce using rule 80 (expression_operations -> opmate .)
    TIMES           reduce using rule 80 (expression_operations -> opmate .)
    DIVIDE          reduce using rule 80 (expression_operations -> opmate .)
    MOD             reduce using rule 80 (expression_operations -> opmate .)
    EQUAL           reduce using rule 80 (expression_operations -> opmate .)
    NOTEQUAL        reduce using rule 80 (expression_operations -> opmate .)
    GREATERTHAN     reduce using rule 80 (expression_operations -> opmate .)
    GREATERTHANEQUAL reduce using rule 80 (expression_operations -> opmate .)
    LESSERTHAN      reduce using rule 80 (expression_operations -> opmate .)
    LESSERTHANEQUAL reduce using rule 80 (expression_operations -> opmate .)
    $end            reduce using rule 80 (expression_operations -> opmate .)
    THEN            reduce using rule 80 (expression_operations -> opmate .)
    STRING          reduce using rule 80 (expression_operations -> opmate .)
    VAR_GLOBAL      reduce using rule 80 (expression_operations -> opmate .)
    VAR_INSTANCE    reduce using rule 80 (expression_operations -> opmate .)
    VAR_CLASS       reduce using rule 80 (expression_operations -> opmate .)
    VAR_LOCAL       reduce using rule 80 (expression_operations -> opmate .)
    VAR_SYSTEM      reduce using rule 80 (expression_operations -> opmate .)
    VAR_CONSTANT    reduce using rule 80 (expression_operations -> opmate .)
    LBRACKET        reduce using rule 80 (expression_operations -> opmate .)
    LKEY            reduce using rule 80 (expression_operations -> opmate .)
    IDENTIFIER      reduce using rule 80 (expression_operations -> opmate .)
    SUPER           reduce using rule 80 (expression_operations -> opmate .)
    LPAREN          reduce using rule 80 (expression_operations -> opmate .)
    CLASS           reduce using rule 80 (expression_operations -> opmate .)
    MODULE          reduce using rule 80 (expression_operations -> opmate .)
    DEF             reduce using rule 80 (expression_operations -> opmate .)
    ALIAS           reduce using rule 80 (expression_operations -> opmate .)
    UNDEF           reduce using rule 80 (expression_operations -> opmate .)
    DEFINED_OP      reduce using rule 80 (expression_operations -> opmate .)
    DOUBLE_QUOTED   reduce using rule 80 (expression_operations -> opmate .)
    IF              reduce using rule 80 (expression_operations -> opmate .)
    NUMBER          reduce using rule 80 (expression_operations -> opmate .)
    END             reduce using rule 80 (expression_operations -> opmate .)
    ELSIF           reduce using rule 80 (expression_operations -> opmate .)
    ELSE            reduce using rule 80 (expression_operations -> opmate .)

  ! PLUS            [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! MINUS           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! TIMES           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! DIVIDE          [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! MOD             [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! EQUAL           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! NOTEQUAL        [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! GREATERTHAN     [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! GREATERTHANEQUAL [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! LESSERTHAN      [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! LESSERTHANEQUAL [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! $end            [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! THEN            [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! STRING          [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_GLOBAL      [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_INSTANCE    [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_CLASS       [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_LOCAL       [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_SYSTEM      [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! VAR_CONSTANT    [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! LBRACKET        [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! LKEY            [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! IDENTIFIER      [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! SUPER           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! LPAREN          [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! CLASS           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! MODULE          [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! DEF             [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! ALIAS           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! UNDEF           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! DEFINED_OP      [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! IF              [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! NUMBER          [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! END             [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! ELSIF           [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]
  ! ELSE            [ reduce using rule 83 (expression_operations -> expression_operations op opmate .) ]


state 99

    (85) expression_operations -> expression_operations op LPAREN . opmate RPAREN
    (81) expression_operations -> LPAREN . opmate RPAREN
    (84) expression_operations -> LPAREN . opmate RPAREN op expression_operations
    (86) opmate -> . data op data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    opmate                         shift and go to state 124
    data                           shift and go to state 31
    variable                       shift and go to state 72

state 100

    (28) array -> LBRACKET args_array RBRACKET .

    $end            reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    THEN            reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    STRING          reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_GLOBAL      reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_INSTANCE    reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_CLASS       reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_LOCAL       reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_SYSTEM      reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    VAR_CONSTANT    reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    LBRACKET        reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    LKEY            reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    IDENTIFIER      reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    SUPER           reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    LPAREN          reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    CLASS           reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    MODULE          reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    DEF             reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    ALIAS           reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    UNDEF           reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    DEFINED_OP      reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    DOUBLE_QUOTED   reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    IF              reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    NUMBER          reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    END             reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    ELSIF           reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)
    ELSE            reduce using rule 28 (array -> LBRACKET args_array RBRACKET .)


state 101

    (31) args_array -> data COMMA . args_array
    (30) args_array -> . data
    (31) args_array -> . data COMMA args_array
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 70
    args_array                     shift and go to state 125
    variable                       shift and go to state 72

state 102

    (32) hash -> LKEY args_hash RKEY .

    $end            reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    THEN            reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    STRING          reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_GLOBAL      reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_INSTANCE    reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_CLASS       reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_LOCAL       reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_SYSTEM      reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    VAR_CONSTANT    reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    LBRACKET        reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    LKEY            reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    IDENTIFIER      reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    SUPER           reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    LPAREN          reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    CLASS           reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    MODULE          reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    DEF             reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    ALIAS           reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    UNDEF           reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    DEFINED_OP      reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    DOUBLE_QUOTED   reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    IF              reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    NUMBER          reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    END             reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    ELSIF           reduce using rule 32 (hash -> LKEY args_hash RKEY .)
    ELSE            reduce using rule 32 (hash -> LKEY args_hash RKEY .)


state 103

    (33) args_hash -> data HASH_ROCKET . data
    (34) args_hash -> data HASH_ROCKET . data COMMA args_hash
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 126
    variable                       shift and go to state 72

state 104

    (39) method_invocation -> IDENTIFIER DOT IDENTIFIER . LPAREN RPAREN
    (40) method_invocation -> IDENTIFIER DOT IDENTIFIER . LPAREN args_method RPAREN
    (41) method_invocation -> IDENTIFIER DOT IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 127
    EQUAL_SYMBOL    reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    THEN            reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    STRING          reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_CLASS       reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_LOCAL       reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_SYSTEM      reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    VAR_CONSTANT    reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    LBRACKET        reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    LKEY            reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    SUPER           reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    CLASS           reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    MODULE          reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DEF             reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ALIAS           reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    UNDEF           reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DEFINED_OP      reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    DOUBLE_QUOTED   reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    NUMBER          reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    END             reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ELSIF           reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)
    ELSE            reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .)

  ! LPAREN          [ reduce using rule 41 (method_invocation -> IDENTIFIER DOT IDENTIFIER .) ]


state 105

    (29) array_data -> IDENTIFIER LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 128


state 106

    (81) expression_operations -> LPAREN opmate RPAREN .
    (84) expression_operations -> LPAREN opmate RPAREN . op expression_operations
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    $end            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    THEN            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    STRING          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_GLOBAL      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_INSTANCE    reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CLASS       reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_LOCAL       reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_SYSTEM      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CONSTANT    reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LBRACKET        reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LKEY            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    IDENTIFIER      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    SUPER           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LPAREN          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    CLASS           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    MODULE          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DEF             reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ALIAS           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    UNDEF           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DEFINED_OP      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DOUBLE_QUOTED   reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    IF              reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    NUMBER          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    END             reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ELSIF           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ELSE            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

  ! PLUS            [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]

    op                             shift and go to state 129

state 107

    (37) super -> SUPER LPAREN RPAREN .

    $end            reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    THEN            reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    STRING          reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    LBRACKET        reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    LKEY            reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    SUPER           reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    LPAREN          reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    CLASS           reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    MODULE          reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    DEF             reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    ALIAS           reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    UNDEF           reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    IF              reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    NUMBER          reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    END             reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    ELSIF           reduce using rule 37 (super -> SUPER LPAREN RPAREN .)
    ELSE            reduce using rule 37 (super -> SUPER LPAREN RPAREN .)


state 108

    (38) super -> SUPER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 130


state 109

    (42) args_method -> data .
    (43) args_method -> data . COMMA args_method

    RPAREN          reduce using rule 42 (args_method -> data .)
    $end            reduce using rule 42 (args_method -> data .)
    THEN            reduce using rule 42 (args_method -> data .)
    STRING          reduce using rule 42 (args_method -> data .)
    VAR_GLOBAL      reduce using rule 42 (args_method -> data .)
    VAR_INSTANCE    reduce using rule 42 (args_method -> data .)
    VAR_CLASS       reduce using rule 42 (args_method -> data .)
    VAR_LOCAL       reduce using rule 42 (args_method -> data .)
    VAR_SYSTEM      reduce using rule 42 (args_method -> data .)
    VAR_CONSTANT    reduce using rule 42 (args_method -> data .)
    LBRACKET        reduce using rule 42 (args_method -> data .)
    LKEY            reduce using rule 42 (args_method -> data .)
    IDENTIFIER      reduce using rule 42 (args_method -> data .)
    SUPER           reduce using rule 42 (args_method -> data .)
    LPAREN          reduce using rule 42 (args_method -> data .)
    CLASS           reduce using rule 42 (args_method -> data .)
    MODULE          reduce using rule 42 (args_method -> data .)
    DEF             reduce using rule 42 (args_method -> data .)
    ALIAS           reduce using rule 42 (args_method -> data .)
    UNDEF           reduce using rule 42 (args_method -> data .)
    DEFINED_OP      reduce using rule 42 (args_method -> data .)
    DOUBLE_QUOTED   reduce using rule 42 (args_method -> data .)
    IF              reduce using rule 42 (args_method -> data .)
    NUMBER          reduce using rule 42 (args_method -> data .)
    END             reduce using rule 42 (args_method -> data .)
    ELSIF           reduce using rule 42 (args_method -> data .)
    ELSE            reduce using rule 42 (args_method -> data .)
    COMMA           shift and go to state 131


state 110

    (86) opmate -> data op data .

    PLUS            reduce using rule 86 (opmate -> data op data .)
    MINUS           reduce using rule 86 (opmate -> data op data .)
    TIMES           reduce using rule 86 (opmate -> data op data .)
    DIVIDE          reduce using rule 86 (opmate -> data op data .)
    MOD             reduce using rule 86 (opmate -> data op data .)
    EQUAL           reduce using rule 86 (opmate -> data op data .)
    NOTEQUAL        reduce using rule 86 (opmate -> data op data .)
    GREATERTHAN     reduce using rule 86 (opmate -> data op data .)
    GREATERTHANEQUAL reduce using rule 86 (opmate -> data op data .)
    LESSERTHAN      reduce using rule 86 (opmate -> data op data .)
    LESSERTHANEQUAL reduce using rule 86 (opmate -> data op data .)
    $end            reduce using rule 86 (opmate -> data op data .)
    RPAREN          reduce using rule 86 (opmate -> data op data .)
    THEN            reduce using rule 86 (opmate -> data op data .)
    STRING          reduce using rule 86 (opmate -> data op data .)
    VAR_GLOBAL      reduce using rule 86 (opmate -> data op data .)
    VAR_INSTANCE    reduce using rule 86 (opmate -> data op data .)
    VAR_CLASS       reduce using rule 86 (opmate -> data op data .)
    VAR_LOCAL       reduce using rule 86 (opmate -> data op data .)
    VAR_SYSTEM      reduce using rule 86 (opmate -> data op data .)
    VAR_CONSTANT    reduce using rule 86 (opmate -> data op data .)
    LBRACKET        reduce using rule 86 (opmate -> data op data .)
    LKEY            reduce using rule 86 (opmate -> data op data .)
    IDENTIFIER      reduce using rule 86 (opmate -> data op data .)
    SUPER           reduce using rule 86 (opmate -> data op data .)
    LPAREN          reduce using rule 86 (opmate -> data op data .)
    CLASS           reduce using rule 86 (opmate -> data op data .)
    MODULE          reduce using rule 86 (opmate -> data op data .)
    DEF             reduce using rule 86 (opmate -> data op data .)
    ALIAS           reduce using rule 86 (opmate -> data op data .)
    UNDEF           reduce using rule 86 (opmate -> data op data .)
    DEFINED_OP      reduce using rule 86 (opmate -> data op data .)
    DOUBLE_QUOTED   reduce using rule 86 (opmate -> data op data .)
    IF              reduce using rule 86 (opmate -> data op data .)
    NUMBER          reduce using rule 86 (opmate -> data op data .)
    END             reduce using rule 86 (opmate -> data op data .)
    ELSIF           reduce using rule 86 (opmate -> data op data .)
    ELSE            reduce using rule 86 (opmate -> data op data .)


state 111

    (45) assignment -> array_data EQUAL_SYMBOL data .

    $end            reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    THEN            reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    STRING          reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_GLOBAL      reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_INSTANCE    reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_CLASS       reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_LOCAL       reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_SYSTEM      reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    VAR_CONSTANT    reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    LBRACKET        reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    LKEY            reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    IDENTIFIER      reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    SUPER           reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    LPAREN          reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    CLASS           reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    MODULE          reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    DEF             reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    ALIAS           reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    UNDEF           reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    DEFINED_OP      reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    DOUBLE_QUOTED   reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    IF              reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    NUMBER          reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    END             reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    ELSIF           reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)
    ELSE            reduce using rule 45 (assignment -> array_data EQUAL_SYMBOL data .)


state 112

    (72) class_definition -> CLASS IDENTIFIER expression . END

    END             shift and go to state 132


state 113

    (73) class_definition -> CLASS IDENTIFIER LESSERTHAN . IDENTIFIER expression END

    IDENTIFIER      shift and go to state 133


state 114

    (74) module_definition -> MODULE IDENTIFIER expression . END

    END             shift and go to state 134


state 115

    (75) method_definition -> DEF function expression . END

    END             shift and go to state 135


state 116

    (35) function -> IDENTIFIER LPAREN . RPAREN
    (36) function -> IDENTIFIER LPAREN . args_method RPAREN
    (42) args_method -> . data
    (43) args_method -> . data COMMA args_method
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 136
    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_method                    shift and go to state 137
    data                           shift and go to state 109
    variable                       shift and go to state 72

state 117

    (76) alias -> ALIAS IDENTIFIER IDENTIFIER .

    $end            reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    THEN            reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    STRING          reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_CLASS       reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_LOCAL       reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_SYSTEM      reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    VAR_CONSTANT    reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    LBRACKET        reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    LKEY            reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    IDENTIFIER      reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    SUPER           reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    LPAREN          reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    CLASS           reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    MODULE          reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    DEF             reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    ALIAS           reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    UNDEF           reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    DEFINED_OP      reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    DOUBLE_QUOTED   reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    IF              reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    NUMBER          reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    END             reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    ELSIF           reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)
    ELSE            reduce using rule 76 (alias -> ALIAS IDENTIFIER IDENTIFIER .)


state 118

    (77) alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .

    $end            reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    THEN            reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    STRING          reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_GLOBAL      reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_INSTANCE    reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_CLASS       reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_LOCAL       reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_SYSTEM      reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    VAR_CONSTANT    reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    LBRACKET        reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    LKEY            reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    IDENTIFIER      reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    SUPER           reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    LPAREN          reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    CLASS           reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    MODULE          reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    DEF             reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    ALIAS           reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    UNDEF           reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    DEFINED_OP      reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    DOUBLE_QUOTED   reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    IF              reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    NUMBER          reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    END             reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    ELSIF           reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)
    ELSE            reduce using rule 77 (alias -> ALIAS VAR_GLOBAL VAR_GLOBAL .)


state 119

    (25) string_concat -> DOUBLE_QUOTED IDENTIFIER concat . DOUBLE_QUOTED
    (26) string_concat -> DOUBLE_QUOTED IDENTIFIER concat . IDENTIFIER DOUBLE_QUOTED

    DOUBLE_QUOTED   shift and go to state 138
    IDENTIFIER      shift and go to state 139


state 120

    (27) concat -> NUMBER_SIGN . LKEY IDENTIFIER RKEY

    LKEY            shift and go to state 140


state 121

    (56) mult_assigment -> list_var EQUAL_SYMBOL args_method .

    $end            reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    THEN            reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    STRING          reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_GLOBAL      reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_INSTANCE    reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_CLASS       reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_LOCAL       reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_SYSTEM      reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    VAR_CONSTANT    reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LBRACKET        reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LKEY            reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    IDENTIFIER      reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    SUPER           reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    LPAREN          reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    CLASS           reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    MODULE          reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DEF             reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ALIAS           reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    UNDEF           reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DEFINED_OP      reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    DOUBLE_QUOTED   reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    IF              reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    NUMBER          reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    END             reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ELSIF           reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)
    ELSE            reduce using rule 56 (mult_assigment -> list_var EQUAL_SYMBOL args_method .)


state 122

    (61) if -> IF expression expression . END
    (63) if -> IF expression expression . elsif END
    (65) if -> IF expression expression . else END
    (67) if -> IF expression expression . elsif else END
    (69) elsif -> . ELSIF expression expression
    (70) elsif -> . ELSIF expression THEN expression
    (71) else -> . ELSE expression

    END             shift and go to state 141
    ELSIF           shift and go to state 144
    ELSE            shift and go to state 145

    elsif                          shift and go to state 142
    else                           shift and go to state 143

state 123

    (62) if -> IF expression THEN . expression END
    (64) if -> IF expression THEN . expression elsif END
    (66) if -> IF expression THEN . expression else END
    (68) if -> IF expression THEN . expression elsif else END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 146
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 124

    (85) expression_operations -> expression_operations op LPAREN opmate . RPAREN
    (81) expression_operations -> LPAREN opmate . RPAREN
    (84) expression_operations -> LPAREN opmate . RPAREN op expression_operations

    RPAREN          shift and go to state 147


state 125

    (31) args_array -> data COMMA args_array .

    RBRACKET        reduce using rule 31 (args_array -> data COMMA args_array .)


state 126

    (33) args_hash -> data HASH_ROCKET data .
    (34) args_hash -> data HASH_ROCKET data . COMMA args_hash

    RKEY            reduce using rule 33 (args_hash -> data HASH_ROCKET data .)
    COMMA           shift and go to state 148


state 127

    (39) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN . RPAREN
    (40) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN . args_method RPAREN
    (42) args_method -> . data
    (43) args_method -> . data COMMA args_method
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    RPAREN          shift and go to state 149
    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    args_method                    shift and go to state 150
    data                           shift and go to state 109
    variable                       shift and go to state 72

state 128

    (29) array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET .

    EQUAL_SYMBOL    reduce using rule 29 (array_data -> IDENTIFIER LBRACKET NUMBER RBRACKET .)


state 129

    (84) expression_operations -> LPAREN opmate RPAREN op . expression_operations
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (86) opmate -> . data op data
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    opmate                         shift and go to state 35
    expression_operations          shift and go to state 151
    data                           shift and go to state 31
    variable                       shift and go to state 72

state 130

    (38) super -> SUPER LPAREN args_method RPAREN .

    $end            reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    THEN            reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    STRING          reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    DEF             reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    IF              reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    END             reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    ELSIF           reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)
    ELSE            reduce using rule 38 (super -> SUPER LPAREN args_method RPAREN .)


state 131

    (43) args_method -> data COMMA . args_method
    (42) args_method -> . data
    (43) args_method -> . data COMMA args_method
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 109
    args_method                    shift and go to state 152
    variable                       shift and go to state 72

state 132

    (72) class_definition -> CLASS IDENTIFIER expression END .

    $end            reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    THEN            reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    STRING          reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    LBRACKET        reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    LKEY            reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    SUPER           reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    LPAREN          reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    CLASS           reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    MODULE          reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    DEF             reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    ALIAS           reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    UNDEF           reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    IF              reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    NUMBER          reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    END             reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    ELSIF           reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)
    ELSE            reduce using rule 72 (class_definition -> CLASS IDENTIFIER expression END .)


state 133

    (73) class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER . expression END
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 153
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 134

    (74) module_definition -> MODULE IDENTIFIER expression END .

    $end            reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    THEN            reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    STRING          reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    LBRACKET        reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    LKEY            reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    SUPER           reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    LPAREN          reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    CLASS           reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    MODULE          reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    DEF             reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    ALIAS           reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    UNDEF           reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    IF              reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    NUMBER          reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    END             reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    ELSIF           reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)
    ELSE            reduce using rule 74 (module_definition -> MODULE IDENTIFIER expression END .)


state 135

    (75) method_definition -> DEF function expression END .

    $end            reduce using rule 75 (method_definition -> DEF function expression END .)
    THEN            reduce using rule 75 (method_definition -> DEF function expression END .)
    STRING          reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_GLOBAL      reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_INSTANCE    reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_CLASS       reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_LOCAL       reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_SYSTEM      reduce using rule 75 (method_definition -> DEF function expression END .)
    VAR_CONSTANT    reduce using rule 75 (method_definition -> DEF function expression END .)
    LBRACKET        reduce using rule 75 (method_definition -> DEF function expression END .)
    LKEY            reduce using rule 75 (method_definition -> DEF function expression END .)
    IDENTIFIER      reduce using rule 75 (method_definition -> DEF function expression END .)
    SUPER           reduce using rule 75 (method_definition -> DEF function expression END .)
    LPAREN          reduce using rule 75 (method_definition -> DEF function expression END .)
    CLASS           reduce using rule 75 (method_definition -> DEF function expression END .)
    MODULE          reduce using rule 75 (method_definition -> DEF function expression END .)
    DEF             reduce using rule 75 (method_definition -> DEF function expression END .)
    ALIAS           reduce using rule 75 (method_definition -> DEF function expression END .)
    UNDEF           reduce using rule 75 (method_definition -> DEF function expression END .)
    DEFINED_OP      reduce using rule 75 (method_definition -> DEF function expression END .)
    DOUBLE_QUOTED   reduce using rule 75 (method_definition -> DEF function expression END .)
    IF              reduce using rule 75 (method_definition -> DEF function expression END .)
    NUMBER          reduce using rule 75 (method_definition -> DEF function expression END .)
    END             reduce using rule 75 (method_definition -> DEF function expression END .)
    ELSIF           reduce using rule 75 (method_definition -> DEF function expression END .)
    ELSE            reduce using rule 75 (method_definition -> DEF function expression END .)


state 136

    (35) function -> IDENTIFIER LPAREN RPAREN .

    STRING          reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    LBRACKET        reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    LKEY            reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    SUPER           reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    CLASS           reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    MODULE          reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    DEF             reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    ALIAS           reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    UNDEF           reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 35 (function -> IDENTIFIER LPAREN RPAREN .)


state 137

    (36) function -> IDENTIFIER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 154


state 138

    (25) string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .

    $end            reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    THEN            reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    STRING          reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_GLOBAL      reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_INSTANCE    reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_CLASS       reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_LOCAL       reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_SYSTEM      reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    VAR_CONSTANT    reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LBRACKET        reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LKEY            reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    IDENTIFIER      reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    SUPER           reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    LPAREN          reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    CLASS           reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    MODULE          reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DEF             reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ALIAS           reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    UNDEF           reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DEFINED_OP      reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    DOUBLE_QUOTED   reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    IF              reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    NUMBER          reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    END             reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ELSIF           reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)
    ELSE            reduce using rule 25 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED .)


state 139

    (26) string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER . DOUBLE_QUOTED

    DOUBLE_QUOTED   shift and go to state 155


state 140

    (27) concat -> NUMBER_SIGN LKEY . IDENTIFIER RKEY

    IDENTIFIER      shift and go to state 156


state 141

    (61) if -> IF expression expression END .

    $end            reduce using rule 61 (if -> IF expression expression END .)
    THEN            reduce using rule 61 (if -> IF expression expression END .)
    STRING          reduce using rule 61 (if -> IF expression expression END .)
    VAR_GLOBAL      reduce using rule 61 (if -> IF expression expression END .)
    VAR_INSTANCE    reduce using rule 61 (if -> IF expression expression END .)
    VAR_CLASS       reduce using rule 61 (if -> IF expression expression END .)
    VAR_LOCAL       reduce using rule 61 (if -> IF expression expression END .)
    VAR_SYSTEM      reduce using rule 61 (if -> IF expression expression END .)
    VAR_CONSTANT    reduce using rule 61 (if -> IF expression expression END .)
    LBRACKET        reduce using rule 61 (if -> IF expression expression END .)
    LKEY            reduce using rule 61 (if -> IF expression expression END .)
    IDENTIFIER      reduce using rule 61 (if -> IF expression expression END .)
    SUPER           reduce using rule 61 (if -> IF expression expression END .)
    LPAREN          reduce using rule 61 (if -> IF expression expression END .)
    CLASS           reduce using rule 61 (if -> IF expression expression END .)
    MODULE          reduce using rule 61 (if -> IF expression expression END .)
    DEF             reduce using rule 61 (if -> IF expression expression END .)
    ALIAS           reduce using rule 61 (if -> IF expression expression END .)
    UNDEF           reduce using rule 61 (if -> IF expression expression END .)
    DEFINED_OP      reduce using rule 61 (if -> IF expression expression END .)
    DOUBLE_QUOTED   reduce using rule 61 (if -> IF expression expression END .)
    IF              reduce using rule 61 (if -> IF expression expression END .)
    NUMBER          reduce using rule 61 (if -> IF expression expression END .)
    END             reduce using rule 61 (if -> IF expression expression END .)
    ELSIF           reduce using rule 61 (if -> IF expression expression END .)
    ELSE            reduce using rule 61 (if -> IF expression expression END .)


state 142

    (63) if -> IF expression expression elsif . END
    (67) if -> IF expression expression elsif . else END
    (71) else -> . ELSE expression

    END             shift and go to state 157
    ELSE            shift and go to state 145

    else                           shift and go to state 158

state 143

    (65) if -> IF expression expression else . END

    END             shift and go to state 159


state 144

    (69) elsif -> ELSIF . expression expression
    (70) elsif -> ELSIF . expression THEN expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 160
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 145

    (71) else -> ELSE . expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 161
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 146

    (62) if -> IF expression THEN expression . END
    (64) if -> IF expression THEN expression . elsif END
    (66) if -> IF expression THEN expression . else END
    (68) if -> IF expression THEN expression . elsif else END
    (69) elsif -> . ELSIF expression expression
    (70) elsif -> . ELSIF expression THEN expression
    (71) else -> . ELSE expression

    END             shift and go to state 162
    ELSIF           shift and go to state 144
    ELSE            shift and go to state 145

    elsif                          shift and go to state 163
    else                           shift and go to state 164

state 147

    (85) expression_operations -> expression_operations op LPAREN opmate RPAREN .
    (81) expression_operations -> LPAREN opmate RPAREN .
    (84) expression_operations -> LPAREN opmate RPAREN . op expression_operations
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

  ! reduce/reduce conflict for PLUS resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for EQUAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_SYSTEM resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for VAR_CONSTANT resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LKEY resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for SUPER resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for CLASS resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for MODULE resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DEF resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ALIAS resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for UNDEF resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for DOUBLE_QUOTED resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ELSIF resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    $end            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    THEN            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    STRING          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_GLOBAL      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_INSTANCE    reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CLASS       reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_LOCAL       reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_SYSTEM      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    VAR_CONSTANT    reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LBRACKET        reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LKEY            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    IDENTIFIER      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    SUPER           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    LPAREN          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    CLASS           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    MODULE          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DEF             reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ALIAS           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    UNDEF           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DEFINED_OP      reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    DOUBLE_QUOTED   reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    IF              reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    NUMBER          reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    END             reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ELSIF           reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    ELSE            reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

  ! PLUS            [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! $end            [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! THEN            [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! STRING          [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_GLOBAL      [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_INSTANCE    [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_CLASS       [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_LOCAL       [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_SYSTEM      [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! VAR_CONSTANT    [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LBRACKET        [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LKEY            [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! IDENTIFIER      [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! SUPER           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! LPAREN          [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! CLASS           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! MODULE          [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DEF             [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ALIAS           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! UNDEF           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DEFINED_OP      [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! DOUBLE_QUOTED   [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! IF              [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! NUMBER          [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! END             [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ELSIF           [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! ELSE            [ reduce using rule 85 (expression_operations -> expression_operations op LPAREN opmate RPAREN .) ]
  ! PLUS            [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MINUS           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! TIMES           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! DIVIDE          [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! MOD             [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! EQUAL           [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! NOTEQUAL        [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHAN     [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! GREATERTHANEQUAL [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHAN      [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]
  ! LESSERTHANEQUAL [ reduce using rule 81 (expression_operations -> LPAREN opmate RPAREN .) ]

    op                             shift and go to state 129

state 148

    (34) args_hash -> data HASH_ROCKET data COMMA . args_hash
    (33) args_hash -> . data HASH_ROCKET data
    (34) args_hash -> . data HASH_ROCKET data COMMA args_hash
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT

    NUMBER          shift and go to state 44
    STRING          shift and go to state 71
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25

    data                           shift and go to state 74
    args_hash                      shift and go to state 165
    variable                       shift and go to state 72

state 149

    (39) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .

    EQUAL_SYMBOL    reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    $end            reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    STRING          reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_SYSTEM      reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    VAR_CONSTANT    reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LBRACKET        reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LKEY            reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    SUPER           reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    CLASS           reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    MODULE          reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DEF             reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ALIAS           reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    UNDEF           reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    DOUBLE_QUOTED   reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    END             reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ELSIF           reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 39 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN .)


state 150

    (40) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method . RPAREN

    RPAREN          shift and go to state 166


state 151

    (84) expression_operations -> LPAREN opmate RPAREN op expression_operations .
    (82) expression_operations -> expression_operations . op expression_operations
    (83) expression_operations -> expression_operations . op opmate
    (85) expression_operations -> expression_operations . op LPAREN opmate RPAREN
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . MOD
    (92) op -> . EQUAL
    (93) op -> . NOTEQUAL
    (94) op -> . GREATERTHAN
    (95) op -> . GREATERTHANEQUAL
    (96) op -> . LESSERTHAN
    (97) op -> . LESSERTHANEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
    $end            reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    THEN            reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    STRING          reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_GLOBAL      reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_INSTANCE    reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_CLASS       reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_LOCAL       reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_SYSTEM      reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    VAR_CONSTANT    reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LBRACKET        reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LKEY            reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    IDENTIFIER      reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    SUPER           reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    LPAREN          reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    CLASS           reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    MODULE          reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DEF             reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ALIAS           reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    UNDEF           reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DEFINED_OP      reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    DOUBLE_QUOTED   reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    IF              reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    NUMBER          reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    END             reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ELSIF           reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    ELSE            reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    MOD             shift and go to state 62
    EQUAL           shift and go to state 63
    NOTEQUAL        shift and go to state 64
    GREATERTHAN     shift and go to state 65
    GREATERTHANEQUAL shift and go to state 66
    LESSERTHAN      shift and go to state 67
    LESSERTHANEQUAL shift and go to state 68

  ! PLUS            [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! MINUS           [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! TIMES           [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! DIVIDE          [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! MOD             [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! EQUAL           [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! NOTEQUAL        [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! GREATERTHAN     [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! GREATERTHANEQUAL [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! LESSERTHAN      [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]
  ! LESSERTHANEQUAL [ reduce using rule 84 (expression_operations -> LPAREN opmate RPAREN op expression_operations .) ]

    op                             shift and go to state 57

state 152

    (43) args_method -> data COMMA args_method .

    RPAREN          reduce using rule 43 (args_method -> data COMMA args_method .)
    $end            reduce using rule 43 (args_method -> data COMMA args_method .)
    THEN            reduce using rule 43 (args_method -> data COMMA args_method .)
    STRING          reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_GLOBAL      reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_INSTANCE    reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_CLASS       reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_LOCAL       reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_SYSTEM      reduce using rule 43 (args_method -> data COMMA args_method .)
    VAR_CONSTANT    reduce using rule 43 (args_method -> data COMMA args_method .)
    LBRACKET        reduce using rule 43 (args_method -> data COMMA args_method .)
    LKEY            reduce using rule 43 (args_method -> data COMMA args_method .)
    IDENTIFIER      reduce using rule 43 (args_method -> data COMMA args_method .)
    SUPER           reduce using rule 43 (args_method -> data COMMA args_method .)
    LPAREN          reduce using rule 43 (args_method -> data COMMA args_method .)
    CLASS           reduce using rule 43 (args_method -> data COMMA args_method .)
    MODULE          reduce using rule 43 (args_method -> data COMMA args_method .)
    DEF             reduce using rule 43 (args_method -> data COMMA args_method .)
    ALIAS           reduce using rule 43 (args_method -> data COMMA args_method .)
    UNDEF           reduce using rule 43 (args_method -> data COMMA args_method .)
    DEFINED_OP      reduce using rule 43 (args_method -> data COMMA args_method .)
    DOUBLE_QUOTED   reduce using rule 43 (args_method -> data COMMA args_method .)
    IF              reduce using rule 43 (args_method -> data COMMA args_method .)
    NUMBER          reduce using rule 43 (args_method -> data COMMA args_method .)
    END             reduce using rule 43 (args_method -> data COMMA args_method .)
    ELSIF           reduce using rule 43 (args_method -> data COMMA args_method .)
    ELSE            reduce using rule 43 (args_method -> data COMMA args_method .)


state 153

    (73) class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression . END

    END             shift and go to state 167


state 154

    (36) function -> IDENTIFIER LPAREN args_method RPAREN .

    STRING          reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DEF             reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    IF              reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 36 (function -> IDENTIFIER LPAREN args_method RPAREN .)


state 155

    (26) string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .

    $end            reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    THEN            reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    STRING          reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_GLOBAL      reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_INSTANCE    reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_CLASS       reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_LOCAL       reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_SYSTEM      reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    VAR_CONSTANT    reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LBRACKET        reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LKEY            reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    IDENTIFIER      reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    SUPER           reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    LPAREN          reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    CLASS           reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    MODULE          reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DEF             reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ALIAS           reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    UNDEF           reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DEFINED_OP      reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    DOUBLE_QUOTED   reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    IF              reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    NUMBER          reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    END             reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ELSIF           reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)
    ELSE            reduce using rule 26 (string_concat -> DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED .)


state 156

    (27) concat -> NUMBER_SIGN LKEY IDENTIFIER . RKEY

    RKEY            shift and go to state 168


state 157

    (63) if -> IF expression expression elsif END .

    $end            reduce using rule 63 (if -> IF expression expression elsif END .)
    THEN            reduce using rule 63 (if -> IF expression expression elsif END .)
    STRING          reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_GLOBAL      reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_INSTANCE    reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_CLASS       reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_LOCAL       reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_SYSTEM      reduce using rule 63 (if -> IF expression expression elsif END .)
    VAR_CONSTANT    reduce using rule 63 (if -> IF expression expression elsif END .)
    LBRACKET        reduce using rule 63 (if -> IF expression expression elsif END .)
    LKEY            reduce using rule 63 (if -> IF expression expression elsif END .)
    IDENTIFIER      reduce using rule 63 (if -> IF expression expression elsif END .)
    SUPER           reduce using rule 63 (if -> IF expression expression elsif END .)
    LPAREN          reduce using rule 63 (if -> IF expression expression elsif END .)
    CLASS           reduce using rule 63 (if -> IF expression expression elsif END .)
    MODULE          reduce using rule 63 (if -> IF expression expression elsif END .)
    DEF             reduce using rule 63 (if -> IF expression expression elsif END .)
    ALIAS           reduce using rule 63 (if -> IF expression expression elsif END .)
    UNDEF           reduce using rule 63 (if -> IF expression expression elsif END .)
    DEFINED_OP      reduce using rule 63 (if -> IF expression expression elsif END .)
    DOUBLE_QUOTED   reduce using rule 63 (if -> IF expression expression elsif END .)
    IF              reduce using rule 63 (if -> IF expression expression elsif END .)
    NUMBER          reduce using rule 63 (if -> IF expression expression elsif END .)
    END             reduce using rule 63 (if -> IF expression expression elsif END .)
    ELSIF           reduce using rule 63 (if -> IF expression expression elsif END .)
    ELSE            reduce using rule 63 (if -> IF expression expression elsif END .)


state 158

    (67) if -> IF expression expression elsif else . END

    END             shift and go to state 169


state 159

    (65) if -> IF expression expression else END .

    $end            reduce using rule 65 (if -> IF expression expression else END .)
    THEN            reduce using rule 65 (if -> IF expression expression else END .)
    STRING          reduce using rule 65 (if -> IF expression expression else END .)
    VAR_GLOBAL      reduce using rule 65 (if -> IF expression expression else END .)
    VAR_INSTANCE    reduce using rule 65 (if -> IF expression expression else END .)
    VAR_CLASS       reduce using rule 65 (if -> IF expression expression else END .)
    VAR_LOCAL       reduce using rule 65 (if -> IF expression expression else END .)
    VAR_SYSTEM      reduce using rule 65 (if -> IF expression expression else END .)
    VAR_CONSTANT    reduce using rule 65 (if -> IF expression expression else END .)
    LBRACKET        reduce using rule 65 (if -> IF expression expression else END .)
    LKEY            reduce using rule 65 (if -> IF expression expression else END .)
    IDENTIFIER      reduce using rule 65 (if -> IF expression expression else END .)
    SUPER           reduce using rule 65 (if -> IF expression expression else END .)
    LPAREN          reduce using rule 65 (if -> IF expression expression else END .)
    CLASS           reduce using rule 65 (if -> IF expression expression else END .)
    MODULE          reduce using rule 65 (if -> IF expression expression else END .)
    DEF             reduce using rule 65 (if -> IF expression expression else END .)
    ALIAS           reduce using rule 65 (if -> IF expression expression else END .)
    UNDEF           reduce using rule 65 (if -> IF expression expression else END .)
    DEFINED_OP      reduce using rule 65 (if -> IF expression expression else END .)
    DOUBLE_QUOTED   reduce using rule 65 (if -> IF expression expression else END .)
    IF              reduce using rule 65 (if -> IF expression expression else END .)
    NUMBER          reduce using rule 65 (if -> IF expression expression else END .)
    END             reduce using rule 65 (if -> IF expression expression else END .)
    ELSIF           reduce using rule 65 (if -> IF expression expression else END .)
    ELSE            reduce using rule 65 (if -> IF expression expression else END .)


state 160

    (69) elsif -> ELSIF expression . expression
    (70) elsif -> ELSIF expression . THEN expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    THEN            shift and go to state 171
    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 170
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 161

    (71) else -> ELSE expression .

    END             reduce using rule 71 (else -> ELSE expression .)


state 162

    (62) if -> IF expression THEN expression END .

    $end            reduce using rule 62 (if -> IF expression THEN expression END .)
    THEN            reduce using rule 62 (if -> IF expression THEN expression END .)
    STRING          reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_GLOBAL      reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_INSTANCE    reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_CLASS       reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_LOCAL       reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_SYSTEM      reduce using rule 62 (if -> IF expression THEN expression END .)
    VAR_CONSTANT    reduce using rule 62 (if -> IF expression THEN expression END .)
    LBRACKET        reduce using rule 62 (if -> IF expression THEN expression END .)
    LKEY            reduce using rule 62 (if -> IF expression THEN expression END .)
    IDENTIFIER      reduce using rule 62 (if -> IF expression THEN expression END .)
    SUPER           reduce using rule 62 (if -> IF expression THEN expression END .)
    LPAREN          reduce using rule 62 (if -> IF expression THEN expression END .)
    CLASS           reduce using rule 62 (if -> IF expression THEN expression END .)
    MODULE          reduce using rule 62 (if -> IF expression THEN expression END .)
    DEF             reduce using rule 62 (if -> IF expression THEN expression END .)
    ALIAS           reduce using rule 62 (if -> IF expression THEN expression END .)
    UNDEF           reduce using rule 62 (if -> IF expression THEN expression END .)
    DEFINED_OP      reduce using rule 62 (if -> IF expression THEN expression END .)
    DOUBLE_QUOTED   reduce using rule 62 (if -> IF expression THEN expression END .)
    IF              reduce using rule 62 (if -> IF expression THEN expression END .)
    NUMBER          reduce using rule 62 (if -> IF expression THEN expression END .)
    END             reduce using rule 62 (if -> IF expression THEN expression END .)
    ELSIF           reduce using rule 62 (if -> IF expression THEN expression END .)
    ELSE            reduce using rule 62 (if -> IF expression THEN expression END .)


state 163

    (64) if -> IF expression THEN expression elsif . END
    (68) if -> IF expression THEN expression elsif . else END
    (71) else -> . ELSE expression

    END             shift and go to state 172
    ELSE            shift and go to state 145

    else                           shift and go to state 173

state 164

    (66) if -> IF expression THEN expression else . END

    END             shift and go to state 174


state 165

    (34) args_hash -> data HASH_ROCKET data COMMA args_hash .

    RKEY            reduce using rule 34 (args_hash -> data HASH_ROCKET data COMMA args_hash .)


state 166

    (40) method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .

    EQUAL_SYMBOL    reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    $end            reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    THEN            reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    STRING          reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_GLOBAL      reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_INSTANCE    reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CLASS       reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_LOCAL       reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_SYSTEM      reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    VAR_CONSTANT    reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LBRACKET        reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LKEY            reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    IDENTIFIER      reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    SUPER           reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    LPAREN          reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    CLASS           reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    MODULE          reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DEF             reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ALIAS           reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    UNDEF           reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DEFINED_OP      reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    DOUBLE_QUOTED   reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    IF              reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    NUMBER          reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    END             reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ELSIF           reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)
    ELSE            reduce using rule 40 (method_invocation -> IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN .)


state 167

    (73) class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .

    $end            reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    THEN            reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    STRING          reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_GLOBAL      reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_INSTANCE    reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_CLASS       reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_LOCAL       reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_SYSTEM      reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    VAR_CONSTANT    reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    LBRACKET        reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    LKEY            reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    IDENTIFIER      reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    SUPER           reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    LPAREN          reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    CLASS           reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    MODULE          reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    DEF             reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    ALIAS           reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    UNDEF           reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    DEFINED_OP      reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    DOUBLE_QUOTED   reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    IF              reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    NUMBER          reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    END             reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    ELSIF           reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)
    ELSE            reduce using rule 73 (class_definition -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END .)


state 168

    (27) concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .

    DOUBLE_QUOTED   reduce using rule 27 (concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .)
    IDENTIFIER      reduce using rule 27 (concat -> NUMBER_SIGN LKEY IDENTIFIER RKEY .)


state 169

    (67) if -> IF expression expression elsif else END .

    $end            reduce using rule 67 (if -> IF expression expression elsif else END .)
    THEN            reduce using rule 67 (if -> IF expression expression elsif else END .)
    STRING          reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_GLOBAL      reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_INSTANCE    reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_CLASS       reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_LOCAL       reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_SYSTEM      reduce using rule 67 (if -> IF expression expression elsif else END .)
    VAR_CONSTANT    reduce using rule 67 (if -> IF expression expression elsif else END .)
    LBRACKET        reduce using rule 67 (if -> IF expression expression elsif else END .)
    LKEY            reduce using rule 67 (if -> IF expression expression elsif else END .)
    IDENTIFIER      reduce using rule 67 (if -> IF expression expression elsif else END .)
    SUPER           reduce using rule 67 (if -> IF expression expression elsif else END .)
    LPAREN          reduce using rule 67 (if -> IF expression expression elsif else END .)
    CLASS           reduce using rule 67 (if -> IF expression expression elsif else END .)
    MODULE          reduce using rule 67 (if -> IF expression expression elsif else END .)
    DEF             reduce using rule 67 (if -> IF expression expression elsif else END .)
    ALIAS           reduce using rule 67 (if -> IF expression expression elsif else END .)
    UNDEF           reduce using rule 67 (if -> IF expression expression elsif else END .)
    DEFINED_OP      reduce using rule 67 (if -> IF expression expression elsif else END .)
    DOUBLE_QUOTED   reduce using rule 67 (if -> IF expression expression elsif else END .)
    IF              reduce using rule 67 (if -> IF expression expression elsif else END .)
    NUMBER          reduce using rule 67 (if -> IF expression expression elsif else END .)
    END             reduce using rule 67 (if -> IF expression expression elsif else END .)
    ELSIF           reduce using rule 67 (if -> IF expression expression elsif else END .)
    ELSE            reduce using rule 67 (if -> IF expression expression elsif else END .)


state 170

    (69) elsif -> ELSIF expression expression .

    END             reduce using rule 69 (elsif -> ELSIF expression expression .)
    ELSE            reduce using rule 69 (elsif -> ELSIF expression expression .)


state 171

    (70) elsif -> ELSIF expression THEN . expression
    (2) expression -> . string_literals
    (3) expression -> . variable
    (4) expression -> . array
    (5) expression -> . hash
    (6) expression -> . method_invocation
    (7) expression -> . super
    (8) expression -> . assignment
    (9) expression -> . expression_operations
    (10) expression -> . control_structure
    (11) expression -> . class_definition
    (12) expression -> . module_definition
    (13) expression -> . method_definition
    (14) expression -> . alias
    (15) expression -> . undef
    (16) expression -> . defined
    (23) string_literals -> . STRING
    (24) string_literals -> . string_concat
    (17) variable -> . VAR_GLOBAL
    (18) variable -> . VAR_INSTANCE
    (19) variable -> . VAR_CLASS
    (20) variable -> . VAR_LOCAL
    (21) variable -> . VAR_SYSTEM
    (22) variable -> . VAR_CONSTANT
    (28) array -> . LBRACKET args_array RBRACKET
    (32) hash -> . LKEY args_hash RKEY
    (39) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN RPAREN
    (40) method_invocation -> . IDENTIFIER DOT IDENTIFIER LPAREN args_method RPAREN
    (41) method_invocation -> . IDENTIFIER DOT IDENTIFIER
    (37) super -> . SUPER LPAREN RPAREN
    (38) super -> . SUPER LPAREN args_method RPAREN
    (44) assignment -> . variable EQUAL_SYMBOL data
    (45) assignment -> . array_data EQUAL_SYMBOL data
    (46) assignment -> . method_invocation EQUAL_SYMBOL data
    (47) assignment -> . self_assigment
    (48) assignment -> . mult_assigment
    (80) expression_operations -> . opmate
    (81) expression_operations -> . LPAREN opmate RPAREN
    (82) expression_operations -> . expression_operations op expression_operations
    (83) expression_operations -> . expression_operations op opmate
    (84) expression_operations -> . LPAREN opmate RPAREN op expression_operations
    (85) expression_operations -> . expression_operations op LPAREN opmate RPAREN
    (60) control_structure -> . if
    (72) class_definition -> . CLASS IDENTIFIER expression END
    (73) class_definition -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER expression END
    (74) module_definition -> . MODULE IDENTIFIER expression END
    (75) method_definition -> . DEF function expression END
    (76) alias -> . ALIAS IDENTIFIER IDENTIFIER
    (77) alias -> . ALIAS VAR_GLOBAL VAR_GLOBAL
    (78) undef -> . UNDEF IDENTIFIER
    (79) defined -> . DEFINED_OP expression
    (25) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat DOUBLE_QUOTED
    (26) string_concat -> . DOUBLE_QUOTED IDENTIFIER concat IDENTIFIER DOUBLE_QUOTED
    (29) array_data -> . IDENTIFIER LBRACKET NUMBER RBRACKET
    (49) self_assigment -> . variable op_assigment data
    (56) mult_assigment -> . list_var EQUAL_SYMBOL args_method
    (86) opmate -> . data op data
    (61) if -> . IF expression expression END
    (62) if -> . IF expression THEN expression END
    (63) if -> . IF expression expression elsif END
    (64) if -> . IF expression THEN expression elsif END
    (65) if -> . IF expression expression else END
    (66) if -> . IF expression THEN expression else END
    (67) if -> . IF expression expression elsif else END
    (68) if -> . IF expression THEN expression elsif else END
    (57) list_var -> . variable COMMA
    (58) list_var -> . variable COMMA list_var
    (59) list_var -> . variable
    (98) data -> . NUMBER
    (99) data -> . STRING
    (100) data -> . variable

    STRING          shift and go to state 18
    VAR_GLOBAL      shift and go to state 20
    VAR_INSTANCE    shift and go to state 21
    VAR_CLASS       shift and go to state 22
    VAR_LOCAL       shift and go to state 23
    VAR_SYSTEM      shift and go to state 24
    VAR_CONSTANT    shift and go to state 25
    LBRACKET        shift and go to state 26
    LKEY            shift and go to state 27
    IDENTIFIER      shift and go to state 28
    SUPER           shift and go to state 30
    LPAREN          shift and go to state 29
    CLASS           shift and go to state 37
    MODULE          shift and go to state 38
    DEF             shift and go to state 39
    ALIAS           shift and go to state 40
    UNDEF           shift and go to state 41
    DEFINED_OP      shift and go to state 42
    DOUBLE_QUOTED   shift and go to state 43
    IF              shift and go to state 46
    NUMBER          shift and go to state 44

    expression                     shift and go to state 175
    string_literals                shift and go to state 3
    variable                       shift and go to state 4
    array                          shift and go to state 5
    hash                           shift and go to state 6
    method_invocation              shift and go to state 7
    super                          shift and go to state 8
    assignment                     shift and go to state 9
    expression_operations          shift and go to state 10
    control_structure              shift and go to state 11
    class_definition               shift and go to state 12
    module_definition              shift and go to state 13
    method_definition              shift and go to state 14
    alias                          shift and go to state 15
    undef                          shift and go to state 16
    defined                        shift and go to state 17
    string_concat                  shift and go to state 19
    data                           shift and go to state 31
    array_data                     shift and go to state 32
    self_assigment                 shift and go to state 33
    mult_assigment                 shift and go to state 34
    opmate                         shift and go to state 35
    if                             shift and go to state 36
    list_var                       shift and go to state 45

state 172

    (64) if -> IF expression THEN expression elsif END .

    $end            reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    THEN            reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    STRING          reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_GLOBAL      reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_INSTANCE    reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_CLASS       reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_LOCAL       reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_SYSTEM      reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    VAR_CONSTANT    reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    LBRACKET        reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    LKEY            reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    IDENTIFIER      reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    SUPER           reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    LPAREN          reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    CLASS           reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    MODULE          reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    DEF             reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    ALIAS           reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    UNDEF           reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    DEFINED_OP      reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    DOUBLE_QUOTED   reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    IF              reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    NUMBER          reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    END             reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    ELSIF           reduce using rule 64 (if -> IF expression THEN expression elsif END .)
    ELSE            reduce using rule 64 (if -> IF expression THEN expression elsif END .)


state 173

    (68) if -> IF expression THEN expression elsif else . END

    END             shift and go to state 176


state 174

    (66) if -> IF expression THEN expression else END .

    $end            reduce using rule 66 (if -> IF expression THEN expression else END .)
    THEN            reduce using rule 66 (if -> IF expression THEN expression else END .)
    STRING          reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_GLOBAL      reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_INSTANCE    reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_CLASS       reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_LOCAL       reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_SYSTEM      reduce using rule 66 (if -> IF expression THEN expression else END .)
    VAR_CONSTANT    reduce using rule 66 (if -> IF expression THEN expression else END .)
    LBRACKET        reduce using rule 66 (if -> IF expression THEN expression else END .)
    LKEY            reduce using rule 66 (if -> IF expression THEN expression else END .)
    IDENTIFIER      reduce using rule 66 (if -> IF expression THEN expression else END .)
    SUPER           reduce using rule 66 (if -> IF expression THEN expression else END .)
    LPAREN          reduce using rule 66 (if -> IF expression THEN expression else END .)
    CLASS           reduce using rule 66 (if -> IF expression THEN expression else END .)
    MODULE          reduce using rule 66 (if -> IF expression THEN expression else END .)
    DEF             reduce using rule 66 (if -> IF expression THEN expression else END .)
    ALIAS           reduce using rule 66 (if -> IF expression THEN expression else END .)
    UNDEF           reduce using rule 66 (if -> IF expression THEN expression else END .)
    DEFINED_OP      reduce using rule 66 (if -> IF expression THEN expression else END .)
    DOUBLE_QUOTED   reduce using rule 66 (if -> IF expression THEN expression else END .)
    IF              reduce using rule 66 (if -> IF expression THEN expression else END .)
    NUMBER          reduce using rule 66 (if -> IF expression THEN expression else END .)
    END             reduce using rule 66 (if -> IF expression THEN expression else END .)
    ELSIF           reduce using rule 66 (if -> IF expression THEN expression else END .)
    ELSE            reduce using rule 66 (if -> IF expression THEN expression else END .)


state 175

    (70) elsif -> ELSIF expression THEN expression .

    END             reduce using rule 70 (elsif -> ELSIF expression THEN expression .)
    ELSE            reduce using rule 70 (elsif -> ELSIF expression THEN expression .)


state 176

    (68) if -> IF expression THEN expression elsif else END .

    $end            reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    THEN            reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    STRING          reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_GLOBAL      reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_INSTANCE    reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_CLASS       reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_LOCAL       reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_SYSTEM      reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    VAR_CONSTANT    reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    LBRACKET        reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    LKEY            reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    IDENTIFIER      reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    SUPER           reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    LPAREN          reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    CLASS           reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    MODULE          reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    DEF             reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    ALIAS           reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    UNDEF           reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    DEFINED_OP      reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    DOUBLE_QUOTED   reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    IF              reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    NUMBER          reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    END             reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    ELSIF           reduce using rule 68 (if -> IF expression THEN expression elsif else END .)
    ELSE            reduce using rule 68 (if -> IF expression THEN expression elsif else END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL_SYMBOL in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 147 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 147 resolved as shift
WARNING: shift/reduce conflict for MOD in state 147 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 147 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 147 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 147 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 147 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 147 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 151 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 151 resolved as shift
WARNING: shift/reduce conflict for MOD in state 151 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 151 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 98 resolved using rule (expression_operations -> opmate)
WARNING: rejected rule (expression_operations -> expression_operations op opmate) in state 98
WARNING: reduce/reduce conflict in state 147 resolved using rule (expression_operations -> LPAREN opmate RPAREN)
WARNING: rejected rule (expression_operations -> expression_operations op LPAREN opmate RPAREN) in state 147
WARNING: Rule (expression_operations -> expression_operations op opmate) is never reduced
WARNING: Rule (expression_operations -> expression_operations op LPAREN opmate RPAREN) is never reduced
