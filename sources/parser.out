Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    DEFINED
    DOUBLE_QUOTED
    EXPONENT_AND
    FALSE
    NEXT
    NIL
    NUMBER_SIGN
    REDO
    RETRY
    SELF
    TRUE
    VAR_SYSTEM
    _FILE_
    _LINE_

Grammar

Rule 0     S' -> program
Rule 1     program -> compstmt
Rule 2     statement -> <empty>
Rule 3     compstmt -> stmt
Rule 4     compstmt -> stmt term
Rule 5     compstmt -> stmt term expr term
Rule 6     stmt -> call do LBRACKET RBRACKET
Rule 7     stmt -> LBRACKET block_var RBRACKET
Rule 8     stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
Rule 9     stmt -> UNDEF fname
Rule 10    stmt -> ALIAS fname fname
Rule 11    stmt -> stmt IF expr
Rule 12    stmt -> stmt WHILE expr
Rule 13    stmt -> stmt UNLESS expr
Rule 14    stmt -> stmt UNTIL expr
Rule 15    stmt -> BEGIN LKEY compstmt RKEY
Rule 16    stmt -> END LKEY compstmt RKEY
Rule 17    stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
Rule 18    stmt -> expr
Rule 19    expr -> mlhs = mrhs
Rule 20    expr -> RETURN call_args
Rule 21    expr -> YIELD call_args
Rule 22    expr -> expr AND expr
Rule 23    expr -> expr OR expr
Rule 24    expr -> NOT expr
Rule 25    expr -> command
Rule 26    expr -> NOT_SYMBOL command
Rule 27    expr -> arg
Rule 28    call -> function
Rule 29    call -> command
Rule 30    command -> operation call_args
Rule 31    command -> primary DOT operation call_args
Rule 32    command -> primary UNARY_OP operation call_args
Rule 33    command -> SUPER call_args
Rule 34    function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
Rule 35    function -> primary DOT operation LPAREN call_args RPAREN
Rule 36    function -> primary UNARY_OP operation LPAREN call_args RPAREN
Rule 37    function -> primary DOT operation
Rule 38    function -> primary UNARY_OP operation
Rule 39    function -> SUPER LPAREN call_args RPAREN
Rule 40    function -> SUPER
Rule 41    arg -> lhs = arg
Rule 42    arg -> lhs op_asgn arg
Rule 43    arg -> arg RANGE_INCLUSIVE arg
Rule 44    arg -> arg RANGE_EXCLUSIVE arg
Rule 45    arg -> arg PLUS arg
Rule 46    arg -> arg MINUS arg
Rule 47    arg -> arg TIMES arg
Rule 48    arg -> arg DIVIDE arg
Rule 49    arg -> arg MOD arg
Rule 50    arg -> arg POW arg
Rule 51    arg -> PLUS arg
Rule 52    arg -> MINUS arg
Rule 53    arg -> arg OR_SYMBOL arg
Rule 54    arg -> arg BINARY_XOR_OP arg
Rule 55    arg -> arg BINARY_AND_OP arg
Rule 56    arg -> arg COMBINED_COMPARISON_OP arg
Rule 57    arg -> arg GREATERTHAN arg
Rule 58    arg -> arg GREATERTHANEQUAL arg
Rule 59    arg -> arg LESSERTHAN arg
Rule 60    arg -> arg LESSERTHANEQUAL arg
Rule 61    arg -> arg EQUAL arg
Rule 62    arg -> arg CASE_EQUALITY arg
Rule 63    arg -> arg NOTEQUAL arg
Rule 64    arg -> arg MATCHED_STRINGS_OP arg
Rule 65    arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg
Rule 66    arg -> NOT_SYMBOL arg
Rule 67    arg -> COMPLEMENT_OP arg
Rule 68    arg -> arg BINARY_LEFT_SHIFT_OP arg
Rule 69    arg -> arg BINARY_RIGHT_SHIFT_OP arg
Rule 70    arg -> arg AND arg
Rule 71    arg -> arg OR arg
Rule 72    arg -> DEFINED_OP arg
Rule 73    arg -> primary
Rule 74    variable -> VAR_GLOBAL
Rule 75    variable -> VAR_LOCAL
Rule 76    variable -> VAR_INSTANCE
Rule 77    variable -> VAR_CLASS
Rule 78    primary -> LPAREN compstmt RPAREN
Rule 79    primary -> literal
Rule 80    primary -> variable
Rule 81    primary -> primary UNARY_OP IDENTIFIER
Rule 82    primary -> UNARY_OP IDENTIFIER
Rule 83    primary -> primary LBRACKET RBRACKET
Rule 84    primary -> primary LBRACKET args RBRACKET
Rule 85    primary -> LBRACKET RBRACKET
Rule 86    primary -> LBRACKET args RBRACKET
Rule 87    primary -> LBRACKET args COMMA RBRACKET
Rule 88    primary -> LKEY RKEY
Rule 89    primary -> LKEY args RKEY
Rule 90    primary -> LKEY assocs RKEY
Rule 91    primary -> LKEY args COMMA RKEY
Rule 92    primary -> LKEY assocs COMMA RKEY
Rule 93    primary -> RETURN
Rule 94    primary -> RETURN LPAREN RPAREN
Rule 95    primary -> RETURN LPAREN call_args RPAREN
Rule 96    primary -> YIELD
Rule 97    primary -> YIELD LPAREN RPAREN
Rule 98    primary -> YIELD LPAREN call_args RPAREN
Rule 99    primary -> DEFINED_OP LPAREN arg LPAREN
Rule 100   primary -> function
Rule 101   primary -> function LKEY compstmt LKEY
Rule 102   primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
Rule 103   primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
Rule 104   primary -> IF expr then compstmt END
Rule 105   primary -> IF expr then compstmt elsif END
Rule 106   primary -> IF expr then compstmt elsif ELSE compstmt END
Rule 107   primary -> UNLESS expr then compstmt END
Rule 108   primary -> UNLESS expr then compstmt ELSE compstmt END
Rule 109   primary -> WHILE expr do compstmt END
Rule 110   primary -> UNTIL expr do compstmt END
Rule 111   primary -> CASE compstmt when END
Rule 112   primary -> CASE compstmt when ELSE compstmt END
Rule 113   primary -> FOR block_var IN expr do compstmt END
Rule 114   primary -> BEGIN compstmt rescue END
Rule 115   primary -> BEGIN compstmt rescue ELSE compstmt END
Rule 116   primary -> BEGIN compstmt rescue ENSURE compstmt END
Rule 117   primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
Rule 118   primary -> CLASS IDENTIFIER compstmt END
Rule 119   primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
Rule 120   primary -> MODULE IDENTIFIER compstmt END
Rule 121   primary -> DEF fname argdecl compstmt END
Rule 122   primary -> DEF singleton DOT fname argdecl compstmt END
Rule 123   primary -> DEF singleton UNARY_OP fname argdecl compstmt END
Rule 124   primary -> PUTS compstmt
Rule 125   elsif -> ELSIF expr then compstmt
Rule 126   elsif -> ELSIF expr then compstmt elsif
Rule 127   when -> WHEN when_args then compstmt
Rule 128   when -> when WHEN when_args then compstmt
Rule 129   rescue -> RESCUE args do compstmt
Rule 130   rescue -> RESCUE do compstmt
Rule 131   rescue -> rescue RESCUE args do compstmt
Rule 132   rescue -> rescue RESCUE do compstmt
Rule 133   when_args -> args
Rule 134   when_args -> args COMMA TIMES arg
Rule 135   when_args -> TIMES arg
Rule 136   then -> TERM
Rule 137   then -> THEN
Rule 138   then -> TERM THEN
Rule 139   do -> term
Rule 140   do -> DO
Rule 141   do -> term DO
Rule 142   term -> TERM
Rule 143   mrhs -> args
Rule 144   mrhs -> args COMMA
Rule 145   mrhs -> args TIMES
Rule 146   mrhs -> args arg
Rule 147   mrhs -> TIMES arg
Rule 148   lhs -> variable
Rule 149   lhs -> primary LBRACKET RBRACKET
Rule 150   lhs -> primary LBRACKET args RBRACKET
Rule 151   lhs -> primary DOT IDENTIFIER
Rule 152   block_var -> lhs
Rule 153   block_var -> mlhs
Rule 154   mlhs -> mlhs_item COMMA mlhs_item TIMES
Rule 155   mlhs -> mlhs_item COMMA mlhs_item lhs
Rule 156   mlhs -> mlhs_item COMMA mult_mlhs_item TIMES
Rule 157   mlhs -> mlhs_item COMMA mult_mlhs_item lhs
Rule 158   mlhs -> TIMES lhs
Rule 159   mult_mlhs_item -> COMMA mlhs_item
Rule 160   mlhs_item -> lhs
Rule 161   mlhs_item -> LPAREN mlhs RPAREN
Rule 162   args -> arg
Rule 163   args -> arg COMMA arg
Rule 164   argdecl -> LPAREN arglist RPAREN
Rule 165   argdecl -> arglist term
Rule 166   arglist -> IDENTIFIER
Rule 167   arglist -> IDENTIFIER COMMA IDENTIFIER
Rule 168   arglist -> IDENTIFIER COMMA & IDENTIFIER
Rule 169   singleton -> variable
Rule 170   singleton -> LPAREN expr RPAREN
Rule 171   assocs -> assoc
Rule 172   assocs -> assoc COMMA assoc
Rule 173   assoc -> arg HASH_ROCKET arg
Rule 174   call_args -> args
Rule 175   call_args -> args COMMA assocs
Rule 176   call_args -> args COMMA TIMES arg
Rule 177   call_args -> args COMMA BINARY_AND_OP arg
Rule 178   call_args -> args COMMA assocs COMMA TIMES arg
Rule 179   call_args -> args COMMA assocs COMMA BINARY_AND_OP arg
Rule 180   call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 181   call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 182   call_args -> assocs
Rule 183   call_args -> assocs COMMA TIMES arg
Rule 184   call_args -> assocs COMMA BINARY_AND_OP arg
Rule 185   call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 186   call_args -> TIMES arg
Rule 187   call_args -> TIMES arg COMMA BINARY_AND_OP arg
Rule 188   call_args -> BINARY_AND_OP arg
Rule 189   call_args -> command
Rule 190   literal -> NUMBER
Rule 191   literal -> SYMBOL
Rule 192   literal -> STRING
Rule 193   literal -> IDENTIFIER
Rule 194   fname -> IDENTIFIER
Rule 195   fname -> RANGE_INCLUSIVE
Rule 196   fname -> OR_SYMBOL
Rule 197   fname -> BINARY_AND_OP
Rule 198   fname -> BINARY_XOR_OP
Rule 199   fname -> COMBINED_COMPARISON_OP
Rule 200   fname -> EQUAL
Rule 201   fname -> CASE_EQUALITY
Rule 202   fname -> MATCHED_STRINGS_OP
Rule 203   fname -> GREATERTHAN
Rule 204   fname -> GREATERTHANEQUAL
Rule 205   fname -> LESSERTHAN
Rule 206   fname -> LESSERTHANEQUAL
Rule 207   fname -> PLUS
Rule 208   fname -> MINUS
Rule 209   fname -> TIMES
Rule 210   fname -> DIVIDE
Rule 211   fname -> MOD
Rule 212   fname -> POW
Rule 213   fname -> BINARY_RIGHT_SHIFT_OP
Rule 214   fname -> BINARY_LEFT_SHIFT_OP
Rule 215   fname -> COMPLEMENT_OP
Rule 216   fname -> OVERLOAD_PLUS
Rule 217   fname -> OVERLOAD_MINUS
Rule 218   fname -> LBRACKET RBRACKET
Rule 219   fname -> LBRACKET RBRACKET EQUAL_SYMBOL
Rule 220   operation -> IDENTIFIER
Rule 221   operation -> IDENTIFIER NOT_SYMBOL
Rule 222   operation -> IDENTIFIER OPTIONAL_SYMBOL
Rule 223   op_asgn -> PLUS_EQUAL
Rule 224   op_asgn -> MINUS_EQUAL
Rule 225   op_asgn -> TIMES_EQUAL
Rule 226   op_asgn -> DIVIDE_EQUAL
Rule 227   op_asgn -> MOD_EQUAL
Rule 228   op_asgn -> POW_EQUAL
Rule 229   op_asgn -> SINGLE_AND_EQUAL
Rule 230   op_asgn -> SINGLE_OR_EQUAL
Rule 231   op_asgn -> XOR_EQUAL
Rule 232   op_asgn -> BINARY_LEFT_EQUAL
Rule 233   op_asgn -> BINARY_RIGHT_EQUAL
Rule 234   op_asgn -> AND_EQUAL
Rule 235   op_asgn -> OR_EQUAL
Rule 236   expression -> expression PLUS term
Rule 237   expression -> expression MINUS term
Rule 238   expression -> term
Rule 239   term -> term TIMES factor
Rule 240   term -> term DIVIDE factor
Rule 241   term -> factor
Rule 242   factor -> NUMBER
Rule 243   factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

&                    : 168
=                    : 17 19 41
ALIAS                : 10
AND                  : 22 70
AND_EQUAL            : 234
BEGIN                : 15 114 115 116 117
BINARY_AND_OP        : 55 177 179 180 181 184 185 187 188 197
BINARY_LEFT_EQUAL    : 232
BINARY_LEFT_SHIFT_OP : 68 214
BINARY_RIGHT_EQUAL   : 233
BINARY_RIGHT_SHIFT_OP : 69 213
BINARY_XOR_OP        : 54 198
BREAK                : 
CASE                 : 111 112
CASE_EQUALITY        : 62 201
CLASS                : 118 119
COMBINED_COMPARISON_OP : 56 199
COMMA                : 87 91 92 134 144 154 155 156 157 159 163 167 168 172 175 176 177 178 178 179 179 180 180 181 181 181 183 184 185 185 187
COMPLEMENT_OP        : 67 215
DEF                  : 121 122 123
DEFINED              : 
DEFINED_OP           : 72 99
DIVIDE               : 48 210 240
DIVIDE_EQUAL         : 226
DO                   : 140 141
DOT                  : 31 35 37 122 151
DOUBLE_QUOTED        : 
ELSE                 : 106 108 112 115 117
ELSIF                : 125 126
END                  : 8 16 17 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
ENSURE               : 116 117
EQUAL                : 61 200
EQUAL_SYMBOL         : 219
EXPONENT_AND         : 
FALSE                : 
FOR                  : 113
GREATERTHAN          : 57 203
GREATERTHANEQUAL     : 58 204
HASH_ROCKET          : 173
IDENTIFIER           : 81 82 118 119 119 120 151 166 167 167 168 168 193 194 220 221 222
IF                   : 11 104 105 106
IN                   : 113
LBRACKET             : 6 7 8 17 17 34 34 83 84 85 86 87 149 150 218 219
LESSERTHAN           : 59 119 205
LESSERTHANEQUAL      : 60 206
LKEY                 : 15 16 88 89 90 91 92 101 101 102 102 103 103
LPAREN               : 34 35 36 39 78 94 95 97 98 99 99 161 164 170 243
MATCHED_STRINGS_OP   : 64 202
MINUS                : 46 52 208 237
MINUS_EQUAL          : 224
MOD                  : 49 211
MODULE               : 120
MOD_EQUAL            : 227
NEXT                 : 
NIL                  : 
NOT                  : 24
NOTEQUAL             : 63
NOT_SYMBOL           : 26 66 221
NUMBER               : 190 242
NUMBER_SIGN          : 
OPPOSITE_MATCHED_STRINGS_OP : 65
OPTIONAL_SYMBOL      : 222
OR                   : 23 71
OR_EQUAL             : 235
OR_SYMBOL            : 8 8 17 17 53 102 102 103 103 196
OVERLOAD_MINUS       : 217
OVERLOAD_PLUS        : 216
PLUS                 : 45 51 207 236
PLUS_EQUAL           : 223
POW                  : 50 212
POW_EQUAL            : 228
PUTS                 : 124
RANGE_EXCLUSIVE      : 44
RANGE_INCLUSIVE      : 43 195
RBRACKET             : 6 7 8 17 17 34 34 83 84 85 86 87 149 150 218 219
REDO                 : 
RESCUE               : 129 130 131 132
RETRY                : 
RETURN               : 20 93 94 95
RKEY                 : 15 16 88 89 90 91 92
RPAREN               : 34 35 36 39 78 94 95 97 98 161 164 170 243
SELF                 : 
SINGLE_AND_EQUAL     : 229
SINGLE_OR_EQUAL      : 230
STRING               : 192
SUPER                : 33 39 40
SYMBOL               : 191
TERM                 : 136 138 142
THEN                 : 137 138
TIMES                : 47 134 135 145 147 154 156 158 176 178 180 181 183 185 186 187 209 239
TIMES_EQUAL          : 225
TRUE                 : 
UNARY_OP             : 32 36 38 81 82 123
UNDEF                : 9
UNLESS               : 13 107 108
UNTIL                : 14 110
VAR_CLASS            : 77
VAR_GLOBAL           : 74
VAR_INSTANCE         : 76
VAR_LOCAL            : 75
VAR_SYSTEM           : 
WHEN                 : 127 128
WHILE                : 12 109
XOR_EQUAL            : 231
YIELD                : 21 96 97 98
_FILE_               : 
_LINE_               : 
error                : 

Nonterminals, with rules where they appear

arg                  : 27 41 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 67 68 68 69 69 70 70 71 71 72 99 134 135 146 147 162 163 163 173 173 176 177 178 179 180 180 181 181 183 184 185 185 186 187 187 188
argdecl              : 121 122 123
arglist              : 164 165
args                 : 84 86 87 89 91 129 131 133 134 143 144 145 146 150 174 175 176 177 178 179 180 181
assoc                : 171 172 172
assocs               : 90 92 175 178 179 181 182 183 184 185
block_var            : 7 8 17 103 113
call                 : 6
call_args            : 20 21 30 31 32 33 34 35 36 39 95 98
command              : 17 25 26 29 189
compstmt             : 1 8 15 16 17 78 101 102 103 104 105 106 106 107 108 108 109 110 111 112 112 113 114 115 115 116 116 117 117 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132
do                   : 6 17 109 110 113 129 130 131 132
elsif                : 105 106 126
expr                 : 5 11 12 13 14 18 22 22 23 23 24 104 105 106 107 108 109 110 113 125 126 170
expression           : 236 237 243
factor               : 239 240 241
fname                : 9 10 10 121 122 123
function             : 28 100 101 102 103
lhs                  : 17 41 42 152 155 157 158 160
literal              : 79
mlhs                 : 19 153 161
mlhs_item            : 154 154 155 155 156 157 159
mrhs                 : 19
mult_mlhs_item       : 156 157
op_asgn              : 42
operation            : 30 31 32 34 35 36 37 38
primary              : 31 32 35 36 37 38 73 81 83 84 149 150 151
program              : 0
rescue               : 114 115 116 117 131 132
singleton            : 122 123
statement            : 
stmt                 : 3 4 5 11 12 13 14
term                 : 4 5 5 139 141 165 236 237 238 239 240
then                 : 104 105 106 107 108 125 126 127 128
variable             : 80 148 169
when                 : 111 112 128
when_args            : 127 128

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    program                        shift and go to state 1
    compstmt                       shift and go to state 2
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 1

    (0) S' -> program .



state 2

    (1) program -> compstmt .

    $end            reduce using rule 1 (program -> compstmt .)


state 3

    (3) compstmt -> stmt .
    (4) compstmt -> stmt . term
    (5) compstmt -> stmt . term expr term
    (11) stmt -> stmt . IF expr
    (12) stmt -> stmt . WHILE expr
    (13) stmt -> stmt . UNLESS expr
    (14) stmt -> stmt . UNTIL expr
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for TERM resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    $end            reduce using rule 3 (compstmt -> stmt .)
    RESCUE          reduce using rule 3 (compstmt -> stmt .)
    RPAREN          reduce using rule 3 (compstmt -> stmt .)
    WHEN            reduce using rule 3 (compstmt -> stmt .)
    LBRACKET        reduce using rule 3 (compstmt -> stmt .)
    DOT             reduce using rule 3 (compstmt -> stmt .)
    UNARY_OP        reduce using rule 3 (compstmt -> stmt .)
    RANGE_INCLUSIVE reduce using rule 3 (compstmt -> stmt .)
    RANGE_EXCLUSIVE reduce using rule 3 (compstmt -> stmt .)
    PLUS            reduce using rule 3 (compstmt -> stmt .)
    MINUS           reduce using rule 3 (compstmt -> stmt .)
    TIMES           reduce using rule 3 (compstmt -> stmt .)
    DIVIDE          reduce using rule 3 (compstmt -> stmt .)
    MOD             reduce using rule 3 (compstmt -> stmt .)
    POW             reduce using rule 3 (compstmt -> stmt .)
    OR_SYMBOL       reduce using rule 3 (compstmt -> stmt .)
    BINARY_XOR_OP   reduce using rule 3 (compstmt -> stmt .)
    BINARY_AND_OP   reduce using rule 3 (compstmt -> stmt .)
    COMBINED_COMPARISON_OP reduce using rule 3 (compstmt -> stmt .)
    GREATERTHAN     reduce using rule 3 (compstmt -> stmt .)
    GREATERTHANEQUAL reduce using rule 3 (compstmt -> stmt .)
    LESSERTHAN      reduce using rule 3 (compstmt -> stmt .)
    LESSERTHANEQUAL reduce using rule 3 (compstmt -> stmt .)
    EQUAL           reduce using rule 3 (compstmt -> stmt .)
    CASE_EQUALITY   reduce using rule 3 (compstmt -> stmt .)
    NOTEQUAL        reduce using rule 3 (compstmt -> stmt .)
    MATCHED_STRINGS_OP reduce using rule 3 (compstmt -> stmt .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 3 (compstmt -> stmt .)
    BINARY_LEFT_SHIFT_OP reduce using rule 3 (compstmt -> stmt .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 3 (compstmt -> stmt .)
    AND             reduce using rule 3 (compstmt -> stmt .)
    OR              reduce using rule 3 (compstmt -> stmt .)
    COMMA           reduce using rule 3 (compstmt -> stmt .)
    RBRACKET        reduce using rule 3 (compstmt -> stmt .)
    THEN            reduce using rule 3 (compstmt -> stmt .)
    DO              reduce using rule 3 (compstmt -> stmt .)
    HASH_ROCKET     reduce using rule 3 (compstmt -> stmt .)
    RKEY            reduce using rule 3 (compstmt -> stmt .)
    LKEY            reduce using rule 3 (compstmt -> stmt .)
    END             reduce using rule 3 (compstmt -> stmt .)
    ELSIF           reduce using rule 3 (compstmt -> stmt .)
    ELSE            reduce using rule 3 (compstmt -> stmt .)
    ENSURE          reduce using rule 3 (compstmt -> stmt .)
    NOT_SYMBOL      reduce using rule 3 (compstmt -> stmt .)
    COMPLEMENT_OP   reduce using rule 3 (compstmt -> stmt .)
    DEFINED_OP      reduce using rule 3 (compstmt -> stmt .)
    RETURN          reduce using rule 3 (compstmt -> stmt .)
    YIELD           reduce using rule 3 (compstmt -> stmt .)
    CASE            reduce using rule 3 (compstmt -> stmt .)
    FOR             reduce using rule 3 (compstmt -> stmt .)
    BEGIN           reduce using rule 3 (compstmt -> stmt .)
    CLASS           reduce using rule 3 (compstmt -> stmt .)
    MODULE          reduce using rule 3 (compstmt -> stmt .)
    DEF             reduce using rule 3 (compstmt -> stmt .)
    PUTS            reduce using rule 3 (compstmt -> stmt .)
    VAR_GLOBAL      reduce using rule 3 (compstmt -> stmt .)
    VAR_LOCAL       reduce using rule 3 (compstmt -> stmt .)
    VAR_INSTANCE    reduce using rule 3 (compstmt -> stmt .)
    VAR_CLASS       reduce using rule 3 (compstmt -> stmt .)
    SYMBOL          reduce using rule 3 (compstmt -> stmt .)
    STRING          reduce using rule 3 (compstmt -> stmt .)
    IDENTIFIER      reduce using rule 3 (compstmt -> stmt .)
    SUPER           reduce using rule 3 (compstmt -> stmt .)
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    UNLESS          shift and go to state 55
    UNTIL           shift and go to state 56
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

  ! IF              [ reduce using rule 3 (compstmt -> stmt .) ]
  ! WHILE           [ reduce using rule 3 (compstmt -> stmt .) ]
  ! UNLESS          [ reduce using rule 3 (compstmt -> stmt .) ]
  ! UNTIL           [ reduce using rule 3 (compstmt -> stmt .) ]
  ! TERM            [ reduce using rule 3 (compstmt -> stmt .) ]
  ! NUMBER          [ reduce using rule 3 (compstmt -> stmt .) ]
  ! LPAREN          [ reduce using rule 3 (compstmt -> stmt .) ]

    term                           shift and go to state 52
    factor                         shift and go to state 58

state 4

    (18) stmt -> expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 18 (stmt -> expr .)
    WHILE           reduce using rule 18 (stmt -> expr .)
    UNLESS          reduce using rule 18 (stmt -> expr .)
    UNTIL           reduce using rule 18 (stmt -> expr .)
    TERM            reduce using rule 18 (stmt -> expr .)
    NUMBER          reduce using rule 18 (stmt -> expr .)
    LPAREN          reduce using rule 18 (stmt -> expr .)
    $end            reduce using rule 18 (stmt -> expr .)
    RESCUE          reduce using rule 18 (stmt -> expr .)
    RPAREN          reduce using rule 18 (stmt -> expr .)
    WHEN            reduce using rule 18 (stmt -> expr .)
    LBRACKET        reduce using rule 18 (stmt -> expr .)
    DOT             reduce using rule 18 (stmt -> expr .)
    UNARY_OP        reduce using rule 18 (stmt -> expr .)
    RANGE_INCLUSIVE reduce using rule 18 (stmt -> expr .)
    RANGE_EXCLUSIVE reduce using rule 18 (stmt -> expr .)
    PLUS            reduce using rule 18 (stmt -> expr .)
    MINUS           reduce using rule 18 (stmt -> expr .)
    TIMES           reduce using rule 18 (stmt -> expr .)
    DIVIDE          reduce using rule 18 (stmt -> expr .)
    MOD             reduce using rule 18 (stmt -> expr .)
    POW             reduce using rule 18 (stmt -> expr .)
    OR_SYMBOL       reduce using rule 18 (stmt -> expr .)
    BINARY_XOR_OP   reduce using rule 18 (stmt -> expr .)
    BINARY_AND_OP   reduce using rule 18 (stmt -> expr .)
    COMBINED_COMPARISON_OP reduce using rule 18 (stmt -> expr .)
    GREATERTHAN     reduce using rule 18 (stmt -> expr .)
    GREATERTHANEQUAL reduce using rule 18 (stmt -> expr .)
    LESSERTHAN      reduce using rule 18 (stmt -> expr .)
    LESSERTHANEQUAL reduce using rule 18 (stmt -> expr .)
    EQUAL           reduce using rule 18 (stmt -> expr .)
    CASE_EQUALITY   reduce using rule 18 (stmt -> expr .)
    NOTEQUAL        reduce using rule 18 (stmt -> expr .)
    MATCHED_STRINGS_OP reduce using rule 18 (stmt -> expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 18 (stmt -> expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 18 (stmt -> expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 18 (stmt -> expr .)
    COMMA           reduce using rule 18 (stmt -> expr .)
    RBRACKET        reduce using rule 18 (stmt -> expr .)
    THEN            reduce using rule 18 (stmt -> expr .)
    DO              reduce using rule 18 (stmt -> expr .)
    HASH_ROCKET     reduce using rule 18 (stmt -> expr .)
    RKEY            reduce using rule 18 (stmt -> expr .)
    LKEY            reduce using rule 18 (stmt -> expr .)
    END             reduce using rule 18 (stmt -> expr .)
    ELSIF           reduce using rule 18 (stmt -> expr .)
    ELSE            reduce using rule 18 (stmt -> expr .)
    ENSURE          reduce using rule 18 (stmt -> expr .)
    NOT_SYMBOL      reduce using rule 18 (stmt -> expr .)
    COMPLEMENT_OP   reduce using rule 18 (stmt -> expr .)
    DEFINED_OP      reduce using rule 18 (stmt -> expr .)
    RETURN          reduce using rule 18 (stmt -> expr .)
    YIELD           reduce using rule 18 (stmt -> expr .)
    CASE            reduce using rule 18 (stmt -> expr .)
    FOR             reduce using rule 18 (stmt -> expr .)
    BEGIN           reduce using rule 18 (stmt -> expr .)
    CLASS           reduce using rule 18 (stmt -> expr .)
    MODULE          reduce using rule 18 (stmt -> expr .)
    DEF             reduce using rule 18 (stmt -> expr .)
    PUTS            reduce using rule 18 (stmt -> expr .)
    VAR_GLOBAL      reduce using rule 18 (stmt -> expr .)
    VAR_LOCAL       reduce using rule 18 (stmt -> expr .)
    VAR_INSTANCE    reduce using rule 18 (stmt -> expr .)
    VAR_CLASS       reduce using rule 18 (stmt -> expr .)
    SYMBOL          reduce using rule 18 (stmt -> expr .)
    STRING          reduce using rule 18 (stmt -> expr .)
    IDENTIFIER      reduce using rule 18 (stmt -> expr .)
    SUPER           reduce using rule 18 (stmt -> expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 18 (stmt -> expr .) ]
  ! OR              [ reduce using rule 18 (stmt -> expr .) ]


state 5

    (6) stmt -> call . do LBRACKET RBRACKET
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 6

    (7) stmt -> LBRACKET . block_var RBRACKET
    (8) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (85) primary -> LBRACKET . RBRACKET
    (86) primary -> LBRACKET . args RBRACKET
    (87) primary -> LBRACKET . args COMMA RBRACKET
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    OR_SYMBOL       shift and go to state 69
    RBRACKET        shift and go to state 68
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    block_var                      shift and go to state 67
    args                           shift and go to state 70
    lhs                            shift and go to state 71
    mlhs                           shift and go to state 72
    arg                            shift and go to state 73
    variable                       shift and go to state 19
    primary                        shift and go to state 74
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 7

    (16) stmt -> END . LKEY compstmt RKEY

    LKEY            shift and go to state 84


state 8

    (9) stmt -> UNDEF . fname
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110

    fname                          shift and go to state 85

state 9

    (10) stmt -> ALIAS . fname fname
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110

    fname                          shift and go to state 111

state 10

    (104) primary -> IF . expr then compstmt END
    (105) primary -> IF . expr then compstmt elsif END
    (106) primary -> IF . expr then compstmt elsif ELSE compstmt END
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 112
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 11

    (109) primary -> WHILE . expr do compstmt END
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 120
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 12

    (107) primary -> UNLESS . expr then compstmt END
    (108) primary -> UNLESS . expr then compstmt ELSE compstmt END
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 121
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 13

    (110) primary -> UNTIL . expr do compstmt END
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 122
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 14

    (15) stmt -> BEGIN . LKEY compstmt RKEY
    (114) primary -> BEGIN . compstmt rescue END
    (115) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (116) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (117) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LKEY            shift and go to state 123
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 124
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 15

    (88) primary -> LKEY . RKEY
    (89) primary -> LKEY . args RKEY
    (90) primary -> LKEY . assocs RKEY
    (91) primary -> LKEY . args COMMA RKEY
    (92) primary -> LKEY . assocs COMMA RKEY
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RKEY            shift and go to state 125
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    args                           shift and go to state 126
    assocs                         shift and go to state 127
    arg                            shift and go to state 128
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 16

    (17) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (160) mlhs_item -> lhs .
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    =               shift and go to state 133
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 17

    (29) call -> command .
    (25) expr -> command .

  ! reduce/reduce conflict for TERM resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for DO resolved using rule 25 (expr -> command .)
    AND             reduce using rule 25 (expr -> command .)
    OR              reduce using rule 25 (expr -> command .)
    IF              reduce using rule 25 (expr -> command .)
    WHILE           reduce using rule 25 (expr -> command .)
    UNLESS          reduce using rule 25 (expr -> command .)
    UNTIL           reduce using rule 25 (expr -> command .)
    TERM            reduce using rule 25 (expr -> command .)
    NUMBER          reduce using rule 25 (expr -> command .)
    LPAREN          reduce using rule 25 (expr -> command .)
    $end            reduce using rule 25 (expr -> command .)
    RESCUE          reduce using rule 25 (expr -> command .)
    RPAREN          reduce using rule 25 (expr -> command .)
    WHEN            reduce using rule 25 (expr -> command .)
    LBRACKET        reduce using rule 25 (expr -> command .)
    DOT             reduce using rule 25 (expr -> command .)
    UNARY_OP        reduce using rule 25 (expr -> command .)
    RANGE_INCLUSIVE reduce using rule 25 (expr -> command .)
    RANGE_EXCLUSIVE reduce using rule 25 (expr -> command .)
    PLUS            reduce using rule 25 (expr -> command .)
    MINUS           reduce using rule 25 (expr -> command .)
    TIMES           reduce using rule 25 (expr -> command .)
    DIVIDE          reduce using rule 25 (expr -> command .)
    MOD             reduce using rule 25 (expr -> command .)
    POW             reduce using rule 25 (expr -> command .)
    OR_SYMBOL       reduce using rule 25 (expr -> command .)
    BINARY_XOR_OP   reduce using rule 25 (expr -> command .)
    BINARY_AND_OP   reduce using rule 25 (expr -> command .)
    COMBINED_COMPARISON_OP reduce using rule 25 (expr -> command .)
    GREATERTHAN     reduce using rule 25 (expr -> command .)
    GREATERTHANEQUAL reduce using rule 25 (expr -> command .)
    LESSERTHAN      reduce using rule 25 (expr -> command .)
    LESSERTHANEQUAL reduce using rule 25 (expr -> command .)
    EQUAL           reduce using rule 25 (expr -> command .)
    CASE_EQUALITY   reduce using rule 25 (expr -> command .)
    NOTEQUAL        reduce using rule 25 (expr -> command .)
    MATCHED_STRINGS_OP reduce using rule 25 (expr -> command .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 25 (expr -> command .)
    BINARY_LEFT_SHIFT_OP reduce using rule 25 (expr -> command .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 25 (expr -> command .)
    COMMA           reduce using rule 25 (expr -> command .)
    RBRACKET        reduce using rule 25 (expr -> command .)
    THEN            reduce using rule 25 (expr -> command .)
    DO              reduce using rule 25 (expr -> command .)
    HASH_ROCKET     reduce using rule 25 (expr -> command .)
    RKEY            reduce using rule 25 (expr -> command .)
    LKEY            reduce using rule 25 (expr -> command .)
    END             reduce using rule 25 (expr -> command .)
    ELSIF           reduce using rule 25 (expr -> command .)
    ELSE            reduce using rule 25 (expr -> command .)
    ENSURE          reduce using rule 25 (expr -> command .)
    NOT_SYMBOL      reduce using rule 25 (expr -> command .)
    COMPLEMENT_OP   reduce using rule 25 (expr -> command .)
    DEFINED_OP      reduce using rule 25 (expr -> command .)
    RETURN          reduce using rule 25 (expr -> command .)
    YIELD           reduce using rule 25 (expr -> command .)
    CASE            reduce using rule 25 (expr -> command .)
    FOR             reduce using rule 25 (expr -> command .)
    BEGIN           reduce using rule 25 (expr -> command .)
    CLASS           reduce using rule 25 (expr -> command .)
    MODULE          reduce using rule 25 (expr -> command .)
    DEF             reduce using rule 25 (expr -> command .)
    PUTS            reduce using rule 25 (expr -> command .)
    VAR_GLOBAL      reduce using rule 25 (expr -> command .)
    VAR_LOCAL       reduce using rule 25 (expr -> command .)
    VAR_INSTANCE    reduce using rule 25 (expr -> command .)
    VAR_CLASS       reduce using rule 25 (expr -> command .)
    SYMBOL          reduce using rule 25 (expr -> command .)
    STRING          reduce using rule 25 (expr -> command .)
    IDENTIFIER      reduce using rule 25 (expr -> command .)
    SUPER           reduce using rule 25 (expr -> command .)

  ! DO              [ reduce using rule 29 (call -> command .) ]
  ! TERM            [ reduce using rule 29 (call -> command .) ]
  ! NUMBER          [ reduce using rule 29 (call -> command .) ]
  ! LPAREN          [ reduce using rule 29 (call -> command .) ]


state 18

    (28) call -> function .
    (100) primary -> function .
    (101) primary -> function . LKEY compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY

  ! reduce/reduce conflict for TERM resolved using rule 28 (call -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 28 (call -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (call -> function .)
  ! reduce/reduce conflict for DO resolved using rule 28 (call -> function .)
  ! shift/reduce conflict for LKEY resolved as shift
    DO              reduce using rule 28 (call -> function .)
    TERM            reduce using rule 28 (call -> function .)
    NUMBER          reduce using rule 28 (call -> function .)
    LPAREN          reduce using rule 28 (call -> function .)
    LBRACKET        reduce using rule 100 (primary -> function .)
    DOT             reduce using rule 100 (primary -> function .)
    UNARY_OP        reduce using rule 100 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 100 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 100 (primary -> function .)
    PLUS            reduce using rule 100 (primary -> function .)
    MINUS           reduce using rule 100 (primary -> function .)
    TIMES           reduce using rule 100 (primary -> function .)
    DIVIDE          reduce using rule 100 (primary -> function .)
    MOD             reduce using rule 100 (primary -> function .)
    POW             reduce using rule 100 (primary -> function .)
    OR_SYMBOL       reduce using rule 100 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 100 (primary -> function .)
    BINARY_AND_OP   reduce using rule 100 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 100 (primary -> function .)
    GREATERTHAN     reduce using rule 100 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 100 (primary -> function .)
    LESSERTHAN      reduce using rule 100 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 100 (primary -> function .)
    EQUAL           reduce using rule 100 (primary -> function .)
    CASE_EQUALITY   reduce using rule 100 (primary -> function .)
    NOTEQUAL        reduce using rule 100 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 100 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 100 (primary -> function .)
    AND             reduce using rule 100 (primary -> function .)
    OR              reduce using rule 100 (primary -> function .)
    IF              reduce using rule 100 (primary -> function .)
    WHILE           reduce using rule 100 (primary -> function .)
    UNLESS          reduce using rule 100 (primary -> function .)
    UNTIL           reduce using rule 100 (primary -> function .)
    $end            reduce using rule 100 (primary -> function .)
    RESCUE          reduce using rule 100 (primary -> function .)
    RPAREN          reduce using rule 100 (primary -> function .)
    WHEN            reduce using rule 100 (primary -> function .)
    COMMA           reduce using rule 100 (primary -> function .)
    RBRACKET        reduce using rule 100 (primary -> function .)
    THEN            reduce using rule 100 (primary -> function .)
    HASH_ROCKET     reduce using rule 100 (primary -> function .)
    RKEY            reduce using rule 100 (primary -> function .)
    END             reduce using rule 100 (primary -> function .)
    ELSIF           reduce using rule 100 (primary -> function .)
    ELSE            reduce using rule 100 (primary -> function .)
    ENSURE          reduce using rule 100 (primary -> function .)
    NOT_SYMBOL      reduce using rule 100 (primary -> function .)
    COMPLEMENT_OP   reduce using rule 100 (primary -> function .)
    DEFINED_OP      reduce using rule 100 (primary -> function .)
    RETURN          reduce using rule 100 (primary -> function .)
    YIELD           reduce using rule 100 (primary -> function .)
    CASE            reduce using rule 100 (primary -> function .)
    FOR             reduce using rule 100 (primary -> function .)
    BEGIN           reduce using rule 100 (primary -> function .)
    CLASS           reduce using rule 100 (primary -> function .)
    MODULE          reduce using rule 100 (primary -> function .)
    DEF             reduce using rule 100 (primary -> function .)
    PUTS            reduce using rule 100 (primary -> function .)
    VAR_GLOBAL      reduce using rule 100 (primary -> function .)
    VAR_LOCAL       reduce using rule 100 (primary -> function .)
    VAR_INSTANCE    reduce using rule 100 (primary -> function .)
    VAR_CLASS       reduce using rule 100 (primary -> function .)
    SYMBOL          reduce using rule 100 (primary -> function .)
    STRING          reduce using rule 100 (primary -> function .)
    IDENTIFIER      reduce using rule 100 (primary -> function .)
    SUPER           reduce using rule 100 (primary -> function .)
    LKEY            shift and go to state 148

  ! TERM            [ reduce using rule 100 (primary -> function .) ]
  ! NUMBER          [ reduce using rule 100 (primary -> function .) ]
  ! LPAREN          [ reduce using rule 100 (primary -> function .) ]
  ! DO              [ reduce using rule 100 (primary -> function .) ]
  ! LKEY            [ reduce using rule 100 (primary -> function .) ]


state 19

    (148) lhs -> variable .
    (80) primary -> variable .

  ! reduce/reduce conflict for LBRACKET resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for IF resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for UNLESS resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for UNTIL resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for NUMBER resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for LPAREN resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for LKEY resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for YIELD resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for CASE resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for BEGIN resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for CLASS resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for MODULE resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for DEF resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for PUTS resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 80 (primary -> variable .)
  ! reduce/reduce conflict for SUPER resolved using rule 80 (primary -> variable .)
    =               reduce using rule 148 (lhs -> variable .)
    PLUS_EQUAL      reduce using rule 148 (lhs -> variable .)
    MINUS_EQUAL     reduce using rule 148 (lhs -> variable .)
    TIMES_EQUAL     reduce using rule 148 (lhs -> variable .)
    DIVIDE_EQUAL    reduce using rule 148 (lhs -> variable .)
    MOD_EQUAL       reduce using rule 148 (lhs -> variable .)
    POW_EQUAL       reduce using rule 148 (lhs -> variable .)
    SINGLE_AND_EQUAL reduce using rule 148 (lhs -> variable .)
    SINGLE_OR_EQUAL reduce using rule 148 (lhs -> variable .)
    XOR_EQUAL       reduce using rule 148 (lhs -> variable .)
    BINARY_LEFT_EQUAL reduce using rule 148 (lhs -> variable .)
    BINARY_RIGHT_EQUAL reduce using rule 148 (lhs -> variable .)
    AND_EQUAL       reduce using rule 148 (lhs -> variable .)
    OR_EQUAL        reduce using rule 148 (lhs -> variable .)
    IN              reduce using rule 148 (lhs -> variable .)
    LBRACKET        reduce using rule 80 (primary -> variable .)
    DOT             reduce using rule 80 (primary -> variable .)
    UNARY_OP        reduce using rule 80 (primary -> variable .)
    RANGE_INCLUSIVE reduce using rule 80 (primary -> variable .)
    RANGE_EXCLUSIVE reduce using rule 80 (primary -> variable .)
    PLUS            reduce using rule 80 (primary -> variable .)
    MINUS           reduce using rule 80 (primary -> variable .)
    TIMES           reduce using rule 80 (primary -> variable .)
    DIVIDE          reduce using rule 80 (primary -> variable .)
    MOD             reduce using rule 80 (primary -> variable .)
    POW             reduce using rule 80 (primary -> variable .)
    OR_SYMBOL       reduce using rule 80 (primary -> variable .)
    BINARY_XOR_OP   reduce using rule 80 (primary -> variable .)
    BINARY_AND_OP   reduce using rule 80 (primary -> variable .)
    COMBINED_COMPARISON_OP reduce using rule 80 (primary -> variable .)
    GREATERTHAN     reduce using rule 80 (primary -> variable .)
    GREATERTHANEQUAL reduce using rule 80 (primary -> variable .)
    LESSERTHAN      reduce using rule 80 (primary -> variable .)
    LESSERTHANEQUAL reduce using rule 80 (primary -> variable .)
    EQUAL           reduce using rule 80 (primary -> variable .)
    CASE_EQUALITY   reduce using rule 80 (primary -> variable .)
    NOTEQUAL        reduce using rule 80 (primary -> variable .)
    MATCHED_STRINGS_OP reduce using rule 80 (primary -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 80 (primary -> variable .)
    BINARY_LEFT_SHIFT_OP reduce using rule 80 (primary -> variable .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 80 (primary -> variable .)
    AND             reduce using rule 80 (primary -> variable .)
    OR              reduce using rule 80 (primary -> variable .)
    IF              reduce using rule 80 (primary -> variable .)
    WHILE           reduce using rule 80 (primary -> variable .)
    UNLESS          reduce using rule 80 (primary -> variable .)
    UNTIL           reduce using rule 80 (primary -> variable .)
    TERM            reduce using rule 80 (primary -> variable .)
    NUMBER          reduce using rule 80 (primary -> variable .)
    LPAREN          reduce using rule 80 (primary -> variable .)
    $end            reduce using rule 80 (primary -> variable .)
    COMMA           reduce using rule 80 (primary -> variable .)
    RBRACKET        reduce using rule 80 (primary -> variable .)
    RESCUE          reduce using rule 80 (primary -> variable .)
    HASH_ROCKET     reduce using rule 80 (primary -> variable .)
    RKEY            reduce using rule 80 (primary -> variable .)
    RPAREN          reduce using rule 80 (primary -> variable .)
    THEN            reduce using rule 80 (primary -> variable .)
    DO              reduce using rule 80 (primary -> variable .)
    WHEN            reduce using rule 80 (primary -> variable .)
    LKEY            reduce using rule 80 (primary -> variable .)
    END             reduce using rule 80 (primary -> variable .)
    ELSIF           reduce using rule 80 (primary -> variable .)
    ELSE            reduce using rule 80 (primary -> variable .)
    ENSURE          reduce using rule 80 (primary -> variable .)
    NOT_SYMBOL      reduce using rule 80 (primary -> variable .)
    COMPLEMENT_OP   reduce using rule 80 (primary -> variable .)
    DEFINED_OP      reduce using rule 80 (primary -> variable .)
    RETURN          reduce using rule 80 (primary -> variable .)
    YIELD           reduce using rule 80 (primary -> variable .)
    CASE            reduce using rule 80 (primary -> variable .)
    FOR             reduce using rule 80 (primary -> variable .)
    BEGIN           reduce using rule 80 (primary -> variable .)
    CLASS           reduce using rule 80 (primary -> variable .)
    MODULE          reduce using rule 80 (primary -> variable .)
    DEF             reduce using rule 80 (primary -> variable .)
    PUTS            reduce using rule 80 (primary -> variable .)
    VAR_GLOBAL      reduce using rule 80 (primary -> variable .)
    VAR_LOCAL       reduce using rule 80 (primary -> variable .)
    VAR_INSTANCE    reduce using rule 80 (primary -> variable .)
    VAR_CLASS       reduce using rule 80 (primary -> variable .)
    SYMBOL          reduce using rule 80 (primary -> variable .)
    STRING          reduce using rule 80 (primary -> variable .)
    IDENTIFIER      reduce using rule 80 (primary -> variable .)
    SUPER           reduce using rule 80 (primary -> variable .)

  ! COMMA           [ reduce using rule 148 (lhs -> variable .) ]
  ! RBRACKET        [ reduce using rule 148 (lhs -> variable .) ]
  ! RPAREN          [ reduce using rule 148 (lhs -> variable .) ]
  ! OR_SYMBOL       [ reduce using rule 148 (lhs -> variable .) ]
  ! TIMES           [ reduce using rule 148 (lhs -> variable .) ]
  ! VAR_GLOBAL      [ reduce using rule 148 (lhs -> variable .) ]
  ! VAR_LOCAL       [ reduce using rule 148 (lhs -> variable .) ]
  ! VAR_INSTANCE    [ reduce using rule 148 (lhs -> variable .) ]
  ! VAR_CLASS       [ reduce using rule 148 (lhs -> variable .) ]
  ! LPAREN          [ reduce using rule 148 (lhs -> variable .) ]
  ! UNARY_OP        [ reduce using rule 148 (lhs -> variable .) ]
  ! LBRACKET        [ reduce using rule 148 (lhs -> variable .) ]
  ! LKEY            [ reduce using rule 148 (lhs -> variable .) ]
  ! RETURN          [ reduce using rule 148 (lhs -> variable .) ]
  ! YIELD           [ reduce using rule 148 (lhs -> variable .) ]
  ! DEFINED_OP      [ reduce using rule 148 (lhs -> variable .) ]
  ! IF              [ reduce using rule 148 (lhs -> variable .) ]
  ! UNLESS          [ reduce using rule 148 (lhs -> variable .) ]
  ! WHILE           [ reduce using rule 148 (lhs -> variable .) ]
  ! UNTIL           [ reduce using rule 148 (lhs -> variable .) ]
  ! CASE            [ reduce using rule 148 (lhs -> variable .) ]
  ! FOR             [ reduce using rule 148 (lhs -> variable .) ]
  ! BEGIN           [ reduce using rule 148 (lhs -> variable .) ]
  ! CLASS           [ reduce using rule 148 (lhs -> variable .) ]
  ! MODULE          [ reduce using rule 148 (lhs -> variable .) ]
  ! DEF             [ reduce using rule 148 (lhs -> variable .) ]
  ! PUTS            [ reduce using rule 148 (lhs -> variable .) ]
  ! NUMBER          [ reduce using rule 148 (lhs -> variable .) ]
  ! SYMBOL          [ reduce using rule 148 (lhs -> variable .) ]
  ! STRING          [ reduce using rule 148 (lhs -> variable .) ]
  ! IDENTIFIER      [ reduce using rule 148 (lhs -> variable .) ]
  ! SUPER           [ reduce using rule 148 (lhs -> variable .) ]


state 20

    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation
    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (73) arg -> primary .

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
    LBRACKET        shift and go to state 149
    DOT             shift and go to state 150
    UNARY_OP        shift and go to state 151
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    $end            reduce using rule 73 (arg -> primary .)
    RESCUE          reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)
    WHEN            reduce using rule 73 (arg -> primary .)
    COMMA           reduce using rule 73 (arg -> primary .)
    RBRACKET        reduce using rule 73 (arg -> primary .)
    THEN            reduce using rule 73 (arg -> primary .)
    DO              reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RKEY            reduce using rule 73 (arg -> primary .)
    LKEY            reduce using rule 73 (arg -> primary .)
    END             reduce using rule 73 (arg -> primary .)
    ELSIF           reduce using rule 73 (arg -> primary .)
    ELSE            reduce using rule 73 (arg -> primary .)
    ENSURE          reduce using rule 73 (arg -> primary .)
    NOT_SYMBOL      reduce using rule 73 (arg -> primary .)
    COMPLEMENT_OP   reduce using rule 73 (arg -> primary .)
    DEFINED_OP      reduce using rule 73 (arg -> primary .)
    RETURN          reduce using rule 73 (arg -> primary .)
    YIELD           reduce using rule 73 (arg -> primary .)
    CASE            reduce using rule 73 (arg -> primary .)
    FOR             reduce using rule 73 (arg -> primary .)
    BEGIN           reduce using rule 73 (arg -> primary .)
    CLASS           reduce using rule 73 (arg -> primary .)
    MODULE          reduce using rule 73 (arg -> primary .)
    DEF             reduce using rule 73 (arg -> primary .)
    PUTS            reduce using rule 73 (arg -> primary .)
    VAR_GLOBAL      reduce using rule 73 (arg -> primary .)
    VAR_LOCAL       reduce using rule 73 (arg -> primary .)
    VAR_INSTANCE    reduce using rule 73 (arg -> primary .)
    VAR_CLASS       reduce using rule 73 (arg -> primary .)
    SYMBOL          reduce using rule 73 (arg -> primary .)
    STRING          reduce using rule 73 (arg -> primary .)
    IDENTIFIER      reduce using rule 73 (arg -> primary .)
    SUPER           reduce using rule 73 (arg -> primary .)

  ! LBRACKET        [ reduce using rule 73 (arg -> primary .) ]
  ! DOT             [ reduce using rule 73 (arg -> primary .) ]
  ! UNARY_OP        [ reduce using rule 73 (arg -> primary .) ]


state 21

    (220) operation -> IDENTIFIER .
    (221) operation -> IDENTIFIER . NOT_SYMBOL
    (222) operation -> IDENTIFIER . OPTIONAL_SYMBOL
    (193) literal -> IDENTIFIER .

  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! reduce/reduce conflict for LBRACKET resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 193 (literal -> IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! reduce/reduce conflict for COMPLEMENT_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 193 (literal -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 152
    OPTIONAL_SYMBOL shift and go to state 153
    LBRACKET        reduce using rule 193 (literal -> IDENTIFIER .)
    DOT             reduce using rule 193 (literal -> IDENTIFIER .)
    UNARY_OP        reduce using rule 193 (literal -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 193 (literal -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 193 (literal -> IDENTIFIER .)
    PLUS            reduce using rule 193 (literal -> IDENTIFIER .)
    MINUS           reduce using rule 193 (literal -> IDENTIFIER .)
    TIMES           reduce using rule 193 (literal -> IDENTIFIER .)
    DIVIDE          reduce using rule 193 (literal -> IDENTIFIER .)
    MOD             reduce using rule 193 (literal -> IDENTIFIER .)
    POW             reduce using rule 193 (literal -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 193 (literal -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 193 (literal -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 193 (literal -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 193 (literal -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 193 (literal -> IDENTIFIER .)
    EQUAL           reduce using rule 193 (literal -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 193 (literal -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 193 (literal -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 193 (literal -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 193 (literal -> IDENTIFIER .)
    AND             reduce using rule 193 (literal -> IDENTIFIER .)
    OR              reduce using rule 193 (literal -> IDENTIFIER .)
    IF              reduce using rule 193 (literal -> IDENTIFIER .)
    WHILE           reduce using rule 193 (literal -> IDENTIFIER .)
    UNLESS          reduce using rule 193 (literal -> IDENTIFIER .)
    UNTIL           reduce using rule 193 (literal -> IDENTIFIER .)
    TERM            reduce using rule 193 (literal -> IDENTIFIER .)
    NUMBER          reduce using rule 193 (literal -> IDENTIFIER .)
    LPAREN          reduce using rule 193 (literal -> IDENTIFIER .)
    $end            reduce using rule 193 (literal -> IDENTIFIER .)
    THEN            reduce using rule 193 (literal -> IDENTIFIER .)
    DO              reduce using rule 193 (literal -> IDENTIFIER .)
    RESCUE          reduce using rule 193 (literal -> IDENTIFIER .)
    COMMA           reduce using rule 193 (literal -> IDENTIFIER .)
    RBRACKET        reduce using rule 193 (literal -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 193 (literal -> IDENTIFIER .)
    RKEY            reduce using rule 193 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 193 (literal -> IDENTIFIER .)
    WHEN            reduce using rule 193 (literal -> IDENTIFIER .)
    LKEY            reduce using rule 193 (literal -> IDENTIFIER .)
    END             reduce using rule 193 (literal -> IDENTIFIER .)
    ELSIF           reduce using rule 193 (literal -> IDENTIFIER .)
    ELSE            reduce using rule 193 (literal -> IDENTIFIER .)
    ENSURE          reduce using rule 193 (literal -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    DEFINED_OP      reduce using rule 193 (literal -> IDENTIFIER .)
    RETURN          reduce using rule 193 (literal -> IDENTIFIER .)
    YIELD           reduce using rule 193 (literal -> IDENTIFIER .)
    CASE            reduce using rule 193 (literal -> IDENTIFIER .)
    FOR             reduce using rule 193 (literal -> IDENTIFIER .)
    BEGIN           reduce using rule 193 (literal -> IDENTIFIER .)
    CLASS           reduce using rule 193 (literal -> IDENTIFIER .)
    MODULE          reduce using rule 193 (literal -> IDENTIFIER .)
    DEF             reduce using rule 193 (literal -> IDENTIFIER .)
    PUTS            reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_LOCAL       reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_CLASS       reduce using rule 193 (literal -> IDENTIFIER .)
    SYMBOL          reduce using rule 193 (literal -> IDENTIFIER .)
    STRING          reduce using rule 193 (literal -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 193 (literal -> IDENTIFIER .)
    SUPER           reduce using rule 193 (literal -> IDENTIFIER .)

  ! LBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 193 (literal -> IDENTIFIER .) ]


state 22

    (19) expr -> mlhs . = mrhs

    =               shift and go to state 154


state 23

    (20) expr -> RETURN . call_args
    (93) primary -> RETURN .
    (94) primary -> RETURN . LPAREN RPAREN
    (95) primary -> RETURN . LPAREN call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    DOT             reduce using rule 93 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 93 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 93 (primary -> RETURN .)
    DIVIDE          reduce using rule 93 (primary -> RETURN .)
    MOD             reduce using rule 93 (primary -> RETURN .)
    POW             reduce using rule 93 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 93 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 93 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 93 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 93 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 93 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    EQUAL           reduce using rule 93 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 93 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 93 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    AND             reduce using rule 93 (primary -> RETURN .)
    OR              reduce using rule 93 (primary -> RETURN .)
    TERM            reduce using rule 93 (primary -> RETURN .)
    $end            reduce using rule 93 (primary -> RETURN .)
    THEN            reduce using rule 93 (primary -> RETURN .)
    DO              reduce using rule 93 (primary -> RETURN .)
    RESCUE          reduce using rule 93 (primary -> RETURN .)
    COMMA           reduce using rule 93 (primary -> RETURN .)
    RBRACKET        reduce using rule 93 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 93 (primary -> RETURN .)
    RKEY            reduce using rule 93 (primary -> RETURN .)
    RPAREN          reduce using rule 93 (primary -> RETURN .)
    WHEN            reduce using rule 93 (primary -> RETURN .)
    END             reduce using rule 93 (primary -> RETURN .)
    ELSIF           reduce using rule 93 (primary -> RETURN .)
    ELSE            reduce using rule 93 (primary -> RETURN .)
    ENSURE          reduce using rule 93 (primary -> RETURN .)
    LPAREN          shift and go to state 156
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LBRACKET        [ reduce using rule 93 (primary -> RETURN .) ]
  ! UNARY_OP        [ reduce using rule 93 (primary -> RETURN .) ]
  ! PLUS            [ reduce using rule 93 (primary -> RETURN .) ]
  ! MINUS           [ reduce using rule 93 (primary -> RETURN .) ]
  ! TIMES           [ reduce using rule 93 (primary -> RETURN .) ]
  ! BINARY_AND_OP   [ reduce using rule 93 (primary -> RETURN .) ]
  ! IF              [ reduce using rule 93 (primary -> RETURN .) ]
  ! WHILE           [ reduce using rule 93 (primary -> RETURN .) ]
  ! UNLESS          [ reduce using rule 93 (primary -> RETURN .) ]
  ! UNTIL           [ reduce using rule 93 (primary -> RETURN .) ]
  ! NUMBER          [ reduce using rule 93 (primary -> RETURN .) ]
  ! LPAREN          [ reduce using rule 93 (primary -> RETURN .) ]
  ! LKEY            [ reduce using rule 93 (primary -> RETURN .) ]
  ! NOT_SYMBOL      [ reduce using rule 93 (primary -> RETURN .) ]
  ! COMPLEMENT_OP   [ reduce using rule 93 (primary -> RETURN .) ]
  ! DEFINED_OP      [ reduce using rule 93 (primary -> RETURN .) ]
  ! RETURN          [ reduce using rule 93 (primary -> RETURN .) ]
  ! YIELD           [ reduce using rule 93 (primary -> RETURN .) ]
  ! CASE            [ reduce using rule 93 (primary -> RETURN .) ]
  ! FOR             [ reduce using rule 93 (primary -> RETURN .) ]
  ! BEGIN           [ reduce using rule 93 (primary -> RETURN .) ]
  ! CLASS           [ reduce using rule 93 (primary -> RETURN .) ]
  ! MODULE          [ reduce using rule 93 (primary -> RETURN .) ]
  ! DEF             [ reduce using rule 93 (primary -> RETURN .) ]
  ! PUTS            [ reduce using rule 93 (primary -> RETURN .) ]
  ! VAR_GLOBAL      [ reduce using rule 93 (primary -> RETURN .) ]
  ! VAR_LOCAL       [ reduce using rule 93 (primary -> RETURN .) ]
  ! VAR_INSTANCE    [ reduce using rule 93 (primary -> RETURN .) ]
  ! VAR_CLASS       [ reduce using rule 93 (primary -> RETURN .) ]
  ! SYMBOL          [ reduce using rule 93 (primary -> RETURN .) ]
  ! STRING          [ reduce using rule 93 (primary -> RETURN .) ]
  ! IDENTIFIER      [ reduce using rule 93 (primary -> RETURN .) ]
  ! SUPER           [ reduce using rule 93 (primary -> RETURN .) ]

    call_args                      shift and go to state 155
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 24

    (21) expr -> YIELD . call_args
    (96) primary -> YIELD .
    (97) primary -> YIELD . LPAREN RPAREN
    (98) primary -> YIELD . LPAREN call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    DOT             reduce using rule 96 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 96 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 96 (primary -> YIELD .)
    DIVIDE          reduce using rule 96 (primary -> YIELD .)
    MOD             reduce using rule 96 (primary -> YIELD .)
    POW             reduce using rule 96 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 96 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 96 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 96 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 96 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 96 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    EQUAL           reduce using rule 96 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 96 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 96 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    AND             reduce using rule 96 (primary -> YIELD .)
    OR              reduce using rule 96 (primary -> YIELD .)
    TERM            reduce using rule 96 (primary -> YIELD .)
    $end            reduce using rule 96 (primary -> YIELD .)
    THEN            reduce using rule 96 (primary -> YIELD .)
    DO              reduce using rule 96 (primary -> YIELD .)
    RESCUE          reduce using rule 96 (primary -> YIELD .)
    COMMA           reduce using rule 96 (primary -> YIELD .)
    RBRACKET        reduce using rule 96 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 96 (primary -> YIELD .)
    RKEY            reduce using rule 96 (primary -> YIELD .)
    RPAREN          reduce using rule 96 (primary -> YIELD .)
    WHEN            reduce using rule 96 (primary -> YIELD .)
    END             reduce using rule 96 (primary -> YIELD .)
    ELSIF           reduce using rule 96 (primary -> YIELD .)
    ELSE            reduce using rule 96 (primary -> YIELD .)
    ENSURE          reduce using rule 96 (primary -> YIELD .)
    LPAREN          shift and go to state 163
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LBRACKET        [ reduce using rule 96 (primary -> YIELD .) ]
  ! UNARY_OP        [ reduce using rule 96 (primary -> YIELD .) ]
  ! PLUS            [ reduce using rule 96 (primary -> YIELD .) ]
  ! MINUS           [ reduce using rule 96 (primary -> YIELD .) ]
  ! TIMES           [ reduce using rule 96 (primary -> YIELD .) ]
  ! BINARY_AND_OP   [ reduce using rule 96 (primary -> YIELD .) ]
  ! IF              [ reduce using rule 96 (primary -> YIELD .) ]
  ! WHILE           [ reduce using rule 96 (primary -> YIELD .) ]
  ! UNLESS          [ reduce using rule 96 (primary -> YIELD .) ]
  ! UNTIL           [ reduce using rule 96 (primary -> YIELD .) ]
  ! NUMBER          [ reduce using rule 96 (primary -> YIELD .) ]
  ! LPAREN          [ reduce using rule 96 (primary -> YIELD .) ]
  ! LKEY            [ reduce using rule 96 (primary -> YIELD .) ]
  ! NOT_SYMBOL      [ reduce using rule 96 (primary -> YIELD .) ]
  ! COMPLEMENT_OP   [ reduce using rule 96 (primary -> YIELD .) ]
  ! DEFINED_OP      [ reduce using rule 96 (primary -> YIELD .) ]
  ! RETURN          [ reduce using rule 96 (primary -> YIELD .) ]
  ! YIELD           [ reduce using rule 96 (primary -> YIELD .) ]
  ! CASE            [ reduce using rule 96 (primary -> YIELD .) ]
  ! FOR             [ reduce using rule 96 (primary -> YIELD .) ]
  ! BEGIN           [ reduce using rule 96 (primary -> YIELD .) ]
  ! CLASS           [ reduce using rule 96 (primary -> YIELD .) ]
  ! MODULE          [ reduce using rule 96 (primary -> YIELD .) ]
  ! DEF             [ reduce using rule 96 (primary -> YIELD .) ]
  ! PUTS            [ reduce using rule 96 (primary -> YIELD .) ]
  ! VAR_GLOBAL      [ reduce using rule 96 (primary -> YIELD .) ]
  ! VAR_LOCAL       [ reduce using rule 96 (primary -> YIELD .) ]
  ! VAR_INSTANCE    [ reduce using rule 96 (primary -> YIELD .) ]
  ! VAR_CLASS       [ reduce using rule 96 (primary -> YIELD .) ]
  ! SYMBOL          [ reduce using rule 96 (primary -> YIELD .) ]
  ! STRING          [ reduce using rule 96 (primary -> YIELD .) ]
  ! IDENTIFIER      [ reduce using rule 96 (primary -> YIELD .) ]
  ! SUPER           [ reduce using rule 96 (primary -> YIELD .) ]

    call_args                      shift and go to state 162
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 25

    (24) expr -> NOT . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 164
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 26

    (26) expr -> NOT_SYMBOL . command
    (66) arg -> NOT_SYMBOL . arg
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    command                        shift and go to state 165
    arg                            shift and go to state 166
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 27

    (27) expr -> arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 27 (expr -> arg .)
    WHILE           reduce using rule 27 (expr -> arg .)
    UNLESS          reduce using rule 27 (expr -> arg .)
    UNTIL           reduce using rule 27 (expr -> arg .)
    TERM            reduce using rule 27 (expr -> arg .)
    NUMBER          reduce using rule 27 (expr -> arg .)
    LPAREN          reduce using rule 27 (expr -> arg .)
    $end            reduce using rule 27 (expr -> arg .)
    THEN            reduce using rule 27 (expr -> arg .)
    DO              reduce using rule 27 (expr -> arg .)
    RESCUE          reduce using rule 27 (expr -> arg .)
    LBRACKET        reduce using rule 27 (expr -> arg .)
    DOT             reduce using rule 27 (expr -> arg .)
    UNARY_OP        reduce using rule 27 (expr -> arg .)
    COMMA           reduce using rule 27 (expr -> arg .)
    RBRACKET        reduce using rule 27 (expr -> arg .)
    HASH_ROCKET     reduce using rule 27 (expr -> arg .)
    RKEY            reduce using rule 27 (expr -> arg .)
    RPAREN          reduce using rule 27 (expr -> arg .)
    WHEN            reduce using rule 27 (expr -> arg .)
    LKEY            reduce using rule 27 (expr -> arg .)
    END             reduce using rule 27 (expr -> arg .)
    ELSIF           reduce using rule 27 (expr -> arg .)
    ELSE            reduce using rule 27 (expr -> arg .)
    ENSURE          reduce using rule 27 (expr -> arg .)
    NOT_SYMBOL      reduce using rule 27 (expr -> arg .)
    COMPLEMENT_OP   reduce using rule 27 (expr -> arg .)
    DEFINED_OP      reduce using rule 27 (expr -> arg .)
    RETURN          reduce using rule 27 (expr -> arg .)
    YIELD           reduce using rule 27 (expr -> arg .)
    CASE            reduce using rule 27 (expr -> arg .)
    FOR             reduce using rule 27 (expr -> arg .)
    BEGIN           reduce using rule 27 (expr -> arg .)
    CLASS           reduce using rule 27 (expr -> arg .)
    MODULE          reduce using rule 27 (expr -> arg .)
    DEF             reduce using rule 27 (expr -> arg .)
    PUTS            reduce using rule 27 (expr -> arg .)
    VAR_GLOBAL      reduce using rule 27 (expr -> arg .)
    VAR_LOCAL       reduce using rule 27 (expr -> arg .)
    VAR_INSTANCE    reduce using rule 27 (expr -> arg .)
    VAR_CLASS       reduce using rule 27 (expr -> arg .)
    SYMBOL          reduce using rule 27 (expr -> arg .)
    STRING          reduce using rule 27 (expr -> arg .)
    IDENTIFIER      reduce using rule 27 (expr -> arg .)
    SUPER           reduce using rule 27 (expr -> arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! AND             [ reduce using rule 27 (expr -> arg .) ]
  ! OR              [ reduce using rule 27 (expr -> arg .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 27 (expr -> arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 27 (expr -> arg .) ]
  ! PLUS            [ reduce using rule 27 (expr -> arg .) ]
  ! MINUS           [ reduce using rule 27 (expr -> arg .) ]
  ! TIMES           [ reduce using rule 27 (expr -> arg .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> arg .) ]
  ! MOD             [ reduce using rule 27 (expr -> arg .) ]
  ! POW             [ reduce using rule 27 (expr -> arg .) ]
  ! OR_SYMBOL       [ reduce using rule 27 (expr -> arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 27 (expr -> arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 27 (expr -> arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 27 (expr -> arg .) ]
  ! GREATERTHAN     [ reduce using rule 27 (expr -> arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 27 (expr -> arg .) ]
  ! LESSERTHAN      [ reduce using rule 27 (expr -> arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 27 (expr -> arg .) ]
  ! EQUAL           [ reduce using rule 27 (expr -> arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 27 (expr -> arg .) ]
  ! NOTEQUAL        [ reduce using rule 27 (expr -> arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 27 (expr -> arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 27 (expr -> arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 27 (expr -> arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 27 (expr -> arg .) ]


state 28

    (34) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (30) command -> operation . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    LBRACKET        shift and go to state 192
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 115
    call_args                      shift and go to state 193
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 29

    (78) primary -> LPAREN . compstmt RPAREN
    (161) mlhs_item -> LPAREN . mlhs RPAREN
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER

    TIMES           shift and go to state 45
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    LPAREN          shift and go to state 118
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 194
    mlhs                           shift and go to state 195
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 196
    call                           shift and go to state 5
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36

state 30

    (82) primary -> UNARY_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 197


state 31

    (39) function -> SUPER . LPAREN call_args RPAREN
    (40) function -> SUPER .
    (33) command -> SUPER . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 198
    DO              reduce using rule 40 (function -> SUPER .)
    TERM            reduce using rule 40 (function -> SUPER .)
    DOT             reduce using rule 40 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 40 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 40 (function -> SUPER .)
    DIVIDE          reduce using rule 40 (function -> SUPER .)
    MOD             reduce using rule 40 (function -> SUPER .)
    POW             reduce using rule 40 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 40 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 40 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 40 (function -> SUPER .)
    GREATERTHAN     reduce using rule 40 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    LESSERTHAN      reduce using rule 40 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    EQUAL           reduce using rule 40 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 40 (function -> SUPER .)
    NOTEQUAL        reduce using rule 40 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    AND             reduce using rule 40 (function -> SUPER .)
    OR              reduce using rule 40 (function -> SUPER .)
    $end            reduce using rule 40 (function -> SUPER .)
    RESCUE          reduce using rule 40 (function -> SUPER .)
    RPAREN          reduce using rule 40 (function -> SUPER .)
    WHEN            reduce using rule 40 (function -> SUPER .)
    COMMA           reduce using rule 40 (function -> SUPER .)
    RBRACKET        reduce using rule 40 (function -> SUPER .)
    THEN            reduce using rule 40 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 40 (function -> SUPER .)
    RKEY            reduce using rule 40 (function -> SUPER .)
    END             reduce using rule 40 (function -> SUPER .)
    ELSIF           reduce using rule 40 (function -> SUPER .)
    ELSE            reduce using rule 40 (function -> SUPER .)
    ENSURE          reduce using rule 40 (function -> SUPER .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 40 (function -> SUPER .) ]
  ! NUMBER          [ reduce using rule 40 (function -> SUPER .) ]
  ! LPAREN          [ reduce using rule 40 (function -> SUPER .) ]
  ! LBRACKET        [ reduce using rule 40 (function -> SUPER .) ]
  ! UNARY_OP        [ reduce using rule 40 (function -> SUPER .) ]
  ! PLUS            [ reduce using rule 40 (function -> SUPER .) ]
  ! MINUS           [ reduce using rule 40 (function -> SUPER .) ]
  ! TIMES           [ reduce using rule 40 (function -> SUPER .) ]
  ! BINARY_AND_OP   [ reduce using rule 40 (function -> SUPER .) ]
  ! IF              [ reduce using rule 40 (function -> SUPER .) ]
  ! WHILE           [ reduce using rule 40 (function -> SUPER .) ]
  ! UNLESS          [ reduce using rule 40 (function -> SUPER .) ]
  ! UNTIL           [ reduce using rule 40 (function -> SUPER .) ]
  ! NOT_SYMBOL      [ reduce using rule 40 (function -> SUPER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 40 (function -> SUPER .) ]
  ! DEFINED_OP      [ reduce using rule 40 (function -> SUPER .) ]
  ! RETURN          [ reduce using rule 40 (function -> SUPER .) ]
  ! YIELD           [ reduce using rule 40 (function -> SUPER .) ]
  ! CASE            [ reduce using rule 40 (function -> SUPER .) ]
  ! FOR             [ reduce using rule 40 (function -> SUPER .) ]
  ! BEGIN           [ reduce using rule 40 (function -> SUPER .) ]
  ! CLASS           [ reduce using rule 40 (function -> SUPER .) ]
  ! MODULE          [ reduce using rule 40 (function -> SUPER .) ]
  ! DEF             [ reduce using rule 40 (function -> SUPER .) ]
  ! PUTS            [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_GLOBAL      [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_LOCAL       [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_INSTANCE    [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_CLASS       [ reduce using rule 40 (function -> SUPER .) ]
  ! SYMBOL          [ reduce using rule 40 (function -> SUPER .) ]
  ! STRING          [ reduce using rule 40 (function -> SUPER .) ]
  ! IDENTIFIER      [ reduce using rule 40 (function -> SUPER .) ]
  ! SUPER           [ reduce using rule 40 (function -> SUPER .) ]

    call_args                      shift and go to state 199
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 32

    (74) variable -> VAR_GLOBAL .

    =               reduce using rule 74 (variable -> VAR_GLOBAL .)
    PLUS_EQUAL      reduce using rule 74 (variable -> VAR_GLOBAL .)
    MINUS_EQUAL     reduce using rule 74 (variable -> VAR_GLOBAL .)
    TIMES_EQUAL     reduce using rule 74 (variable -> VAR_GLOBAL .)
    DIVIDE_EQUAL    reduce using rule 74 (variable -> VAR_GLOBAL .)
    MOD_EQUAL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    POW_EQUAL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    SINGLE_AND_EQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    SINGLE_OR_EQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    XOR_EQUAL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_LEFT_EQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_RIGHT_EQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    AND_EQUAL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    OR_EQUAL        reduce using rule 74 (variable -> VAR_GLOBAL .)
    COMMA           reduce using rule 74 (variable -> VAR_GLOBAL .)
    LBRACKET        reduce using rule 74 (variable -> VAR_GLOBAL .)
    DOT             reduce using rule 74 (variable -> VAR_GLOBAL .)
    UNARY_OP        reduce using rule 74 (variable -> VAR_GLOBAL .)
    RANGE_INCLUSIVE reduce using rule 74 (variable -> VAR_GLOBAL .)
    RANGE_EXCLUSIVE reduce using rule 74 (variable -> VAR_GLOBAL .)
    PLUS            reduce using rule 74 (variable -> VAR_GLOBAL .)
    MINUS           reduce using rule 74 (variable -> VAR_GLOBAL .)
    TIMES           reduce using rule 74 (variable -> VAR_GLOBAL .)
    DIVIDE          reduce using rule 74 (variable -> VAR_GLOBAL .)
    MOD             reduce using rule 74 (variable -> VAR_GLOBAL .)
    POW             reduce using rule 74 (variable -> VAR_GLOBAL .)
    OR_SYMBOL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_XOR_OP   reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_AND_OP   reduce using rule 74 (variable -> VAR_GLOBAL .)
    COMBINED_COMPARISON_OP reduce using rule 74 (variable -> VAR_GLOBAL .)
    GREATERTHAN     reduce using rule 74 (variable -> VAR_GLOBAL .)
    GREATERTHANEQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    LESSERTHAN      reduce using rule 74 (variable -> VAR_GLOBAL .)
    LESSERTHANEQUAL reduce using rule 74 (variable -> VAR_GLOBAL .)
    EQUAL           reduce using rule 74 (variable -> VAR_GLOBAL .)
    CASE_EQUALITY   reduce using rule 74 (variable -> VAR_GLOBAL .)
    NOTEQUAL        reduce using rule 74 (variable -> VAR_GLOBAL .)
    MATCHED_STRINGS_OP reduce using rule 74 (variable -> VAR_GLOBAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 74 (variable -> VAR_GLOBAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 74 (variable -> VAR_GLOBAL .)
    AND             reduce using rule 74 (variable -> VAR_GLOBAL .)
    OR              reduce using rule 74 (variable -> VAR_GLOBAL .)
    IF              reduce using rule 74 (variable -> VAR_GLOBAL .)
    WHILE           reduce using rule 74 (variable -> VAR_GLOBAL .)
    UNLESS          reduce using rule 74 (variable -> VAR_GLOBAL .)
    UNTIL           reduce using rule 74 (variable -> VAR_GLOBAL .)
    TERM            reduce using rule 74 (variable -> VAR_GLOBAL .)
    NUMBER          reduce using rule 74 (variable -> VAR_GLOBAL .)
    LPAREN          reduce using rule 74 (variable -> VAR_GLOBAL .)
    $end            reduce using rule 74 (variable -> VAR_GLOBAL .)
    RBRACKET        reduce using rule 74 (variable -> VAR_GLOBAL .)
    THEN            reduce using rule 74 (variable -> VAR_GLOBAL .)
    DO              reduce using rule 74 (variable -> VAR_GLOBAL .)
    RESCUE          reduce using rule 74 (variable -> VAR_GLOBAL .)
    HASH_ROCKET     reduce using rule 74 (variable -> VAR_GLOBAL .)
    RKEY            reduce using rule 74 (variable -> VAR_GLOBAL .)
    RPAREN          reduce using rule 74 (variable -> VAR_GLOBAL .)
    WHEN            reduce using rule 74 (variable -> VAR_GLOBAL .)
    LKEY            reduce using rule 74 (variable -> VAR_GLOBAL .)
    END             reduce using rule 74 (variable -> VAR_GLOBAL .)
    ELSIF           reduce using rule 74 (variable -> VAR_GLOBAL .)
    ELSE            reduce using rule 74 (variable -> VAR_GLOBAL .)
    ENSURE          reduce using rule 74 (variable -> VAR_GLOBAL .)
    NOT_SYMBOL      reduce using rule 74 (variable -> VAR_GLOBAL .)
    COMPLEMENT_OP   reduce using rule 74 (variable -> VAR_GLOBAL .)
    DEFINED_OP      reduce using rule 74 (variable -> VAR_GLOBAL .)
    RETURN          reduce using rule 74 (variable -> VAR_GLOBAL .)
    YIELD           reduce using rule 74 (variable -> VAR_GLOBAL .)
    CASE            reduce using rule 74 (variable -> VAR_GLOBAL .)
    FOR             reduce using rule 74 (variable -> VAR_GLOBAL .)
    BEGIN           reduce using rule 74 (variable -> VAR_GLOBAL .)
    CLASS           reduce using rule 74 (variable -> VAR_GLOBAL .)
    MODULE          reduce using rule 74 (variable -> VAR_GLOBAL .)
    DEF             reduce using rule 74 (variable -> VAR_GLOBAL .)
    PUTS            reduce using rule 74 (variable -> VAR_GLOBAL .)
    VAR_GLOBAL      reduce using rule 74 (variable -> VAR_GLOBAL .)
    VAR_LOCAL       reduce using rule 74 (variable -> VAR_GLOBAL .)
    VAR_INSTANCE    reduce using rule 74 (variable -> VAR_GLOBAL .)
    VAR_CLASS       reduce using rule 74 (variable -> VAR_GLOBAL .)
    SYMBOL          reduce using rule 74 (variable -> VAR_GLOBAL .)
    STRING          reduce using rule 74 (variable -> VAR_GLOBAL .)
    IDENTIFIER      reduce using rule 74 (variable -> VAR_GLOBAL .)
    SUPER           reduce using rule 74 (variable -> VAR_GLOBAL .)
    IN              reduce using rule 74 (variable -> VAR_GLOBAL .)


state 33

    (75) variable -> VAR_LOCAL .

    =               reduce using rule 75 (variable -> VAR_LOCAL .)
    PLUS_EQUAL      reduce using rule 75 (variable -> VAR_LOCAL .)
    MINUS_EQUAL     reduce using rule 75 (variable -> VAR_LOCAL .)
    TIMES_EQUAL     reduce using rule 75 (variable -> VAR_LOCAL .)
    DIVIDE_EQUAL    reduce using rule 75 (variable -> VAR_LOCAL .)
    MOD_EQUAL       reduce using rule 75 (variable -> VAR_LOCAL .)
    POW_EQUAL       reduce using rule 75 (variable -> VAR_LOCAL .)
    SINGLE_AND_EQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    SINGLE_OR_EQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    XOR_EQUAL       reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_LEFT_EQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_RIGHT_EQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    AND_EQUAL       reduce using rule 75 (variable -> VAR_LOCAL .)
    OR_EQUAL        reduce using rule 75 (variable -> VAR_LOCAL .)
    COMMA           reduce using rule 75 (variable -> VAR_LOCAL .)
    LBRACKET        reduce using rule 75 (variable -> VAR_LOCAL .)
    DOT             reduce using rule 75 (variable -> VAR_LOCAL .)
    UNARY_OP        reduce using rule 75 (variable -> VAR_LOCAL .)
    RANGE_INCLUSIVE reduce using rule 75 (variable -> VAR_LOCAL .)
    RANGE_EXCLUSIVE reduce using rule 75 (variable -> VAR_LOCAL .)
    PLUS            reduce using rule 75 (variable -> VAR_LOCAL .)
    MINUS           reduce using rule 75 (variable -> VAR_LOCAL .)
    TIMES           reduce using rule 75 (variable -> VAR_LOCAL .)
    DIVIDE          reduce using rule 75 (variable -> VAR_LOCAL .)
    MOD             reduce using rule 75 (variable -> VAR_LOCAL .)
    POW             reduce using rule 75 (variable -> VAR_LOCAL .)
    OR_SYMBOL       reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_XOR_OP   reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_AND_OP   reduce using rule 75 (variable -> VAR_LOCAL .)
    COMBINED_COMPARISON_OP reduce using rule 75 (variable -> VAR_LOCAL .)
    GREATERTHAN     reduce using rule 75 (variable -> VAR_LOCAL .)
    GREATERTHANEQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    LESSERTHAN      reduce using rule 75 (variable -> VAR_LOCAL .)
    LESSERTHANEQUAL reduce using rule 75 (variable -> VAR_LOCAL .)
    EQUAL           reduce using rule 75 (variable -> VAR_LOCAL .)
    CASE_EQUALITY   reduce using rule 75 (variable -> VAR_LOCAL .)
    NOTEQUAL        reduce using rule 75 (variable -> VAR_LOCAL .)
    MATCHED_STRINGS_OP reduce using rule 75 (variable -> VAR_LOCAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 75 (variable -> VAR_LOCAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 75 (variable -> VAR_LOCAL .)
    AND             reduce using rule 75 (variable -> VAR_LOCAL .)
    OR              reduce using rule 75 (variable -> VAR_LOCAL .)
    IF              reduce using rule 75 (variable -> VAR_LOCAL .)
    WHILE           reduce using rule 75 (variable -> VAR_LOCAL .)
    UNLESS          reduce using rule 75 (variable -> VAR_LOCAL .)
    UNTIL           reduce using rule 75 (variable -> VAR_LOCAL .)
    TERM            reduce using rule 75 (variable -> VAR_LOCAL .)
    NUMBER          reduce using rule 75 (variable -> VAR_LOCAL .)
    LPAREN          reduce using rule 75 (variable -> VAR_LOCAL .)
    $end            reduce using rule 75 (variable -> VAR_LOCAL .)
    RBRACKET        reduce using rule 75 (variable -> VAR_LOCAL .)
    THEN            reduce using rule 75 (variable -> VAR_LOCAL .)
    DO              reduce using rule 75 (variable -> VAR_LOCAL .)
    RESCUE          reduce using rule 75 (variable -> VAR_LOCAL .)
    HASH_ROCKET     reduce using rule 75 (variable -> VAR_LOCAL .)
    RKEY            reduce using rule 75 (variable -> VAR_LOCAL .)
    RPAREN          reduce using rule 75 (variable -> VAR_LOCAL .)
    WHEN            reduce using rule 75 (variable -> VAR_LOCAL .)
    LKEY            reduce using rule 75 (variable -> VAR_LOCAL .)
    END             reduce using rule 75 (variable -> VAR_LOCAL .)
    ELSIF           reduce using rule 75 (variable -> VAR_LOCAL .)
    ELSE            reduce using rule 75 (variable -> VAR_LOCAL .)
    ENSURE          reduce using rule 75 (variable -> VAR_LOCAL .)
    NOT_SYMBOL      reduce using rule 75 (variable -> VAR_LOCAL .)
    COMPLEMENT_OP   reduce using rule 75 (variable -> VAR_LOCAL .)
    DEFINED_OP      reduce using rule 75 (variable -> VAR_LOCAL .)
    RETURN          reduce using rule 75 (variable -> VAR_LOCAL .)
    YIELD           reduce using rule 75 (variable -> VAR_LOCAL .)
    CASE            reduce using rule 75 (variable -> VAR_LOCAL .)
    FOR             reduce using rule 75 (variable -> VAR_LOCAL .)
    BEGIN           reduce using rule 75 (variable -> VAR_LOCAL .)
    CLASS           reduce using rule 75 (variable -> VAR_LOCAL .)
    MODULE          reduce using rule 75 (variable -> VAR_LOCAL .)
    DEF             reduce using rule 75 (variable -> VAR_LOCAL .)
    PUTS            reduce using rule 75 (variable -> VAR_LOCAL .)
    VAR_GLOBAL      reduce using rule 75 (variable -> VAR_LOCAL .)
    VAR_LOCAL       reduce using rule 75 (variable -> VAR_LOCAL .)
    VAR_INSTANCE    reduce using rule 75 (variable -> VAR_LOCAL .)
    VAR_CLASS       reduce using rule 75 (variable -> VAR_LOCAL .)
    SYMBOL          reduce using rule 75 (variable -> VAR_LOCAL .)
    STRING          reduce using rule 75 (variable -> VAR_LOCAL .)
    IDENTIFIER      reduce using rule 75 (variable -> VAR_LOCAL .)
    SUPER           reduce using rule 75 (variable -> VAR_LOCAL .)
    IN              reduce using rule 75 (variable -> VAR_LOCAL .)


state 34

    (76) variable -> VAR_INSTANCE .

    =               reduce using rule 76 (variable -> VAR_INSTANCE .)
    PLUS_EQUAL      reduce using rule 76 (variable -> VAR_INSTANCE .)
    MINUS_EQUAL     reduce using rule 76 (variable -> VAR_INSTANCE .)
    TIMES_EQUAL     reduce using rule 76 (variable -> VAR_INSTANCE .)
    DIVIDE_EQUAL    reduce using rule 76 (variable -> VAR_INSTANCE .)
    MOD_EQUAL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    POW_EQUAL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    SINGLE_AND_EQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    SINGLE_OR_EQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    XOR_EQUAL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_LEFT_EQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_RIGHT_EQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    AND_EQUAL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    OR_EQUAL        reduce using rule 76 (variable -> VAR_INSTANCE .)
    COMMA           reduce using rule 76 (variable -> VAR_INSTANCE .)
    LBRACKET        reduce using rule 76 (variable -> VAR_INSTANCE .)
    DOT             reduce using rule 76 (variable -> VAR_INSTANCE .)
    UNARY_OP        reduce using rule 76 (variable -> VAR_INSTANCE .)
    RANGE_INCLUSIVE reduce using rule 76 (variable -> VAR_INSTANCE .)
    RANGE_EXCLUSIVE reduce using rule 76 (variable -> VAR_INSTANCE .)
    PLUS            reduce using rule 76 (variable -> VAR_INSTANCE .)
    MINUS           reduce using rule 76 (variable -> VAR_INSTANCE .)
    TIMES           reduce using rule 76 (variable -> VAR_INSTANCE .)
    DIVIDE          reduce using rule 76 (variable -> VAR_INSTANCE .)
    MOD             reduce using rule 76 (variable -> VAR_INSTANCE .)
    POW             reduce using rule 76 (variable -> VAR_INSTANCE .)
    OR_SYMBOL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_XOR_OP   reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_AND_OP   reduce using rule 76 (variable -> VAR_INSTANCE .)
    COMBINED_COMPARISON_OP reduce using rule 76 (variable -> VAR_INSTANCE .)
    GREATERTHAN     reduce using rule 76 (variable -> VAR_INSTANCE .)
    GREATERTHANEQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    LESSERTHAN      reduce using rule 76 (variable -> VAR_INSTANCE .)
    LESSERTHANEQUAL reduce using rule 76 (variable -> VAR_INSTANCE .)
    EQUAL           reduce using rule 76 (variable -> VAR_INSTANCE .)
    CASE_EQUALITY   reduce using rule 76 (variable -> VAR_INSTANCE .)
    NOTEQUAL        reduce using rule 76 (variable -> VAR_INSTANCE .)
    MATCHED_STRINGS_OP reduce using rule 76 (variable -> VAR_INSTANCE .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 76 (variable -> VAR_INSTANCE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 76 (variable -> VAR_INSTANCE .)
    AND             reduce using rule 76 (variable -> VAR_INSTANCE .)
    OR              reduce using rule 76 (variable -> VAR_INSTANCE .)
    IF              reduce using rule 76 (variable -> VAR_INSTANCE .)
    WHILE           reduce using rule 76 (variable -> VAR_INSTANCE .)
    UNLESS          reduce using rule 76 (variable -> VAR_INSTANCE .)
    UNTIL           reduce using rule 76 (variable -> VAR_INSTANCE .)
    TERM            reduce using rule 76 (variable -> VAR_INSTANCE .)
    NUMBER          reduce using rule 76 (variable -> VAR_INSTANCE .)
    LPAREN          reduce using rule 76 (variable -> VAR_INSTANCE .)
    $end            reduce using rule 76 (variable -> VAR_INSTANCE .)
    RBRACKET        reduce using rule 76 (variable -> VAR_INSTANCE .)
    THEN            reduce using rule 76 (variable -> VAR_INSTANCE .)
    DO              reduce using rule 76 (variable -> VAR_INSTANCE .)
    RESCUE          reduce using rule 76 (variable -> VAR_INSTANCE .)
    HASH_ROCKET     reduce using rule 76 (variable -> VAR_INSTANCE .)
    RKEY            reduce using rule 76 (variable -> VAR_INSTANCE .)
    RPAREN          reduce using rule 76 (variable -> VAR_INSTANCE .)
    WHEN            reduce using rule 76 (variable -> VAR_INSTANCE .)
    LKEY            reduce using rule 76 (variable -> VAR_INSTANCE .)
    END             reduce using rule 76 (variable -> VAR_INSTANCE .)
    ELSIF           reduce using rule 76 (variable -> VAR_INSTANCE .)
    ELSE            reduce using rule 76 (variable -> VAR_INSTANCE .)
    ENSURE          reduce using rule 76 (variable -> VAR_INSTANCE .)
    NOT_SYMBOL      reduce using rule 76 (variable -> VAR_INSTANCE .)
    COMPLEMENT_OP   reduce using rule 76 (variable -> VAR_INSTANCE .)
    DEFINED_OP      reduce using rule 76 (variable -> VAR_INSTANCE .)
    RETURN          reduce using rule 76 (variable -> VAR_INSTANCE .)
    YIELD           reduce using rule 76 (variable -> VAR_INSTANCE .)
    CASE            reduce using rule 76 (variable -> VAR_INSTANCE .)
    FOR             reduce using rule 76 (variable -> VAR_INSTANCE .)
    BEGIN           reduce using rule 76 (variable -> VAR_INSTANCE .)
    CLASS           reduce using rule 76 (variable -> VAR_INSTANCE .)
    MODULE          reduce using rule 76 (variable -> VAR_INSTANCE .)
    DEF             reduce using rule 76 (variable -> VAR_INSTANCE .)
    PUTS            reduce using rule 76 (variable -> VAR_INSTANCE .)
    VAR_GLOBAL      reduce using rule 76 (variable -> VAR_INSTANCE .)
    VAR_LOCAL       reduce using rule 76 (variable -> VAR_INSTANCE .)
    VAR_INSTANCE    reduce using rule 76 (variable -> VAR_INSTANCE .)
    VAR_CLASS       reduce using rule 76 (variable -> VAR_INSTANCE .)
    SYMBOL          reduce using rule 76 (variable -> VAR_INSTANCE .)
    STRING          reduce using rule 76 (variable -> VAR_INSTANCE .)
    IDENTIFIER      reduce using rule 76 (variable -> VAR_INSTANCE .)
    SUPER           reduce using rule 76 (variable -> VAR_INSTANCE .)
    IN              reduce using rule 76 (variable -> VAR_INSTANCE .)


state 35

    (77) variable -> VAR_CLASS .

    =               reduce using rule 77 (variable -> VAR_CLASS .)
    PLUS_EQUAL      reduce using rule 77 (variable -> VAR_CLASS .)
    MINUS_EQUAL     reduce using rule 77 (variable -> VAR_CLASS .)
    TIMES_EQUAL     reduce using rule 77 (variable -> VAR_CLASS .)
    DIVIDE_EQUAL    reduce using rule 77 (variable -> VAR_CLASS .)
    MOD_EQUAL       reduce using rule 77 (variable -> VAR_CLASS .)
    POW_EQUAL       reduce using rule 77 (variable -> VAR_CLASS .)
    SINGLE_AND_EQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    SINGLE_OR_EQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    XOR_EQUAL       reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_LEFT_EQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_RIGHT_EQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    AND_EQUAL       reduce using rule 77 (variable -> VAR_CLASS .)
    OR_EQUAL        reduce using rule 77 (variable -> VAR_CLASS .)
    COMMA           reduce using rule 77 (variable -> VAR_CLASS .)
    LBRACKET        reduce using rule 77 (variable -> VAR_CLASS .)
    DOT             reduce using rule 77 (variable -> VAR_CLASS .)
    UNARY_OP        reduce using rule 77 (variable -> VAR_CLASS .)
    RANGE_INCLUSIVE reduce using rule 77 (variable -> VAR_CLASS .)
    RANGE_EXCLUSIVE reduce using rule 77 (variable -> VAR_CLASS .)
    PLUS            reduce using rule 77 (variable -> VAR_CLASS .)
    MINUS           reduce using rule 77 (variable -> VAR_CLASS .)
    TIMES           reduce using rule 77 (variable -> VAR_CLASS .)
    DIVIDE          reduce using rule 77 (variable -> VAR_CLASS .)
    MOD             reduce using rule 77 (variable -> VAR_CLASS .)
    POW             reduce using rule 77 (variable -> VAR_CLASS .)
    OR_SYMBOL       reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_XOR_OP   reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_AND_OP   reduce using rule 77 (variable -> VAR_CLASS .)
    COMBINED_COMPARISON_OP reduce using rule 77 (variable -> VAR_CLASS .)
    GREATERTHAN     reduce using rule 77 (variable -> VAR_CLASS .)
    GREATERTHANEQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    LESSERTHAN      reduce using rule 77 (variable -> VAR_CLASS .)
    LESSERTHANEQUAL reduce using rule 77 (variable -> VAR_CLASS .)
    EQUAL           reduce using rule 77 (variable -> VAR_CLASS .)
    CASE_EQUALITY   reduce using rule 77 (variable -> VAR_CLASS .)
    NOTEQUAL        reduce using rule 77 (variable -> VAR_CLASS .)
    MATCHED_STRINGS_OP reduce using rule 77 (variable -> VAR_CLASS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 77 (variable -> VAR_CLASS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 77 (variable -> VAR_CLASS .)
    AND             reduce using rule 77 (variable -> VAR_CLASS .)
    OR              reduce using rule 77 (variable -> VAR_CLASS .)
    IF              reduce using rule 77 (variable -> VAR_CLASS .)
    WHILE           reduce using rule 77 (variable -> VAR_CLASS .)
    UNLESS          reduce using rule 77 (variable -> VAR_CLASS .)
    UNTIL           reduce using rule 77 (variable -> VAR_CLASS .)
    TERM            reduce using rule 77 (variable -> VAR_CLASS .)
    NUMBER          reduce using rule 77 (variable -> VAR_CLASS .)
    LPAREN          reduce using rule 77 (variable -> VAR_CLASS .)
    $end            reduce using rule 77 (variable -> VAR_CLASS .)
    RBRACKET        reduce using rule 77 (variable -> VAR_CLASS .)
    THEN            reduce using rule 77 (variable -> VAR_CLASS .)
    DO              reduce using rule 77 (variable -> VAR_CLASS .)
    RESCUE          reduce using rule 77 (variable -> VAR_CLASS .)
    HASH_ROCKET     reduce using rule 77 (variable -> VAR_CLASS .)
    RKEY            reduce using rule 77 (variable -> VAR_CLASS .)
    RPAREN          reduce using rule 77 (variable -> VAR_CLASS .)
    WHEN            reduce using rule 77 (variable -> VAR_CLASS .)
    LKEY            reduce using rule 77 (variable -> VAR_CLASS .)
    END             reduce using rule 77 (variable -> VAR_CLASS .)
    ELSIF           reduce using rule 77 (variable -> VAR_CLASS .)
    ELSE            reduce using rule 77 (variable -> VAR_CLASS .)
    ENSURE          reduce using rule 77 (variable -> VAR_CLASS .)
    NOT_SYMBOL      reduce using rule 77 (variable -> VAR_CLASS .)
    COMPLEMENT_OP   reduce using rule 77 (variable -> VAR_CLASS .)
    DEFINED_OP      reduce using rule 77 (variable -> VAR_CLASS .)
    RETURN          reduce using rule 77 (variable -> VAR_CLASS .)
    YIELD           reduce using rule 77 (variable -> VAR_CLASS .)
    CASE            reduce using rule 77 (variable -> VAR_CLASS .)
    FOR             reduce using rule 77 (variable -> VAR_CLASS .)
    BEGIN           reduce using rule 77 (variable -> VAR_CLASS .)
    CLASS           reduce using rule 77 (variable -> VAR_CLASS .)
    MODULE          reduce using rule 77 (variable -> VAR_CLASS .)
    DEF             reduce using rule 77 (variable -> VAR_CLASS .)
    PUTS            reduce using rule 77 (variable -> VAR_CLASS .)
    VAR_GLOBAL      reduce using rule 77 (variable -> VAR_CLASS .)
    VAR_LOCAL       reduce using rule 77 (variable -> VAR_CLASS .)
    VAR_INSTANCE    reduce using rule 77 (variable -> VAR_CLASS .)
    VAR_CLASS       reduce using rule 77 (variable -> VAR_CLASS .)
    SYMBOL          reduce using rule 77 (variable -> VAR_CLASS .)
    STRING          reduce using rule 77 (variable -> VAR_CLASS .)
    IDENTIFIER      reduce using rule 77 (variable -> VAR_CLASS .)
    SUPER           reduce using rule 77 (variable -> VAR_CLASS .)
    IN              reduce using rule 77 (variable -> VAR_CLASS .)


state 36

    (79) primary -> literal .

    LBRACKET        reduce using rule 79 (primary -> literal .)
    DOT             reduce using rule 79 (primary -> literal .)
    UNARY_OP        reduce using rule 79 (primary -> literal .)
    RANGE_INCLUSIVE reduce using rule 79 (primary -> literal .)
    RANGE_EXCLUSIVE reduce using rule 79 (primary -> literal .)
    PLUS            reduce using rule 79 (primary -> literal .)
    MINUS           reduce using rule 79 (primary -> literal .)
    TIMES           reduce using rule 79 (primary -> literal .)
    DIVIDE          reduce using rule 79 (primary -> literal .)
    MOD             reduce using rule 79 (primary -> literal .)
    POW             reduce using rule 79 (primary -> literal .)
    OR_SYMBOL       reduce using rule 79 (primary -> literal .)
    BINARY_XOR_OP   reduce using rule 79 (primary -> literal .)
    BINARY_AND_OP   reduce using rule 79 (primary -> literal .)
    COMBINED_COMPARISON_OP reduce using rule 79 (primary -> literal .)
    GREATERTHAN     reduce using rule 79 (primary -> literal .)
    GREATERTHANEQUAL reduce using rule 79 (primary -> literal .)
    LESSERTHAN      reduce using rule 79 (primary -> literal .)
    LESSERTHANEQUAL reduce using rule 79 (primary -> literal .)
    EQUAL           reduce using rule 79 (primary -> literal .)
    CASE_EQUALITY   reduce using rule 79 (primary -> literal .)
    NOTEQUAL        reduce using rule 79 (primary -> literal .)
    MATCHED_STRINGS_OP reduce using rule 79 (primary -> literal .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 79 (primary -> literal .)
    BINARY_LEFT_SHIFT_OP reduce using rule 79 (primary -> literal .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 79 (primary -> literal .)
    AND             reduce using rule 79 (primary -> literal .)
    OR              reduce using rule 79 (primary -> literal .)
    IF              reduce using rule 79 (primary -> literal .)
    WHILE           reduce using rule 79 (primary -> literal .)
    UNLESS          reduce using rule 79 (primary -> literal .)
    UNTIL           reduce using rule 79 (primary -> literal .)
    TERM            reduce using rule 79 (primary -> literal .)
    NUMBER          reduce using rule 79 (primary -> literal .)
    LPAREN          reduce using rule 79 (primary -> literal .)
    $end            reduce using rule 79 (primary -> literal .)
    COMMA           reduce using rule 79 (primary -> literal .)
    RBRACKET        reduce using rule 79 (primary -> literal .)
    THEN            reduce using rule 79 (primary -> literal .)
    DO              reduce using rule 79 (primary -> literal .)
    RESCUE          reduce using rule 79 (primary -> literal .)
    HASH_ROCKET     reduce using rule 79 (primary -> literal .)
    RKEY            reduce using rule 79 (primary -> literal .)
    RPAREN          reduce using rule 79 (primary -> literal .)
    WHEN            reduce using rule 79 (primary -> literal .)
    LKEY            reduce using rule 79 (primary -> literal .)
    END             reduce using rule 79 (primary -> literal .)
    ELSIF           reduce using rule 79 (primary -> literal .)
    ELSE            reduce using rule 79 (primary -> literal .)
    ENSURE          reduce using rule 79 (primary -> literal .)
    NOT_SYMBOL      reduce using rule 79 (primary -> literal .)
    COMPLEMENT_OP   reduce using rule 79 (primary -> literal .)
    DEFINED_OP      reduce using rule 79 (primary -> literal .)
    RETURN          reduce using rule 79 (primary -> literal .)
    YIELD           reduce using rule 79 (primary -> literal .)
    CASE            reduce using rule 79 (primary -> literal .)
    FOR             reduce using rule 79 (primary -> literal .)
    BEGIN           reduce using rule 79 (primary -> literal .)
    CLASS           reduce using rule 79 (primary -> literal .)
    MODULE          reduce using rule 79 (primary -> literal .)
    DEF             reduce using rule 79 (primary -> literal .)
    PUTS            reduce using rule 79 (primary -> literal .)
    VAR_GLOBAL      reduce using rule 79 (primary -> literal .)
    VAR_LOCAL       reduce using rule 79 (primary -> literal .)
    VAR_INSTANCE    reduce using rule 79 (primary -> literal .)
    VAR_CLASS       reduce using rule 79 (primary -> literal .)
    SYMBOL          reduce using rule 79 (primary -> literal .)
    STRING          reduce using rule 79 (primary -> literal .)
    IDENTIFIER      reduce using rule 79 (primary -> literal .)
    SUPER           reduce using rule 79 (primary -> literal .)


state 37

    (99) primary -> DEFINED_OP . LPAREN arg LPAREN
    (72) arg -> DEFINED_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 200
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 201
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 38

    (111) primary -> CASE . compstmt when END
    (112) primary -> CASE . compstmt when ELSE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 202
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 39

    (113) primary -> FOR . block_var IN expr do compstmt END
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 45
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    block_var                      shift and go to state 203
    lhs                            shift and go to state 204
    mlhs                           shift and go to state 72
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 40

    (118) primary -> CLASS . IDENTIFIER compstmt END
    (119) primary -> CLASS . IDENTIFIER LESSERTHAN IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 207


state 41

    (120) primary -> MODULE . IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 208


state 42

    (121) primary -> DEF . fname argdecl compstmt END
    (122) primary -> DEF . singleton DOT fname argdecl compstmt END
    (123) primary -> DEF . singleton UNARY_OP fname argdecl compstmt END
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL
    (169) singleton -> . variable
    (170) singleton -> . LPAREN expr RPAREN
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110
    LPAREN          shift and go to state 212
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    fname                          shift and go to state 209
    singleton                      shift and go to state 210
    variable                       shift and go to state 211

state 43

    (124) primary -> PUTS . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 213
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 44

    (154) mlhs -> mlhs_item . COMMA mlhs_item TIMES
    (155) mlhs -> mlhs_item . COMMA mlhs_item lhs
    (156) mlhs -> mlhs_item . COMMA mult_mlhs_item TIMES
    (157) mlhs -> mlhs_item . COMMA mult_mlhs_item lhs

    COMMA           shift and go to state 214


state 45

    (158) mlhs -> TIMES . lhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 215
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 46

    (51) arg -> PLUS . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 216
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 47

    (52) arg -> MINUS . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 217
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 48

    (67) arg -> COMPLEMENT_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 218
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 49

    (190) literal -> NUMBER .

    LBRACKET        reduce using rule 190 (literal -> NUMBER .)
    DOT             reduce using rule 190 (literal -> NUMBER .)
    UNARY_OP        reduce using rule 190 (literal -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 190 (literal -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 190 (literal -> NUMBER .)
    PLUS            reduce using rule 190 (literal -> NUMBER .)
    MINUS           reduce using rule 190 (literal -> NUMBER .)
    TIMES           reduce using rule 190 (literal -> NUMBER .)
    DIVIDE          reduce using rule 190 (literal -> NUMBER .)
    MOD             reduce using rule 190 (literal -> NUMBER .)
    POW             reduce using rule 190 (literal -> NUMBER .)
    OR_SYMBOL       reduce using rule 190 (literal -> NUMBER .)
    BINARY_XOR_OP   reduce using rule 190 (literal -> NUMBER .)
    BINARY_AND_OP   reduce using rule 190 (literal -> NUMBER .)
    COMBINED_COMPARISON_OP reduce using rule 190 (literal -> NUMBER .)
    GREATERTHAN     reduce using rule 190 (literal -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 190 (literal -> NUMBER .)
    LESSERTHAN      reduce using rule 190 (literal -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 190 (literal -> NUMBER .)
    EQUAL           reduce using rule 190 (literal -> NUMBER .)
    CASE_EQUALITY   reduce using rule 190 (literal -> NUMBER .)
    NOTEQUAL        reduce using rule 190 (literal -> NUMBER .)
    MATCHED_STRINGS_OP reduce using rule 190 (literal -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 190 (literal -> NUMBER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 190 (literal -> NUMBER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 190 (literal -> NUMBER .)
    AND             reduce using rule 190 (literal -> NUMBER .)
    OR              reduce using rule 190 (literal -> NUMBER .)
    IF              reduce using rule 190 (literal -> NUMBER .)
    WHILE           reduce using rule 190 (literal -> NUMBER .)
    UNLESS          reduce using rule 190 (literal -> NUMBER .)
    UNTIL           reduce using rule 190 (literal -> NUMBER .)
    TERM            reduce using rule 190 (literal -> NUMBER .)
    NUMBER          reduce using rule 190 (literal -> NUMBER .)
    LPAREN          reduce using rule 190 (literal -> NUMBER .)
    $end            reduce using rule 190 (literal -> NUMBER .)
    COMMA           reduce using rule 190 (literal -> NUMBER .)
    RBRACKET        reduce using rule 190 (literal -> NUMBER .)
    THEN            reduce using rule 190 (literal -> NUMBER .)
    DO              reduce using rule 190 (literal -> NUMBER .)
    RESCUE          reduce using rule 190 (literal -> NUMBER .)
    HASH_ROCKET     reduce using rule 190 (literal -> NUMBER .)
    RKEY            reduce using rule 190 (literal -> NUMBER .)
    RPAREN          reduce using rule 190 (literal -> NUMBER .)
    WHEN            reduce using rule 190 (literal -> NUMBER .)
    LKEY            reduce using rule 190 (literal -> NUMBER .)
    END             reduce using rule 190 (literal -> NUMBER .)
    ELSIF           reduce using rule 190 (literal -> NUMBER .)
    ELSE            reduce using rule 190 (literal -> NUMBER .)
    ENSURE          reduce using rule 190 (literal -> NUMBER .)
    NOT_SYMBOL      reduce using rule 190 (literal -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 190 (literal -> NUMBER .)
    DEFINED_OP      reduce using rule 190 (literal -> NUMBER .)
    RETURN          reduce using rule 190 (literal -> NUMBER .)
    YIELD           reduce using rule 190 (literal -> NUMBER .)
    CASE            reduce using rule 190 (literal -> NUMBER .)
    FOR             reduce using rule 190 (literal -> NUMBER .)
    BEGIN           reduce using rule 190 (literal -> NUMBER .)
    CLASS           reduce using rule 190 (literal -> NUMBER .)
    MODULE          reduce using rule 190 (literal -> NUMBER .)
    DEF             reduce using rule 190 (literal -> NUMBER .)
    PUTS            reduce using rule 190 (literal -> NUMBER .)
    VAR_GLOBAL      reduce using rule 190 (literal -> NUMBER .)
    VAR_LOCAL       reduce using rule 190 (literal -> NUMBER .)
    VAR_INSTANCE    reduce using rule 190 (literal -> NUMBER .)
    VAR_CLASS       reduce using rule 190 (literal -> NUMBER .)
    SYMBOL          reduce using rule 190 (literal -> NUMBER .)
    STRING          reduce using rule 190 (literal -> NUMBER .)
    IDENTIFIER      reduce using rule 190 (literal -> NUMBER .)
    SUPER           reduce using rule 190 (literal -> NUMBER .)


state 50

    (191) literal -> SYMBOL .

    LBRACKET        reduce using rule 191 (literal -> SYMBOL .)
    DOT             reduce using rule 191 (literal -> SYMBOL .)
    UNARY_OP        reduce using rule 191 (literal -> SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 191 (literal -> SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 191 (literal -> SYMBOL .)
    PLUS            reduce using rule 191 (literal -> SYMBOL .)
    MINUS           reduce using rule 191 (literal -> SYMBOL .)
    TIMES           reduce using rule 191 (literal -> SYMBOL .)
    DIVIDE          reduce using rule 191 (literal -> SYMBOL .)
    MOD             reduce using rule 191 (literal -> SYMBOL .)
    POW             reduce using rule 191 (literal -> SYMBOL .)
    OR_SYMBOL       reduce using rule 191 (literal -> SYMBOL .)
    BINARY_XOR_OP   reduce using rule 191 (literal -> SYMBOL .)
    BINARY_AND_OP   reduce using rule 191 (literal -> SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 191 (literal -> SYMBOL .)
    GREATERTHAN     reduce using rule 191 (literal -> SYMBOL .)
    GREATERTHANEQUAL reduce using rule 191 (literal -> SYMBOL .)
    LESSERTHAN      reduce using rule 191 (literal -> SYMBOL .)
    LESSERTHANEQUAL reduce using rule 191 (literal -> SYMBOL .)
    EQUAL           reduce using rule 191 (literal -> SYMBOL .)
    CASE_EQUALITY   reduce using rule 191 (literal -> SYMBOL .)
    NOTEQUAL        reduce using rule 191 (literal -> SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 191 (literal -> SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 191 (literal -> SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 191 (literal -> SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 191 (literal -> SYMBOL .)
    AND             reduce using rule 191 (literal -> SYMBOL .)
    OR              reduce using rule 191 (literal -> SYMBOL .)
    IF              reduce using rule 191 (literal -> SYMBOL .)
    WHILE           reduce using rule 191 (literal -> SYMBOL .)
    UNLESS          reduce using rule 191 (literal -> SYMBOL .)
    UNTIL           reduce using rule 191 (literal -> SYMBOL .)
    TERM            reduce using rule 191 (literal -> SYMBOL .)
    NUMBER          reduce using rule 191 (literal -> SYMBOL .)
    LPAREN          reduce using rule 191 (literal -> SYMBOL .)
    $end            reduce using rule 191 (literal -> SYMBOL .)
    COMMA           reduce using rule 191 (literal -> SYMBOL .)
    RBRACKET        reduce using rule 191 (literal -> SYMBOL .)
    THEN            reduce using rule 191 (literal -> SYMBOL .)
    DO              reduce using rule 191 (literal -> SYMBOL .)
    RESCUE          reduce using rule 191 (literal -> SYMBOL .)
    HASH_ROCKET     reduce using rule 191 (literal -> SYMBOL .)
    RKEY            reduce using rule 191 (literal -> SYMBOL .)
    RPAREN          reduce using rule 191 (literal -> SYMBOL .)
    WHEN            reduce using rule 191 (literal -> SYMBOL .)
    LKEY            reduce using rule 191 (literal -> SYMBOL .)
    END             reduce using rule 191 (literal -> SYMBOL .)
    ELSIF           reduce using rule 191 (literal -> SYMBOL .)
    ELSE            reduce using rule 191 (literal -> SYMBOL .)
    ENSURE          reduce using rule 191 (literal -> SYMBOL .)
    NOT_SYMBOL      reduce using rule 191 (literal -> SYMBOL .)
    COMPLEMENT_OP   reduce using rule 191 (literal -> SYMBOL .)
    DEFINED_OP      reduce using rule 191 (literal -> SYMBOL .)
    RETURN          reduce using rule 191 (literal -> SYMBOL .)
    YIELD           reduce using rule 191 (literal -> SYMBOL .)
    CASE            reduce using rule 191 (literal -> SYMBOL .)
    FOR             reduce using rule 191 (literal -> SYMBOL .)
    BEGIN           reduce using rule 191 (literal -> SYMBOL .)
    CLASS           reduce using rule 191 (literal -> SYMBOL .)
    MODULE          reduce using rule 191 (literal -> SYMBOL .)
    DEF             reduce using rule 191 (literal -> SYMBOL .)
    PUTS            reduce using rule 191 (literal -> SYMBOL .)
    VAR_GLOBAL      reduce using rule 191 (literal -> SYMBOL .)
    VAR_LOCAL       reduce using rule 191 (literal -> SYMBOL .)
    VAR_INSTANCE    reduce using rule 191 (literal -> SYMBOL .)
    VAR_CLASS       reduce using rule 191 (literal -> SYMBOL .)
    SYMBOL          reduce using rule 191 (literal -> SYMBOL .)
    STRING          reduce using rule 191 (literal -> SYMBOL .)
    IDENTIFIER      reduce using rule 191 (literal -> SYMBOL .)
    SUPER           reduce using rule 191 (literal -> SYMBOL .)


state 51

    (192) literal -> STRING .

    LBRACKET        reduce using rule 192 (literal -> STRING .)
    DOT             reduce using rule 192 (literal -> STRING .)
    UNARY_OP        reduce using rule 192 (literal -> STRING .)
    RANGE_INCLUSIVE reduce using rule 192 (literal -> STRING .)
    RANGE_EXCLUSIVE reduce using rule 192 (literal -> STRING .)
    PLUS            reduce using rule 192 (literal -> STRING .)
    MINUS           reduce using rule 192 (literal -> STRING .)
    TIMES           reduce using rule 192 (literal -> STRING .)
    DIVIDE          reduce using rule 192 (literal -> STRING .)
    MOD             reduce using rule 192 (literal -> STRING .)
    POW             reduce using rule 192 (literal -> STRING .)
    OR_SYMBOL       reduce using rule 192 (literal -> STRING .)
    BINARY_XOR_OP   reduce using rule 192 (literal -> STRING .)
    BINARY_AND_OP   reduce using rule 192 (literal -> STRING .)
    COMBINED_COMPARISON_OP reduce using rule 192 (literal -> STRING .)
    GREATERTHAN     reduce using rule 192 (literal -> STRING .)
    GREATERTHANEQUAL reduce using rule 192 (literal -> STRING .)
    LESSERTHAN      reduce using rule 192 (literal -> STRING .)
    LESSERTHANEQUAL reduce using rule 192 (literal -> STRING .)
    EQUAL           reduce using rule 192 (literal -> STRING .)
    CASE_EQUALITY   reduce using rule 192 (literal -> STRING .)
    NOTEQUAL        reduce using rule 192 (literal -> STRING .)
    MATCHED_STRINGS_OP reduce using rule 192 (literal -> STRING .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 192 (literal -> STRING .)
    BINARY_LEFT_SHIFT_OP reduce using rule 192 (literal -> STRING .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 192 (literal -> STRING .)
    AND             reduce using rule 192 (literal -> STRING .)
    OR              reduce using rule 192 (literal -> STRING .)
    IF              reduce using rule 192 (literal -> STRING .)
    WHILE           reduce using rule 192 (literal -> STRING .)
    UNLESS          reduce using rule 192 (literal -> STRING .)
    UNTIL           reduce using rule 192 (literal -> STRING .)
    TERM            reduce using rule 192 (literal -> STRING .)
    NUMBER          reduce using rule 192 (literal -> STRING .)
    LPAREN          reduce using rule 192 (literal -> STRING .)
    $end            reduce using rule 192 (literal -> STRING .)
    COMMA           reduce using rule 192 (literal -> STRING .)
    RBRACKET        reduce using rule 192 (literal -> STRING .)
    THEN            reduce using rule 192 (literal -> STRING .)
    DO              reduce using rule 192 (literal -> STRING .)
    RESCUE          reduce using rule 192 (literal -> STRING .)
    HASH_ROCKET     reduce using rule 192 (literal -> STRING .)
    RKEY            reduce using rule 192 (literal -> STRING .)
    RPAREN          reduce using rule 192 (literal -> STRING .)
    WHEN            reduce using rule 192 (literal -> STRING .)
    LKEY            reduce using rule 192 (literal -> STRING .)
    END             reduce using rule 192 (literal -> STRING .)
    ELSIF           reduce using rule 192 (literal -> STRING .)
    ELSE            reduce using rule 192 (literal -> STRING .)
    ENSURE          reduce using rule 192 (literal -> STRING .)
    NOT_SYMBOL      reduce using rule 192 (literal -> STRING .)
    COMPLEMENT_OP   reduce using rule 192 (literal -> STRING .)
    DEFINED_OP      reduce using rule 192 (literal -> STRING .)
    RETURN          reduce using rule 192 (literal -> STRING .)
    YIELD           reduce using rule 192 (literal -> STRING .)
    CASE            reduce using rule 192 (literal -> STRING .)
    FOR             reduce using rule 192 (literal -> STRING .)
    BEGIN           reduce using rule 192 (literal -> STRING .)
    CLASS           reduce using rule 192 (literal -> STRING .)
    MODULE          reduce using rule 192 (literal -> STRING .)
    DEF             reduce using rule 192 (literal -> STRING .)
    PUTS            reduce using rule 192 (literal -> STRING .)
    VAR_GLOBAL      reduce using rule 192 (literal -> STRING .)
    VAR_LOCAL       reduce using rule 192 (literal -> STRING .)
    VAR_INSTANCE    reduce using rule 192 (literal -> STRING .)
    VAR_CLASS       reduce using rule 192 (literal -> STRING .)
    SYMBOL          reduce using rule 192 (literal -> STRING .)
    STRING          reduce using rule 192 (literal -> STRING .)
    IDENTIFIER      reduce using rule 192 (literal -> STRING .)
    SUPER           reduce using rule 192 (literal -> STRING .)


state 52

    (4) compstmt -> stmt term .
    (5) compstmt -> stmt term . expr term
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    $end            reduce using rule 4 (compstmt -> stmt term .)
    RESCUE          reduce using rule 4 (compstmt -> stmt term .)
    RPAREN          reduce using rule 4 (compstmt -> stmt term .)
    WHEN            reduce using rule 4 (compstmt -> stmt term .)
    DOT             reduce using rule 4 (compstmt -> stmt term .)
    RANGE_INCLUSIVE reduce using rule 4 (compstmt -> stmt term .)
    RANGE_EXCLUSIVE reduce using rule 4 (compstmt -> stmt term .)
    MOD             reduce using rule 4 (compstmt -> stmt term .)
    POW             reduce using rule 4 (compstmt -> stmt term .)
    OR_SYMBOL       reduce using rule 4 (compstmt -> stmt term .)
    BINARY_XOR_OP   reduce using rule 4 (compstmt -> stmt term .)
    BINARY_AND_OP   reduce using rule 4 (compstmt -> stmt term .)
    COMBINED_COMPARISON_OP reduce using rule 4 (compstmt -> stmt term .)
    GREATERTHAN     reduce using rule 4 (compstmt -> stmt term .)
    GREATERTHANEQUAL reduce using rule 4 (compstmt -> stmt term .)
    LESSERTHAN      reduce using rule 4 (compstmt -> stmt term .)
    LESSERTHANEQUAL reduce using rule 4 (compstmt -> stmt term .)
    EQUAL           reduce using rule 4 (compstmt -> stmt term .)
    CASE_EQUALITY   reduce using rule 4 (compstmt -> stmt term .)
    NOTEQUAL        reduce using rule 4 (compstmt -> stmt term .)
    MATCHED_STRINGS_OP reduce using rule 4 (compstmt -> stmt term .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 4 (compstmt -> stmt term .)
    BINARY_LEFT_SHIFT_OP reduce using rule 4 (compstmt -> stmt term .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 4 (compstmt -> stmt term .)
    AND             reduce using rule 4 (compstmt -> stmt term .)
    OR              reduce using rule 4 (compstmt -> stmt term .)
    TERM            reduce using rule 4 (compstmt -> stmt term .)
    COMMA           reduce using rule 4 (compstmt -> stmt term .)
    RBRACKET        reduce using rule 4 (compstmt -> stmt term .)
    THEN            reduce using rule 4 (compstmt -> stmt term .)
    DO              reduce using rule 4 (compstmt -> stmt term .)
    HASH_ROCKET     reduce using rule 4 (compstmt -> stmt term .)
    RKEY            reduce using rule 4 (compstmt -> stmt term .)
    END             reduce using rule 4 (compstmt -> stmt term .)
    ELSIF           reduce using rule 4 (compstmt -> stmt term .)
    ELSE            reduce using rule 4 (compstmt -> stmt term .)
    ENSURE          reduce using rule 4 (compstmt -> stmt term .)
    TIMES           shift and go to state 220
    DIVIDE          shift and go to state 221
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LBRACKET        [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! UNARY_OP        [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! PLUS            [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! MINUS           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! TIMES           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! DIVIDE          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! IF              [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! WHILE           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! UNLESS          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! UNTIL           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! NUMBER          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! LPAREN          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! LKEY            [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! NOT_SYMBOL      [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! COMPLEMENT_OP   [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! DEFINED_OP      [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! RETURN          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! YIELD           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! CASE            [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! FOR             [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! BEGIN           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! CLASS           [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! MODULE          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! DEF             [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! PUTS            [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! VAR_GLOBAL      [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! VAR_LOCAL       [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! VAR_INSTANCE    [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! VAR_CLASS       [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! SYMBOL          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! STRING          [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! IDENTIFIER      [ reduce using rule 4 (compstmt -> stmt term .) ]
  ! SUPER           [ reduce using rule 4 (compstmt -> stmt term .) ]

    expr                           shift and go to state 219
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 53

    (11) stmt -> stmt IF . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 222
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 54

    (12) stmt -> stmt WHILE . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 223
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 55

    (13) stmt -> stmt UNLESS . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 224
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 56

    (14) stmt -> stmt UNTIL . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 225
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 57

    (142) term -> TERM .

    TIMES           reduce using rule 142 (term -> TERM .)
    DIVIDE          reduce using rule 142 (term -> TERM .)
    RETURN          reduce using rule 142 (term -> TERM .)
    YIELD           reduce using rule 142 (term -> TERM .)
    NOT             reduce using rule 142 (term -> TERM .)
    NOT_SYMBOL      reduce using rule 142 (term -> TERM .)
    SUPER           reduce using rule 142 (term -> TERM .)
    PLUS            reduce using rule 142 (term -> TERM .)
    MINUS           reduce using rule 142 (term -> TERM .)
    COMPLEMENT_OP   reduce using rule 142 (term -> TERM .)
    DEFINED_OP      reduce using rule 142 (term -> TERM .)
    LPAREN          reduce using rule 142 (term -> TERM .)
    IDENTIFIER      reduce using rule 142 (term -> TERM .)
    UNARY_OP        reduce using rule 142 (term -> TERM .)
    LBRACKET        reduce using rule 142 (term -> TERM .)
    LKEY            reduce using rule 142 (term -> TERM .)
    IF              reduce using rule 142 (term -> TERM .)
    UNLESS          reduce using rule 142 (term -> TERM .)
    WHILE           reduce using rule 142 (term -> TERM .)
    UNTIL           reduce using rule 142 (term -> TERM .)
    CASE            reduce using rule 142 (term -> TERM .)
    FOR             reduce using rule 142 (term -> TERM .)
    BEGIN           reduce using rule 142 (term -> TERM .)
    CLASS           reduce using rule 142 (term -> TERM .)
    MODULE          reduce using rule 142 (term -> TERM .)
    DEF             reduce using rule 142 (term -> TERM .)
    PUTS            reduce using rule 142 (term -> TERM .)
    NUMBER          reduce using rule 142 (term -> TERM .)
    SYMBOL          reduce using rule 142 (term -> TERM .)
    STRING          reduce using rule 142 (term -> TERM .)
    VAR_GLOBAL      reduce using rule 142 (term -> TERM .)
    VAR_LOCAL       reduce using rule 142 (term -> TERM .)
    VAR_INSTANCE    reduce using rule 142 (term -> TERM .)
    VAR_CLASS       reduce using rule 142 (term -> TERM .)
    $end            reduce using rule 142 (term -> TERM .)
    RESCUE          reduce using rule 142 (term -> TERM .)
    RPAREN          reduce using rule 142 (term -> TERM .)
    WHEN            reduce using rule 142 (term -> TERM .)
    DOT             reduce using rule 142 (term -> TERM .)
    RANGE_INCLUSIVE reduce using rule 142 (term -> TERM .)
    RANGE_EXCLUSIVE reduce using rule 142 (term -> TERM .)
    MOD             reduce using rule 142 (term -> TERM .)
    POW             reduce using rule 142 (term -> TERM .)
    OR_SYMBOL       reduce using rule 142 (term -> TERM .)
    BINARY_XOR_OP   reduce using rule 142 (term -> TERM .)
    BINARY_AND_OP   reduce using rule 142 (term -> TERM .)
    COMBINED_COMPARISON_OP reduce using rule 142 (term -> TERM .)
    GREATERTHAN     reduce using rule 142 (term -> TERM .)
    GREATERTHANEQUAL reduce using rule 142 (term -> TERM .)
    LESSERTHAN      reduce using rule 142 (term -> TERM .)
    LESSERTHANEQUAL reduce using rule 142 (term -> TERM .)
    EQUAL           reduce using rule 142 (term -> TERM .)
    CASE_EQUALITY   reduce using rule 142 (term -> TERM .)
    NOTEQUAL        reduce using rule 142 (term -> TERM .)
    MATCHED_STRINGS_OP reduce using rule 142 (term -> TERM .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 142 (term -> TERM .)
    BINARY_LEFT_SHIFT_OP reduce using rule 142 (term -> TERM .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 142 (term -> TERM .)
    AND             reduce using rule 142 (term -> TERM .)
    OR              reduce using rule 142 (term -> TERM .)
    TERM            reduce using rule 142 (term -> TERM .)
    COMMA           reduce using rule 142 (term -> TERM .)
    RBRACKET        reduce using rule 142 (term -> TERM .)
    THEN            reduce using rule 142 (term -> TERM .)
    DO              reduce using rule 142 (term -> TERM .)
    HASH_ROCKET     reduce using rule 142 (term -> TERM .)
    RKEY            reduce using rule 142 (term -> TERM .)
    END             reduce using rule 142 (term -> TERM .)
    ELSIF           reduce using rule 142 (term -> TERM .)
    ELSE            reduce using rule 142 (term -> TERM .)
    ENSURE          reduce using rule 142 (term -> TERM .)
    UNDEF           reduce using rule 142 (term -> TERM .)
    ALIAS           reduce using rule 142 (term -> TERM .)


state 58

    (241) term -> factor .

    TIMES           reduce using rule 241 (term -> factor .)
    DIVIDE          reduce using rule 241 (term -> factor .)
    RETURN          reduce using rule 241 (term -> factor .)
    YIELD           reduce using rule 241 (term -> factor .)
    NOT             reduce using rule 241 (term -> factor .)
    NOT_SYMBOL      reduce using rule 241 (term -> factor .)
    SUPER           reduce using rule 241 (term -> factor .)
    PLUS            reduce using rule 241 (term -> factor .)
    MINUS           reduce using rule 241 (term -> factor .)
    COMPLEMENT_OP   reduce using rule 241 (term -> factor .)
    DEFINED_OP      reduce using rule 241 (term -> factor .)
    LPAREN          reduce using rule 241 (term -> factor .)
    IDENTIFIER      reduce using rule 241 (term -> factor .)
    UNARY_OP        reduce using rule 241 (term -> factor .)
    LBRACKET        reduce using rule 241 (term -> factor .)
    LKEY            reduce using rule 241 (term -> factor .)
    IF              reduce using rule 241 (term -> factor .)
    UNLESS          reduce using rule 241 (term -> factor .)
    WHILE           reduce using rule 241 (term -> factor .)
    UNTIL           reduce using rule 241 (term -> factor .)
    CASE            reduce using rule 241 (term -> factor .)
    FOR             reduce using rule 241 (term -> factor .)
    BEGIN           reduce using rule 241 (term -> factor .)
    CLASS           reduce using rule 241 (term -> factor .)
    MODULE          reduce using rule 241 (term -> factor .)
    DEF             reduce using rule 241 (term -> factor .)
    PUTS            reduce using rule 241 (term -> factor .)
    NUMBER          reduce using rule 241 (term -> factor .)
    SYMBOL          reduce using rule 241 (term -> factor .)
    STRING          reduce using rule 241 (term -> factor .)
    VAR_GLOBAL      reduce using rule 241 (term -> factor .)
    VAR_LOCAL       reduce using rule 241 (term -> factor .)
    VAR_INSTANCE    reduce using rule 241 (term -> factor .)
    VAR_CLASS       reduce using rule 241 (term -> factor .)
    $end            reduce using rule 241 (term -> factor .)
    RESCUE          reduce using rule 241 (term -> factor .)
    RPAREN          reduce using rule 241 (term -> factor .)
    WHEN            reduce using rule 241 (term -> factor .)
    DOT             reduce using rule 241 (term -> factor .)
    RANGE_INCLUSIVE reduce using rule 241 (term -> factor .)
    RANGE_EXCLUSIVE reduce using rule 241 (term -> factor .)
    MOD             reduce using rule 241 (term -> factor .)
    POW             reduce using rule 241 (term -> factor .)
    OR_SYMBOL       reduce using rule 241 (term -> factor .)
    BINARY_XOR_OP   reduce using rule 241 (term -> factor .)
    BINARY_AND_OP   reduce using rule 241 (term -> factor .)
    COMBINED_COMPARISON_OP reduce using rule 241 (term -> factor .)
    GREATERTHAN     reduce using rule 241 (term -> factor .)
    GREATERTHANEQUAL reduce using rule 241 (term -> factor .)
    LESSERTHAN      reduce using rule 241 (term -> factor .)
    LESSERTHANEQUAL reduce using rule 241 (term -> factor .)
    EQUAL           reduce using rule 241 (term -> factor .)
    CASE_EQUALITY   reduce using rule 241 (term -> factor .)
    NOTEQUAL        reduce using rule 241 (term -> factor .)
    MATCHED_STRINGS_OP reduce using rule 241 (term -> factor .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 241 (term -> factor .)
    BINARY_LEFT_SHIFT_OP reduce using rule 241 (term -> factor .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 241 (term -> factor .)
    AND             reduce using rule 241 (term -> factor .)
    OR              reduce using rule 241 (term -> factor .)
    TERM            reduce using rule 241 (term -> factor .)
    COMMA           reduce using rule 241 (term -> factor .)
    RBRACKET        reduce using rule 241 (term -> factor .)
    THEN            reduce using rule 241 (term -> factor .)
    DO              reduce using rule 241 (term -> factor .)
    HASH_ROCKET     reduce using rule 241 (term -> factor .)
    RKEY            reduce using rule 241 (term -> factor .)
    END             reduce using rule 241 (term -> factor .)
    ELSIF           reduce using rule 241 (term -> factor .)
    ELSE            reduce using rule 241 (term -> factor .)
    ENSURE          reduce using rule 241 (term -> factor .)
    UNDEF           reduce using rule 241 (term -> factor .)
    ALIAS           reduce using rule 241 (term -> factor .)


state 59

    (242) factor -> NUMBER .

    TIMES           reduce using rule 242 (factor -> NUMBER .)
    DIVIDE          reduce using rule 242 (factor -> NUMBER .)
    RETURN          reduce using rule 242 (factor -> NUMBER .)
    YIELD           reduce using rule 242 (factor -> NUMBER .)
    NOT             reduce using rule 242 (factor -> NUMBER .)
    NOT_SYMBOL      reduce using rule 242 (factor -> NUMBER .)
    SUPER           reduce using rule 242 (factor -> NUMBER .)
    PLUS            reduce using rule 242 (factor -> NUMBER .)
    MINUS           reduce using rule 242 (factor -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 242 (factor -> NUMBER .)
    DEFINED_OP      reduce using rule 242 (factor -> NUMBER .)
    LPAREN          reduce using rule 242 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 242 (factor -> NUMBER .)
    UNARY_OP        reduce using rule 242 (factor -> NUMBER .)
    LBRACKET        reduce using rule 242 (factor -> NUMBER .)
    LKEY            reduce using rule 242 (factor -> NUMBER .)
    IF              reduce using rule 242 (factor -> NUMBER .)
    UNLESS          reduce using rule 242 (factor -> NUMBER .)
    WHILE           reduce using rule 242 (factor -> NUMBER .)
    UNTIL           reduce using rule 242 (factor -> NUMBER .)
    CASE            reduce using rule 242 (factor -> NUMBER .)
    FOR             reduce using rule 242 (factor -> NUMBER .)
    BEGIN           reduce using rule 242 (factor -> NUMBER .)
    CLASS           reduce using rule 242 (factor -> NUMBER .)
    MODULE          reduce using rule 242 (factor -> NUMBER .)
    DEF             reduce using rule 242 (factor -> NUMBER .)
    PUTS            reduce using rule 242 (factor -> NUMBER .)
    NUMBER          reduce using rule 242 (factor -> NUMBER .)
    SYMBOL          reduce using rule 242 (factor -> NUMBER .)
    STRING          reduce using rule 242 (factor -> NUMBER .)
    VAR_GLOBAL      reduce using rule 242 (factor -> NUMBER .)
    VAR_LOCAL       reduce using rule 242 (factor -> NUMBER .)
    VAR_INSTANCE    reduce using rule 242 (factor -> NUMBER .)
    VAR_CLASS       reduce using rule 242 (factor -> NUMBER .)
    $end            reduce using rule 242 (factor -> NUMBER .)
    RESCUE          reduce using rule 242 (factor -> NUMBER .)
    RPAREN          reduce using rule 242 (factor -> NUMBER .)
    WHEN            reduce using rule 242 (factor -> NUMBER .)
    DOT             reduce using rule 242 (factor -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 242 (factor -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 242 (factor -> NUMBER .)
    MOD             reduce using rule 242 (factor -> NUMBER .)
    POW             reduce using rule 242 (factor -> NUMBER .)
    OR_SYMBOL       reduce using rule 242 (factor -> NUMBER .)
    BINARY_XOR_OP   reduce using rule 242 (factor -> NUMBER .)
    BINARY_AND_OP   reduce using rule 242 (factor -> NUMBER .)
    COMBINED_COMPARISON_OP reduce using rule 242 (factor -> NUMBER .)
    GREATERTHAN     reduce using rule 242 (factor -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 242 (factor -> NUMBER .)
    LESSERTHAN      reduce using rule 242 (factor -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 242 (factor -> NUMBER .)
    EQUAL           reduce using rule 242 (factor -> NUMBER .)
    CASE_EQUALITY   reduce using rule 242 (factor -> NUMBER .)
    NOTEQUAL        reduce using rule 242 (factor -> NUMBER .)
    MATCHED_STRINGS_OP reduce using rule 242 (factor -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 242 (factor -> NUMBER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 242 (factor -> NUMBER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 242 (factor -> NUMBER .)
    AND             reduce using rule 242 (factor -> NUMBER .)
    OR              reduce using rule 242 (factor -> NUMBER .)
    TERM            reduce using rule 242 (factor -> NUMBER .)
    COMMA           reduce using rule 242 (factor -> NUMBER .)
    RBRACKET        reduce using rule 242 (factor -> NUMBER .)
    THEN            reduce using rule 242 (factor -> NUMBER .)
    DO              reduce using rule 242 (factor -> NUMBER .)
    HASH_ROCKET     reduce using rule 242 (factor -> NUMBER .)
    RKEY            reduce using rule 242 (factor -> NUMBER .)
    END             reduce using rule 242 (factor -> NUMBER .)
    ELSIF           reduce using rule 242 (factor -> NUMBER .)
    ELSE            reduce using rule 242 (factor -> NUMBER .)
    ENSURE          reduce using rule 242 (factor -> NUMBER .)
    UNDEF           reduce using rule 242 (factor -> NUMBER .)
    ALIAS           reduce using rule 242 (factor -> NUMBER .)


state 60

    (243) factor -> LPAREN . expression RPAREN
    (236) expression -> . expression PLUS term
    (237) expression -> . expression MINUS term
    (238) expression -> . term
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    expression                     shift and go to state 226
    term                           shift and go to state 227
    factor                         shift and go to state 58

state 61

    (22) expr -> expr AND . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 228
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 62

    (23) expr -> expr OR . expr
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 229
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 63

    (6) stmt -> call do . LBRACKET RBRACKET

    LBRACKET        shift and go to state 230


state 64

    (139) do -> term .
    (141) do -> term . DO
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
    LBRACKET        reduce using rule 139 (do -> term .)
    UNDEF           reduce using rule 139 (do -> term .)
    ALIAS           reduce using rule 139 (do -> term .)
    BEGIN           reduce using rule 139 (do -> term .)
    END             reduce using rule 139 (do -> term .)
    RETURN          reduce using rule 139 (do -> term .)
    YIELD           reduce using rule 139 (do -> term .)
    NOT             reduce using rule 139 (do -> term .)
    NOT_SYMBOL      reduce using rule 139 (do -> term .)
    SUPER           reduce using rule 139 (do -> term .)
    VAR_GLOBAL      reduce using rule 139 (do -> term .)
    VAR_LOCAL       reduce using rule 139 (do -> term .)
    VAR_INSTANCE    reduce using rule 139 (do -> term .)
    VAR_CLASS       reduce using rule 139 (do -> term .)
    LPAREN          reduce using rule 139 (do -> term .)
    UNARY_OP        reduce using rule 139 (do -> term .)
    LKEY            reduce using rule 139 (do -> term .)
    DEFINED_OP      reduce using rule 139 (do -> term .)
    IF              reduce using rule 139 (do -> term .)
    UNLESS          reduce using rule 139 (do -> term .)
    WHILE           reduce using rule 139 (do -> term .)
    UNTIL           reduce using rule 139 (do -> term .)
    CASE            reduce using rule 139 (do -> term .)
    FOR             reduce using rule 139 (do -> term .)
    CLASS           reduce using rule 139 (do -> term .)
    MODULE          reduce using rule 139 (do -> term .)
    DEF             reduce using rule 139 (do -> term .)
    PUTS            reduce using rule 139 (do -> term .)
    PLUS            reduce using rule 139 (do -> term .)
    MINUS           reduce using rule 139 (do -> term .)
    COMPLEMENT_OP   reduce using rule 139 (do -> term .)
    IDENTIFIER      reduce using rule 139 (do -> term .)
    NUMBER          reduce using rule 139 (do -> term .)
    SYMBOL          reduce using rule 139 (do -> term .)
    STRING          reduce using rule 139 (do -> term .)
    DO              shift and go to state 231
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221

  ! TIMES           [ reduce using rule 139 (do -> term .) ]


state 65

    (140) do -> DO .

    LBRACKET        reduce using rule 140 (do -> DO .)
    UNDEF           reduce using rule 140 (do -> DO .)
    ALIAS           reduce using rule 140 (do -> DO .)
    BEGIN           reduce using rule 140 (do -> DO .)
    END             reduce using rule 140 (do -> DO .)
    RETURN          reduce using rule 140 (do -> DO .)
    YIELD           reduce using rule 140 (do -> DO .)
    NOT             reduce using rule 140 (do -> DO .)
    NOT_SYMBOL      reduce using rule 140 (do -> DO .)
    SUPER           reduce using rule 140 (do -> DO .)
    VAR_GLOBAL      reduce using rule 140 (do -> DO .)
    VAR_LOCAL       reduce using rule 140 (do -> DO .)
    VAR_INSTANCE    reduce using rule 140 (do -> DO .)
    VAR_CLASS       reduce using rule 140 (do -> DO .)
    LPAREN          reduce using rule 140 (do -> DO .)
    UNARY_OP        reduce using rule 140 (do -> DO .)
    LKEY            reduce using rule 140 (do -> DO .)
    DEFINED_OP      reduce using rule 140 (do -> DO .)
    IF              reduce using rule 140 (do -> DO .)
    UNLESS          reduce using rule 140 (do -> DO .)
    WHILE           reduce using rule 140 (do -> DO .)
    UNTIL           reduce using rule 140 (do -> DO .)
    CASE            reduce using rule 140 (do -> DO .)
    FOR             reduce using rule 140 (do -> DO .)
    CLASS           reduce using rule 140 (do -> DO .)
    MODULE          reduce using rule 140 (do -> DO .)
    DEF             reduce using rule 140 (do -> DO .)
    PUTS            reduce using rule 140 (do -> DO .)
    TIMES           reduce using rule 140 (do -> DO .)
    PLUS            reduce using rule 140 (do -> DO .)
    MINUS           reduce using rule 140 (do -> DO .)
    COMPLEMENT_OP   reduce using rule 140 (do -> DO .)
    IDENTIFIER      reduce using rule 140 (do -> DO .)
    NUMBER          reduce using rule 140 (do -> DO .)
    SYMBOL          reduce using rule 140 (do -> DO .)
    STRING          reduce using rule 140 (do -> DO .)


state 66

    (85) primary -> LBRACKET . RBRACKET
    (86) primary -> LBRACKET . args RBRACKET
    (87) primary -> LBRACKET . args COMMA RBRACKET
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 68
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    args                           shift and go to state 70
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 67

    (7) stmt -> LBRACKET block_var . RBRACKET

    RBRACKET        shift and go to state 233


state 68

    (85) primary -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    DOT             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    MOD             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    POW             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    AND             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    OR              reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    IF              reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    UNLESS          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    UNTIL           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    TERM            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    $end            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    THEN            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    DO              reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RESCUE          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    LKEY            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    END             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    ENSURE          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    YIELD           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    CASE            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    FOR             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    BEGIN           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    CLASS           reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    DEF             reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    STRING          reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 85 (primary -> LBRACKET RBRACKET .)
    SUPER           reduce using rule 85 (primary -> LBRACKET RBRACKET .)


state 69

    (8) stmt -> LBRACKET OR_SYMBOL . block_var OR_SYMBOL RBRACKET compstmt END
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 45
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    block_var                      shift and go to state 234
    lhs                            shift and go to state 204
    mlhs                           shift and go to state 72
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 70

    (86) primary -> LBRACKET args . RBRACKET
    (87) primary -> LBRACKET args . COMMA RBRACKET

    RBRACKET        shift and go to state 235
    COMMA           shift and go to state 236


state 71

    (152) block_var -> lhs .
    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (160) mlhs_item -> lhs .
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    RBRACKET        reduce using rule 152 (block_var -> lhs .)
    =               shift and go to state 237
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 72

    (153) block_var -> mlhs .

    RBRACKET        reduce using rule 153 (block_var -> mlhs .)
    IN              reduce using rule 153 (block_var -> mlhs .)
    OR_SYMBOL       reduce using rule 153 (block_var -> mlhs .)


state 73

    (162) args -> arg .
    (163) args -> arg . COMMA arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 162 (args -> arg .)
    LBRACKET        reduce using rule 162 (args -> arg .)
    DOT             reduce using rule 162 (args -> arg .)
    UNARY_OP        reduce using rule 162 (args -> arg .)
    IF              reduce using rule 162 (args -> arg .)
    WHILE           reduce using rule 162 (args -> arg .)
    UNLESS          reduce using rule 162 (args -> arg .)
    UNTIL           reduce using rule 162 (args -> arg .)
    TERM            reduce using rule 162 (args -> arg .)
    NUMBER          reduce using rule 162 (args -> arg .)
    LPAREN          reduce using rule 162 (args -> arg .)
    $end            reduce using rule 162 (args -> arg .)
    THEN            reduce using rule 162 (args -> arg .)
    DO              reduce using rule 162 (args -> arg .)
    RESCUE          reduce using rule 162 (args -> arg .)
    HASH_ROCKET     reduce using rule 162 (args -> arg .)
    RKEY            reduce using rule 162 (args -> arg .)
    RPAREN          reduce using rule 162 (args -> arg .)
    WHEN            reduce using rule 162 (args -> arg .)
    LKEY            reduce using rule 162 (args -> arg .)
    END             reduce using rule 162 (args -> arg .)
    ELSIF           reduce using rule 162 (args -> arg .)
    ELSE            reduce using rule 162 (args -> arg .)
    ENSURE          reduce using rule 162 (args -> arg .)
    NOT_SYMBOL      reduce using rule 162 (args -> arg .)
    COMPLEMENT_OP   reduce using rule 162 (args -> arg .)
    DEFINED_OP      reduce using rule 162 (args -> arg .)
    RETURN          reduce using rule 162 (args -> arg .)
    YIELD           reduce using rule 162 (args -> arg .)
    CASE            reduce using rule 162 (args -> arg .)
    FOR             reduce using rule 162 (args -> arg .)
    BEGIN           reduce using rule 162 (args -> arg .)
    CLASS           reduce using rule 162 (args -> arg .)
    MODULE          reduce using rule 162 (args -> arg .)
    DEF             reduce using rule 162 (args -> arg .)
    PUTS            reduce using rule 162 (args -> arg .)
    VAR_GLOBAL      reduce using rule 162 (args -> arg .)
    VAR_LOCAL       reduce using rule 162 (args -> arg .)
    VAR_INSTANCE    reduce using rule 162 (args -> arg .)
    VAR_CLASS       reduce using rule 162 (args -> arg .)
    SYMBOL          reduce using rule 162 (args -> arg .)
    STRING          reduce using rule 162 (args -> arg .)
    IDENTIFIER      reduce using rule 162 (args -> arg .)
    SUPER           reduce using rule 162 (args -> arg .)
    COMMA           shift and go to state 238
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! COMMA           [ reduce using rule 162 (args -> arg .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 162 (args -> arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 162 (args -> arg .) ]
  ! PLUS            [ reduce using rule 162 (args -> arg .) ]
  ! MINUS           [ reduce using rule 162 (args -> arg .) ]
  ! TIMES           [ reduce using rule 162 (args -> arg .) ]
  ! DIVIDE          [ reduce using rule 162 (args -> arg .) ]
  ! MOD             [ reduce using rule 162 (args -> arg .) ]
  ! POW             [ reduce using rule 162 (args -> arg .) ]
  ! OR_SYMBOL       [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 162 (args -> arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 162 (args -> arg .) ]
  ! GREATERTHAN     [ reduce using rule 162 (args -> arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 162 (args -> arg .) ]
  ! LESSERTHAN      [ reduce using rule 162 (args -> arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 162 (args -> arg .) ]
  ! EQUAL           [ reduce using rule 162 (args -> arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 162 (args -> arg .) ]
  ! NOTEQUAL        [ reduce using rule 162 (args -> arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 162 (args -> arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 162 (args -> arg .) ]
  ! AND             [ reduce using rule 162 (args -> arg .) ]
  ! OR              [ reduce using rule 162 (args -> arg .) ]


state 74

    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (73) arg -> primary .
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

    LBRACKET        shift and go to state 149
    DOT             shift and go to state 239
    COMMA           reduce using rule 73 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    RBRACKET        reduce using rule 73 (arg -> primary .)
    UNARY_OP        shift and go to state 240


state 75

    (193) literal -> IDENTIFIER .
    (220) operation -> IDENTIFIER .
    (221) operation -> IDENTIFIER . NOT_SYMBOL
    (222) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LBRACKET resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for COMPLEMENT_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 193 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 193 (literal -> IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    LBRACKET        reduce using rule 193 (literal -> IDENTIFIER .)
    DOT             reduce using rule 193 (literal -> IDENTIFIER .)
    UNARY_OP        reduce using rule 193 (literal -> IDENTIFIER .)
    COMMA           reduce using rule 193 (literal -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 193 (literal -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 193 (literal -> IDENTIFIER .)
    PLUS            reduce using rule 193 (literal -> IDENTIFIER .)
    MINUS           reduce using rule 193 (literal -> IDENTIFIER .)
    TIMES           reduce using rule 193 (literal -> IDENTIFIER .)
    DIVIDE          reduce using rule 193 (literal -> IDENTIFIER .)
    MOD             reduce using rule 193 (literal -> IDENTIFIER .)
    POW             reduce using rule 193 (literal -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 193 (literal -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 193 (literal -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 193 (literal -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 193 (literal -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 193 (literal -> IDENTIFIER .)
    EQUAL           reduce using rule 193 (literal -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 193 (literal -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 193 (literal -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 193 (literal -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 193 (literal -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 193 (literal -> IDENTIFIER .)
    AND             reduce using rule 193 (literal -> IDENTIFIER .)
    OR              reduce using rule 193 (literal -> IDENTIFIER .)
    RBRACKET        reduce using rule 193 (literal -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 193 (literal -> IDENTIFIER .)
    RKEY            reduce using rule 193 (literal -> IDENTIFIER .)
    IF              reduce using rule 193 (literal -> IDENTIFIER .)
    WHILE           reduce using rule 193 (literal -> IDENTIFIER .)
    UNLESS          reduce using rule 193 (literal -> IDENTIFIER .)
    UNTIL           reduce using rule 193 (literal -> IDENTIFIER .)
    TERM            reduce using rule 193 (literal -> IDENTIFIER .)
    NUMBER          reduce using rule 193 (literal -> IDENTIFIER .)
    LPAREN          reduce using rule 193 (literal -> IDENTIFIER .)
    $end            reduce using rule 193 (literal -> IDENTIFIER .)
    THEN            reduce using rule 193 (literal -> IDENTIFIER .)
    DO              reduce using rule 193 (literal -> IDENTIFIER .)
    RESCUE          reduce using rule 193 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 193 (literal -> IDENTIFIER .)
    WHEN            reduce using rule 193 (literal -> IDENTIFIER .)
    LKEY            reduce using rule 193 (literal -> IDENTIFIER .)
    END             reduce using rule 193 (literal -> IDENTIFIER .)
    ELSIF           reduce using rule 193 (literal -> IDENTIFIER .)
    ELSE            reduce using rule 193 (literal -> IDENTIFIER .)
    ENSURE          reduce using rule 193 (literal -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 193 (literal -> IDENTIFIER .)
    DEFINED_OP      reduce using rule 193 (literal -> IDENTIFIER .)
    RETURN          reduce using rule 193 (literal -> IDENTIFIER .)
    YIELD           reduce using rule 193 (literal -> IDENTIFIER .)
    CASE            reduce using rule 193 (literal -> IDENTIFIER .)
    FOR             reduce using rule 193 (literal -> IDENTIFIER .)
    BEGIN           reduce using rule 193 (literal -> IDENTIFIER .)
    CLASS           reduce using rule 193 (literal -> IDENTIFIER .)
    MODULE          reduce using rule 193 (literal -> IDENTIFIER .)
    DEF             reduce using rule 193 (literal -> IDENTIFIER .)
    PUTS            reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_LOCAL       reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 193 (literal -> IDENTIFIER .)
    VAR_CLASS       reduce using rule 193 (literal -> IDENTIFIER .)
    SYMBOL          reduce using rule 193 (literal -> IDENTIFIER .)
    STRING          reduce using rule 193 (literal -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 193 (literal -> IDENTIFIER .)
    SUPER           reduce using rule 193 (literal -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 152
    OPTIONAL_SYMBOL shift and go to state 153

  ! NOT_SYMBOL      [ reduce using rule 193 (literal -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 220 (operation -> IDENTIFIER .) ]


state 76

    (66) arg -> NOT_SYMBOL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 166
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 77

    (72) arg -> DEFINED_OP . arg
    (99) primary -> DEFINED_OP . LPAREN arg LPAREN
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 200
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 201
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 78

    (93) primary -> RETURN .
    (94) primary -> RETURN . LPAREN RPAREN
    (95) primary -> RETURN . LPAREN call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 93 (primary -> RETURN .)
    DOT             reduce using rule 93 (primary -> RETURN .)
    UNARY_OP        reduce using rule 93 (primary -> RETURN .)
    COMMA           reduce using rule 93 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 93 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 93 (primary -> RETURN .)
    PLUS            reduce using rule 93 (primary -> RETURN .)
    MINUS           reduce using rule 93 (primary -> RETURN .)
    TIMES           reduce using rule 93 (primary -> RETURN .)
    DIVIDE          reduce using rule 93 (primary -> RETURN .)
    MOD             reduce using rule 93 (primary -> RETURN .)
    POW             reduce using rule 93 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 93 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 93 (primary -> RETURN .)
    BINARY_AND_OP   reduce using rule 93 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 93 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 93 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 93 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    EQUAL           reduce using rule 93 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 93 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 93 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    AND             reduce using rule 93 (primary -> RETURN .)
    OR              reduce using rule 93 (primary -> RETURN .)
    RBRACKET        reduce using rule 93 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 93 (primary -> RETURN .)
    RKEY            reduce using rule 93 (primary -> RETURN .)
    IF              reduce using rule 93 (primary -> RETURN .)
    WHILE           reduce using rule 93 (primary -> RETURN .)
    UNLESS          reduce using rule 93 (primary -> RETURN .)
    UNTIL           reduce using rule 93 (primary -> RETURN .)
    TERM            reduce using rule 93 (primary -> RETURN .)
    NUMBER          reduce using rule 93 (primary -> RETURN .)
    $end            reduce using rule 93 (primary -> RETURN .)
    THEN            reduce using rule 93 (primary -> RETURN .)
    DO              reduce using rule 93 (primary -> RETURN .)
    RESCUE          reduce using rule 93 (primary -> RETURN .)
    RPAREN          reduce using rule 93 (primary -> RETURN .)
    WHEN            reduce using rule 93 (primary -> RETURN .)
    LKEY            reduce using rule 93 (primary -> RETURN .)
    END             reduce using rule 93 (primary -> RETURN .)
    ELSIF           reduce using rule 93 (primary -> RETURN .)
    ELSE            reduce using rule 93 (primary -> RETURN .)
    ENSURE          reduce using rule 93 (primary -> RETURN .)
    NOT_SYMBOL      reduce using rule 93 (primary -> RETURN .)
    COMPLEMENT_OP   reduce using rule 93 (primary -> RETURN .)
    DEFINED_OP      reduce using rule 93 (primary -> RETURN .)
    RETURN          reduce using rule 93 (primary -> RETURN .)
    YIELD           reduce using rule 93 (primary -> RETURN .)
    CASE            reduce using rule 93 (primary -> RETURN .)
    FOR             reduce using rule 93 (primary -> RETURN .)
    BEGIN           reduce using rule 93 (primary -> RETURN .)
    CLASS           reduce using rule 93 (primary -> RETURN .)
    MODULE          reduce using rule 93 (primary -> RETURN .)
    DEF             reduce using rule 93 (primary -> RETURN .)
    PUTS            reduce using rule 93 (primary -> RETURN .)
    VAR_GLOBAL      reduce using rule 93 (primary -> RETURN .)
    VAR_LOCAL       reduce using rule 93 (primary -> RETURN .)
    VAR_INSTANCE    reduce using rule 93 (primary -> RETURN .)
    VAR_CLASS       reduce using rule 93 (primary -> RETURN .)
    SYMBOL          reduce using rule 93 (primary -> RETURN .)
    STRING          reduce using rule 93 (primary -> RETURN .)
    IDENTIFIER      reduce using rule 93 (primary -> RETURN .)
    SUPER           reduce using rule 93 (primary -> RETURN .)
    LPAREN          shift and go to state 241

  ! LPAREN          [ reduce using rule 93 (primary -> RETURN .) ]


state 79

    (96) primary -> YIELD .
    (97) primary -> YIELD . LPAREN RPAREN
    (98) primary -> YIELD . LPAREN call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 96 (primary -> YIELD .)
    DOT             reduce using rule 96 (primary -> YIELD .)
    UNARY_OP        reduce using rule 96 (primary -> YIELD .)
    COMMA           reduce using rule 96 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 96 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 96 (primary -> YIELD .)
    PLUS            reduce using rule 96 (primary -> YIELD .)
    MINUS           reduce using rule 96 (primary -> YIELD .)
    TIMES           reduce using rule 96 (primary -> YIELD .)
    DIVIDE          reduce using rule 96 (primary -> YIELD .)
    MOD             reduce using rule 96 (primary -> YIELD .)
    POW             reduce using rule 96 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 96 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 96 (primary -> YIELD .)
    BINARY_AND_OP   reduce using rule 96 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 96 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 96 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 96 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    EQUAL           reduce using rule 96 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 96 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 96 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    AND             reduce using rule 96 (primary -> YIELD .)
    OR              reduce using rule 96 (primary -> YIELD .)
    RBRACKET        reduce using rule 96 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 96 (primary -> YIELD .)
    RKEY            reduce using rule 96 (primary -> YIELD .)
    IF              reduce using rule 96 (primary -> YIELD .)
    WHILE           reduce using rule 96 (primary -> YIELD .)
    UNLESS          reduce using rule 96 (primary -> YIELD .)
    UNTIL           reduce using rule 96 (primary -> YIELD .)
    TERM            reduce using rule 96 (primary -> YIELD .)
    NUMBER          reduce using rule 96 (primary -> YIELD .)
    $end            reduce using rule 96 (primary -> YIELD .)
    THEN            reduce using rule 96 (primary -> YIELD .)
    DO              reduce using rule 96 (primary -> YIELD .)
    RESCUE          reduce using rule 96 (primary -> YIELD .)
    RPAREN          reduce using rule 96 (primary -> YIELD .)
    WHEN            reduce using rule 96 (primary -> YIELD .)
    LKEY            reduce using rule 96 (primary -> YIELD .)
    END             reduce using rule 96 (primary -> YIELD .)
    ELSIF           reduce using rule 96 (primary -> YIELD .)
    ELSE            reduce using rule 96 (primary -> YIELD .)
    ENSURE          reduce using rule 96 (primary -> YIELD .)
    NOT_SYMBOL      reduce using rule 96 (primary -> YIELD .)
    COMPLEMENT_OP   reduce using rule 96 (primary -> YIELD .)
    DEFINED_OP      reduce using rule 96 (primary -> YIELD .)
    RETURN          reduce using rule 96 (primary -> YIELD .)
    YIELD           reduce using rule 96 (primary -> YIELD .)
    CASE            reduce using rule 96 (primary -> YIELD .)
    FOR             reduce using rule 96 (primary -> YIELD .)
    BEGIN           reduce using rule 96 (primary -> YIELD .)
    CLASS           reduce using rule 96 (primary -> YIELD .)
    MODULE          reduce using rule 96 (primary -> YIELD .)
    DEF             reduce using rule 96 (primary -> YIELD .)
    PUTS            reduce using rule 96 (primary -> YIELD .)
    VAR_GLOBAL      reduce using rule 96 (primary -> YIELD .)
    VAR_LOCAL       reduce using rule 96 (primary -> YIELD .)
    VAR_INSTANCE    reduce using rule 96 (primary -> YIELD .)
    VAR_CLASS       reduce using rule 96 (primary -> YIELD .)
    SYMBOL          reduce using rule 96 (primary -> YIELD .)
    STRING          reduce using rule 96 (primary -> YIELD .)
    IDENTIFIER      reduce using rule 96 (primary -> YIELD .)
    SUPER           reduce using rule 96 (primary -> YIELD .)
    LPAREN          shift and go to state 242

  ! LPAREN          [ reduce using rule 96 (primary -> YIELD .) ]


state 80

    (100) primary -> function .
    (101) primary -> function . LKEY compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY

  ! shift/reduce conflict for LKEY resolved as shift
    LBRACKET        reduce using rule 100 (primary -> function .)
    DOT             reduce using rule 100 (primary -> function .)
    UNARY_OP        reduce using rule 100 (primary -> function .)
    COMMA           reduce using rule 100 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 100 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 100 (primary -> function .)
    PLUS            reduce using rule 100 (primary -> function .)
    MINUS           reduce using rule 100 (primary -> function .)
    TIMES           reduce using rule 100 (primary -> function .)
    DIVIDE          reduce using rule 100 (primary -> function .)
    MOD             reduce using rule 100 (primary -> function .)
    POW             reduce using rule 100 (primary -> function .)
    OR_SYMBOL       reduce using rule 100 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 100 (primary -> function .)
    BINARY_AND_OP   reduce using rule 100 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 100 (primary -> function .)
    GREATERTHAN     reduce using rule 100 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 100 (primary -> function .)
    LESSERTHAN      reduce using rule 100 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 100 (primary -> function .)
    EQUAL           reduce using rule 100 (primary -> function .)
    CASE_EQUALITY   reduce using rule 100 (primary -> function .)
    NOTEQUAL        reduce using rule 100 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 100 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 100 (primary -> function .)
    AND             reduce using rule 100 (primary -> function .)
    OR              reduce using rule 100 (primary -> function .)
    RBRACKET        reduce using rule 100 (primary -> function .)
    TERM            reduce using rule 100 (primary -> function .)
    THEN            reduce using rule 100 (primary -> function .)
    DO              reduce using rule 100 (primary -> function .)
    NUMBER          reduce using rule 100 (primary -> function .)
    LPAREN          reduce using rule 100 (primary -> function .)
    HASH_ROCKET     reduce using rule 100 (primary -> function .)
    RKEY            reduce using rule 100 (primary -> function .)
    IF              reduce using rule 100 (primary -> function .)
    WHILE           reduce using rule 100 (primary -> function .)
    UNLESS          reduce using rule 100 (primary -> function .)
    UNTIL           reduce using rule 100 (primary -> function .)
    $end            reduce using rule 100 (primary -> function .)
    RESCUE          reduce using rule 100 (primary -> function .)
    RPAREN          reduce using rule 100 (primary -> function .)
    WHEN            reduce using rule 100 (primary -> function .)
    END             reduce using rule 100 (primary -> function .)
    ELSIF           reduce using rule 100 (primary -> function .)
    ELSE            reduce using rule 100 (primary -> function .)
    ENSURE          reduce using rule 100 (primary -> function .)
    NOT_SYMBOL      reduce using rule 100 (primary -> function .)
    COMPLEMENT_OP   reduce using rule 100 (primary -> function .)
    DEFINED_OP      reduce using rule 100 (primary -> function .)
    RETURN          reduce using rule 100 (primary -> function .)
    YIELD           reduce using rule 100 (primary -> function .)
    CASE            reduce using rule 100 (primary -> function .)
    FOR             reduce using rule 100 (primary -> function .)
    BEGIN           reduce using rule 100 (primary -> function .)
    CLASS           reduce using rule 100 (primary -> function .)
    MODULE          reduce using rule 100 (primary -> function .)
    DEF             reduce using rule 100 (primary -> function .)
    PUTS            reduce using rule 100 (primary -> function .)
    VAR_GLOBAL      reduce using rule 100 (primary -> function .)
    VAR_LOCAL       reduce using rule 100 (primary -> function .)
    VAR_INSTANCE    reduce using rule 100 (primary -> function .)
    VAR_CLASS       reduce using rule 100 (primary -> function .)
    SYMBOL          reduce using rule 100 (primary -> function .)
    STRING          reduce using rule 100 (primary -> function .)
    IDENTIFIER      reduce using rule 100 (primary -> function .)
    SUPER           reduce using rule 100 (primary -> function .)
    LKEY            shift and go to state 148

  ! LKEY            [ reduce using rule 100 (primary -> function .) ]


state 81

    (114) primary -> BEGIN . compstmt rescue END
    (115) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (116) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (117) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 124
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 82

    (34) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET

    LBRACKET        shift and go to state 243


state 83

    (39) function -> SUPER . LPAREN call_args RPAREN
    (40) function -> SUPER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 244
    LKEY            reduce using rule 40 (function -> SUPER .)
    LBRACKET        reduce using rule 40 (function -> SUPER .)
    DOT             reduce using rule 40 (function -> SUPER .)
    UNARY_OP        reduce using rule 40 (function -> SUPER .)
    COMMA           reduce using rule 40 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 40 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 40 (function -> SUPER .)
    PLUS            reduce using rule 40 (function -> SUPER .)
    MINUS           reduce using rule 40 (function -> SUPER .)
    TIMES           reduce using rule 40 (function -> SUPER .)
    DIVIDE          reduce using rule 40 (function -> SUPER .)
    MOD             reduce using rule 40 (function -> SUPER .)
    POW             reduce using rule 40 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 40 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 40 (function -> SUPER .)
    BINARY_AND_OP   reduce using rule 40 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 40 (function -> SUPER .)
    GREATERTHAN     reduce using rule 40 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    LESSERTHAN      reduce using rule 40 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    EQUAL           reduce using rule 40 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 40 (function -> SUPER .)
    NOTEQUAL        reduce using rule 40 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    AND             reduce using rule 40 (function -> SUPER .)
    OR              reduce using rule 40 (function -> SUPER .)
    RBRACKET        reduce using rule 40 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 40 (function -> SUPER .)
    RKEY            reduce using rule 40 (function -> SUPER .)
    IF              reduce using rule 40 (function -> SUPER .)
    WHILE           reduce using rule 40 (function -> SUPER .)
    UNLESS          reduce using rule 40 (function -> SUPER .)
    UNTIL           reduce using rule 40 (function -> SUPER .)
    TERM            reduce using rule 40 (function -> SUPER .)
    NUMBER          reduce using rule 40 (function -> SUPER .)
    $end            reduce using rule 40 (function -> SUPER .)
    THEN            reduce using rule 40 (function -> SUPER .)
    DO              reduce using rule 40 (function -> SUPER .)
    RESCUE          reduce using rule 40 (function -> SUPER .)
    RPAREN          reduce using rule 40 (function -> SUPER .)
    WHEN            reduce using rule 40 (function -> SUPER .)
    END             reduce using rule 40 (function -> SUPER .)
    ELSIF           reduce using rule 40 (function -> SUPER .)
    ELSE            reduce using rule 40 (function -> SUPER .)
    ENSURE          reduce using rule 40 (function -> SUPER .)
    NOT_SYMBOL      reduce using rule 40 (function -> SUPER .)
    COMPLEMENT_OP   reduce using rule 40 (function -> SUPER .)
    DEFINED_OP      reduce using rule 40 (function -> SUPER .)
    RETURN          reduce using rule 40 (function -> SUPER .)
    YIELD           reduce using rule 40 (function -> SUPER .)
    CASE            reduce using rule 40 (function -> SUPER .)
    FOR             reduce using rule 40 (function -> SUPER .)
    BEGIN           reduce using rule 40 (function -> SUPER .)
    CLASS           reduce using rule 40 (function -> SUPER .)
    MODULE          reduce using rule 40 (function -> SUPER .)
    DEF             reduce using rule 40 (function -> SUPER .)
    PUTS            reduce using rule 40 (function -> SUPER .)
    VAR_GLOBAL      reduce using rule 40 (function -> SUPER .)
    VAR_LOCAL       reduce using rule 40 (function -> SUPER .)
    VAR_INSTANCE    reduce using rule 40 (function -> SUPER .)
    VAR_CLASS       reduce using rule 40 (function -> SUPER .)
    SYMBOL          reduce using rule 40 (function -> SUPER .)
    STRING          reduce using rule 40 (function -> SUPER .)
    IDENTIFIER      reduce using rule 40 (function -> SUPER .)
    SUPER           reduce using rule 40 (function -> SUPER .)

  ! LPAREN          [ reduce using rule 40 (function -> SUPER .) ]


state 84

    (16) stmt -> END LKEY . compstmt RKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 245
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 85

    (9) stmt -> UNDEF fname .

    IF              reduce using rule 9 (stmt -> UNDEF fname .)
    WHILE           reduce using rule 9 (stmt -> UNDEF fname .)
    UNLESS          reduce using rule 9 (stmt -> UNDEF fname .)
    UNTIL           reduce using rule 9 (stmt -> UNDEF fname .)
    TERM            reduce using rule 9 (stmt -> UNDEF fname .)
    NUMBER          reduce using rule 9 (stmt -> UNDEF fname .)
    LPAREN          reduce using rule 9 (stmt -> UNDEF fname .)
    $end            reduce using rule 9 (stmt -> UNDEF fname .)
    RESCUE          reduce using rule 9 (stmt -> UNDEF fname .)
    RPAREN          reduce using rule 9 (stmt -> UNDEF fname .)
    WHEN            reduce using rule 9 (stmt -> UNDEF fname .)
    LBRACKET        reduce using rule 9 (stmt -> UNDEF fname .)
    DOT             reduce using rule 9 (stmt -> UNDEF fname .)
    UNARY_OP        reduce using rule 9 (stmt -> UNDEF fname .)
    RANGE_INCLUSIVE reduce using rule 9 (stmt -> UNDEF fname .)
    RANGE_EXCLUSIVE reduce using rule 9 (stmt -> UNDEF fname .)
    PLUS            reduce using rule 9 (stmt -> UNDEF fname .)
    MINUS           reduce using rule 9 (stmt -> UNDEF fname .)
    TIMES           reduce using rule 9 (stmt -> UNDEF fname .)
    DIVIDE          reduce using rule 9 (stmt -> UNDEF fname .)
    MOD             reduce using rule 9 (stmt -> UNDEF fname .)
    POW             reduce using rule 9 (stmt -> UNDEF fname .)
    OR_SYMBOL       reduce using rule 9 (stmt -> UNDEF fname .)
    BINARY_XOR_OP   reduce using rule 9 (stmt -> UNDEF fname .)
    BINARY_AND_OP   reduce using rule 9 (stmt -> UNDEF fname .)
    COMBINED_COMPARISON_OP reduce using rule 9 (stmt -> UNDEF fname .)
    GREATERTHAN     reduce using rule 9 (stmt -> UNDEF fname .)
    GREATERTHANEQUAL reduce using rule 9 (stmt -> UNDEF fname .)
    LESSERTHAN      reduce using rule 9 (stmt -> UNDEF fname .)
    LESSERTHANEQUAL reduce using rule 9 (stmt -> UNDEF fname .)
    EQUAL           reduce using rule 9 (stmt -> UNDEF fname .)
    CASE_EQUALITY   reduce using rule 9 (stmt -> UNDEF fname .)
    NOTEQUAL        reduce using rule 9 (stmt -> UNDEF fname .)
    MATCHED_STRINGS_OP reduce using rule 9 (stmt -> UNDEF fname .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 9 (stmt -> UNDEF fname .)
    BINARY_LEFT_SHIFT_OP reduce using rule 9 (stmt -> UNDEF fname .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 9 (stmt -> UNDEF fname .)
    AND             reduce using rule 9 (stmt -> UNDEF fname .)
    OR              reduce using rule 9 (stmt -> UNDEF fname .)
    COMMA           reduce using rule 9 (stmt -> UNDEF fname .)
    RBRACKET        reduce using rule 9 (stmt -> UNDEF fname .)
    THEN            reduce using rule 9 (stmt -> UNDEF fname .)
    DO              reduce using rule 9 (stmt -> UNDEF fname .)
    HASH_ROCKET     reduce using rule 9 (stmt -> UNDEF fname .)
    RKEY            reduce using rule 9 (stmt -> UNDEF fname .)
    LKEY            reduce using rule 9 (stmt -> UNDEF fname .)
    END             reduce using rule 9 (stmt -> UNDEF fname .)
    ELSIF           reduce using rule 9 (stmt -> UNDEF fname .)
    ELSE            reduce using rule 9 (stmt -> UNDEF fname .)
    ENSURE          reduce using rule 9 (stmt -> UNDEF fname .)
    NOT_SYMBOL      reduce using rule 9 (stmt -> UNDEF fname .)
    COMPLEMENT_OP   reduce using rule 9 (stmt -> UNDEF fname .)
    DEFINED_OP      reduce using rule 9 (stmt -> UNDEF fname .)
    RETURN          reduce using rule 9 (stmt -> UNDEF fname .)
    YIELD           reduce using rule 9 (stmt -> UNDEF fname .)
    CASE            reduce using rule 9 (stmt -> UNDEF fname .)
    FOR             reduce using rule 9 (stmt -> UNDEF fname .)
    BEGIN           reduce using rule 9 (stmt -> UNDEF fname .)
    CLASS           reduce using rule 9 (stmt -> UNDEF fname .)
    MODULE          reduce using rule 9 (stmt -> UNDEF fname .)
    DEF             reduce using rule 9 (stmt -> UNDEF fname .)
    PUTS            reduce using rule 9 (stmt -> UNDEF fname .)
    VAR_GLOBAL      reduce using rule 9 (stmt -> UNDEF fname .)
    VAR_LOCAL       reduce using rule 9 (stmt -> UNDEF fname .)
    VAR_INSTANCE    reduce using rule 9 (stmt -> UNDEF fname .)
    VAR_CLASS       reduce using rule 9 (stmt -> UNDEF fname .)
    SYMBOL          reduce using rule 9 (stmt -> UNDEF fname .)
    STRING          reduce using rule 9 (stmt -> UNDEF fname .)
    IDENTIFIER      reduce using rule 9 (stmt -> UNDEF fname .)
    SUPER           reduce using rule 9 (stmt -> UNDEF fname .)


state 86

    (194) fname -> IDENTIFIER .

    IF              reduce using rule 194 (fname -> IDENTIFIER .)
    WHILE           reduce using rule 194 (fname -> IDENTIFIER .)
    UNLESS          reduce using rule 194 (fname -> IDENTIFIER .)
    UNTIL           reduce using rule 194 (fname -> IDENTIFIER .)
    TERM            reduce using rule 194 (fname -> IDENTIFIER .)
    NUMBER          reduce using rule 194 (fname -> IDENTIFIER .)
    LPAREN          reduce using rule 194 (fname -> IDENTIFIER .)
    $end            reduce using rule 194 (fname -> IDENTIFIER .)
    RESCUE          reduce using rule 194 (fname -> IDENTIFIER .)
    RPAREN          reduce using rule 194 (fname -> IDENTIFIER .)
    WHEN            reduce using rule 194 (fname -> IDENTIFIER .)
    LBRACKET        reduce using rule 194 (fname -> IDENTIFIER .)
    DOT             reduce using rule 194 (fname -> IDENTIFIER .)
    UNARY_OP        reduce using rule 194 (fname -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 194 (fname -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 194 (fname -> IDENTIFIER .)
    PLUS            reduce using rule 194 (fname -> IDENTIFIER .)
    MINUS           reduce using rule 194 (fname -> IDENTIFIER .)
    TIMES           reduce using rule 194 (fname -> IDENTIFIER .)
    DIVIDE          reduce using rule 194 (fname -> IDENTIFIER .)
    MOD             reduce using rule 194 (fname -> IDENTIFIER .)
    POW             reduce using rule 194 (fname -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 194 (fname -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 194 (fname -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 194 (fname -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 194 (fname -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 194 (fname -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 194 (fname -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 194 (fname -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 194 (fname -> IDENTIFIER .)
    EQUAL           reduce using rule 194 (fname -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 194 (fname -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 194 (fname -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 194 (fname -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 194 (fname -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 194 (fname -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 194 (fname -> IDENTIFIER .)
    AND             reduce using rule 194 (fname -> IDENTIFIER .)
    OR              reduce using rule 194 (fname -> IDENTIFIER .)
    COMMA           reduce using rule 194 (fname -> IDENTIFIER .)
    RBRACKET        reduce using rule 194 (fname -> IDENTIFIER .)
    THEN            reduce using rule 194 (fname -> IDENTIFIER .)
    DO              reduce using rule 194 (fname -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 194 (fname -> IDENTIFIER .)
    RKEY            reduce using rule 194 (fname -> IDENTIFIER .)
    LKEY            reduce using rule 194 (fname -> IDENTIFIER .)
    END             reduce using rule 194 (fname -> IDENTIFIER .)
    ELSIF           reduce using rule 194 (fname -> IDENTIFIER .)
    ELSE            reduce using rule 194 (fname -> IDENTIFIER .)
    ENSURE          reduce using rule 194 (fname -> IDENTIFIER .)
    NOT_SYMBOL      reduce using rule 194 (fname -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 194 (fname -> IDENTIFIER .)
    DEFINED_OP      reduce using rule 194 (fname -> IDENTIFIER .)
    RETURN          reduce using rule 194 (fname -> IDENTIFIER .)
    YIELD           reduce using rule 194 (fname -> IDENTIFIER .)
    CASE            reduce using rule 194 (fname -> IDENTIFIER .)
    FOR             reduce using rule 194 (fname -> IDENTIFIER .)
    BEGIN           reduce using rule 194 (fname -> IDENTIFIER .)
    CLASS           reduce using rule 194 (fname -> IDENTIFIER .)
    MODULE          reduce using rule 194 (fname -> IDENTIFIER .)
    DEF             reduce using rule 194 (fname -> IDENTIFIER .)
    PUTS            reduce using rule 194 (fname -> IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 194 (fname -> IDENTIFIER .)
    VAR_LOCAL       reduce using rule 194 (fname -> IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 194 (fname -> IDENTIFIER .)
    VAR_CLASS       reduce using rule 194 (fname -> IDENTIFIER .)
    SYMBOL          reduce using rule 194 (fname -> IDENTIFIER .)
    STRING          reduce using rule 194 (fname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 194 (fname -> IDENTIFIER .)
    SUPER           reduce using rule 194 (fname -> IDENTIFIER .)
    OVERLOAD_PLUS   reduce using rule 194 (fname -> IDENTIFIER .)
    OVERLOAD_MINUS  reduce using rule 194 (fname -> IDENTIFIER .)


state 87

    (195) fname -> RANGE_INCLUSIVE .

    IF              reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    WHILE           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    UNLESS          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    UNTIL           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    TERM            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    NUMBER          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    LPAREN          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    $end            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RESCUE          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RPAREN          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    WHEN            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    LBRACKET        reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    DOT             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    UNARY_OP        reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RANGE_INCLUSIVE reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RANGE_EXCLUSIVE reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    PLUS            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    MINUS           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    TIMES           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    DIVIDE          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    MOD             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    POW             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    OR_SYMBOL       reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    BINARY_XOR_OP   reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    BINARY_AND_OP   reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    COMBINED_COMPARISON_OP reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    GREATERTHAN     reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    GREATERTHANEQUAL reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    LESSERTHAN      reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    LESSERTHANEQUAL reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    EQUAL           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    CASE_EQUALITY   reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    NOTEQUAL        reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    MATCHED_STRINGS_OP reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    AND             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    OR              reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    COMMA           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RBRACKET        reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    THEN            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    DO              reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    HASH_ROCKET     reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RKEY            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    LKEY            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    END             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    ELSIF           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    ELSE            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    ENSURE          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    NOT_SYMBOL      reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    COMPLEMENT_OP   reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    DEFINED_OP      reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    RETURN          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    YIELD           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    CASE            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    FOR             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    BEGIN           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    CLASS           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    MODULE          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    DEF             reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    PUTS            reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    VAR_GLOBAL      reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    VAR_LOCAL       reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    VAR_INSTANCE    reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    VAR_CLASS       reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    SYMBOL          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    STRING          reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    IDENTIFIER      reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    SUPER           reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    OVERLOAD_PLUS   reduce using rule 195 (fname -> RANGE_INCLUSIVE .)
    OVERLOAD_MINUS  reduce using rule 195 (fname -> RANGE_INCLUSIVE .)


state 88

    (196) fname -> OR_SYMBOL .

    IF              reduce using rule 196 (fname -> OR_SYMBOL .)
    WHILE           reduce using rule 196 (fname -> OR_SYMBOL .)
    UNLESS          reduce using rule 196 (fname -> OR_SYMBOL .)
    UNTIL           reduce using rule 196 (fname -> OR_SYMBOL .)
    TERM            reduce using rule 196 (fname -> OR_SYMBOL .)
    NUMBER          reduce using rule 196 (fname -> OR_SYMBOL .)
    LPAREN          reduce using rule 196 (fname -> OR_SYMBOL .)
    $end            reduce using rule 196 (fname -> OR_SYMBOL .)
    RESCUE          reduce using rule 196 (fname -> OR_SYMBOL .)
    RPAREN          reduce using rule 196 (fname -> OR_SYMBOL .)
    WHEN            reduce using rule 196 (fname -> OR_SYMBOL .)
    LBRACKET        reduce using rule 196 (fname -> OR_SYMBOL .)
    DOT             reduce using rule 196 (fname -> OR_SYMBOL .)
    UNARY_OP        reduce using rule 196 (fname -> OR_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 196 (fname -> OR_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 196 (fname -> OR_SYMBOL .)
    PLUS            reduce using rule 196 (fname -> OR_SYMBOL .)
    MINUS           reduce using rule 196 (fname -> OR_SYMBOL .)
    TIMES           reduce using rule 196 (fname -> OR_SYMBOL .)
    DIVIDE          reduce using rule 196 (fname -> OR_SYMBOL .)
    MOD             reduce using rule 196 (fname -> OR_SYMBOL .)
    POW             reduce using rule 196 (fname -> OR_SYMBOL .)
    OR_SYMBOL       reduce using rule 196 (fname -> OR_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 196 (fname -> OR_SYMBOL .)
    BINARY_AND_OP   reduce using rule 196 (fname -> OR_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 196 (fname -> OR_SYMBOL .)
    GREATERTHAN     reduce using rule 196 (fname -> OR_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 196 (fname -> OR_SYMBOL .)
    LESSERTHAN      reduce using rule 196 (fname -> OR_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 196 (fname -> OR_SYMBOL .)
    EQUAL           reduce using rule 196 (fname -> OR_SYMBOL .)
    CASE_EQUALITY   reduce using rule 196 (fname -> OR_SYMBOL .)
    NOTEQUAL        reduce using rule 196 (fname -> OR_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 196 (fname -> OR_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 196 (fname -> OR_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 196 (fname -> OR_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 196 (fname -> OR_SYMBOL .)
    AND             reduce using rule 196 (fname -> OR_SYMBOL .)
    OR              reduce using rule 196 (fname -> OR_SYMBOL .)
    COMMA           reduce using rule 196 (fname -> OR_SYMBOL .)
    RBRACKET        reduce using rule 196 (fname -> OR_SYMBOL .)
    THEN            reduce using rule 196 (fname -> OR_SYMBOL .)
    DO              reduce using rule 196 (fname -> OR_SYMBOL .)
    HASH_ROCKET     reduce using rule 196 (fname -> OR_SYMBOL .)
    RKEY            reduce using rule 196 (fname -> OR_SYMBOL .)
    LKEY            reduce using rule 196 (fname -> OR_SYMBOL .)
    END             reduce using rule 196 (fname -> OR_SYMBOL .)
    ELSIF           reduce using rule 196 (fname -> OR_SYMBOL .)
    ELSE            reduce using rule 196 (fname -> OR_SYMBOL .)
    ENSURE          reduce using rule 196 (fname -> OR_SYMBOL .)
    NOT_SYMBOL      reduce using rule 196 (fname -> OR_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 196 (fname -> OR_SYMBOL .)
    DEFINED_OP      reduce using rule 196 (fname -> OR_SYMBOL .)
    RETURN          reduce using rule 196 (fname -> OR_SYMBOL .)
    YIELD           reduce using rule 196 (fname -> OR_SYMBOL .)
    CASE            reduce using rule 196 (fname -> OR_SYMBOL .)
    FOR             reduce using rule 196 (fname -> OR_SYMBOL .)
    BEGIN           reduce using rule 196 (fname -> OR_SYMBOL .)
    CLASS           reduce using rule 196 (fname -> OR_SYMBOL .)
    MODULE          reduce using rule 196 (fname -> OR_SYMBOL .)
    DEF             reduce using rule 196 (fname -> OR_SYMBOL .)
    PUTS            reduce using rule 196 (fname -> OR_SYMBOL .)
    VAR_GLOBAL      reduce using rule 196 (fname -> OR_SYMBOL .)
    VAR_LOCAL       reduce using rule 196 (fname -> OR_SYMBOL .)
    VAR_INSTANCE    reduce using rule 196 (fname -> OR_SYMBOL .)
    VAR_CLASS       reduce using rule 196 (fname -> OR_SYMBOL .)
    SYMBOL          reduce using rule 196 (fname -> OR_SYMBOL .)
    STRING          reduce using rule 196 (fname -> OR_SYMBOL .)
    IDENTIFIER      reduce using rule 196 (fname -> OR_SYMBOL .)
    SUPER           reduce using rule 196 (fname -> OR_SYMBOL .)
    OVERLOAD_PLUS   reduce using rule 196 (fname -> OR_SYMBOL .)
    OVERLOAD_MINUS  reduce using rule 196 (fname -> OR_SYMBOL .)


state 89

    (197) fname -> BINARY_AND_OP .

    IF              reduce using rule 197 (fname -> BINARY_AND_OP .)
    WHILE           reduce using rule 197 (fname -> BINARY_AND_OP .)
    UNLESS          reduce using rule 197 (fname -> BINARY_AND_OP .)
    UNTIL           reduce using rule 197 (fname -> BINARY_AND_OP .)
    TERM            reduce using rule 197 (fname -> BINARY_AND_OP .)
    NUMBER          reduce using rule 197 (fname -> BINARY_AND_OP .)
    LPAREN          reduce using rule 197 (fname -> BINARY_AND_OP .)
    $end            reduce using rule 197 (fname -> BINARY_AND_OP .)
    RESCUE          reduce using rule 197 (fname -> BINARY_AND_OP .)
    RPAREN          reduce using rule 197 (fname -> BINARY_AND_OP .)
    WHEN            reduce using rule 197 (fname -> BINARY_AND_OP .)
    LBRACKET        reduce using rule 197 (fname -> BINARY_AND_OP .)
    DOT             reduce using rule 197 (fname -> BINARY_AND_OP .)
    UNARY_OP        reduce using rule 197 (fname -> BINARY_AND_OP .)
    RANGE_INCLUSIVE reduce using rule 197 (fname -> BINARY_AND_OP .)
    RANGE_EXCLUSIVE reduce using rule 197 (fname -> BINARY_AND_OP .)
    PLUS            reduce using rule 197 (fname -> BINARY_AND_OP .)
    MINUS           reduce using rule 197 (fname -> BINARY_AND_OP .)
    TIMES           reduce using rule 197 (fname -> BINARY_AND_OP .)
    DIVIDE          reduce using rule 197 (fname -> BINARY_AND_OP .)
    MOD             reduce using rule 197 (fname -> BINARY_AND_OP .)
    POW             reduce using rule 197 (fname -> BINARY_AND_OP .)
    OR_SYMBOL       reduce using rule 197 (fname -> BINARY_AND_OP .)
    BINARY_XOR_OP   reduce using rule 197 (fname -> BINARY_AND_OP .)
    BINARY_AND_OP   reduce using rule 197 (fname -> BINARY_AND_OP .)
    COMBINED_COMPARISON_OP reduce using rule 197 (fname -> BINARY_AND_OP .)
    GREATERTHAN     reduce using rule 197 (fname -> BINARY_AND_OP .)
    GREATERTHANEQUAL reduce using rule 197 (fname -> BINARY_AND_OP .)
    LESSERTHAN      reduce using rule 197 (fname -> BINARY_AND_OP .)
    LESSERTHANEQUAL reduce using rule 197 (fname -> BINARY_AND_OP .)
    EQUAL           reduce using rule 197 (fname -> BINARY_AND_OP .)
    CASE_EQUALITY   reduce using rule 197 (fname -> BINARY_AND_OP .)
    NOTEQUAL        reduce using rule 197 (fname -> BINARY_AND_OP .)
    MATCHED_STRINGS_OP reduce using rule 197 (fname -> BINARY_AND_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 197 (fname -> BINARY_AND_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 197 (fname -> BINARY_AND_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 197 (fname -> BINARY_AND_OP .)
    AND             reduce using rule 197 (fname -> BINARY_AND_OP .)
    OR              reduce using rule 197 (fname -> BINARY_AND_OP .)
    COMMA           reduce using rule 197 (fname -> BINARY_AND_OP .)
    RBRACKET        reduce using rule 197 (fname -> BINARY_AND_OP .)
    THEN            reduce using rule 197 (fname -> BINARY_AND_OP .)
    DO              reduce using rule 197 (fname -> BINARY_AND_OP .)
    HASH_ROCKET     reduce using rule 197 (fname -> BINARY_AND_OP .)
    RKEY            reduce using rule 197 (fname -> BINARY_AND_OP .)
    LKEY            reduce using rule 197 (fname -> BINARY_AND_OP .)
    END             reduce using rule 197 (fname -> BINARY_AND_OP .)
    ELSIF           reduce using rule 197 (fname -> BINARY_AND_OP .)
    ELSE            reduce using rule 197 (fname -> BINARY_AND_OP .)
    ENSURE          reduce using rule 197 (fname -> BINARY_AND_OP .)
    NOT_SYMBOL      reduce using rule 197 (fname -> BINARY_AND_OP .)
    COMPLEMENT_OP   reduce using rule 197 (fname -> BINARY_AND_OP .)
    DEFINED_OP      reduce using rule 197 (fname -> BINARY_AND_OP .)
    RETURN          reduce using rule 197 (fname -> BINARY_AND_OP .)
    YIELD           reduce using rule 197 (fname -> BINARY_AND_OP .)
    CASE            reduce using rule 197 (fname -> BINARY_AND_OP .)
    FOR             reduce using rule 197 (fname -> BINARY_AND_OP .)
    BEGIN           reduce using rule 197 (fname -> BINARY_AND_OP .)
    CLASS           reduce using rule 197 (fname -> BINARY_AND_OP .)
    MODULE          reduce using rule 197 (fname -> BINARY_AND_OP .)
    DEF             reduce using rule 197 (fname -> BINARY_AND_OP .)
    PUTS            reduce using rule 197 (fname -> BINARY_AND_OP .)
    VAR_GLOBAL      reduce using rule 197 (fname -> BINARY_AND_OP .)
    VAR_LOCAL       reduce using rule 197 (fname -> BINARY_AND_OP .)
    VAR_INSTANCE    reduce using rule 197 (fname -> BINARY_AND_OP .)
    VAR_CLASS       reduce using rule 197 (fname -> BINARY_AND_OP .)
    SYMBOL          reduce using rule 197 (fname -> BINARY_AND_OP .)
    STRING          reduce using rule 197 (fname -> BINARY_AND_OP .)
    IDENTIFIER      reduce using rule 197 (fname -> BINARY_AND_OP .)
    SUPER           reduce using rule 197 (fname -> BINARY_AND_OP .)
    OVERLOAD_PLUS   reduce using rule 197 (fname -> BINARY_AND_OP .)
    OVERLOAD_MINUS  reduce using rule 197 (fname -> BINARY_AND_OP .)


state 90

    (198) fname -> BINARY_XOR_OP .

    IF              reduce using rule 198 (fname -> BINARY_XOR_OP .)
    WHILE           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    UNLESS          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    UNTIL           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    TERM            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    NUMBER          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    LPAREN          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    $end            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RESCUE          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RPAREN          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    WHEN            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    LBRACKET        reduce using rule 198 (fname -> BINARY_XOR_OP .)
    DOT             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    UNARY_OP        reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RANGE_INCLUSIVE reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RANGE_EXCLUSIVE reduce using rule 198 (fname -> BINARY_XOR_OP .)
    PLUS            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    MINUS           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    TIMES           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    DIVIDE          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    MOD             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    POW             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    OR_SYMBOL       reduce using rule 198 (fname -> BINARY_XOR_OP .)
    BINARY_XOR_OP   reduce using rule 198 (fname -> BINARY_XOR_OP .)
    BINARY_AND_OP   reduce using rule 198 (fname -> BINARY_XOR_OP .)
    COMBINED_COMPARISON_OP reduce using rule 198 (fname -> BINARY_XOR_OP .)
    GREATERTHAN     reduce using rule 198 (fname -> BINARY_XOR_OP .)
    GREATERTHANEQUAL reduce using rule 198 (fname -> BINARY_XOR_OP .)
    LESSERTHAN      reduce using rule 198 (fname -> BINARY_XOR_OP .)
    LESSERTHANEQUAL reduce using rule 198 (fname -> BINARY_XOR_OP .)
    EQUAL           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    CASE_EQUALITY   reduce using rule 198 (fname -> BINARY_XOR_OP .)
    NOTEQUAL        reduce using rule 198 (fname -> BINARY_XOR_OP .)
    MATCHED_STRINGS_OP reduce using rule 198 (fname -> BINARY_XOR_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 198 (fname -> BINARY_XOR_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 198 (fname -> BINARY_XOR_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 198 (fname -> BINARY_XOR_OP .)
    AND             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    OR              reduce using rule 198 (fname -> BINARY_XOR_OP .)
    COMMA           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RBRACKET        reduce using rule 198 (fname -> BINARY_XOR_OP .)
    THEN            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    DO              reduce using rule 198 (fname -> BINARY_XOR_OP .)
    HASH_ROCKET     reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RKEY            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    LKEY            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    END             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    ELSIF           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    ELSE            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    ENSURE          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    NOT_SYMBOL      reduce using rule 198 (fname -> BINARY_XOR_OP .)
    COMPLEMENT_OP   reduce using rule 198 (fname -> BINARY_XOR_OP .)
    DEFINED_OP      reduce using rule 198 (fname -> BINARY_XOR_OP .)
    RETURN          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    YIELD           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    CASE            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    FOR             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    BEGIN           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    CLASS           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    MODULE          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    DEF             reduce using rule 198 (fname -> BINARY_XOR_OP .)
    PUTS            reduce using rule 198 (fname -> BINARY_XOR_OP .)
    VAR_GLOBAL      reduce using rule 198 (fname -> BINARY_XOR_OP .)
    VAR_LOCAL       reduce using rule 198 (fname -> BINARY_XOR_OP .)
    VAR_INSTANCE    reduce using rule 198 (fname -> BINARY_XOR_OP .)
    VAR_CLASS       reduce using rule 198 (fname -> BINARY_XOR_OP .)
    SYMBOL          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    STRING          reduce using rule 198 (fname -> BINARY_XOR_OP .)
    IDENTIFIER      reduce using rule 198 (fname -> BINARY_XOR_OP .)
    SUPER           reduce using rule 198 (fname -> BINARY_XOR_OP .)
    OVERLOAD_PLUS   reduce using rule 198 (fname -> BINARY_XOR_OP .)
    OVERLOAD_MINUS  reduce using rule 198 (fname -> BINARY_XOR_OP .)


state 91

    (199) fname -> COMBINED_COMPARISON_OP .

    IF              reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    WHILE           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    UNLESS          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    UNTIL           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    TERM            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    NUMBER          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    LPAREN          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    $end            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RESCUE          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RPAREN          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    WHEN            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    LBRACKET        reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    DOT             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    UNARY_OP        reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RANGE_INCLUSIVE reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RANGE_EXCLUSIVE reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    PLUS            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    MINUS           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    TIMES           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    DIVIDE          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    MOD             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    POW             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    OR_SYMBOL       reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_XOR_OP   reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_AND_OP   reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    COMBINED_COMPARISON_OP reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    GREATERTHAN     reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    GREATERTHANEQUAL reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    LESSERTHAN      reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    LESSERTHANEQUAL reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    EQUAL           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    CASE_EQUALITY   reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    NOTEQUAL        reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    MATCHED_STRINGS_OP reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    AND             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    OR              reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    COMMA           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RBRACKET        reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    THEN            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    DO              reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    HASH_ROCKET     reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RKEY            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    LKEY            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    END             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    ELSIF           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    ELSE            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    ENSURE          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    NOT_SYMBOL      reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    COMPLEMENT_OP   reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    DEFINED_OP      reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    RETURN          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    YIELD           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    CASE            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    FOR             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    BEGIN           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    CLASS           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    MODULE          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    DEF             reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    PUTS            reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    VAR_GLOBAL      reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    VAR_LOCAL       reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    VAR_INSTANCE    reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    VAR_CLASS       reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    SYMBOL          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    STRING          reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    IDENTIFIER      reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    SUPER           reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    OVERLOAD_PLUS   reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)
    OVERLOAD_MINUS  reduce using rule 199 (fname -> COMBINED_COMPARISON_OP .)


state 92

    (200) fname -> EQUAL .

    IF              reduce using rule 200 (fname -> EQUAL .)
    WHILE           reduce using rule 200 (fname -> EQUAL .)
    UNLESS          reduce using rule 200 (fname -> EQUAL .)
    UNTIL           reduce using rule 200 (fname -> EQUAL .)
    TERM            reduce using rule 200 (fname -> EQUAL .)
    NUMBER          reduce using rule 200 (fname -> EQUAL .)
    LPAREN          reduce using rule 200 (fname -> EQUAL .)
    $end            reduce using rule 200 (fname -> EQUAL .)
    RESCUE          reduce using rule 200 (fname -> EQUAL .)
    RPAREN          reduce using rule 200 (fname -> EQUAL .)
    WHEN            reduce using rule 200 (fname -> EQUAL .)
    LBRACKET        reduce using rule 200 (fname -> EQUAL .)
    DOT             reduce using rule 200 (fname -> EQUAL .)
    UNARY_OP        reduce using rule 200 (fname -> EQUAL .)
    RANGE_INCLUSIVE reduce using rule 200 (fname -> EQUAL .)
    RANGE_EXCLUSIVE reduce using rule 200 (fname -> EQUAL .)
    PLUS            reduce using rule 200 (fname -> EQUAL .)
    MINUS           reduce using rule 200 (fname -> EQUAL .)
    TIMES           reduce using rule 200 (fname -> EQUAL .)
    DIVIDE          reduce using rule 200 (fname -> EQUAL .)
    MOD             reduce using rule 200 (fname -> EQUAL .)
    POW             reduce using rule 200 (fname -> EQUAL .)
    OR_SYMBOL       reduce using rule 200 (fname -> EQUAL .)
    BINARY_XOR_OP   reduce using rule 200 (fname -> EQUAL .)
    BINARY_AND_OP   reduce using rule 200 (fname -> EQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 200 (fname -> EQUAL .)
    GREATERTHAN     reduce using rule 200 (fname -> EQUAL .)
    GREATERTHANEQUAL reduce using rule 200 (fname -> EQUAL .)
    LESSERTHAN      reduce using rule 200 (fname -> EQUAL .)
    LESSERTHANEQUAL reduce using rule 200 (fname -> EQUAL .)
    EQUAL           reduce using rule 200 (fname -> EQUAL .)
    CASE_EQUALITY   reduce using rule 200 (fname -> EQUAL .)
    NOTEQUAL        reduce using rule 200 (fname -> EQUAL .)
    MATCHED_STRINGS_OP reduce using rule 200 (fname -> EQUAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 200 (fname -> EQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 200 (fname -> EQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 200 (fname -> EQUAL .)
    AND             reduce using rule 200 (fname -> EQUAL .)
    OR              reduce using rule 200 (fname -> EQUAL .)
    COMMA           reduce using rule 200 (fname -> EQUAL .)
    RBRACKET        reduce using rule 200 (fname -> EQUAL .)
    THEN            reduce using rule 200 (fname -> EQUAL .)
    DO              reduce using rule 200 (fname -> EQUAL .)
    HASH_ROCKET     reduce using rule 200 (fname -> EQUAL .)
    RKEY            reduce using rule 200 (fname -> EQUAL .)
    LKEY            reduce using rule 200 (fname -> EQUAL .)
    END             reduce using rule 200 (fname -> EQUAL .)
    ELSIF           reduce using rule 200 (fname -> EQUAL .)
    ELSE            reduce using rule 200 (fname -> EQUAL .)
    ENSURE          reduce using rule 200 (fname -> EQUAL .)
    NOT_SYMBOL      reduce using rule 200 (fname -> EQUAL .)
    COMPLEMENT_OP   reduce using rule 200 (fname -> EQUAL .)
    DEFINED_OP      reduce using rule 200 (fname -> EQUAL .)
    RETURN          reduce using rule 200 (fname -> EQUAL .)
    YIELD           reduce using rule 200 (fname -> EQUAL .)
    CASE            reduce using rule 200 (fname -> EQUAL .)
    FOR             reduce using rule 200 (fname -> EQUAL .)
    BEGIN           reduce using rule 200 (fname -> EQUAL .)
    CLASS           reduce using rule 200 (fname -> EQUAL .)
    MODULE          reduce using rule 200 (fname -> EQUAL .)
    DEF             reduce using rule 200 (fname -> EQUAL .)
    PUTS            reduce using rule 200 (fname -> EQUAL .)
    VAR_GLOBAL      reduce using rule 200 (fname -> EQUAL .)
    VAR_LOCAL       reduce using rule 200 (fname -> EQUAL .)
    VAR_INSTANCE    reduce using rule 200 (fname -> EQUAL .)
    VAR_CLASS       reduce using rule 200 (fname -> EQUAL .)
    SYMBOL          reduce using rule 200 (fname -> EQUAL .)
    STRING          reduce using rule 200 (fname -> EQUAL .)
    IDENTIFIER      reduce using rule 200 (fname -> EQUAL .)
    SUPER           reduce using rule 200 (fname -> EQUAL .)
    OVERLOAD_PLUS   reduce using rule 200 (fname -> EQUAL .)
    OVERLOAD_MINUS  reduce using rule 200 (fname -> EQUAL .)


state 93

    (201) fname -> CASE_EQUALITY .

    IF              reduce using rule 201 (fname -> CASE_EQUALITY .)
    WHILE           reduce using rule 201 (fname -> CASE_EQUALITY .)
    UNLESS          reduce using rule 201 (fname -> CASE_EQUALITY .)
    UNTIL           reduce using rule 201 (fname -> CASE_EQUALITY .)
    TERM            reduce using rule 201 (fname -> CASE_EQUALITY .)
    NUMBER          reduce using rule 201 (fname -> CASE_EQUALITY .)
    LPAREN          reduce using rule 201 (fname -> CASE_EQUALITY .)
    $end            reduce using rule 201 (fname -> CASE_EQUALITY .)
    RESCUE          reduce using rule 201 (fname -> CASE_EQUALITY .)
    RPAREN          reduce using rule 201 (fname -> CASE_EQUALITY .)
    WHEN            reduce using rule 201 (fname -> CASE_EQUALITY .)
    LBRACKET        reduce using rule 201 (fname -> CASE_EQUALITY .)
    DOT             reduce using rule 201 (fname -> CASE_EQUALITY .)
    UNARY_OP        reduce using rule 201 (fname -> CASE_EQUALITY .)
    RANGE_INCLUSIVE reduce using rule 201 (fname -> CASE_EQUALITY .)
    RANGE_EXCLUSIVE reduce using rule 201 (fname -> CASE_EQUALITY .)
    PLUS            reduce using rule 201 (fname -> CASE_EQUALITY .)
    MINUS           reduce using rule 201 (fname -> CASE_EQUALITY .)
    TIMES           reduce using rule 201 (fname -> CASE_EQUALITY .)
    DIVIDE          reduce using rule 201 (fname -> CASE_EQUALITY .)
    MOD             reduce using rule 201 (fname -> CASE_EQUALITY .)
    POW             reduce using rule 201 (fname -> CASE_EQUALITY .)
    OR_SYMBOL       reduce using rule 201 (fname -> CASE_EQUALITY .)
    BINARY_XOR_OP   reduce using rule 201 (fname -> CASE_EQUALITY .)
    BINARY_AND_OP   reduce using rule 201 (fname -> CASE_EQUALITY .)
    COMBINED_COMPARISON_OP reduce using rule 201 (fname -> CASE_EQUALITY .)
    GREATERTHAN     reduce using rule 201 (fname -> CASE_EQUALITY .)
    GREATERTHANEQUAL reduce using rule 201 (fname -> CASE_EQUALITY .)
    LESSERTHAN      reduce using rule 201 (fname -> CASE_EQUALITY .)
    LESSERTHANEQUAL reduce using rule 201 (fname -> CASE_EQUALITY .)
    EQUAL           reduce using rule 201 (fname -> CASE_EQUALITY .)
    CASE_EQUALITY   reduce using rule 201 (fname -> CASE_EQUALITY .)
    NOTEQUAL        reduce using rule 201 (fname -> CASE_EQUALITY .)
    MATCHED_STRINGS_OP reduce using rule 201 (fname -> CASE_EQUALITY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 201 (fname -> CASE_EQUALITY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 201 (fname -> CASE_EQUALITY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 201 (fname -> CASE_EQUALITY .)
    AND             reduce using rule 201 (fname -> CASE_EQUALITY .)
    OR              reduce using rule 201 (fname -> CASE_EQUALITY .)
    COMMA           reduce using rule 201 (fname -> CASE_EQUALITY .)
    RBRACKET        reduce using rule 201 (fname -> CASE_EQUALITY .)
    THEN            reduce using rule 201 (fname -> CASE_EQUALITY .)
    DO              reduce using rule 201 (fname -> CASE_EQUALITY .)
    HASH_ROCKET     reduce using rule 201 (fname -> CASE_EQUALITY .)
    RKEY            reduce using rule 201 (fname -> CASE_EQUALITY .)
    LKEY            reduce using rule 201 (fname -> CASE_EQUALITY .)
    END             reduce using rule 201 (fname -> CASE_EQUALITY .)
    ELSIF           reduce using rule 201 (fname -> CASE_EQUALITY .)
    ELSE            reduce using rule 201 (fname -> CASE_EQUALITY .)
    ENSURE          reduce using rule 201 (fname -> CASE_EQUALITY .)
    NOT_SYMBOL      reduce using rule 201 (fname -> CASE_EQUALITY .)
    COMPLEMENT_OP   reduce using rule 201 (fname -> CASE_EQUALITY .)
    DEFINED_OP      reduce using rule 201 (fname -> CASE_EQUALITY .)
    RETURN          reduce using rule 201 (fname -> CASE_EQUALITY .)
    YIELD           reduce using rule 201 (fname -> CASE_EQUALITY .)
    CASE            reduce using rule 201 (fname -> CASE_EQUALITY .)
    FOR             reduce using rule 201 (fname -> CASE_EQUALITY .)
    BEGIN           reduce using rule 201 (fname -> CASE_EQUALITY .)
    CLASS           reduce using rule 201 (fname -> CASE_EQUALITY .)
    MODULE          reduce using rule 201 (fname -> CASE_EQUALITY .)
    DEF             reduce using rule 201 (fname -> CASE_EQUALITY .)
    PUTS            reduce using rule 201 (fname -> CASE_EQUALITY .)
    VAR_GLOBAL      reduce using rule 201 (fname -> CASE_EQUALITY .)
    VAR_LOCAL       reduce using rule 201 (fname -> CASE_EQUALITY .)
    VAR_INSTANCE    reduce using rule 201 (fname -> CASE_EQUALITY .)
    VAR_CLASS       reduce using rule 201 (fname -> CASE_EQUALITY .)
    SYMBOL          reduce using rule 201 (fname -> CASE_EQUALITY .)
    STRING          reduce using rule 201 (fname -> CASE_EQUALITY .)
    IDENTIFIER      reduce using rule 201 (fname -> CASE_EQUALITY .)
    SUPER           reduce using rule 201 (fname -> CASE_EQUALITY .)
    OVERLOAD_PLUS   reduce using rule 201 (fname -> CASE_EQUALITY .)
    OVERLOAD_MINUS  reduce using rule 201 (fname -> CASE_EQUALITY .)


state 94

    (202) fname -> MATCHED_STRINGS_OP .

    IF              reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    WHILE           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    UNLESS          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    UNTIL           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    TERM            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    NUMBER          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    LPAREN          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    $end            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RESCUE          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RPAREN          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    WHEN            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    LBRACKET        reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    DOT             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    UNARY_OP        reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RANGE_INCLUSIVE reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RANGE_EXCLUSIVE reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    PLUS            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    MINUS           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    TIMES           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    DIVIDE          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    MOD             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    POW             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    OR_SYMBOL       reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    BINARY_XOR_OP   reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    BINARY_AND_OP   reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    COMBINED_COMPARISON_OP reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    GREATERTHAN     reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    GREATERTHANEQUAL reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    LESSERTHAN      reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    LESSERTHANEQUAL reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    EQUAL           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    CASE_EQUALITY   reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    NOTEQUAL        reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    MATCHED_STRINGS_OP reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    AND             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    OR              reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    COMMA           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RBRACKET        reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    THEN            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    DO              reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    HASH_ROCKET     reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RKEY            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    LKEY            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    END             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    ELSIF           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    ELSE            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    ENSURE          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    NOT_SYMBOL      reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    COMPLEMENT_OP   reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    DEFINED_OP      reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    RETURN          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    YIELD           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    CASE            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    FOR             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    BEGIN           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    CLASS           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    MODULE          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    DEF             reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    PUTS            reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    VAR_GLOBAL      reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    VAR_LOCAL       reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    VAR_INSTANCE    reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    VAR_CLASS       reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    SYMBOL          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    STRING          reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    IDENTIFIER      reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    SUPER           reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    OVERLOAD_PLUS   reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)
    OVERLOAD_MINUS  reduce using rule 202 (fname -> MATCHED_STRINGS_OP .)


state 95

    (203) fname -> GREATERTHAN .

    IF              reduce using rule 203 (fname -> GREATERTHAN .)
    WHILE           reduce using rule 203 (fname -> GREATERTHAN .)
    UNLESS          reduce using rule 203 (fname -> GREATERTHAN .)
    UNTIL           reduce using rule 203 (fname -> GREATERTHAN .)
    TERM            reduce using rule 203 (fname -> GREATERTHAN .)
    NUMBER          reduce using rule 203 (fname -> GREATERTHAN .)
    LPAREN          reduce using rule 203 (fname -> GREATERTHAN .)
    $end            reduce using rule 203 (fname -> GREATERTHAN .)
    RESCUE          reduce using rule 203 (fname -> GREATERTHAN .)
    RPAREN          reduce using rule 203 (fname -> GREATERTHAN .)
    WHEN            reduce using rule 203 (fname -> GREATERTHAN .)
    LBRACKET        reduce using rule 203 (fname -> GREATERTHAN .)
    DOT             reduce using rule 203 (fname -> GREATERTHAN .)
    UNARY_OP        reduce using rule 203 (fname -> GREATERTHAN .)
    RANGE_INCLUSIVE reduce using rule 203 (fname -> GREATERTHAN .)
    RANGE_EXCLUSIVE reduce using rule 203 (fname -> GREATERTHAN .)
    PLUS            reduce using rule 203 (fname -> GREATERTHAN .)
    MINUS           reduce using rule 203 (fname -> GREATERTHAN .)
    TIMES           reduce using rule 203 (fname -> GREATERTHAN .)
    DIVIDE          reduce using rule 203 (fname -> GREATERTHAN .)
    MOD             reduce using rule 203 (fname -> GREATERTHAN .)
    POW             reduce using rule 203 (fname -> GREATERTHAN .)
    OR_SYMBOL       reduce using rule 203 (fname -> GREATERTHAN .)
    BINARY_XOR_OP   reduce using rule 203 (fname -> GREATERTHAN .)
    BINARY_AND_OP   reduce using rule 203 (fname -> GREATERTHAN .)
    COMBINED_COMPARISON_OP reduce using rule 203 (fname -> GREATERTHAN .)
    GREATERTHAN     reduce using rule 203 (fname -> GREATERTHAN .)
    GREATERTHANEQUAL reduce using rule 203 (fname -> GREATERTHAN .)
    LESSERTHAN      reduce using rule 203 (fname -> GREATERTHAN .)
    LESSERTHANEQUAL reduce using rule 203 (fname -> GREATERTHAN .)
    EQUAL           reduce using rule 203 (fname -> GREATERTHAN .)
    CASE_EQUALITY   reduce using rule 203 (fname -> GREATERTHAN .)
    NOTEQUAL        reduce using rule 203 (fname -> GREATERTHAN .)
    MATCHED_STRINGS_OP reduce using rule 203 (fname -> GREATERTHAN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 203 (fname -> GREATERTHAN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 203 (fname -> GREATERTHAN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 203 (fname -> GREATERTHAN .)
    AND             reduce using rule 203 (fname -> GREATERTHAN .)
    OR              reduce using rule 203 (fname -> GREATERTHAN .)
    COMMA           reduce using rule 203 (fname -> GREATERTHAN .)
    RBRACKET        reduce using rule 203 (fname -> GREATERTHAN .)
    THEN            reduce using rule 203 (fname -> GREATERTHAN .)
    DO              reduce using rule 203 (fname -> GREATERTHAN .)
    HASH_ROCKET     reduce using rule 203 (fname -> GREATERTHAN .)
    RKEY            reduce using rule 203 (fname -> GREATERTHAN .)
    LKEY            reduce using rule 203 (fname -> GREATERTHAN .)
    END             reduce using rule 203 (fname -> GREATERTHAN .)
    ELSIF           reduce using rule 203 (fname -> GREATERTHAN .)
    ELSE            reduce using rule 203 (fname -> GREATERTHAN .)
    ENSURE          reduce using rule 203 (fname -> GREATERTHAN .)
    NOT_SYMBOL      reduce using rule 203 (fname -> GREATERTHAN .)
    COMPLEMENT_OP   reduce using rule 203 (fname -> GREATERTHAN .)
    DEFINED_OP      reduce using rule 203 (fname -> GREATERTHAN .)
    RETURN          reduce using rule 203 (fname -> GREATERTHAN .)
    YIELD           reduce using rule 203 (fname -> GREATERTHAN .)
    CASE            reduce using rule 203 (fname -> GREATERTHAN .)
    FOR             reduce using rule 203 (fname -> GREATERTHAN .)
    BEGIN           reduce using rule 203 (fname -> GREATERTHAN .)
    CLASS           reduce using rule 203 (fname -> GREATERTHAN .)
    MODULE          reduce using rule 203 (fname -> GREATERTHAN .)
    DEF             reduce using rule 203 (fname -> GREATERTHAN .)
    PUTS            reduce using rule 203 (fname -> GREATERTHAN .)
    VAR_GLOBAL      reduce using rule 203 (fname -> GREATERTHAN .)
    VAR_LOCAL       reduce using rule 203 (fname -> GREATERTHAN .)
    VAR_INSTANCE    reduce using rule 203 (fname -> GREATERTHAN .)
    VAR_CLASS       reduce using rule 203 (fname -> GREATERTHAN .)
    SYMBOL          reduce using rule 203 (fname -> GREATERTHAN .)
    STRING          reduce using rule 203 (fname -> GREATERTHAN .)
    IDENTIFIER      reduce using rule 203 (fname -> GREATERTHAN .)
    SUPER           reduce using rule 203 (fname -> GREATERTHAN .)
    OVERLOAD_PLUS   reduce using rule 203 (fname -> GREATERTHAN .)
    OVERLOAD_MINUS  reduce using rule 203 (fname -> GREATERTHAN .)


state 96

    (204) fname -> GREATERTHANEQUAL .

    IF              reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    WHILE           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    UNLESS          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    UNTIL           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    TERM            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    NUMBER          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    LPAREN          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    $end            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RESCUE          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RPAREN          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    WHEN            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    LBRACKET        reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    DOT             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    UNARY_OP        reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RANGE_INCLUSIVE reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RANGE_EXCLUSIVE reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    PLUS            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    MINUS           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    TIMES           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    DIVIDE          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    MOD             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    POW             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    OR_SYMBOL       reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    BINARY_XOR_OP   reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    BINARY_AND_OP   reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    GREATERTHAN     reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    GREATERTHANEQUAL reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    LESSERTHAN      reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    LESSERTHANEQUAL reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    EQUAL           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    CASE_EQUALITY   reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    NOTEQUAL        reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    MATCHED_STRINGS_OP reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    AND             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    OR              reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    COMMA           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RBRACKET        reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    THEN            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    DO              reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    HASH_ROCKET     reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RKEY            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    LKEY            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    END             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    ELSIF           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    ELSE            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    ENSURE          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    NOT_SYMBOL      reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    COMPLEMENT_OP   reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    DEFINED_OP      reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    RETURN          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    YIELD           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    CASE            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    FOR             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    BEGIN           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    CLASS           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    MODULE          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    DEF             reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    PUTS            reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    VAR_CLASS       reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    SYMBOL          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    STRING          reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    IDENTIFIER      reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    SUPER           reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    OVERLOAD_PLUS   reduce using rule 204 (fname -> GREATERTHANEQUAL .)
    OVERLOAD_MINUS  reduce using rule 204 (fname -> GREATERTHANEQUAL .)


state 97

    (205) fname -> LESSERTHAN .

    IF              reduce using rule 205 (fname -> LESSERTHAN .)
    WHILE           reduce using rule 205 (fname -> LESSERTHAN .)
    UNLESS          reduce using rule 205 (fname -> LESSERTHAN .)
    UNTIL           reduce using rule 205 (fname -> LESSERTHAN .)
    TERM            reduce using rule 205 (fname -> LESSERTHAN .)
    NUMBER          reduce using rule 205 (fname -> LESSERTHAN .)
    LPAREN          reduce using rule 205 (fname -> LESSERTHAN .)
    $end            reduce using rule 205 (fname -> LESSERTHAN .)
    RESCUE          reduce using rule 205 (fname -> LESSERTHAN .)
    RPAREN          reduce using rule 205 (fname -> LESSERTHAN .)
    WHEN            reduce using rule 205 (fname -> LESSERTHAN .)
    LBRACKET        reduce using rule 205 (fname -> LESSERTHAN .)
    DOT             reduce using rule 205 (fname -> LESSERTHAN .)
    UNARY_OP        reduce using rule 205 (fname -> LESSERTHAN .)
    RANGE_INCLUSIVE reduce using rule 205 (fname -> LESSERTHAN .)
    RANGE_EXCLUSIVE reduce using rule 205 (fname -> LESSERTHAN .)
    PLUS            reduce using rule 205 (fname -> LESSERTHAN .)
    MINUS           reduce using rule 205 (fname -> LESSERTHAN .)
    TIMES           reduce using rule 205 (fname -> LESSERTHAN .)
    DIVIDE          reduce using rule 205 (fname -> LESSERTHAN .)
    MOD             reduce using rule 205 (fname -> LESSERTHAN .)
    POW             reduce using rule 205 (fname -> LESSERTHAN .)
    OR_SYMBOL       reduce using rule 205 (fname -> LESSERTHAN .)
    BINARY_XOR_OP   reduce using rule 205 (fname -> LESSERTHAN .)
    BINARY_AND_OP   reduce using rule 205 (fname -> LESSERTHAN .)
    COMBINED_COMPARISON_OP reduce using rule 205 (fname -> LESSERTHAN .)
    GREATERTHAN     reduce using rule 205 (fname -> LESSERTHAN .)
    GREATERTHANEQUAL reduce using rule 205 (fname -> LESSERTHAN .)
    LESSERTHAN      reduce using rule 205 (fname -> LESSERTHAN .)
    LESSERTHANEQUAL reduce using rule 205 (fname -> LESSERTHAN .)
    EQUAL           reduce using rule 205 (fname -> LESSERTHAN .)
    CASE_EQUALITY   reduce using rule 205 (fname -> LESSERTHAN .)
    NOTEQUAL        reduce using rule 205 (fname -> LESSERTHAN .)
    MATCHED_STRINGS_OP reduce using rule 205 (fname -> LESSERTHAN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 205 (fname -> LESSERTHAN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 205 (fname -> LESSERTHAN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 205 (fname -> LESSERTHAN .)
    AND             reduce using rule 205 (fname -> LESSERTHAN .)
    OR              reduce using rule 205 (fname -> LESSERTHAN .)
    COMMA           reduce using rule 205 (fname -> LESSERTHAN .)
    RBRACKET        reduce using rule 205 (fname -> LESSERTHAN .)
    THEN            reduce using rule 205 (fname -> LESSERTHAN .)
    DO              reduce using rule 205 (fname -> LESSERTHAN .)
    HASH_ROCKET     reduce using rule 205 (fname -> LESSERTHAN .)
    RKEY            reduce using rule 205 (fname -> LESSERTHAN .)
    LKEY            reduce using rule 205 (fname -> LESSERTHAN .)
    END             reduce using rule 205 (fname -> LESSERTHAN .)
    ELSIF           reduce using rule 205 (fname -> LESSERTHAN .)
    ELSE            reduce using rule 205 (fname -> LESSERTHAN .)
    ENSURE          reduce using rule 205 (fname -> LESSERTHAN .)
    NOT_SYMBOL      reduce using rule 205 (fname -> LESSERTHAN .)
    COMPLEMENT_OP   reduce using rule 205 (fname -> LESSERTHAN .)
    DEFINED_OP      reduce using rule 205 (fname -> LESSERTHAN .)
    RETURN          reduce using rule 205 (fname -> LESSERTHAN .)
    YIELD           reduce using rule 205 (fname -> LESSERTHAN .)
    CASE            reduce using rule 205 (fname -> LESSERTHAN .)
    FOR             reduce using rule 205 (fname -> LESSERTHAN .)
    BEGIN           reduce using rule 205 (fname -> LESSERTHAN .)
    CLASS           reduce using rule 205 (fname -> LESSERTHAN .)
    MODULE          reduce using rule 205 (fname -> LESSERTHAN .)
    DEF             reduce using rule 205 (fname -> LESSERTHAN .)
    PUTS            reduce using rule 205 (fname -> LESSERTHAN .)
    VAR_GLOBAL      reduce using rule 205 (fname -> LESSERTHAN .)
    VAR_LOCAL       reduce using rule 205 (fname -> LESSERTHAN .)
    VAR_INSTANCE    reduce using rule 205 (fname -> LESSERTHAN .)
    VAR_CLASS       reduce using rule 205 (fname -> LESSERTHAN .)
    SYMBOL          reduce using rule 205 (fname -> LESSERTHAN .)
    STRING          reduce using rule 205 (fname -> LESSERTHAN .)
    IDENTIFIER      reduce using rule 205 (fname -> LESSERTHAN .)
    SUPER           reduce using rule 205 (fname -> LESSERTHAN .)
    OVERLOAD_PLUS   reduce using rule 205 (fname -> LESSERTHAN .)
    OVERLOAD_MINUS  reduce using rule 205 (fname -> LESSERTHAN .)


state 98

    (206) fname -> LESSERTHANEQUAL .

    IF              reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    WHILE           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    UNLESS          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    UNTIL           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    TERM            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    NUMBER          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    LPAREN          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    $end            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RESCUE          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RPAREN          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    WHEN            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    LBRACKET        reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    DOT             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    UNARY_OP        reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RANGE_INCLUSIVE reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RANGE_EXCLUSIVE reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    PLUS            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    MINUS           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    TIMES           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    DIVIDE          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    MOD             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    POW             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    OR_SYMBOL       reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    BINARY_XOR_OP   reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    BINARY_AND_OP   reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    GREATERTHAN     reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    GREATERTHANEQUAL reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    LESSERTHAN      reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    LESSERTHANEQUAL reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    EQUAL           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    CASE_EQUALITY   reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    NOTEQUAL        reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    MATCHED_STRINGS_OP reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    AND             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    OR              reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    COMMA           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RBRACKET        reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    THEN            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    DO              reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    HASH_ROCKET     reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RKEY            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    LKEY            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    END             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    ELSIF           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    ELSE            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    ENSURE          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    NOT_SYMBOL      reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    COMPLEMENT_OP   reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    DEFINED_OP      reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    RETURN          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    YIELD           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    CASE            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    FOR             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    BEGIN           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    CLASS           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    MODULE          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    DEF             reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    PUTS            reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    VAR_GLOBAL      reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    VAR_LOCAL       reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    VAR_INSTANCE    reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    VAR_CLASS       reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    SYMBOL          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    STRING          reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    IDENTIFIER      reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    SUPER           reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    OVERLOAD_PLUS   reduce using rule 206 (fname -> LESSERTHANEQUAL .)
    OVERLOAD_MINUS  reduce using rule 206 (fname -> LESSERTHANEQUAL .)


state 99

    (207) fname -> PLUS .

    IF              reduce using rule 207 (fname -> PLUS .)
    WHILE           reduce using rule 207 (fname -> PLUS .)
    UNLESS          reduce using rule 207 (fname -> PLUS .)
    UNTIL           reduce using rule 207 (fname -> PLUS .)
    TERM            reduce using rule 207 (fname -> PLUS .)
    NUMBER          reduce using rule 207 (fname -> PLUS .)
    LPAREN          reduce using rule 207 (fname -> PLUS .)
    $end            reduce using rule 207 (fname -> PLUS .)
    RESCUE          reduce using rule 207 (fname -> PLUS .)
    RPAREN          reduce using rule 207 (fname -> PLUS .)
    WHEN            reduce using rule 207 (fname -> PLUS .)
    LBRACKET        reduce using rule 207 (fname -> PLUS .)
    DOT             reduce using rule 207 (fname -> PLUS .)
    UNARY_OP        reduce using rule 207 (fname -> PLUS .)
    RANGE_INCLUSIVE reduce using rule 207 (fname -> PLUS .)
    RANGE_EXCLUSIVE reduce using rule 207 (fname -> PLUS .)
    PLUS            reduce using rule 207 (fname -> PLUS .)
    MINUS           reduce using rule 207 (fname -> PLUS .)
    TIMES           reduce using rule 207 (fname -> PLUS .)
    DIVIDE          reduce using rule 207 (fname -> PLUS .)
    MOD             reduce using rule 207 (fname -> PLUS .)
    POW             reduce using rule 207 (fname -> PLUS .)
    OR_SYMBOL       reduce using rule 207 (fname -> PLUS .)
    BINARY_XOR_OP   reduce using rule 207 (fname -> PLUS .)
    BINARY_AND_OP   reduce using rule 207 (fname -> PLUS .)
    COMBINED_COMPARISON_OP reduce using rule 207 (fname -> PLUS .)
    GREATERTHAN     reduce using rule 207 (fname -> PLUS .)
    GREATERTHANEQUAL reduce using rule 207 (fname -> PLUS .)
    LESSERTHAN      reduce using rule 207 (fname -> PLUS .)
    LESSERTHANEQUAL reduce using rule 207 (fname -> PLUS .)
    EQUAL           reduce using rule 207 (fname -> PLUS .)
    CASE_EQUALITY   reduce using rule 207 (fname -> PLUS .)
    NOTEQUAL        reduce using rule 207 (fname -> PLUS .)
    MATCHED_STRINGS_OP reduce using rule 207 (fname -> PLUS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 207 (fname -> PLUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 207 (fname -> PLUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 207 (fname -> PLUS .)
    AND             reduce using rule 207 (fname -> PLUS .)
    OR              reduce using rule 207 (fname -> PLUS .)
    COMMA           reduce using rule 207 (fname -> PLUS .)
    RBRACKET        reduce using rule 207 (fname -> PLUS .)
    THEN            reduce using rule 207 (fname -> PLUS .)
    DO              reduce using rule 207 (fname -> PLUS .)
    HASH_ROCKET     reduce using rule 207 (fname -> PLUS .)
    RKEY            reduce using rule 207 (fname -> PLUS .)
    LKEY            reduce using rule 207 (fname -> PLUS .)
    END             reduce using rule 207 (fname -> PLUS .)
    ELSIF           reduce using rule 207 (fname -> PLUS .)
    ELSE            reduce using rule 207 (fname -> PLUS .)
    ENSURE          reduce using rule 207 (fname -> PLUS .)
    NOT_SYMBOL      reduce using rule 207 (fname -> PLUS .)
    COMPLEMENT_OP   reduce using rule 207 (fname -> PLUS .)
    DEFINED_OP      reduce using rule 207 (fname -> PLUS .)
    RETURN          reduce using rule 207 (fname -> PLUS .)
    YIELD           reduce using rule 207 (fname -> PLUS .)
    CASE            reduce using rule 207 (fname -> PLUS .)
    FOR             reduce using rule 207 (fname -> PLUS .)
    BEGIN           reduce using rule 207 (fname -> PLUS .)
    CLASS           reduce using rule 207 (fname -> PLUS .)
    MODULE          reduce using rule 207 (fname -> PLUS .)
    DEF             reduce using rule 207 (fname -> PLUS .)
    PUTS            reduce using rule 207 (fname -> PLUS .)
    VAR_GLOBAL      reduce using rule 207 (fname -> PLUS .)
    VAR_LOCAL       reduce using rule 207 (fname -> PLUS .)
    VAR_INSTANCE    reduce using rule 207 (fname -> PLUS .)
    VAR_CLASS       reduce using rule 207 (fname -> PLUS .)
    SYMBOL          reduce using rule 207 (fname -> PLUS .)
    STRING          reduce using rule 207 (fname -> PLUS .)
    IDENTIFIER      reduce using rule 207 (fname -> PLUS .)
    SUPER           reduce using rule 207 (fname -> PLUS .)
    OVERLOAD_PLUS   reduce using rule 207 (fname -> PLUS .)
    OVERLOAD_MINUS  reduce using rule 207 (fname -> PLUS .)


state 100

    (208) fname -> MINUS .

    IF              reduce using rule 208 (fname -> MINUS .)
    WHILE           reduce using rule 208 (fname -> MINUS .)
    UNLESS          reduce using rule 208 (fname -> MINUS .)
    UNTIL           reduce using rule 208 (fname -> MINUS .)
    TERM            reduce using rule 208 (fname -> MINUS .)
    NUMBER          reduce using rule 208 (fname -> MINUS .)
    LPAREN          reduce using rule 208 (fname -> MINUS .)
    $end            reduce using rule 208 (fname -> MINUS .)
    RESCUE          reduce using rule 208 (fname -> MINUS .)
    RPAREN          reduce using rule 208 (fname -> MINUS .)
    WHEN            reduce using rule 208 (fname -> MINUS .)
    LBRACKET        reduce using rule 208 (fname -> MINUS .)
    DOT             reduce using rule 208 (fname -> MINUS .)
    UNARY_OP        reduce using rule 208 (fname -> MINUS .)
    RANGE_INCLUSIVE reduce using rule 208 (fname -> MINUS .)
    RANGE_EXCLUSIVE reduce using rule 208 (fname -> MINUS .)
    PLUS            reduce using rule 208 (fname -> MINUS .)
    MINUS           reduce using rule 208 (fname -> MINUS .)
    TIMES           reduce using rule 208 (fname -> MINUS .)
    DIVIDE          reduce using rule 208 (fname -> MINUS .)
    MOD             reduce using rule 208 (fname -> MINUS .)
    POW             reduce using rule 208 (fname -> MINUS .)
    OR_SYMBOL       reduce using rule 208 (fname -> MINUS .)
    BINARY_XOR_OP   reduce using rule 208 (fname -> MINUS .)
    BINARY_AND_OP   reduce using rule 208 (fname -> MINUS .)
    COMBINED_COMPARISON_OP reduce using rule 208 (fname -> MINUS .)
    GREATERTHAN     reduce using rule 208 (fname -> MINUS .)
    GREATERTHANEQUAL reduce using rule 208 (fname -> MINUS .)
    LESSERTHAN      reduce using rule 208 (fname -> MINUS .)
    LESSERTHANEQUAL reduce using rule 208 (fname -> MINUS .)
    EQUAL           reduce using rule 208 (fname -> MINUS .)
    CASE_EQUALITY   reduce using rule 208 (fname -> MINUS .)
    NOTEQUAL        reduce using rule 208 (fname -> MINUS .)
    MATCHED_STRINGS_OP reduce using rule 208 (fname -> MINUS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 208 (fname -> MINUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 208 (fname -> MINUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 208 (fname -> MINUS .)
    AND             reduce using rule 208 (fname -> MINUS .)
    OR              reduce using rule 208 (fname -> MINUS .)
    COMMA           reduce using rule 208 (fname -> MINUS .)
    RBRACKET        reduce using rule 208 (fname -> MINUS .)
    THEN            reduce using rule 208 (fname -> MINUS .)
    DO              reduce using rule 208 (fname -> MINUS .)
    HASH_ROCKET     reduce using rule 208 (fname -> MINUS .)
    RKEY            reduce using rule 208 (fname -> MINUS .)
    LKEY            reduce using rule 208 (fname -> MINUS .)
    END             reduce using rule 208 (fname -> MINUS .)
    ELSIF           reduce using rule 208 (fname -> MINUS .)
    ELSE            reduce using rule 208 (fname -> MINUS .)
    ENSURE          reduce using rule 208 (fname -> MINUS .)
    NOT_SYMBOL      reduce using rule 208 (fname -> MINUS .)
    COMPLEMENT_OP   reduce using rule 208 (fname -> MINUS .)
    DEFINED_OP      reduce using rule 208 (fname -> MINUS .)
    RETURN          reduce using rule 208 (fname -> MINUS .)
    YIELD           reduce using rule 208 (fname -> MINUS .)
    CASE            reduce using rule 208 (fname -> MINUS .)
    FOR             reduce using rule 208 (fname -> MINUS .)
    BEGIN           reduce using rule 208 (fname -> MINUS .)
    CLASS           reduce using rule 208 (fname -> MINUS .)
    MODULE          reduce using rule 208 (fname -> MINUS .)
    DEF             reduce using rule 208 (fname -> MINUS .)
    PUTS            reduce using rule 208 (fname -> MINUS .)
    VAR_GLOBAL      reduce using rule 208 (fname -> MINUS .)
    VAR_LOCAL       reduce using rule 208 (fname -> MINUS .)
    VAR_INSTANCE    reduce using rule 208 (fname -> MINUS .)
    VAR_CLASS       reduce using rule 208 (fname -> MINUS .)
    SYMBOL          reduce using rule 208 (fname -> MINUS .)
    STRING          reduce using rule 208 (fname -> MINUS .)
    IDENTIFIER      reduce using rule 208 (fname -> MINUS .)
    SUPER           reduce using rule 208 (fname -> MINUS .)
    OVERLOAD_PLUS   reduce using rule 208 (fname -> MINUS .)
    OVERLOAD_MINUS  reduce using rule 208 (fname -> MINUS .)


state 101

    (209) fname -> TIMES .

    IF              reduce using rule 209 (fname -> TIMES .)
    WHILE           reduce using rule 209 (fname -> TIMES .)
    UNLESS          reduce using rule 209 (fname -> TIMES .)
    UNTIL           reduce using rule 209 (fname -> TIMES .)
    TERM            reduce using rule 209 (fname -> TIMES .)
    NUMBER          reduce using rule 209 (fname -> TIMES .)
    LPAREN          reduce using rule 209 (fname -> TIMES .)
    $end            reduce using rule 209 (fname -> TIMES .)
    RESCUE          reduce using rule 209 (fname -> TIMES .)
    RPAREN          reduce using rule 209 (fname -> TIMES .)
    WHEN            reduce using rule 209 (fname -> TIMES .)
    LBRACKET        reduce using rule 209 (fname -> TIMES .)
    DOT             reduce using rule 209 (fname -> TIMES .)
    UNARY_OP        reduce using rule 209 (fname -> TIMES .)
    RANGE_INCLUSIVE reduce using rule 209 (fname -> TIMES .)
    RANGE_EXCLUSIVE reduce using rule 209 (fname -> TIMES .)
    PLUS            reduce using rule 209 (fname -> TIMES .)
    MINUS           reduce using rule 209 (fname -> TIMES .)
    TIMES           reduce using rule 209 (fname -> TIMES .)
    DIVIDE          reduce using rule 209 (fname -> TIMES .)
    MOD             reduce using rule 209 (fname -> TIMES .)
    POW             reduce using rule 209 (fname -> TIMES .)
    OR_SYMBOL       reduce using rule 209 (fname -> TIMES .)
    BINARY_XOR_OP   reduce using rule 209 (fname -> TIMES .)
    BINARY_AND_OP   reduce using rule 209 (fname -> TIMES .)
    COMBINED_COMPARISON_OP reduce using rule 209 (fname -> TIMES .)
    GREATERTHAN     reduce using rule 209 (fname -> TIMES .)
    GREATERTHANEQUAL reduce using rule 209 (fname -> TIMES .)
    LESSERTHAN      reduce using rule 209 (fname -> TIMES .)
    LESSERTHANEQUAL reduce using rule 209 (fname -> TIMES .)
    EQUAL           reduce using rule 209 (fname -> TIMES .)
    CASE_EQUALITY   reduce using rule 209 (fname -> TIMES .)
    NOTEQUAL        reduce using rule 209 (fname -> TIMES .)
    MATCHED_STRINGS_OP reduce using rule 209 (fname -> TIMES .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 209 (fname -> TIMES .)
    BINARY_LEFT_SHIFT_OP reduce using rule 209 (fname -> TIMES .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 209 (fname -> TIMES .)
    AND             reduce using rule 209 (fname -> TIMES .)
    OR              reduce using rule 209 (fname -> TIMES .)
    COMMA           reduce using rule 209 (fname -> TIMES .)
    RBRACKET        reduce using rule 209 (fname -> TIMES .)
    THEN            reduce using rule 209 (fname -> TIMES .)
    DO              reduce using rule 209 (fname -> TIMES .)
    HASH_ROCKET     reduce using rule 209 (fname -> TIMES .)
    RKEY            reduce using rule 209 (fname -> TIMES .)
    LKEY            reduce using rule 209 (fname -> TIMES .)
    END             reduce using rule 209 (fname -> TIMES .)
    ELSIF           reduce using rule 209 (fname -> TIMES .)
    ELSE            reduce using rule 209 (fname -> TIMES .)
    ENSURE          reduce using rule 209 (fname -> TIMES .)
    NOT_SYMBOL      reduce using rule 209 (fname -> TIMES .)
    COMPLEMENT_OP   reduce using rule 209 (fname -> TIMES .)
    DEFINED_OP      reduce using rule 209 (fname -> TIMES .)
    RETURN          reduce using rule 209 (fname -> TIMES .)
    YIELD           reduce using rule 209 (fname -> TIMES .)
    CASE            reduce using rule 209 (fname -> TIMES .)
    FOR             reduce using rule 209 (fname -> TIMES .)
    BEGIN           reduce using rule 209 (fname -> TIMES .)
    CLASS           reduce using rule 209 (fname -> TIMES .)
    MODULE          reduce using rule 209 (fname -> TIMES .)
    DEF             reduce using rule 209 (fname -> TIMES .)
    PUTS            reduce using rule 209 (fname -> TIMES .)
    VAR_GLOBAL      reduce using rule 209 (fname -> TIMES .)
    VAR_LOCAL       reduce using rule 209 (fname -> TIMES .)
    VAR_INSTANCE    reduce using rule 209 (fname -> TIMES .)
    VAR_CLASS       reduce using rule 209 (fname -> TIMES .)
    SYMBOL          reduce using rule 209 (fname -> TIMES .)
    STRING          reduce using rule 209 (fname -> TIMES .)
    IDENTIFIER      reduce using rule 209 (fname -> TIMES .)
    SUPER           reduce using rule 209 (fname -> TIMES .)
    OVERLOAD_PLUS   reduce using rule 209 (fname -> TIMES .)
    OVERLOAD_MINUS  reduce using rule 209 (fname -> TIMES .)


state 102

    (210) fname -> DIVIDE .

    IF              reduce using rule 210 (fname -> DIVIDE .)
    WHILE           reduce using rule 210 (fname -> DIVIDE .)
    UNLESS          reduce using rule 210 (fname -> DIVIDE .)
    UNTIL           reduce using rule 210 (fname -> DIVIDE .)
    TERM            reduce using rule 210 (fname -> DIVIDE .)
    NUMBER          reduce using rule 210 (fname -> DIVIDE .)
    LPAREN          reduce using rule 210 (fname -> DIVIDE .)
    $end            reduce using rule 210 (fname -> DIVIDE .)
    RESCUE          reduce using rule 210 (fname -> DIVIDE .)
    RPAREN          reduce using rule 210 (fname -> DIVIDE .)
    WHEN            reduce using rule 210 (fname -> DIVIDE .)
    LBRACKET        reduce using rule 210 (fname -> DIVIDE .)
    DOT             reduce using rule 210 (fname -> DIVIDE .)
    UNARY_OP        reduce using rule 210 (fname -> DIVIDE .)
    RANGE_INCLUSIVE reduce using rule 210 (fname -> DIVIDE .)
    RANGE_EXCLUSIVE reduce using rule 210 (fname -> DIVIDE .)
    PLUS            reduce using rule 210 (fname -> DIVIDE .)
    MINUS           reduce using rule 210 (fname -> DIVIDE .)
    TIMES           reduce using rule 210 (fname -> DIVIDE .)
    DIVIDE          reduce using rule 210 (fname -> DIVIDE .)
    MOD             reduce using rule 210 (fname -> DIVIDE .)
    POW             reduce using rule 210 (fname -> DIVIDE .)
    OR_SYMBOL       reduce using rule 210 (fname -> DIVIDE .)
    BINARY_XOR_OP   reduce using rule 210 (fname -> DIVIDE .)
    BINARY_AND_OP   reduce using rule 210 (fname -> DIVIDE .)
    COMBINED_COMPARISON_OP reduce using rule 210 (fname -> DIVIDE .)
    GREATERTHAN     reduce using rule 210 (fname -> DIVIDE .)
    GREATERTHANEQUAL reduce using rule 210 (fname -> DIVIDE .)
    LESSERTHAN      reduce using rule 210 (fname -> DIVIDE .)
    LESSERTHANEQUAL reduce using rule 210 (fname -> DIVIDE .)
    EQUAL           reduce using rule 210 (fname -> DIVIDE .)
    CASE_EQUALITY   reduce using rule 210 (fname -> DIVIDE .)
    NOTEQUAL        reduce using rule 210 (fname -> DIVIDE .)
    MATCHED_STRINGS_OP reduce using rule 210 (fname -> DIVIDE .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 210 (fname -> DIVIDE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 210 (fname -> DIVIDE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 210 (fname -> DIVIDE .)
    AND             reduce using rule 210 (fname -> DIVIDE .)
    OR              reduce using rule 210 (fname -> DIVIDE .)
    COMMA           reduce using rule 210 (fname -> DIVIDE .)
    RBRACKET        reduce using rule 210 (fname -> DIVIDE .)
    THEN            reduce using rule 210 (fname -> DIVIDE .)
    DO              reduce using rule 210 (fname -> DIVIDE .)
    HASH_ROCKET     reduce using rule 210 (fname -> DIVIDE .)
    RKEY            reduce using rule 210 (fname -> DIVIDE .)
    LKEY            reduce using rule 210 (fname -> DIVIDE .)
    END             reduce using rule 210 (fname -> DIVIDE .)
    ELSIF           reduce using rule 210 (fname -> DIVIDE .)
    ELSE            reduce using rule 210 (fname -> DIVIDE .)
    ENSURE          reduce using rule 210 (fname -> DIVIDE .)
    NOT_SYMBOL      reduce using rule 210 (fname -> DIVIDE .)
    COMPLEMENT_OP   reduce using rule 210 (fname -> DIVIDE .)
    DEFINED_OP      reduce using rule 210 (fname -> DIVIDE .)
    RETURN          reduce using rule 210 (fname -> DIVIDE .)
    YIELD           reduce using rule 210 (fname -> DIVIDE .)
    CASE            reduce using rule 210 (fname -> DIVIDE .)
    FOR             reduce using rule 210 (fname -> DIVIDE .)
    BEGIN           reduce using rule 210 (fname -> DIVIDE .)
    CLASS           reduce using rule 210 (fname -> DIVIDE .)
    MODULE          reduce using rule 210 (fname -> DIVIDE .)
    DEF             reduce using rule 210 (fname -> DIVIDE .)
    PUTS            reduce using rule 210 (fname -> DIVIDE .)
    VAR_GLOBAL      reduce using rule 210 (fname -> DIVIDE .)
    VAR_LOCAL       reduce using rule 210 (fname -> DIVIDE .)
    VAR_INSTANCE    reduce using rule 210 (fname -> DIVIDE .)
    VAR_CLASS       reduce using rule 210 (fname -> DIVIDE .)
    SYMBOL          reduce using rule 210 (fname -> DIVIDE .)
    STRING          reduce using rule 210 (fname -> DIVIDE .)
    IDENTIFIER      reduce using rule 210 (fname -> DIVIDE .)
    SUPER           reduce using rule 210 (fname -> DIVIDE .)
    OVERLOAD_PLUS   reduce using rule 210 (fname -> DIVIDE .)
    OVERLOAD_MINUS  reduce using rule 210 (fname -> DIVIDE .)


state 103

    (211) fname -> MOD .

    IF              reduce using rule 211 (fname -> MOD .)
    WHILE           reduce using rule 211 (fname -> MOD .)
    UNLESS          reduce using rule 211 (fname -> MOD .)
    UNTIL           reduce using rule 211 (fname -> MOD .)
    TERM            reduce using rule 211 (fname -> MOD .)
    NUMBER          reduce using rule 211 (fname -> MOD .)
    LPAREN          reduce using rule 211 (fname -> MOD .)
    $end            reduce using rule 211 (fname -> MOD .)
    RESCUE          reduce using rule 211 (fname -> MOD .)
    RPAREN          reduce using rule 211 (fname -> MOD .)
    WHEN            reduce using rule 211 (fname -> MOD .)
    LBRACKET        reduce using rule 211 (fname -> MOD .)
    DOT             reduce using rule 211 (fname -> MOD .)
    UNARY_OP        reduce using rule 211 (fname -> MOD .)
    RANGE_INCLUSIVE reduce using rule 211 (fname -> MOD .)
    RANGE_EXCLUSIVE reduce using rule 211 (fname -> MOD .)
    PLUS            reduce using rule 211 (fname -> MOD .)
    MINUS           reduce using rule 211 (fname -> MOD .)
    TIMES           reduce using rule 211 (fname -> MOD .)
    DIVIDE          reduce using rule 211 (fname -> MOD .)
    MOD             reduce using rule 211 (fname -> MOD .)
    POW             reduce using rule 211 (fname -> MOD .)
    OR_SYMBOL       reduce using rule 211 (fname -> MOD .)
    BINARY_XOR_OP   reduce using rule 211 (fname -> MOD .)
    BINARY_AND_OP   reduce using rule 211 (fname -> MOD .)
    COMBINED_COMPARISON_OP reduce using rule 211 (fname -> MOD .)
    GREATERTHAN     reduce using rule 211 (fname -> MOD .)
    GREATERTHANEQUAL reduce using rule 211 (fname -> MOD .)
    LESSERTHAN      reduce using rule 211 (fname -> MOD .)
    LESSERTHANEQUAL reduce using rule 211 (fname -> MOD .)
    EQUAL           reduce using rule 211 (fname -> MOD .)
    CASE_EQUALITY   reduce using rule 211 (fname -> MOD .)
    NOTEQUAL        reduce using rule 211 (fname -> MOD .)
    MATCHED_STRINGS_OP reduce using rule 211 (fname -> MOD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 211 (fname -> MOD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 211 (fname -> MOD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 211 (fname -> MOD .)
    AND             reduce using rule 211 (fname -> MOD .)
    OR              reduce using rule 211 (fname -> MOD .)
    COMMA           reduce using rule 211 (fname -> MOD .)
    RBRACKET        reduce using rule 211 (fname -> MOD .)
    THEN            reduce using rule 211 (fname -> MOD .)
    DO              reduce using rule 211 (fname -> MOD .)
    HASH_ROCKET     reduce using rule 211 (fname -> MOD .)
    RKEY            reduce using rule 211 (fname -> MOD .)
    LKEY            reduce using rule 211 (fname -> MOD .)
    END             reduce using rule 211 (fname -> MOD .)
    ELSIF           reduce using rule 211 (fname -> MOD .)
    ELSE            reduce using rule 211 (fname -> MOD .)
    ENSURE          reduce using rule 211 (fname -> MOD .)
    NOT_SYMBOL      reduce using rule 211 (fname -> MOD .)
    COMPLEMENT_OP   reduce using rule 211 (fname -> MOD .)
    DEFINED_OP      reduce using rule 211 (fname -> MOD .)
    RETURN          reduce using rule 211 (fname -> MOD .)
    YIELD           reduce using rule 211 (fname -> MOD .)
    CASE            reduce using rule 211 (fname -> MOD .)
    FOR             reduce using rule 211 (fname -> MOD .)
    BEGIN           reduce using rule 211 (fname -> MOD .)
    CLASS           reduce using rule 211 (fname -> MOD .)
    MODULE          reduce using rule 211 (fname -> MOD .)
    DEF             reduce using rule 211 (fname -> MOD .)
    PUTS            reduce using rule 211 (fname -> MOD .)
    VAR_GLOBAL      reduce using rule 211 (fname -> MOD .)
    VAR_LOCAL       reduce using rule 211 (fname -> MOD .)
    VAR_INSTANCE    reduce using rule 211 (fname -> MOD .)
    VAR_CLASS       reduce using rule 211 (fname -> MOD .)
    SYMBOL          reduce using rule 211 (fname -> MOD .)
    STRING          reduce using rule 211 (fname -> MOD .)
    IDENTIFIER      reduce using rule 211 (fname -> MOD .)
    SUPER           reduce using rule 211 (fname -> MOD .)
    OVERLOAD_PLUS   reduce using rule 211 (fname -> MOD .)
    OVERLOAD_MINUS  reduce using rule 211 (fname -> MOD .)


state 104

    (212) fname -> POW .

    IF              reduce using rule 212 (fname -> POW .)
    WHILE           reduce using rule 212 (fname -> POW .)
    UNLESS          reduce using rule 212 (fname -> POW .)
    UNTIL           reduce using rule 212 (fname -> POW .)
    TERM            reduce using rule 212 (fname -> POW .)
    NUMBER          reduce using rule 212 (fname -> POW .)
    LPAREN          reduce using rule 212 (fname -> POW .)
    $end            reduce using rule 212 (fname -> POW .)
    RESCUE          reduce using rule 212 (fname -> POW .)
    RPAREN          reduce using rule 212 (fname -> POW .)
    WHEN            reduce using rule 212 (fname -> POW .)
    LBRACKET        reduce using rule 212 (fname -> POW .)
    DOT             reduce using rule 212 (fname -> POW .)
    UNARY_OP        reduce using rule 212 (fname -> POW .)
    RANGE_INCLUSIVE reduce using rule 212 (fname -> POW .)
    RANGE_EXCLUSIVE reduce using rule 212 (fname -> POW .)
    PLUS            reduce using rule 212 (fname -> POW .)
    MINUS           reduce using rule 212 (fname -> POW .)
    TIMES           reduce using rule 212 (fname -> POW .)
    DIVIDE          reduce using rule 212 (fname -> POW .)
    MOD             reduce using rule 212 (fname -> POW .)
    POW             reduce using rule 212 (fname -> POW .)
    OR_SYMBOL       reduce using rule 212 (fname -> POW .)
    BINARY_XOR_OP   reduce using rule 212 (fname -> POW .)
    BINARY_AND_OP   reduce using rule 212 (fname -> POW .)
    COMBINED_COMPARISON_OP reduce using rule 212 (fname -> POW .)
    GREATERTHAN     reduce using rule 212 (fname -> POW .)
    GREATERTHANEQUAL reduce using rule 212 (fname -> POW .)
    LESSERTHAN      reduce using rule 212 (fname -> POW .)
    LESSERTHANEQUAL reduce using rule 212 (fname -> POW .)
    EQUAL           reduce using rule 212 (fname -> POW .)
    CASE_EQUALITY   reduce using rule 212 (fname -> POW .)
    NOTEQUAL        reduce using rule 212 (fname -> POW .)
    MATCHED_STRINGS_OP reduce using rule 212 (fname -> POW .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 212 (fname -> POW .)
    BINARY_LEFT_SHIFT_OP reduce using rule 212 (fname -> POW .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 212 (fname -> POW .)
    AND             reduce using rule 212 (fname -> POW .)
    OR              reduce using rule 212 (fname -> POW .)
    COMMA           reduce using rule 212 (fname -> POW .)
    RBRACKET        reduce using rule 212 (fname -> POW .)
    THEN            reduce using rule 212 (fname -> POW .)
    DO              reduce using rule 212 (fname -> POW .)
    HASH_ROCKET     reduce using rule 212 (fname -> POW .)
    RKEY            reduce using rule 212 (fname -> POW .)
    LKEY            reduce using rule 212 (fname -> POW .)
    END             reduce using rule 212 (fname -> POW .)
    ELSIF           reduce using rule 212 (fname -> POW .)
    ELSE            reduce using rule 212 (fname -> POW .)
    ENSURE          reduce using rule 212 (fname -> POW .)
    NOT_SYMBOL      reduce using rule 212 (fname -> POW .)
    COMPLEMENT_OP   reduce using rule 212 (fname -> POW .)
    DEFINED_OP      reduce using rule 212 (fname -> POW .)
    RETURN          reduce using rule 212 (fname -> POW .)
    YIELD           reduce using rule 212 (fname -> POW .)
    CASE            reduce using rule 212 (fname -> POW .)
    FOR             reduce using rule 212 (fname -> POW .)
    BEGIN           reduce using rule 212 (fname -> POW .)
    CLASS           reduce using rule 212 (fname -> POW .)
    MODULE          reduce using rule 212 (fname -> POW .)
    DEF             reduce using rule 212 (fname -> POW .)
    PUTS            reduce using rule 212 (fname -> POW .)
    VAR_GLOBAL      reduce using rule 212 (fname -> POW .)
    VAR_LOCAL       reduce using rule 212 (fname -> POW .)
    VAR_INSTANCE    reduce using rule 212 (fname -> POW .)
    VAR_CLASS       reduce using rule 212 (fname -> POW .)
    SYMBOL          reduce using rule 212 (fname -> POW .)
    STRING          reduce using rule 212 (fname -> POW .)
    IDENTIFIER      reduce using rule 212 (fname -> POW .)
    SUPER           reduce using rule 212 (fname -> POW .)
    OVERLOAD_PLUS   reduce using rule 212 (fname -> POW .)
    OVERLOAD_MINUS  reduce using rule 212 (fname -> POW .)


state 105

    (213) fname -> BINARY_RIGHT_SHIFT_OP .

    IF              reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    WHILE           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    UNLESS          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    UNTIL           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    TERM            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    NUMBER          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LPAREN          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    $end            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RESCUE          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RPAREN          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    WHEN            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LBRACKET        reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DOT             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    UNARY_OP        reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RANGE_INCLUSIVE reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RANGE_EXCLUSIVE reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    PLUS            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MINUS           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    TIMES           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DIVIDE          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MOD             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    POW             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OR_SYMBOL       reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_XOR_OP   reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_AND_OP   reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    GREATERTHAN     reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    GREATERTHANEQUAL reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LESSERTHAN      reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LESSERTHANEQUAL reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    EQUAL           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    CASE_EQUALITY   reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    NOTEQUAL        reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MATCHED_STRINGS_OP reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    AND             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OR              reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    COMMA           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RBRACKET        reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    THEN            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DO              reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    HASH_ROCKET     reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RKEY            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LKEY            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    END             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ELSIF           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ELSE            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ENSURE          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    NOT_SYMBOL      reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    COMPLEMENT_OP   reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DEFINED_OP      reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RETURN          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    YIELD           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    CASE            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    FOR             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BEGIN           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    CLASS           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MODULE          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DEF             reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    PUTS            reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    VAR_GLOBAL      reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    VAR_LOCAL       reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    VAR_INSTANCE    reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    VAR_CLASS       reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    SYMBOL          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    STRING          reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    IDENTIFIER      reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    SUPER           reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OVERLOAD_PLUS   reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OVERLOAD_MINUS  reduce using rule 213 (fname -> BINARY_RIGHT_SHIFT_OP .)


state 106

    (214) fname -> BINARY_LEFT_SHIFT_OP .

    IF              reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    WHILE           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    UNLESS          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    UNTIL           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    TERM            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    NUMBER          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    LPAREN          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    $end            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RESCUE          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RPAREN          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    WHEN            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    LBRACKET        reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    DOT             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    UNARY_OP        reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RANGE_INCLUSIVE reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RANGE_EXCLUSIVE reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    PLUS            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    MINUS           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    TIMES           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    DIVIDE          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    MOD             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    POW             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    OR_SYMBOL       reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_XOR_OP   reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_AND_OP   reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    GREATERTHAN     reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    GREATERTHANEQUAL reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    LESSERTHAN      reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    LESSERTHANEQUAL reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    EQUAL           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    CASE_EQUALITY   reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    NOTEQUAL        reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    MATCHED_STRINGS_OP reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    AND             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    OR              reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    COMMA           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RBRACKET        reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    THEN            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    DO              reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    HASH_ROCKET     reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RKEY            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    LKEY            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    END             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    ELSIF           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    ELSE            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    ENSURE          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    NOT_SYMBOL      reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    COMPLEMENT_OP   reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    DEFINED_OP      reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    RETURN          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    YIELD           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    CASE            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    FOR             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    BEGIN           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    CLASS           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    MODULE          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    DEF             reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    PUTS            reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    VAR_GLOBAL      reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    VAR_LOCAL       reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    VAR_INSTANCE    reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    VAR_CLASS       reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    SYMBOL          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    STRING          reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    IDENTIFIER      reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    SUPER           reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    OVERLOAD_PLUS   reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)
    OVERLOAD_MINUS  reduce using rule 214 (fname -> BINARY_LEFT_SHIFT_OP .)


state 107

    (215) fname -> COMPLEMENT_OP .

    IF              reduce using rule 215 (fname -> COMPLEMENT_OP .)
    WHILE           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    UNLESS          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    UNTIL           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    TERM            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    NUMBER          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    LPAREN          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    $end            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RESCUE          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RPAREN          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    WHEN            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    LBRACKET        reduce using rule 215 (fname -> COMPLEMENT_OP .)
    DOT             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    UNARY_OP        reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RANGE_INCLUSIVE reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RANGE_EXCLUSIVE reduce using rule 215 (fname -> COMPLEMENT_OP .)
    PLUS            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    MINUS           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    TIMES           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    DIVIDE          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    MOD             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    POW             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    OR_SYMBOL       reduce using rule 215 (fname -> COMPLEMENT_OP .)
    BINARY_XOR_OP   reduce using rule 215 (fname -> COMPLEMENT_OP .)
    BINARY_AND_OP   reduce using rule 215 (fname -> COMPLEMENT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 215 (fname -> COMPLEMENT_OP .)
    GREATERTHAN     reduce using rule 215 (fname -> COMPLEMENT_OP .)
    GREATERTHANEQUAL reduce using rule 215 (fname -> COMPLEMENT_OP .)
    LESSERTHAN      reduce using rule 215 (fname -> COMPLEMENT_OP .)
    LESSERTHANEQUAL reduce using rule 215 (fname -> COMPLEMENT_OP .)
    EQUAL           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    CASE_EQUALITY   reduce using rule 215 (fname -> COMPLEMENT_OP .)
    NOTEQUAL        reduce using rule 215 (fname -> COMPLEMENT_OP .)
    MATCHED_STRINGS_OP reduce using rule 215 (fname -> COMPLEMENT_OP .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 215 (fname -> COMPLEMENT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 215 (fname -> COMPLEMENT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 215 (fname -> COMPLEMENT_OP .)
    AND             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    OR              reduce using rule 215 (fname -> COMPLEMENT_OP .)
    COMMA           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RBRACKET        reduce using rule 215 (fname -> COMPLEMENT_OP .)
    THEN            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    DO              reduce using rule 215 (fname -> COMPLEMENT_OP .)
    HASH_ROCKET     reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RKEY            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    LKEY            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    END             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    ELSIF           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    ELSE            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    ENSURE          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    NOT_SYMBOL      reduce using rule 215 (fname -> COMPLEMENT_OP .)
    COMPLEMENT_OP   reduce using rule 215 (fname -> COMPLEMENT_OP .)
    DEFINED_OP      reduce using rule 215 (fname -> COMPLEMENT_OP .)
    RETURN          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    YIELD           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    CASE            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    FOR             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    BEGIN           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    CLASS           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    MODULE          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    DEF             reduce using rule 215 (fname -> COMPLEMENT_OP .)
    PUTS            reduce using rule 215 (fname -> COMPLEMENT_OP .)
    VAR_GLOBAL      reduce using rule 215 (fname -> COMPLEMENT_OP .)
    VAR_LOCAL       reduce using rule 215 (fname -> COMPLEMENT_OP .)
    VAR_INSTANCE    reduce using rule 215 (fname -> COMPLEMENT_OP .)
    VAR_CLASS       reduce using rule 215 (fname -> COMPLEMENT_OP .)
    SYMBOL          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    STRING          reduce using rule 215 (fname -> COMPLEMENT_OP .)
    IDENTIFIER      reduce using rule 215 (fname -> COMPLEMENT_OP .)
    SUPER           reduce using rule 215 (fname -> COMPLEMENT_OP .)
    OVERLOAD_PLUS   reduce using rule 215 (fname -> COMPLEMENT_OP .)
    OVERLOAD_MINUS  reduce using rule 215 (fname -> COMPLEMENT_OP .)


state 108

    (216) fname -> OVERLOAD_PLUS .

    IF              reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    WHILE           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    UNLESS          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    UNTIL           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    TERM            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    NUMBER          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    LPAREN          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    $end            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RESCUE          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RPAREN          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    WHEN            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    LBRACKET        reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    DOT             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    UNARY_OP        reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RANGE_INCLUSIVE reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RANGE_EXCLUSIVE reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    PLUS            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    MINUS           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    TIMES           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    DIVIDE          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    MOD             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    POW             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    OR_SYMBOL       reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    BINARY_XOR_OP   reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    BINARY_AND_OP   reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    COMBINED_COMPARISON_OP reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    GREATERTHAN     reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    GREATERTHANEQUAL reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    LESSERTHAN      reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    LESSERTHANEQUAL reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    EQUAL           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    CASE_EQUALITY   reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    NOTEQUAL        reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    MATCHED_STRINGS_OP reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    AND             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    OR              reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    COMMA           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RBRACKET        reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    THEN            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    DO              reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    HASH_ROCKET     reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RKEY            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    LKEY            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    END             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    ELSIF           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    ELSE            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    ENSURE          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    NOT_SYMBOL      reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    COMPLEMENT_OP   reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    DEFINED_OP      reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    RETURN          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    YIELD           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    CASE            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    FOR             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    BEGIN           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    CLASS           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    MODULE          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    DEF             reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    PUTS            reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    VAR_GLOBAL      reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    VAR_LOCAL       reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    VAR_INSTANCE    reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    VAR_CLASS       reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    SYMBOL          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    STRING          reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    IDENTIFIER      reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    SUPER           reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    OVERLOAD_PLUS   reduce using rule 216 (fname -> OVERLOAD_PLUS .)
    OVERLOAD_MINUS  reduce using rule 216 (fname -> OVERLOAD_PLUS .)


state 109

    (217) fname -> OVERLOAD_MINUS .

    IF              reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    WHILE           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    UNLESS          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    UNTIL           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    TERM            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    NUMBER          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    LPAREN          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    $end            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RESCUE          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RPAREN          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    WHEN            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    LBRACKET        reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    DOT             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    UNARY_OP        reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RANGE_INCLUSIVE reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RANGE_EXCLUSIVE reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    PLUS            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    MINUS           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    TIMES           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    DIVIDE          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    MOD             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    POW             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    OR_SYMBOL       reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    BINARY_XOR_OP   reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    BINARY_AND_OP   reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    COMBINED_COMPARISON_OP reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    GREATERTHAN     reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    GREATERTHANEQUAL reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    LESSERTHAN      reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    LESSERTHANEQUAL reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    EQUAL           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    CASE_EQUALITY   reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    NOTEQUAL        reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    MATCHED_STRINGS_OP reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    AND             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    OR              reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    COMMA           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RBRACKET        reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    THEN            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    DO              reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    HASH_ROCKET     reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RKEY            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    LKEY            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    END             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    ELSIF           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    ELSE            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    ENSURE          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    NOT_SYMBOL      reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    COMPLEMENT_OP   reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    DEFINED_OP      reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    RETURN          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    YIELD           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    CASE            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    FOR             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    BEGIN           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    CLASS           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    MODULE          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    DEF             reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    PUTS            reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    VAR_GLOBAL      reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    VAR_LOCAL       reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    VAR_INSTANCE    reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    VAR_CLASS       reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    SYMBOL          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    STRING          reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    IDENTIFIER      reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    SUPER           reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    OVERLOAD_PLUS   reduce using rule 217 (fname -> OVERLOAD_MINUS .)
    OVERLOAD_MINUS  reduce using rule 217 (fname -> OVERLOAD_MINUS .)


state 110

    (218) fname -> LBRACKET . RBRACKET
    (219) fname -> LBRACKET . RBRACKET EQUAL_SYMBOL

    RBRACKET        shift and go to state 246


state 111

    (10) stmt -> ALIAS fname . fname
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110

    fname                          shift and go to state 247

state 112

    (104) primary -> IF expr . then compstmt END
    (105) primary -> IF expr . then compstmt elsif END
    (106) primary -> IF expr . then compstmt elsif ELSE compstmt END
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (136) then -> . TERM
    (137) then -> . THEN
    (138) then -> . TERM THEN

    AND             shift and go to state 61
    OR              shift and go to state 62
    TERM            shift and go to state 249
    THEN            shift and go to state 250

    then                           shift and go to state 248

state 113

    (25) expr -> command .

    AND             reduce using rule 25 (expr -> command .)
    OR              reduce using rule 25 (expr -> command .)
    TERM            reduce using rule 25 (expr -> command .)
    THEN            reduce using rule 25 (expr -> command .)
    DO              reduce using rule 25 (expr -> command .)
    NUMBER          reduce using rule 25 (expr -> command .)
    LPAREN          reduce using rule 25 (expr -> command .)
    LBRACKET        reduce using rule 25 (expr -> command .)
    DOT             reduce using rule 25 (expr -> command .)
    UNARY_OP        reduce using rule 25 (expr -> command .)
    RANGE_INCLUSIVE reduce using rule 25 (expr -> command .)
    RANGE_EXCLUSIVE reduce using rule 25 (expr -> command .)
    PLUS            reduce using rule 25 (expr -> command .)
    MINUS           reduce using rule 25 (expr -> command .)
    TIMES           reduce using rule 25 (expr -> command .)
    DIVIDE          reduce using rule 25 (expr -> command .)
    MOD             reduce using rule 25 (expr -> command .)
    POW             reduce using rule 25 (expr -> command .)
    OR_SYMBOL       reduce using rule 25 (expr -> command .)
    BINARY_XOR_OP   reduce using rule 25 (expr -> command .)
    BINARY_AND_OP   reduce using rule 25 (expr -> command .)
    COMBINED_COMPARISON_OP reduce using rule 25 (expr -> command .)
    GREATERTHAN     reduce using rule 25 (expr -> command .)
    GREATERTHANEQUAL reduce using rule 25 (expr -> command .)
    LESSERTHAN      reduce using rule 25 (expr -> command .)
    LESSERTHANEQUAL reduce using rule 25 (expr -> command .)
    EQUAL           reduce using rule 25 (expr -> command .)
    CASE_EQUALITY   reduce using rule 25 (expr -> command .)
    NOTEQUAL        reduce using rule 25 (expr -> command .)
    MATCHED_STRINGS_OP reduce using rule 25 (expr -> command .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 25 (expr -> command .)
    BINARY_LEFT_SHIFT_OP reduce using rule 25 (expr -> command .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 25 (expr -> command .)
    IF              reduce using rule 25 (expr -> command .)
    WHILE           reduce using rule 25 (expr -> command .)
    UNLESS          reduce using rule 25 (expr -> command .)
    UNTIL           reduce using rule 25 (expr -> command .)
    $end            reduce using rule 25 (expr -> command .)
    COMMA           reduce using rule 25 (expr -> command .)
    RBRACKET        reduce using rule 25 (expr -> command .)
    RESCUE          reduce using rule 25 (expr -> command .)
    HASH_ROCKET     reduce using rule 25 (expr -> command .)
    RKEY            reduce using rule 25 (expr -> command .)
    RPAREN          reduce using rule 25 (expr -> command .)
    WHEN            reduce using rule 25 (expr -> command .)
    LKEY            reduce using rule 25 (expr -> command .)
    END             reduce using rule 25 (expr -> command .)
    ELSIF           reduce using rule 25 (expr -> command .)
    ELSE            reduce using rule 25 (expr -> command .)
    ENSURE          reduce using rule 25 (expr -> command .)
    NOT_SYMBOL      reduce using rule 25 (expr -> command .)
    COMPLEMENT_OP   reduce using rule 25 (expr -> command .)
    DEFINED_OP      reduce using rule 25 (expr -> command .)
    RETURN          reduce using rule 25 (expr -> command .)
    YIELD           reduce using rule 25 (expr -> command .)
    CASE            reduce using rule 25 (expr -> command .)
    FOR             reduce using rule 25 (expr -> command .)
    BEGIN           reduce using rule 25 (expr -> command .)
    CLASS           reduce using rule 25 (expr -> command .)
    MODULE          reduce using rule 25 (expr -> command .)
    DEF             reduce using rule 25 (expr -> command .)
    PUTS            reduce using rule 25 (expr -> command .)
    VAR_GLOBAL      reduce using rule 25 (expr -> command .)
    VAR_LOCAL       reduce using rule 25 (expr -> command .)
    VAR_INSTANCE    reduce using rule 25 (expr -> command .)
    VAR_CLASS       reduce using rule 25 (expr -> command .)
    SYMBOL          reduce using rule 25 (expr -> command .)
    STRING          reduce using rule 25 (expr -> command .)
    IDENTIFIER      reduce using rule 25 (expr -> command .)
    SUPER           reduce using rule 25 (expr -> command .)


state 114

    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (160) mlhs_item -> lhs .
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    =               shift and go to state 237
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 115

    (30) command -> operation . call_args
    (34) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    LBRACKET        shift and go to state 192
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 115
    call_args                      shift and go to state 193
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 116

    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args
    (73) arg -> primary .
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    DOT             shift and go to state 251
    UNARY_OP        shift and go to state 252
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    THEN            reduce using rule 73 (arg -> primary .)
    DO              reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    $end            reduce using rule 73 (arg -> primary .)
    COMMA           reduce using rule 73 (arg -> primary .)
    RBRACKET        reduce using rule 73 (arg -> primary .)
    RESCUE          reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RKEY            reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)
    WHEN            reduce using rule 73 (arg -> primary .)
    LKEY            reduce using rule 73 (arg -> primary .)
    END             reduce using rule 73 (arg -> primary .)
    ELSIF           reduce using rule 73 (arg -> primary .)
    ELSE            reduce using rule 73 (arg -> primary .)
    ENSURE          reduce using rule 73 (arg -> primary .)
    NOT_SYMBOL      reduce using rule 73 (arg -> primary .)
    COMPLEMENT_OP   reduce using rule 73 (arg -> primary .)
    DEFINED_OP      reduce using rule 73 (arg -> primary .)
    RETURN          reduce using rule 73 (arg -> primary .)
    YIELD           reduce using rule 73 (arg -> primary .)
    CASE            reduce using rule 73 (arg -> primary .)
    FOR             reduce using rule 73 (arg -> primary .)
    BEGIN           reduce using rule 73 (arg -> primary .)
    CLASS           reduce using rule 73 (arg -> primary .)
    MODULE          reduce using rule 73 (arg -> primary .)
    DEF             reduce using rule 73 (arg -> primary .)
    PUTS            reduce using rule 73 (arg -> primary .)
    VAR_GLOBAL      reduce using rule 73 (arg -> primary .)
    VAR_LOCAL       reduce using rule 73 (arg -> primary .)
    VAR_INSTANCE    reduce using rule 73 (arg -> primary .)
    VAR_CLASS       reduce using rule 73 (arg -> primary .)
    SYMBOL          reduce using rule 73 (arg -> primary .)
    STRING          reduce using rule 73 (arg -> primary .)
    IDENTIFIER      reduce using rule 73 (arg -> primary .)
    SUPER           reduce using rule 73 (arg -> primary .)
    LBRACKET        shift and go to state 253

  ! LBRACKET        [ reduce using rule 73 (arg -> primary .) ]
  ! DOT             [ reduce using rule 73 (arg -> primary .) ]
  ! UNARY_OP        [ reduce using rule 73 (arg -> primary .) ]


state 117

    (33) command -> SUPER . call_args
    (39) function -> SUPER . LPAREN call_args RPAREN
    (40) function -> SUPER .
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 198
    DOT             reduce using rule 40 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 40 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 40 (function -> SUPER .)
    DIVIDE          reduce using rule 40 (function -> SUPER .)
    MOD             reduce using rule 40 (function -> SUPER .)
    POW             reduce using rule 40 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 40 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 40 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 40 (function -> SUPER .)
    GREATERTHAN     reduce using rule 40 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    LESSERTHAN      reduce using rule 40 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 40 (function -> SUPER .)
    EQUAL           reduce using rule 40 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 40 (function -> SUPER .)
    NOTEQUAL        reduce using rule 40 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 40 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 40 (function -> SUPER .)
    AND             reduce using rule 40 (function -> SUPER .)
    OR              reduce using rule 40 (function -> SUPER .)
    TERM            reduce using rule 40 (function -> SUPER .)
    THEN            reduce using rule 40 (function -> SUPER .)
    DO              reduce using rule 40 (function -> SUPER .)
    $end            reduce using rule 40 (function -> SUPER .)
    COMMA           reduce using rule 40 (function -> SUPER .)
    RBRACKET        reduce using rule 40 (function -> SUPER .)
    RESCUE          reduce using rule 40 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 40 (function -> SUPER .)
    RKEY            reduce using rule 40 (function -> SUPER .)
    RPAREN          reduce using rule 40 (function -> SUPER .)
    WHEN            reduce using rule 40 (function -> SUPER .)
    END             reduce using rule 40 (function -> SUPER .)
    ELSIF           reduce using rule 40 (function -> SUPER .)
    ELSE            reduce using rule 40 (function -> SUPER .)
    ENSURE          reduce using rule 40 (function -> SUPER .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 40 (function -> SUPER .) ]
  ! UNARY_OP        [ reduce using rule 40 (function -> SUPER .) ]
  ! LBRACKET        [ reduce using rule 40 (function -> SUPER .) ]
  ! PLUS            [ reduce using rule 40 (function -> SUPER .) ]
  ! MINUS           [ reduce using rule 40 (function -> SUPER .) ]
  ! TIMES           [ reduce using rule 40 (function -> SUPER .) ]
  ! BINARY_AND_OP   [ reduce using rule 40 (function -> SUPER .) ]
  ! NUMBER          [ reduce using rule 40 (function -> SUPER .) ]
  ! LPAREN          [ reduce using rule 40 (function -> SUPER .) ]
  ! IF              [ reduce using rule 40 (function -> SUPER .) ]
  ! WHILE           [ reduce using rule 40 (function -> SUPER .) ]
  ! UNLESS          [ reduce using rule 40 (function -> SUPER .) ]
  ! UNTIL           [ reduce using rule 40 (function -> SUPER .) ]
  ! NOT_SYMBOL      [ reduce using rule 40 (function -> SUPER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 40 (function -> SUPER .) ]
  ! DEFINED_OP      [ reduce using rule 40 (function -> SUPER .) ]
  ! RETURN          [ reduce using rule 40 (function -> SUPER .) ]
  ! YIELD           [ reduce using rule 40 (function -> SUPER .) ]
  ! CASE            [ reduce using rule 40 (function -> SUPER .) ]
  ! FOR             [ reduce using rule 40 (function -> SUPER .) ]
  ! BEGIN           [ reduce using rule 40 (function -> SUPER .) ]
  ! CLASS           [ reduce using rule 40 (function -> SUPER .) ]
  ! MODULE          [ reduce using rule 40 (function -> SUPER .) ]
  ! DEF             [ reduce using rule 40 (function -> SUPER .) ]
  ! PUTS            [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_GLOBAL      [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_LOCAL       [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_INSTANCE    [ reduce using rule 40 (function -> SUPER .) ]
  ! VAR_CLASS       [ reduce using rule 40 (function -> SUPER .) ]
  ! SYMBOL          [ reduce using rule 40 (function -> SUPER .) ]
  ! STRING          [ reduce using rule 40 (function -> SUPER .) ]
  ! IDENTIFIER      [ reduce using rule 40 (function -> SUPER .) ]
  ! SUPER           [ reduce using rule 40 (function -> SUPER .) ]

    call_args                      shift and go to state 199
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 118

    (161) mlhs_item -> LPAREN . mlhs RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (28) call -> . function
    (29) call -> . command
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 45
    LPAREN          shift and go to state 118
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    SUPER           shift and go to state 31
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75

    mlhs                           shift and go to state 195
    compstmt                       shift and go to state 194
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 254
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 255
    function                       shift and go to state 18
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    operation                      shift and go to state 28

state 119

    (80) primary -> variable .
    (148) lhs -> variable .

  ! reduce/reduce conflict for COMMA resolved using rule 80 (primary -> variable .)
    DOT             reduce using rule 80 (primary -> variable .)
    UNARY_OP        reduce using rule 80 (primary -> variable .)
    LBRACKET        reduce using rule 80 (primary -> variable .)
    RANGE_INCLUSIVE reduce using rule 80 (primary -> variable .)
    RANGE_EXCLUSIVE reduce using rule 80 (primary -> variable .)
    PLUS            reduce using rule 80 (primary -> variable .)
    MINUS           reduce using rule 80 (primary -> variable .)
    TIMES           reduce using rule 80 (primary -> variable .)
    DIVIDE          reduce using rule 80 (primary -> variable .)
    MOD             reduce using rule 80 (primary -> variable .)
    POW             reduce using rule 80 (primary -> variable .)
    OR_SYMBOL       reduce using rule 80 (primary -> variable .)
    BINARY_XOR_OP   reduce using rule 80 (primary -> variable .)
    BINARY_AND_OP   reduce using rule 80 (primary -> variable .)
    COMBINED_COMPARISON_OP reduce using rule 80 (primary -> variable .)
    GREATERTHAN     reduce using rule 80 (primary -> variable .)
    GREATERTHANEQUAL reduce using rule 80 (primary -> variable .)
    LESSERTHAN      reduce using rule 80 (primary -> variable .)
    LESSERTHANEQUAL reduce using rule 80 (primary -> variable .)
    EQUAL           reduce using rule 80 (primary -> variable .)
    CASE_EQUALITY   reduce using rule 80 (primary -> variable .)
    NOTEQUAL        reduce using rule 80 (primary -> variable .)
    MATCHED_STRINGS_OP reduce using rule 80 (primary -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 80 (primary -> variable .)
    BINARY_LEFT_SHIFT_OP reduce using rule 80 (primary -> variable .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 80 (primary -> variable .)
    AND             reduce using rule 80 (primary -> variable .)
    OR              reduce using rule 80 (primary -> variable .)
    TERM            reduce using rule 80 (primary -> variable .)
    THEN            reduce using rule 80 (primary -> variable .)
    DO              reduce using rule 80 (primary -> variable .)
    NUMBER          reduce using rule 80 (primary -> variable .)
    LPAREN          reduce using rule 80 (primary -> variable .)
    IF              reduce using rule 80 (primary -> variable .)
    WHILE           reduce using rule 80 (primary -> variable .)
    UNLESS          reduce using rule 80 (primary -> variable .)
    UNTIL           reduce using rule 80 (primary -> variable .)
    $end            reduce using rule 80 (primary -> variable .)
    COMMA           reduce using rule 80 (primary -> variable .)
    RBRACKET        reduce using rule 80 (primary -> variable .)
    RESCUE          reduce using rule 80 (primary -> variable .)
    HASH_ROCKET     reduce using rule 80 (primary -> variable .)
    RKEY            reduce using rule 80 (primary -> variable .)
    RPAREN          reduce using rule 80 (primary -> variable .)
    WHEN            reduce using rule 80 (primary -> variable .)
    LKEY            reduce using rule 80 (primary -> variable .)
    END             reduce using rule 80 (primary -> variable .)
    ELSIF           reduce using rule 80 (primary -> variable .)
    ELSE            reduce using rule 80 (primary -> variable .)
    ENSURE          reduce using rule 80 (primary -> variable .)
    NOT_SYMBOL      reduce using rule 80 (primary -> variable .)
    COMPLEMENT_OP   reduce using rule 80 (primary -> variable .)
    DEFINED_OP      reduce using rule 80 (primary -> variable .)
    RETURN          reduce using rule 80 (primary -> variable .)
    YIELD           reduce using rule 80 (primary -> variable .)
    CASE            reduce using rule 80 (primary -> variable .)
    FOR             reduce using rule 80 (primary -> variable .)
    BEGIN           reduce using rule 80 (primary -> variable .)
    CLASS           reduce using rule 80 (primary -> variable .)
    MODULE          reduce using rule 80 (primary -> variable .)
    DEF             reduce using rule 80 (primary -> variable .)
    PUTS            reduce using rule 80 (primary -> variable .)
    VAR_GLOBAL      reduce using rule 80 (primary -> variable .)
    VAR_LOCAL       reduce using rule 80 (primary -> variable .)
    VAR_INSTANCE    reduce using rule 80 (primary -> variable .)
    VAR_CLASS       reduce using rule 80 (primary -> variable .)
    SYMBOL          reduce using rule 80 (primary -> variable .)
    STRING          reduce using rule 80 (primary -> variable .)
    IDENTIFIER      reduce using rule 80 (primary -> variable .)
    SUPER           reduce using rule 80 (primary -> variable .)
    =               reduce using rule 148 (lhs -> variable .)
    PLUS_EQUAL      reduce using rule 148 (lhs -> variable .)
    MINUS_EQUAL     reduce using rule 148 (lhs -> variable .)
    TIMES_EQUAL     reduce using rule 148 (lhs -> variable .)
    DIVIDE_EQUAL    reduce using rule 148 (lhs -> variable .)
    MOD_EQUAL       reduce using rule 148 (lhs -> variable .)
    POW_EQUAL       reduce using rule 148 (lhs -> variable .)
    SINGLE_AND_EQUAL reduce using rule 148 (lhs -> variable .)
    SINGLE_OR_EQUAL reduce using rule 148 (lhs -> variable .)
    XOR_EQUAL       reduce using rule 148 (lhs -> variable .)
    BINARY_LEFT_EQUAL reduce using rule 148 (lhs -> variable .)
    BINARY_RIGHT_EQUAL reduce using rule 148 (lhs -> variable .)
    AND_EQUAL       reduce using rule 148 (lhs -> variable .)
    OR_EQUAL        reduce using rule 148 (lhs -> variable .)

  ! COMMA           [ reduce using rule 148 (lhs -> variable .) ]


state 120

    (109) primary -> WHILE expr . do compstmt END
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 61
    OR              shift and go to state 62
    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 256
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 121

    (107) primary -> UNLESS expr . then compstmt END
    (108) primary -> UNLESS expr . then compstmt ELSE compstmt END
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (136) then -> . TERM
    (137) then -> . THEN
    (138) then -> . TERM THEN

    AND             shift and go to state 61
    OR              shift and go to state 62
    TERM            shift and go to state 249
    THEN            shift and go to state 250

    then                           shift and go to state 257

state 122

    (110) primary -> UNTIL expr . do compstmt END
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 61
    OR              shift and go to state 62
    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 258
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 123

    (15) stmt -> BEGIN LKEY . compstmt RKEY
    (88) primary -> LKEY . RKEY
    (89) primary -> LKEY . args RKEY
    (90) primary -> LKEY . assocs RKEY
    (91) primary -> LKEY . args COMMA RKEY
    (92) primary -> LKEY . assocs COMMA RKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    RKEY            shift and go to state 125
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    TIMES           shift and go to state 45
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75

    compstmt                       shift and go to state 259
    args                           shift and go to state 126
    assocs                         shift and go to state 127
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    arg                            shift and go to state 260
    assoc                          shift and go to state 129
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    primary                        shift and go to state 262
    function                       shift and go to state 18
    variable                       shift and go to state 19
    mlhs                           shift and go to state 22
    literal                        shift and go to state 36
    operation                      shift and go to state 28
    mlhs_item                      shift and go to state 44

state 124

    (114) primary -> BEGIN compstmt . rescue END
    (115) primary -> BEGIN compstmt . rescue ELSE compstmt END
    (116) primary -> BEGIN compstmt . rescue ENSURE compstmt END
    (117) primary -> BEGIN compstmt . rescue ELSE compstmt ENSURE compstmt END
    (129) rescue -> . RESCUE args do compstmt
    (130) rescue -> . RESCUE do compstmt
    (131) rescue -> . rescue RESCUE args do compstmt
    (132) rescue -> . rescue RESCUE do compstmt

    RESCUE          shift and go to state 264

    rescue                         shift and go to state 263

state 125

    (88) primary -> LKEY RKEY .

    LBRACKET        reduce using rule 88 (primary -> LKEY RKEY .)
    DOT             reduce using rule 88 (primary -> LKEY RKEY .)
    UNARY_OP        reduce using rule 88 (primary -> LKEY RKEY .)
    RANGE_INCLUSIVE reduce using rule 88 (primary -> LKEY RKEY .)
    RANGE_EXCLUSIVE reduce using rule 88 (primary -> LKEY RKEY .)
    PLUS            reduce using rule 88 (primary -> LKEY RKEY .)
    MINUS           reduce using rule 88 (primary -> LKEY RKEY .)
    TIMES           reduce using rule 88 (primary -> LKEY RKEY .)
    DIVIDE          reduce using rule 88 (primary -> LKEY RKEY .)
    MOD             reduce using rule 88 (primary -> LKEY RKEY .)
    POW             reduce using rule 88 (primary -> LKEY RKEY .)
    OR_SYMBOL       reduce using rule 88 (primary -> LKEY RKEY .)
    BINARY_XOR_OP   reduce using rule 88 (primary -> LKEY RKEY .)
    BINARY_AND_OP   reduce using rule 88 (primary -> LKEY RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 88 (primary -> LKEY RKEY .)
    GREATERTHAN     reduce using rule 88 (primary -> LKEY RKEY .)
    GREATERTHANEQUAL reduce using rule 88 (primary -> LKEY RKEY .)
    LESSERTHAN      reduce using rule 88 (primary -> LKEY RKEY .)
    LESSERTHANEQUAL reduce using rule 88 (primary -> LKEY RKEY .)
    EQUAL           reduce using rule 88 (primary -> LKEY RKEY .)
    CASE_EQUALITY   reduce using rule 88 (primary -> LKEY RKEY .)
    NOTEQUAL        reduce using rule 88 (primary -> LKEY RKEY .)
    MATCHED_STRINGS_OP reduce using rule 88 (primary -> LKEY RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 88 (primary -> LKEY RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 88 (primary -> LKEY RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 88 (primary -> LKEY RKEY .)
    AND             reduce using rule 88 (primary -> LKEY RKEY .)
    OR              reduce using rule 88 (primary -> LKEY RKEY .)
    IF              reduce using rule 88 (primary -> LKEY RKEY .)
    WHILE           reduce using rule 88 (primary -> LKEY RKEY .)
    UNLESS          reduce using rule 88 (primary -> LKEY RKEY .)
    UNTIL           reduce using rule 88 (primary -> LKEY RKEY .)
    TERM            reduce using rule 88 (primary -> LKEY RKEY .)
    NUMBER          reduce using rule 88 (primary -> LKEY RKEY .)
    LPAREN          reduce using rule 88 (primary -> LKEY RKEY .)
    $end            reduce using rule 88 (primary -> LKEY RKEY .)
    COMMA           reduce using rule 88 (primary -> LKEY RKEY .)
    RBRACKET        reduce using rule 88 (primary -> LKEY RKEY .)
    THEN            reduce using rule 88 (primary -> LKEY RKEY .)
    DO              reduce using rule 88 (primary -> LKEY RKEY .)
    RESCUE          reduce using rule 88 (primary -> LKEY RKEY .)
    HASH_ROCKET     reduce using rule 88 (primary -> LKEY RKEY .)
    RKEY            reduce using rule 88 (primary -> LKEY RKEY .)
    RPAREN          reduce using rule 88 (primary -> LKEY RKEY .)
    WHEN            reduce using rule 88 (primary -> LKEY RKEY .)
    LKEY            reduce using rule 88 (primary -> LKEY RKEY .)
    END             reduce using rule 88 (primary -> LKEY RKEY .)
    ELSIF           reduce using rule 88 (primary -> LKEY RKEY .)
    ELSE            reduce using rule 88 (primary -> LKEY RKEY .)
    ENSURE          reduce using rule 88 (primary -> LKEY RKEY .)
    NOT_SYMBOL      reduce using rule 88 (primary -> LKEY RKEY .)
    COMPLEMENT_OP   reduce using rule 88 (primary -> LKEY RKEY .)
    DEFINED_OP      reduce using rule 88 (primary -> LKEY RKEY .)
    RETURN          reduce using rule 88 (primary -> LKEY RKEY .)
    YIELD           reduce using rule 88 (primary -> LKEY RKEY .)
    CASE            reduce using rule 88 (primary -> LKEY RKEY .)
    FOR             reduce using rule 88 (primary -> LKEY RKEY .)
    BEGIN           reduce using rule 88 (primary -> LKEY RKEY .)
    CLASS           reduce using rule 88 (primary -> LKEY RKEY .)
    MODULE          reduce using rule 88 (primary -> LKEY RKEY .)
    DEF             reduce using rule 88 (primary -> LKEY RKEY .)
    PUTS            reduce using rule 88 (primary -> LKEY RKEY .)
    VAR_GLOBAL      reduce using rule 88 (primary -> LKEY RKEY .)
    VAR_LOCAL       reduce using rule 88 (primary -> LKEY RKEY .)
    VAR_INSTANCE    reduce using rule 88 (primary -> LKEY RKEY .)
    VAR_CLASS       reduce using rule 88 (primary -> LKEY RKEY .)
    SYMBOL          reduce using rule 88 (primary -> LKEY RKEY .)
    STRING          reduce using rule 88 (primary -> LKEY RKEY .)
    IDENTIFIER      reduce using rule 88 (primary -> LKEY RKEY .)
    SUPER           reduce using rule 88 (primary -> LKEY RKEY .)


state 126

    (89) primary -> LKEY args . RKEY
    (91) primary -> LKEY args . COMMA RKEY

    RKEY            shift and go to state 265
    COMMA           shift and go to state 266


state 127

    (90) primary -> LKEY assocs . RKEY
    (92) primary -> LKEY assocs . COMMA RKEY

    RKEY            shift and go to state 267
    COMMA           shift and go to state 268


state 128

    (162) args -> arg .
    (163) args -> arg . COMMA arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg
    (173) assoc -> arg . HASH_ROCKET arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for HASH_ROCKET resolved as shift
    RKEY            reduce using rule 162 (args -> arg .)
    LBRACKET        reduce using rule 162 (args -> arg .)
    DOT             reduce using rule 162 (args -> arg .)
    UNARY_OP        reduce using rule 162 (args -> arg .)
    IF              reduce using rule 162 (args -> arg .)
    WHILE           reduce using rule 162 (args -> arg .)
    UNLESS          reduce using rule 162 (args -> arg .)
    UNTIL           reduce using rule 162 (args -> arg .)
    TERM            reduce using rule 162 (args -> arg .)
    NUMBER          reduce using rule 162 (args -> arg .)
    LPAREN          reduce using rule 162 (args -> arg .)
    $end            reduce using rule 162 (args -> arg .)
    RBRACKET        reduce using rule 162 (args -> arg .)
    THEN            reduce using rule 162 (args -> arg .)
    DO              reduce using rule 162 (args -> arg .)
    RESCUE          reduce using rule 162 (args -> arg .)
    RPAREN          reduce using rule 162 (args -> arg .)
    WHEN            reduce using rule 162 (args -> arg .)
    LKEY            reduce using rule 162 (args -> arg .)
    END             reduce using rule 162 (args -> arg .)
    ELSIF           reduce using rule 162 (args -> arg .)
    ELSE            reduce using rule 162 (args -> arg .)
    ENSURE          reduce using rule 162 (args -> arg .)
    NOT_SYMBOL      reduce using rule 162 (args -> arg .)
    COMPLEMENT_OP   reduce using rule 162 (args -> arg .)
    DEFINED_OP      reduce using rule 162 (args -> arg .)
    RETURN          reduce using rule 162 (args -> arg .)
    YIELD           reduce using rule 162 (args -> arg .)
    CASE            reduce using rule 162 (args -> arg .)
    FOR             reduce using rule 162 (args -> arg .)
    BEGIN           reduce using rule 162 (args -> arg .)
    CLASS           reduce using rule 162 (args -> arg .)
    MODULE          reduce using rule 162 (args -> arg .)
    DEF             reduce using rule 162 (args -> arg .)
    PUTS            reduce using rule 162 (args -> arg .)
    VAR_GLOBAL      reduce using rule 162 (args -> arg .)
    VAR_LOCAL       reduce using rule 162 (args -> arg .)
    VAR_INSTANCE    reduce using rule 162 (args -> arg .)
    VAR_CLASS       reduce using rule 162 (args -> arg .)
    SYMBOL          reduce using rule 162 (args -> arg .)
    STRING          reduce using rule 162 (args -> arg .)
    IDENTIFIER      reduce using rule 162 (args -> arg .)
    SUPER           reduce using rule 162 (args -> arg .)
    COMMA           shift and go to state 238
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191
    HASH_ROCKET     shift and go to state 269

  ! COMMA           [ reduce using rule 162 (args -> arg .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 162 (args -> arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 162 (args -> arg .) ]
  ! PLUS            [ reduce using rule 162 (args -> arg .) ]
  ! MINUS           [ reduce using rule 162 (args -> arg .) ]
  ! TIMES           [ reduce using rule 162 (args -> arg .) ]
  ! DIVIDE          [ reduce using rule 162 (args -> arg .) ]
  ! MOD             [ reduce using rule 162 (args -> arg .) ]
  ! POW             [ reduce using rule 162 (args -> arg .) ]
  ! OR_SYMBOL       [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 162 (args -> arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 162 (args -> arg .) ]
  ! GREATERTHAN     [ reduce using rule 162 (args -> arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 162 (args -> arg .) ]
  ! LESSERTHAN      [ reduce using rule 162 (args -> arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 162 (args -> arg .) ]
  ! EQUAL           [ reduce using rule 162 (args -> arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 162 (args -> arg .) ]
  ! NOTEQUAL        [ reduce using rule 162 (args -> arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 162 (args -> arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 162 (args -> arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 162 (args -> arg .) ]
  ! AND             [ reduce using rule 162 (args -> arg .) ]
  ! OR              [ reduce using rule 162 (args -> arg .) ]
  ! HASH_ROCKET     [ reduce using rule 162 (args -> arg .) ]


state 129

    (171) assocs -> assoc .
    (172) assocs -> assoc . COMMA assoc

  ! shift/reduce conflict for COMMA resolved as shift
    RKEY            reduce using rule 171 (assocs -> assoc .)
    LBRACKET        reduce using rule 171 (assocs -> assoc .)
    DOT             reduce using rule 171 (assocs -> assoc .)
    UNARY_OP        reduce using rule 171 (assocs -> assoc .)
    RANGE_INCLUSIVE reduce using rule 171 (assocs -> assoc .)
    RANGE_EXCLUSIVE reduce using rule 171 (assocs -> assoc .)
    PLUS            reduce using rule 171 (assocs -> assoc .)
    MINUS           reduce using rule 171 (assocs -> assoc .)
    TIMES           reduce using rule 171 (assocs -> assoc .)
    DIVIDE          reduce using rule 171 (assocs -> assoc .)
    MOD             reduce using rule 171 (assocs -> assoc .)
    POW             reduce using rule 171 (assocs -> assoc .)
    OR_SYMBOL       reduce using rule 171 (assocs -> assoc .)
    BINARY_XOR_OP   reduce using rule 171 (assocs -> assoc .)
    BINARY_AND_OP   reduce using rule 171 (assocs -> assoc .)
    COMBINED_COMPARISON_OP reduce using rule 171 (assocs -> assoc .)
    GREATERTHAN     reduce using rule 171 (assocs -> assoc .)
    GREATERTHANEQUAL reduce using rule 171 (assocs -> assoc .)
    LESSERTHAN      reduce using rule 171 (assocs -> assoc .)
    LESSERTHANEQUAL reduce using rule 171 (assocs -> assoc .)
    EQUAL           reduce using rule 171 (assocs -> assoc .)
    CASE_EQUALITY   reduce using rule 171 (assocs -> assoc .)
    NOTEQUAL        reduce using rule 171 (assocs -> assoc .)
    MATCHED_STRINGS_OP reduce using rule 171 (assocs -> assoc .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 171 (assocs -> assoc .)
    BINARY_LEFT_SHIFT_OP reduce using rule 171 (assocs -> assoc .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 171 (assocs -> assoc .)
    AND             reduce using rule 171 (assocs -> assoc .)
    OR              reduce using rule 171 (assocs -> assoc .)
    IF              reduce using rule 171 (assocs -> assoc .)
    WHILE           reduce using rule 171 (assocs -> assoc .)
    UNLESS          reduce using rule 171 (assocs -> assoc .)
    UNTIL           reduce using rule 171 (assocs -> assoc .)
    TERM            reduce using rule 171 (assocs -> assoc .)
    NUMBER          reduce using rule 171 (assocs -> assoc .)
    LPAREN          reduce using rule 171 (assocs -> assoc .)
    $end            reduce using rule 171 (assocs -> assoc .)
    RBRACKET        reduce using rule 171 (assocs -> assoc .)
    THEN            reduce using rule 171 (assocs -> assoc .)
    DO              reduce using rule 171 (assocs -> assoc .)
    RESCUE          reduce using rule 171 (assocs -> assoc .)
    HASH_ROCKET     reduce using rule 171 (assocs -> assoc .)
    RPAREN          reduce using rule 171 (assocs -> assoc .)
    WHEN            reduce using rule 171 (assocs -> assoc .)
    LKEY            reduce using rule 171 (assocs -> assoc .)
    END             reduce using rule 171 (assocs -> assoc .)
    ELSIF           reduce using rule 171 (assocs -> assoc .)
    ELSE            reduce using rule 171 (assocs -> assoc .)
    ENSURE          reduce using rule 171 (assocs -> assoc .)
    NOT_SYMBOL      reduce using rule 171 (assocs -> assoc .)
    COMPLEMENT_OP   reduce using rule 171 (assocs -> assoc .)
    DEFINED_OP      reduce using rule 171 (assocs -> assoc .)
    RETURN          reduce using rule 171 (assocs -> assoc .)
    YIELD           reduce using rule 171 (assocs -> assoc .)
    CASE            reduce using rule 171 (assocs -> assoc .)
    FOR             reduce using rule 171 (assocs -> assoc .)
    BEGIN           reduce using rule 171 (assocs -> assoc .)
    CLASS           reduce using rule 171 (assocs -> assoc .)
    MODULE          reduce using rule 171 (assocs -> assoc .)
    DEF             reduce using rule 171 (assocs -> assoc .)
    PUTS            reduce using rule 171 (assocs -> assoc .)
    VAR_GLOBAL      reduce using rule 171 (assocs -> assoc .)
    VAR_LOCAL       reduce using rule 171 (assocs -> assoc .)
    VAR_INSTANCE    reduce using rule 171 (assocs -> assoc .)
    VAR_CLASS       reduce using rule 171 (assocs -> assoc .)
    SYMBOL          reduce using rule 171 (assocs -> assoc .)
    STRING          reduce using rule 171 (assocs -> assoc .)
    IDENTIFIER      reduce using rule 171 (assocs -> assoc .)
    SUPER           reduce using rule 171 (assocs -> assoc .)
    COMMA           shift and go to state 270

  ! COMMA           [ reduce using rule 171 (assocs -> assoc .) ]


state 130

    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    =               shift and go to state 237
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 131

    (73) arg -> primary .
    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
    COMMA           reduce using rule 73 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RKEY            reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    $end            reduce using rule 73 (arg -> primary .)
    RBRACKET        reduce using rule 73 (arg -> primary .)
    THEN            reduce using rule 73 (arg -> primary .)
    DO              reduce using rule 73 (arg -> primary .)
    RESCUE          reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)
    WHEN            reduce using rule 73 (arg -> primary .)
    LKEY            reduce using rule 73 (arg -> primary .)
    END             reduce using rule 73 (arg -> primary .)
    ELSIF           reduce using rule 73 (arg -> primary .)
    ELSE            reduce using rule 73 (arg -> primary .)
    ENSURE          reduce using rule 73 (arg -> primary .)
    NOT_SYMBOL      reduce using rule 73 (arg -> primary .)
    COMPLEMENT_OP   reduce using rule 73 (arg -> primary .)
    DEFINED_OP      reduce using rule 73 (arg -> primary .)
    RETURN          reduce using rule 73 (arg -> primary .)
    YIELD           reduce using rule 73 (arg -> primary .)
    CASE            reduce using rule 73 (arg -> primary .)
    FOR             reduce using rule 73 (arg -> primary .)
    BEGIN           reduce using rule 73 (arg -> primary .)
    CLASS           reduce using rule 73 (arg -> primary .)
    MODULE          reduce using rule 73 (arg -> primary .)
    DEF             reduce using rule 73 (arg -> primary .)
    PUTS            reduce using rule 73 (arg -> primary .)
    VAR_GLOBAL      reduce using rule 73 (arg -> primary .)
    VAR_LOCAL       reduce using rule 73 (arg -> primary .)
    VAR_INSTANCE    reduce using rule 73 (arg -> primary .)
    VAR_CLASS       reduce using rule 73 (arg -> primary .)
    SYMBOL          reduce using rule 73 (arg -> primary .)
    STRING          reduce using rule 73 (arg -> primary .)
    IDENTIFIER      reduce using rule 73 (arg -> primary .)
    SUPER           reduce using rule 73 (arg -> primary .)
    LBRACKET        shift and go to state 149
    DOT             shift and go to state 239
    UNARY_OP        shift and go to state 240

  ! LBRACKET        [ reduce using rule 73 (arg -> primary .) ]
  ! DOT             [ reduce using rule 73 (arg -> primary .) ]
  ! UNARY_OP        [ reduce using rule 73 (arg -> primary .) ]


state 132

    (78) primary -> LPAREN . compstmt RPAREN
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 194
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 133

    (17) stmt -> lhs = . command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (41) arg -> lhs = . arg
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    lhs                            shift and go to state 130
    command                        shift and go to state 271
    arg                            shift and go to state 272
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 134

    (42) arg -> lhs op_asgn . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 130
    arg                            shift and go to state 273
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 135

    (223) op_asgn -> PLUS_EQUAL .

    PLUS            reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    MINUS           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    NOT_SYMBOL      reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    COMPLEMENT_OP   reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    DEFINED_OP      reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    LPAREN          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    UNARY_OP        reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    LBRACKET        reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    LKEY            reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    RETURN          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    YIELD           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    IF              reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    UNLESS          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    WHILE           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    UNTIL           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    CASE            reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    FOR             reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    BEGIN           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    CLASS           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    MODULE          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    DEF             reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    PUTS            reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    VAR_LOCAL       reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    VAR_CLASS       reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    NUMBER          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    SYMBOL          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    STRING          reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    IDENTIFIER      reduce using rule 223 (op_asgn -> PLUS_EQUAL .)
    SUPER           reduce using rule 223 (op_asgn -> PLUS_EQUAL .)


state 136

    (224) op_asgn -> MINUS_EQUAL .

    PLUS            reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    MINUS           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    NOT_SYMBOL      reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    COMPLEMENT_OP   reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    DEFINED_OP      reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    LPAREN          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    UNARY_OP        reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    LBRACKET        reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    LKEY            reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    RETURN          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    YIELD           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    IF              reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    UNLESS          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    WHILE           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    UNTIL           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    CASE            reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    FOR             reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    BEGIN           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    CLASS           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    MODULE          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    DEF             reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    PUTS            reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    VAR_LOCAL       reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    VAR_CLASS       reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    NUMBER          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    SYMBOL          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    STRING          reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    IDENTIFIER      reduce using rule 224 (op_asgn -> MINUS_EQUAL .)
    SUPER           reduce using rule 224 (op_asgn -> MINUS_EQUAL .)


state 137

    (225) op_asgn -> TIMES_EQUAL .

    PLUS            reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    MINUS           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    NOT_SYMBOL      reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    COMPLEMENT_OP   reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    DEFINED_OP      reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    LPAREN          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    UNARY_OP        reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    LBRACKET        reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    LKEY            reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    RETURN          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    YIELD           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    IF              reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    UNLESS          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    WHILE           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    UNTIL           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    CASE            reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    FOR             reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    BEGIN           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    CLASS           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    MODULE          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    DEF             reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    PUTS            reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    VAR_GLOBAL      reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    VAR_LOCAL       reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    VAR_INSTANCE    reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    VAR_CLASS       reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    NUMBER          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    SYMBOL          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    STRING          reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    IDENTIFIER      reduce using rule 225 (op_asgn -> TIMES_EQUAL .)
    SUPER           reduce using rule 225 (op_asgn -> TIMES_EQUAL .)


state 138

    (226) op_asgn -> DIVIDE_EQUAL .

    PLUS            reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    MINUS           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    NOT_SYMBOL      reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    COMPLEMENT_OP   reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    DEFINED_OP      reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    LPAREN          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    UNARY_OP        reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    LBRACKET        reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    LKEY            reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    RETURN          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    YIELD           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    IF              reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    UNLESS          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    WHILE           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    UNTIL           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    CASE            reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    FOR             reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    BEGIN           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    CLASS           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    MODULE          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    DEF             reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    PUTS            reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    VAR_GLOBAL      reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    VAR_LOCAL       reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    VAR_INSTANCE    reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    VAR_CLASS       reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    NUMBER          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    SYMBOL          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    STRING          reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    IDENTIFIER      reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)
    SUPER           reduce using rule 226 (op_asgn -> DIVIDE_EQUAL .)


state 139

    (227) op_asgn -> MOD_EQUAL .

    PLUS            reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    MINUS           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    NOT_SYMBOL      reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    COMPLEMENT_OP   reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    DEFINED_OP      reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    LPAREN          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    UNARY_OP        reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    LBRACKET        reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    LKEY            reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    RETURN          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    YIELD           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    IF              reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    UNLESS          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    WHILE           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    UNTIL           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    CASE            reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    FOR             reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    BEGIN           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    CLASS           reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    MODULE          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    DEF             reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    PUTS            reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    VAR_GLOBAL      reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    VAR_LOCAL       reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    VAR_INSTANCE    reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    VAR_CLASS       reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    NUMBER          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    SYMBOL          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    STRING          reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    IDENTIFIER      reduce using rule 227 (op_asgn -> MOD_EQUAL .)
    SUPER           reduce using rule 227 (op_asgn -> MOD_EQUAL .)


state 140

    (228) op_asgn -> POW_EQUAL .

    PLUS            reduce using rule 228 (op_asgn -> POW_EQUAL .)
    MINUS           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    NOT_SYMBOL      reduce using rule 228 (op_asgn -> POW_EQUAL .)
    COMPLEMENT_OP   reduce using rule 228 (op_asgn -> POW_EQUAL .)
    DEFINED_OP      reduce using rule 228 (op_asgn -> POW_EQUAL .)
    LPAREN          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    UNARY_OP        reduce using rule 228 (op_asgn -> POW_EQUAL .)
    LBRACKET        reduce using rule 228 (op_asgn -> POW_EQUAL .)
    LKEY            reduce using rule 228 (op_asgn -> POW_EQUAL .)
    RETURN          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    YIELD           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    IF              reduce using rule 228 (op_asgn -> POW_EQUAL .)
    UNLESS          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    WHILE           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    UNTIL           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    CASE            reduce using rule 228 (op_asgn -> POW_EQUAL .)
    FOR             reduce using rule 228 (op_asgn -> POW_EQUAL .)
    BEGIN           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    CLASS           reduce using rule 228 (op_asgn -> POW_EQUAL .)
    MODULE          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    DEF             reduce using rule 228 (op_asgn -> POW_EQUAL .)
    PUTS            reduce using rule 228 (op_asgn -> POW_EQUAL .)
    VAR_GLOBAL      reduce using rule 228 (op_asgn -> POW_EQUAL .)
    VAR_LOCAL       reduce using rule 228 (op_asgn -> POW_EQUAL .)
    VAR_INSTANCE    reduce using rule 228 (op_asgn -> POW_EQUAL .)
    VAR_CLASS       reduce using rule 228 (op_asgn -> POW_EQUAL .)
    NUMBER          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    SYMBOL          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    STRING          reduce using rule 228 (op_asgn -> POW_EQUAL .)
    IDENTIFIER      reduce using rule 228 (op_asgn -> POW_EQUAL .)
    SUPER           reduce using rule 228 (op_asgn -> POW_EQUAL .)


state 141

    (229) op_asgn -> SINGLE_AND_EQUAL .

    PLUS            reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    MINUS           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    NOT_SYMBOL      reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    COMPLEMENT_OP   reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    DEFINED_OP      reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    LPAREN          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    UNARY_OP        reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    LBRACKET        reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    LKEY            reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    RETURN          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    YIELD           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    IF              reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    UNLESS          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    WHILE           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    UNTIL           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    CASE            reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    FOR             reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    BEGIN           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    CLASS           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    MODULE          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    DEF             reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    PUTS            reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_GLOBAL      reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_LOCAL       reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_INSTANCE    reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_CLASS       reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    NUMBER          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    SYMBOL          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    STRING          reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    IDENTIFIER      reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)
    SUPER           reduce using rule 229 (op_asgn -> SINGLE_AND_EQUAL .)


state 142

    (230) op_asgn -> SINGLE_OR_EQUAL .

    PLUS            reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    MINUS           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    NOT_SYMBOL      reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    DEFINED_OP      reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    LPAREN          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    UNARY_OP        reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    LBRACKET        reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    LKEY            reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    RETURN          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    YIELD           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    IF              reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    UNLESS          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    WHILE           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    UNTIL           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    CASE            reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    FOR             reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    BEGIN           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    CLASS           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    MODULE          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    DEF             reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    PUTS            reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_GLOBAL      reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_LOCAL       reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_INSTANCE    reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_CLASS       reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    NUMBER          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    SYMBOL          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    STRING          reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    IDENTIFIER      reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)
    SUPER           reduce using rule 230 (op_asgn -> SINGLE_OR_EQUAL .)


state 143

    (231) op_asgn -> XOR_EQUAL .

    PLUS            reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    MINUS           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    NOT_SYMBOL      reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    DEFINED_OP      reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    LPAREN          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    UNARY_OP        reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    LBRACKET        reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    LKEY            reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    RETURN          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    YIELD           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    IF              reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    UNLESS          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    WHILE           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    UNTIL           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    CASE            reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    FOR             reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    BEGIN           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    CLASS           reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    MODULE          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    DEF             reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    PUTS            reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    VAR_GLOBAL      reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    VAR_LOCAL       reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    VAR_INSTANCE    reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    VAR_CLASS       reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    NUMBER          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    SYMBOL          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    STRING          reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    IDENTIFIER      reduce using rule 231 (op_asgn -> XOR_EQUAL .)
    SUPER           reduce using rule 231 (op_asgn -> XOR_EQUAL .)


state 144

    (232) op_asgn -> BINARY_LEFT_EQUAL .

    PLUS            reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    MINUS           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    NOT_SYMBOL      reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    COMPLEMENT_OP   reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    DEFINED_OP      reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    LPAREN          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNARY_OP        reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    LBRACKET        reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    LKEY            reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    RETURN          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    YIELD           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    IF              reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNLESS          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    WHILE           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNTIL           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    CASE            reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    FOR             reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    BEGIN           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    CLASS           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    MODULE          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    DEF             reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    PUTS            reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_GLOBAL      reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_LOCAL       reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_INSTANCE    reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_CLASS       reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    NUMBER          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    SYMBOL          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    STRING          reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    IDENTIFIER      reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)
    SUPER           reduce using rule 232 (op_asgn -> BINARY_LEFT_EQUAL .)


state 145

    (233) op_asgn -> BINARY_RIGHT_EQUAL .

    PLUS            reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    MINUS           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    NOT_SYMBOL      reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    COMPLEMENT_OP   reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    DEFINED_OP      reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LPAREN          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNARY_OP        reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LBRACKET        reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LKEY            reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    RETURN          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    YIELD           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    IF              reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNLESS          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    WHILE           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNTIL           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    CASE            reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    FOR             reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    BEGIN           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    CLASS           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    MODULE          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    DEF             reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    PUTS            reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_GLOBAL      reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_LOCAL       reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_INSTANCE    reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_CLASS       reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    NUMBER          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    SYMBOL          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    STRING          reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    IDENTIFIER      reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)
    SUPER           reduce using rule 233 (op_asgn -> BINARY_RIGHT_EQUAL .)


state 146

    (234) op_asgn -> AND_EQUAL .

    PLUS            reduce using rule 234 (op_asgn -> AND_EQUAL .)
    MINUS           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    NOT_SYMBOL      reduce using rule 234 (op_asgn -> AND_EQUAL .)
    COMPLEMENT_OP   reduce using rule 234 (op_asgn -> AND_EQUAL .)
    DEFINED_OP      reduce using rule 234 (op_asgn -> AND_EQUAL .)
    LPAREN          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    UNARY_OP        reduce using rule 234 (op_asgn -> AND_EQUAL .)
    LBRACKET        reduce using rule 234 (op_asgn -> AND_EQUAL .)
    LKEY            reduce using rule 234 (op_asgn -> AND_EQUAL .)
    RETURN          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    YIELD           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    IF              reduce using rule 234 (op_asgn -> AND_EQUAL .)
    UNLESS          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    WHILE           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    UNTIL           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    CASE            reduce using rule 234 (op_asgn -> AND_EQUAL .)
    FOR             reduce using rule 234 (op_asgn -> AND_EQUAL .)
    BEGIN           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    CLASS           reduce using rule 234 (op_asgn -> AND_EQUAL .)
    MODULE          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    DEF             reduce using rule 234 (op_asgn -> AND_EQUAL .)
    PUTS            reduce using rule 234 (op_asgn -> AND_EQUAL .)
    VAR_GLOBAL      reduce using rule 234 (op_asgn -> AND_EQUAL .)
    VAR_LOCAL       reduce using rule 234 (op_asgn -> AND_EQUAL .)
    VAR_INSTANCE    reduce using rule 234 (op_asgn -> AND_EQUAL .)
    VAR_CLASS       reduce using rule 234 (op_asgn -> AND_EQUAL .)
    NUMBER          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    SYMBOL          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    STRING          reduce using rule 234 (op_asgn -> AND_EQUAL .)
    IDENTIFIER      reduce using rule 234 (op_asgn -> AND_EQUAL .)
    SUPER           reduce using rule 234 (op_asgn -> AND_EQUAL .)


state 147

    (235) op_asgn -> OR_EQUAL .

    PLUS            reduce using rule 235 (op_asgn -> OR_EQUAL .)
    MINUS           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    NOT_SYMBOL      reduce using rule 235 (op_asgn -> OR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 235 (op_asgn -> OR_EQUAL .)
    DEFINED_OP      reduce using rule 235 (op_asgn -> OR_EQUAL .)
    LPAREN          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    UNARY_OP        reduce using rule 235 (op_asgn -> OR_EQUAL .)
    LBRACKET        reduce using rule 235 (op_asgn -> OR_EQUAL .)
    LKEY            reduce using rule 235 (op_asgn -> OR_EQUAL .)
    RETURN          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    YIELD           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    IF              reduce using rule 235 (op_asgn -> OR_EQUAL .)
    UNLESS          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    WHILE           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    UNTIL           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    CASE            reduce using rule 235 (op_asgn -> OR_EQUAL .)
    FOR             reduce using rule 235 (op_asgn -> OR_EQUAL .)
    BEGIN           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    CLASS           reduce using rule 235 (op_asgn -> OR_EQUAL .)
    MODULE          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    DEF             reduce using rule 235 (op_asgn -> OR_EQUAL .)
    PUTS            reduce using rule 235 (op_asgn -> OR_EQUAL .)
    VAR_GLOBAL      reduce using rule 235 (op_asgn -> OR_EQUAL .)
    VAR_LOCAL       reduce using rule 235 (op_asgn -> OR_EQUAL .)
    VAR_INSTANCE    reduce using rule 235 (op_asgn -> OR_EQUAL .)
    VAR_CLASS       reduce using rule 235 (op_asgn -> OR_EQUAL .)
    NUMBER          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    SYMBOL          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    STRING          reduce using rule 235 (op_asgn -> OR_EQUAL .)
    IDENTIFIER      reduce using rule 235 (op_asgn -> OR_EQUAL .)
    SUPER           reduce using rule 235 (op_asgn -> OR_EQUAL .)


state 148

    (101) primary -> function LKEY . compstmt LKEY
    (102) primary -> function LKEY . OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> function LKEY . OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    OR_SYMBOL       shift and go to state 275
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    function                       shift and go to state 18
    compstmt                       shift and go to state 274
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 149

    (149) lhs -> primary LBRACKET . RBRACKET
    (150) lhs -> primary LBRACKET . args RBRACKET
    (83) primary -> primary LBRACKET . RBRACKET
    (84) primary -> primary LBRACKET . args RBRACKET
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 276
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    primary                        shift and go to state 131
    args                           shift and go to state 277
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 150

    (151) lhs -> primary DOT . IDENTIFIER
    (35) function -> primary DOT . operation LPAREN call_args RPAREN
    (37) function -> primary DOT . operation
    (31) command -> primary DOT . operation call_args
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 278

    operation                      shift and go to state 279

state 151

    (36) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP . operation
    (32) command -> primary UNARY_OP . operation call_args
    (81) primary -> primary UNARY_OP . IDENTIFIER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 281

    operation                      shift and go to state 280

state 152

    (221) operation -> IDENTIFIER NOT_SYMBOL .

    LBRACKET        reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    TIMES           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_AND_OP   reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    SUPER           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    PLUS            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    MINUS           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    NOT_SYMBOL      reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    DEFINED_OP      reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    IDENTIFIER      reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    LPAREN          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNARY_OP        reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    LKEY            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RETURN          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    YIELD           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    IF              reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNLESS          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    WHILE           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNTIL           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    CASE            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    FOR             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    BEGIN           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    CLASS           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    MODULE          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    DEF             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    PUTS            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    NUMBER          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    SYMBOL          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    STRING          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_GLOBAL      reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_LOCAL       reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_INSTANCE    reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_CLASS       reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    DO              reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    TERM            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    DOT             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    DIVIDE          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    MOD             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    POW             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    OR_SYMBOL       reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    GREATERTHAN     reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    LESSERTHAN      reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    EQUAL           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    CASE_EQUALITY   reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    NOTEQUAL        reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    AND             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    OR              reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    $end            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RESCUE          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RPAREN          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    WHEN            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMMA           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RBRACKET        reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    THEN            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    HASH_ROCKET     reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    RKEY            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    END             reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    ELSIF           reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    ELSE            reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)
    ENSURE          reduce using rule 221 (operation -> IDENTIFIER NOT_SYMBOL .)


state 153

    (222) operation -> IDENTIFIER OPTIONAL_SYMBOL .

    LBRACKET        reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    TIMES           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_AND_OP   reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    SUPER           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    PLUS            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MINUS           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NOT_SYMBOL      reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DEFINED_OP      reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    IDENTIFIER      reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LPAREN          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNARY_OP        reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LKEY            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RETURN          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    YIELD           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    IF              reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNLESS          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    WHILE           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNTIL           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CASE            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    FOR             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BEGIN           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CLASS           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MODULE          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DEF             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    PUTS            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NUMBER          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    SYMBOL          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    STRING          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_GLOBAL      reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_LOCAL       reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_INSTANCE    reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_CLASS       reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DO              reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    TERM            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DOT             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DIVIDE          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MOD             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    POW             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OR_SYMBOL       reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    GREATERTHAN     reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LESSERTHAN      reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    EQUAL           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CASE_EQUALITY   reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NOTEQUAL        reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    AND             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OR              reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    $end            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RESCUE          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RPAREN          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    WHEN            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMMA           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RBRACKET        reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    THEN            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    HASH_ROCKET     reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RKEY            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    END             reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ELSIF           reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ELSE            reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ENSURE          reduce using rule 222 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)


state 154

    (19) expr -> mlhs = . mrhs
    (143) mrhs -> . args
    (144) mrhs -> . args COMMA
    (145) mrhs -> . args TIMES
    (146) mrhs -> . args arg
    (147) mrhs -> . TIMES arg
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 284
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    mrhs                           shift and go to state 282
    args                           shift and go to state 283
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 155

    (20) expr -> RETURN call_args .

    AND             reduce using rule 20 (expr -> RETURN call_args .)
    OR              reduce using rule 20 (expr -> RETURN call_args .)
    IF              reduce using rule 20 (expr -> RETURN call_args .)
    WHILE           reduce using rule 20 (expr -> RETURN call_args .)
    UNLESS          reduce using rule 20 (expr -> RETURN call_args .)
    UNTIL           reduce using rule 20 (expr -> RETURN call_args .)
    TERM            reduce using rule 20 (expr -> RETURN call_args .)
    NUMBER          reduce using rule 20 (expr -> RETURN call_args .)
    LPAREN          reduce using rule 20 (expr -> RETURN call_args .)
    $end            reduce using rule 20 (expr -> RETURN call_args .)
    THEN            reduce using rule 20 (expr -> RETURN call_args .)
    DO              reduce using rule 20 (expr -> RETURN call_args .)
    RESCUE          reduce using rule 20 (expr -> RETURN call_args .)
    LBRACKET        reduce using rule 20 (expr -> RETURN call_args .)
    DOT             reduce using rule 20 (expr -> RETURN call_args .)
    UNARY_OP        reduce using rule 20 (expr -> RETURN call_args .)
    RANGE_INCLUSIVE reduce using rule 20 (expr -> RETURN call_args .)
    RANGE_EXCLUSIVE reduce using rule 20 (expr -> RETURN call_args .)
    PLUS            reduce using rule 20 (expr -> RETURN call_args .)
    MINUS           reduce using rule 20 (expr -> RETURN call_args .)
    TIMES           reduce using rule 20 (expr -> RETURN call_args .)
    DIVIDE          reduce using rule 20 (expr -> RETURN call_args .)
    MOD             reduce using rule 20 (expr -> RETURN call_args .)
    POW             reduce using rule 20 (expr -> RETURN call_args .)
    OR_SYMBOL       reduce using rule 20 (expr -> RETURN call_args .)
    BINARY_XOR_OP   reduce using rule 20 (expr -> RETURN call_args .)
    BINARY_AND_OP   reduce using rule 20 (expr -> RETURN call_args .)
    COMBINED_COMPARISON_OP reduce using rule 20 (expr -> RETURN call_args .)
    GREATERTHAN     reduce using rule 20 (expr -> RETURN call_args .)
    GREATERTHANEQUAL reduce using rule 20 (expr -> RETURN call_args .)
    LESSERTHAN      reduce using rule 20 (expr -> RETURN call_args .)
    LESSERTHANEQUAL reduce using rule 20 (expr -> RETURN call_args .)
    EQUAL           reduce using rule 20 (expr -> RETURN call_args .)
    CASE_EQUALITY   reduce using rule 20 (expr -> RETURN call_args .)
    NOTEQUAL        reduce using rule 20 (expr -> RETURN call_args .)
    MATCHED_STRINGS_OP reduce using rule 20 (expr -> RETURN call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 20 (expr -> RETURN call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 20 (expr -> RETURN call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 20 (expr -> RETURN call_args .)
    COMMA           reduce using rule 20 (expr -> RETURN call_args .)
    RBRACKET        reduce using rule 20 (expr -> RETURN call_args .)
    HASH_ROCKET     reduce using rule 20 (expr -> RETURN call_args .)
    RKEY            reduce using rule 20 (expr -> RETURN call_args .)
    RPAREN          reduce using rule 20 (expr -> RETURN call_args .)
    WHEN            reduce using rule 20 (expr -> RETURN call_args .)
    LKEY            reduce using rule 20 (expr -> RETURN call_args .)
    END             reduce using rule 20 (expr -> RETURN call_args .)
    ELSIF           reduce using rule 20 (expr -> RETURN call_args .)
    ELSE            reduce using rule 20 (expr -> RETURN call_args .)
    ENSURE          reduce using rule 20 (expr -> RETURN call_args .)
    NOT_SYMBOL      reduce using rule 20 (expr -> RETURN call_args .)
    COMPLEMENT_OP   reduce using rule 20 (expr -> RETURN call_args .)
    DEFINED_OP      reduce using rule 20 (expr -> RETURN call_args .)
    RETURN          reduce using rule 20 (expr -> RETURN call_args .)
    YIELD           reduce using rule 20 (expr -> RETURN call_args .)
    CASE            reduce using rule 20 (expr -> RETURN call_args .)
    FOR             reduce using rule 20 (expr -> RETURN call_args .)
    BEGIN           reduce using rule 20 (expr -> RETURN call_args .)
    CLASS           reduce using rule 20 (expr -> RETURN call_args .)
    MODULE          reduce using rule 20 (expr -> RETURN call_args .)
    DEF             reduce using rule 20 (expr -> RETURN call_args .)
    PUTS            reduce using rule 20 (expr -> RETURN call_args .)
    VAR_GLOBAL      reduce using rule 20 (expr -> RETURN call_args .)
    VAR_LOCAL       reduce using rule 20 (expr -> RETURN call_args .)
    VAR_INSTANCE    reduce using rule 20 (expr -> RETURN call_args .)
    VAR_CLASS       reduce using rule 20 (expr -> RETURN call_args .)
    SYMBOL          reduce using rule 20 (expr -> RETURN call_args .)
    STRING          reduce using rule 20 (expr -> RETURN call_args .)
    IDENTIFIER      reduce using rule 20 (expr -> RETURN call_args .)
    SUPER           reduce using rule 20 (expr -> RETURN call_args .)


state 156

    (94) primary -> RETURN LPAREN . RPAREN
    (95) primary -> RETURN LPAREN . call_args RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    RPAREN          shift and go to state 286
    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NOT             shift and go to state 25
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 287
    compstmt                       shift and go to state 194
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 260
    command                        shift and go to state 289
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 291
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 157

    (174) call_args -> args .
    (175) call_args -> args . COMMA assocs
    (176) call_args -> args . COMMA TIMES arg
    (177) call_args -> args . COMMA BINARY_AND_OP arg
    (178) call_args -> args . COMMA assocs COMMA TIMES arg
    (179) call_args -> args . COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> args . COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> args . COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg

  ! shift/reduce conflict for COMMA resolved as shift
    LBRACKET        reduce using rule 174 (call_args -> args .)
    DOT             reduce using rule 174 (call_args -> args .)
    UNARY_OP        reduce using rule 174 (call_args -> args .)
    RANGE_INCLUSIVE reduce using rule 174 (call_args -> args .)
    RANGE_EXCLUSIVE reduce using rule 174 (call_args -> args .)
    PLUS            reduce using rule 174 (call_args -> args .)
    MINUS           reduce using rule 174 (call_args -> args .)
    TIMES           reduce using rule 174 (call_args -> args .)
    DIVIDE          reduce using rule 174 (call_args -> args .)
    MOD             reduce using rule 174 (call_args -> args .)
    POW             reduce using rule 174 (call_args -> args .)
    OR_SYMBOL       reduce using rule 174 (call_args -> args .)
    BINARY_XOR_OP   reduce using rule 174 (call_args -> args .)
    BINARY_AND_OP   reduce using rule 174 (call_args -> args .)
    COMBINED_COMPARISON_OP reduce using rule 174 (call_args -> args .)
    GREATERTHAN     reduce using rule 174 (call_args -> args .)
    GREATERTHANEQUAL reduce using rule 174 (call_args -> args .)
    LESSERTHAN      reduce using rule 174 (call_args -> args .)
    LESSERTHANEQUAL reduce using rule 174 (call_args -> args .)
    EQUAL           reduce using rule 174 (call_args -> args .)
    CASE_EQUALITY   reduce using rule 174 (call_args -> args .)
    NOTEQUAL        reduce using rule 174 (call_args -> args .)
    MATCHED_STRINGS_OP reduce using rule 174 (call_args -> args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 174 (call_args -> args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 174 (call_args -> args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 174 (call_args -> args .)
    AND             reduce using rule 174 (call_args -> args .)
    OR              reduce using rule 174 (call_args -> args .)
    IF              reduce using rule 174 (call_args -> args .)
    WHILE           reduce using rule 174 (call_args -> args .)
    UNLESS          reduce using rule 174 (call_args -> args .)
    UNTIL           reduce using rule 174 (call_args -> args .)
    TERM            reduce using rule 174 (call_args -> args .)
    NUMBER          reduce using rule 174 (call_args -> args .)
    LPAREN          reduce using rule 174 (call_args -> args .)
    $end            reduce using rule 174 (call_args -> args .)
    RBRACKET        reduce using rule 174 (call_args -> args .)
    THEN            reduce using rule 174 (call_args -> args .)
    DO              reduce using rule 174 (call_args -> args .)
    RESCUE          reduce using rule 174 (call_args -> args .)
    HASH_ROCKET     reduce using rule 174 (call_args -> args .)
    RKEY            reduce using rule 174 (call_args -> args .)
    RPAREN          reduce using rule 174 (call_args -> args .)
    WHEN            reduce using rule 174 (call_args -> args .)
    LKEY            reduce using rule 174 (call_args -> args .)
    END             reduce using rule 174 (call_args -> args .)
    ELSIF           reduce using rule 174 (call_args -> args .)
    ELSE            reduce using rule 174 (call_args -> args .)
    ENSURE          reduce using rule 174 (call_args -> args .)
    NOT_SYMBOL      reduce using rule 174 (call_args -> args .)
    COMPLEMENT_OP   reduce using rule 174 (call_args -> args .)
    DEFINED_OP      reduce using rule 174 (call_args -> args .)
    RETURN          reduce using rule 174 (call_args -> args .)
    YIELD           reduce using rule 174 (call_args -> args .)
    CASE            reduce using rule 174 (call_args -> args .)
    FOR             reduce using rule 174 (call_args -> args .)
    BEGIN           reduce using rule 174 (call_args -> args .)
    CLASS           reduce using rule 174 (call_args -> args .)
    MODULE          reduce using rule 174 (call_args -> args .)
    DEF             reduce using rule 174 (call_args -> args .)
    PUTS            reduce using rule 174 (call_args -> args .)
    VAR_GLOBAL      reduce using rule 174 (call_args -> args .)
    VAR_LOCAL       reduce using rule 174 (call_args -> args .)
    VAR_INSTANCE    reduce using rule 174 (call_args -> args .)
    VAR_CLASS       reduce using rule 174 (call_args -> args .)
    SYMBOL          reduce using rule 174 (call_args -> args .)
    STRING          reduce using rule 174 (call_args -> args .)
    IDENTIFIER      reduce using rule 174 (call_args -> args .)
    SUPER           reduce using rule 174 (call_args -> args .)
    COMMA           shift and go to state 292

  ! COMMA           [ reduce using rule 174 (call_args -> args .) ]


state 158

    (182) call_args -> assocs .
    (183) call_args -> assocs . COMMA TIMES arg
    (184) call_args -> assocs . COMMA BINARY_AND_OP arg
    (185) call_args -> assocs . COMMA TIMES arg COMMA BINARY_AND_OP arg

  ! shift/reduce conflict for COMMA resolved as shift
    LBRACKET        reduce using rule 182 (call_args -> assocs .)
    DOT             reduce using rule 182 (call_args -> assocs .)
    UNARY_OP        reduce using rule 182 (call_args -> assocs .)
    RANGE_INCLUSIVE reduce using rule 182 (call_args -> assocs .)
    RANGE_EXCLUSIVE reduce using rule 182 (call_args -> assocs .)
    PLUS            reduce using rule 182 (call_args -> assocs .)
    MINUS           reduce using rule 182 (call_args -> assocs .)
    TIMES           reduce using rule 182 (call_args -> assocs .)
    DIVIDE          reduce using rule 182 (call_args -> assocs .)
    MOD             reduce using rule 182 (call_args -> assocs .)
    POW             reduce using rule 182 (call_args -> assocs .)
    OR_SYMBOL       reduce using rule 182 (call_args -> assocs .)
    BINARY_XOR_OP   reduce using rule 182 (call_args -> assocs .)
    BINARY_AND_OP   reduce using rule 182 (call_args -> assocs .)
    COMBINED_COMPARISON_OP reduce using rule 182 (call_args -> assocs .)
    GREATERTHAN     reduce using rule 182 (call_args -> assocs .)
    GREATERTHANEQUAL reduce using rule 182 (call_args -> assocs .)
    LESSERTHAN      reduce using rule 182 (call_args -> assocs .)
    LESSERTHANEQUAL reduce using rule 182 (call_args -> assocs .)
    EQUAL           reduce using rule 182 (call_args -> assocs .)
    CASE_EQUALITY   reduce using rule 182 (call_args -> assocs .)
    NOTEQUAL        reduce using rule 182 (call_args -> assocs .)
    MATCHED_STRINGS_OP reduce using rule 182 (call_args -> assocs .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 182 (call_args -> assocs .)
    BINARY_LEFT_SHIFT_OP reduce using rule 182 (call_args -> assocs .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 182 (call_args -> assocs .)
    AND             reduce using rule 182 (call_args -> assocs .)
    OR              reduce using rule 182 (call_args -> assocs .)
    IF              reduce using rule 182 (call_args -> assocs .)
    WHILE           reduce using rule 182 (call_args -> assocs .)
    UNLESS          reduce using rule 182 (call_args -> assocs .)
    UNTIL           reduce using rule 182 (call_args -> assocs .)
    TERM            reduce using rule 182 (call_args -> assocs .)
    NUMBER          reduce using rule 182 (call_args -> assocs .)
    LPAREN          reduce using rule 182 (call_args -> assocs .)
    $end            reduce using rule 182 (call_args -> assocs .)
    RBRACKET        reduce using rule 182 (call_args -> assocs .)
    THEN            reduce using rule 182 (call_args -> assocs .)
    DO              reduce using rule 182 (call_args -> assocs .)
    RESCUE          reduce using rule 182 (call_args -> assocs .)
    HASH_ROCKET     reduce using rule 182 (call_args -> assocs .)
    RKEY            reduce using rule 182 (call_args -> assocs .)
    RPAREN          reduce using rule 182 (call_args -> assocs .)
    WHEN            reduce using rule 182 (call_args -> assocs .)
    LKEY            reduce using rule 182 (call_args -> assocs .)
    END             reduce using rule 182 (call_args -> assocs .)
    ELSIF           reduce using rule 182 (call_args -> assocs .)
    ELSE            reduce using rule 182 (call_args -> assocs .)
    ENSURE          reduce using rule 182 (call_args -> assocs .)
    NOT_SYMBOL      reduce using rule 182 (call_args -> assocs .)
    COMPLEMENT_OP   reduce using rule 182 (call_args -> assocs .)
    DEFINED_OP      reduce using rule 182 (call_args -> assocs .)
    RETURN          reduce using rule 182 (call_args -> assocs .)
    YIELD           reduce using rule 182 (call_args -> assocs .)
    CASE            reduce using rule 182 (call_args -> assocs .)
    FOR             reduce using rule 182 (call_args -> assocs .)
    BEGIN           reduce using rule 182 (call_args -> assocs .)
    CLASS           reduce using rule 182 (call_args -> assocs .)
    MODULE          reduce using rule 182 (call_args -> assocs .)
    DEF             reduce using rule 182 (call_args -> assocs .)
    PUTS            reduce using rule 182 (call_args -> assocs .)
    VAR_GLOBAL      reduce using rule 182 (call_args -> assocs .)
    VAR_LOCAL       reduce using rule 182 (call_args -> assocs .)
    VAR_INSTANCE    reduce using rule 182 (call_args -> assocs .)
    VAR_CLASS       reduce using rule 182 (call_args -> assocs .)
    SYMBOL          reduce using rule 182 (call_args -> assocs .)
    STRING          reduce using rule 182 (call_args -> assocs .)
    IDENTIFIER      reduce using rule 182 (call_args -> assocs .)
    SUPER           reduce using rule 182 (call_args -> assocs .)
    COMMA           shift and go to state 293

  ! COMMA           [ reduce using rule 182 (call_args -> assocs .) ]


state 159

    (186) call_args -> TIMES . arg
    (187) call_args -> TIMES . arg COMMA BINARY_AND_OP arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 294
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 160

    (188) call_args -> BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 295
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 161

    (189) call_args -> command .

    LBRACKET        reduce using rule 189 (call_args -> command .)
    DOT             reduce using rule 189 (call_args -> command .)
    UNARY_OP        reduce using rule 189 (call_args -> command .)
    RANGE_INCLUSIVE reduce using rule 189 (call_args -> command .)
    RANGE_EXCLUSIVE reduce using rule 189 (call_args -> command .)
    PLUS            reduce using rule 189 (call_args -> command .)
    MINUS           reduce using rule 189 (call_args -> command .)
    TIMES           reduce using rule 189 (call_args -> command .)
    DIVIDE          reduce using rule 189 (call_args -> command .)
    MOD             reduce using rule 189 (call_args -> command .)
    POW             reduce using rule 189 (call_args -> command .)
    OR_SYMBOL       reduce using rule 189 (call_args -> command .)
    BINARY_XOR_OP   reduce using rule 189 (call_args -> command .)
    BINARY_AND_OP   reduce using rule 189 (call_args -> command .)
    COMBINED_COMPARISON_OP reduce using rule 189 (call_args -> command .)
    GREATERTHAN     reduce using rule 189 (call_args -> command .)
    GREATERTHANEQUAL reduce using rule 189 (call_args -> command .)
    LESSERTHAN      reduce using rule 189 (call_args -> command .)
    LESSERTHANEQUAL reduce using rule 189 (call_args -> command .)
    EQUAL           reduce using rule 189 (call_args -> command .)
    CASE_EQUALITY   reduce using rule 189 (call_args -> command .)
    NOTEQUAL        reduce using rule 189 (call_args -> command .)
    MATCHED_STRINGS_OP reduce using rule 189 (call_args -> command .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 189 (call_args -> command .)
    BINARY_LEFT_SHIFT_OP reduce using rule 189 (call_args -> command .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 189 (call_args -> command .)
    AND             reduce using rule 189 (call_args -> command .)
    OR              reduce using rule 189 (call_args -> command .)
    IF              reduce using rule 189 (call_args -> command .)
    WHILE           reduce using rule 189 (call_args -> command .)
    UNLESS          reduce using rule 189 (call_args -> command .)
    UNTIL           reduce using rule 189 (call_args -> command .)
    TERM            reduce using rule 189 (call_args -> command .)
    NUMBER          reduce using rule 189 (call_args -> command .)
    LPAREN          reduce using rule 189 (call_args -> command .)
    $end            reduce using rule 189 (call_args -> command .)
    COMMA           reduce using rule 189 (call_args -> command .)
    RBRACKET        reduce using rule 189 (call_args -> command .)
    THEN            reduce using rule 189 (call_args -> command .)
    DO              reduce using rule 189 (call_args -> command .)
    RESCUE          reduce using rule 189 (call_args -> command .)
    HASH_ROCKET     reduce using rule 189 (call_args -> command .)
    RKEY            reduce using rule 189 (call_args -> command .)
    RPAREN          reduce using rule 189 (call_args -> command .)
    WHEN            reduce using rule 189 (call_args -> command .)
    LKEY            reduce using rule 189 (call_args -> command .)
    END             reduce using rule 189 (call_args -> command .)
    ELSIF           reduce using rule 189 (call_args -> command .)
    ELSE            reduce using rule 189 (call_args -> command .)
    ENSURE          reduce using rule 189 (call_args -> command .)
    NOT_SYMBOL      reduce using rule 189 (call_args -> command .)
    COMPLEMENT_OP   reduce using rule 189 (call_args -> command .)
    DEFINED_OP      reduce using rule 189 (call_args -> command .)
    RETURN          reduce using rule 189 (call_args -> command .)
    YIELD           reduce using rule 189 (call_args -> command .)
    CASE            reduce using rule 189 (call_args -> command .)
    FOR             reduce using rule 189 (call_args -> command .)
    BEGIN           reduce using rule 189 (call_args -> command .)
    CLASS           reduce using rule 189 (call_args -> command .)
    MODULE          reduce using rule 189 (call_args -> command .)
    DEF             reduce using rule 189 (call_args -> command .)
    PUTS            reduce using rule 189 (call_args -> command .)
    VAR_GLOBAL      reduce using rule 189 (call_args -> command .)
    VAR_LOCAL       reduce using rule 189 (call_args -> command .)
    VAR_INSTANCE    reduce using rule 189 (call_args -> command .)
    VAR_CLASS       reduce using rule 189 (call_args -> command .)
    SYMBOL          reduce using rule 189 (call_args -> command .)
    STRING          reduce using rule 189 (call_args -> command .)
    IDENTIFIER      reduce using rule 189 (call_args -> command .)
    SUPER           reduce using rule 189 (call_args -> command .)


state 162

    (21) expr -> YIELD call_args .

    AND             reduce using rule 21 (expr -> YIELD call_args .)
    OR              reduce using rule 21 (expr -> YIELD call_args .)
    IF              reduce using rule 21 (expr -> YIELD call_args .)
    WHILE           reduce using rule 21 (expr -> YIELD call_args .)
    UNLESS          reduce using rule 21 (expr -> YIELD call_args .)
    UNTIL           reduce using rule 21 (expr -> YIELD call_args .)
    TERM            reduce using rule 21 (expr -> YIELD call_args .)
    NUMBER          reduce using rule 21 (expr -> YIELD call_args .)
    LPAREN          reduce using rule 21 (expr -> YIELD call_args .)
    $end            reduce using rule 21 (expr -> YIELD call_args .)
    THEN            reduce using rule 21 (expr -> YIELD call_args .)
    DO              reduce using rule 21 (expr -> YIELD call_args .)
    RESCUE          reduce using rule 21 (expr -> YIELD call_args .)
    LBRACKET        reduce using rule 21 (expr -> YIELD call_args .)
    DOT             reduce using rule 21 (expr -> YIELD call_args .)
    UNARY_OP        reduce using rule 21 (expr -> YIELD call_args .)
    RANGE_INCLUSIVE reduce using rule 21 (expr -> YIELD call_args .)
    RANGE_EXCLUSIVE reduce using rule 21 (expr -> YIELD call_args .)
    PLUS            reduce using rule 21 (expr -> YIELD call_args .)
    MINUS           reduce using rule 21 (expr -> YIELD call_args .)
    TIMES           reduce using rule 21 (expr -> YIELD call_args .)
    DIVIDE          reduce using rule 21 (expr -> YIELD call_args .)
    MOD             reduce using rule 21 (expr -> YIELD call_args .)
    POW             reduce using rule 21 (expr -> YIELD call_args .)
    OR_SYMBOL       reduce using rule 21 (expr -> YIELD call_args .)
    BINARY_XOR_OP   reduce using rule 21 (expr -> YIELD call_args .)
    BINARY_AND_OP   reduce using rule 21 (expr -> YIELD call_args .)
    COMBINED_COMPARISON_OP reduce using rule 21 (expr -> YIELD call_args .)
    GREATERTHAN     reduce using rule 21 (expr -> YIELD call_args .)
    GREATERTHANEQUAL reduce using rule 21 (expr -> YIELD call_args .)
    LESSERTHAN      reduce using rule 21 (expr -> YIELD call_args .)
    LESSERTHANEQUAL reduce using rule 21 (expr -> YIELD call_args .)
    EQUAL           reduce using rule 21 (expr -> YIELD call_args .)
    CASE_EQUALITY   reduce using rule 21 (expr -> YIELD call_args .)
    NOTEQUAL        reduce using rule 21 (expr -> YIELD call_args .)
    MATCHED_STRINGS_OP reduce using rule 21 (expr -> YIELD call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 21 (expr -> YIELD call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 21 (expr -> YIELD call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 21 (expr -> YIELD call_args .)
    COMMA           reduce using rule 21 (expr -> YIELD call_args .)
    RBRACKET        reduce using rule 21 (expr -> YIELD call_args .)
    HASH_ROCKET     reduce using rule 21 (expr -> YIELD call_args .)
    RKEY            reduce using rule 21 (expr -> YIELD call_args .)
    RPAREN          reduce using rule 21 (expr -> YIELD call_args .)
    WHEN            reduce using rule 21 (expr -> YIELD call_args .)
    LKEY            reduce using rule 21 (expr -> YIELD call_args .)
    END             reduce using rule 21 (expr -> YIELD call_args .)
    ELSIF           reduce using rule 21 (expr -> YIELD call_args .)
    ELSE            reduce using rule 21 (expr -> YIELD call_args .)
    ENSURE          reduce using rule 21 (expr -> YIELD call_args .)
    NOT_SYMBOL      reduce using rule 21 (expr -> YIELD call_args .)
    COMPLEMENT_OP   reduce using rule 21 (expr -> YIELD call_args .)
    DEFINED_OP      reduce using rule 21 (expr -> YIELD call_args .)
    RETURN          reduce using rule 21 (expr -> YIELD call_args .)
    YIELD           reduce using rule 21 (expr -> YIELD call_args .)
    CASE            reduce using rule 21 (expr -> YIELD call_args .)
    FOR             reduce using rule 21 (expr -> YIELD call_args .)
    BEGIN           reduce using rule 21 (expr -> YIELD call_args .)
    CLASS           reduce using rule 21 (expr -> YIELD call_args .)
    MODULE          reduce using rule 21 (expr -> YIELD call_args .)
    DEF             reduce using rule 21 (expr -> YIELD call_args .)
    PUTS            reduce using rule 21 (expr -> YIELD call_args .)
    VAR_GLOBAL      reduce using rule 21 (expr -> YIELD call_args .)
    VAR_LOCAL       reduce using rule 21 (expr -> YIELD call_args .)
    VAR_INSTANCE    reduce using rule 21 (expr -> YIELD call_args .)
    VAR_CLASS       reduce using rule 21 (expr -> YIELD call_args .)
    SYMBOL          reduce using rule 21 (expr -> YIELD call_args .)
    STRING          reduce using rule 21 (expr -> YIELD call_args .)
    IDENTIFIER      reduce using rule 21 (expr -> YIELD call_args .)
    SUPER           reduce using rule 21 (expr -> YIELD call_args .)


state 163

    (97) primary -> YIELD LPAREN . RPAREN
    (98) primary -> YIELD LPAREN . call_args RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    RPAREN          shift and go to state 296
    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NOT             shift and go to state 25
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 297
    compstmt                       shift and go to state 194
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 260
    command                        shift and go to state 289
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 291
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 164

    (24) expr -> NOT expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 24 (expr -> NOT expr .)
    WHILE           reduce using rule 24 (expr -> NOT expr .)
    UNLESS          reduce using rule 24 (expr -> NOT expr .)
    UNTIL           reduce using rule 24 (expr -> NOT expr .)
    TERM            reduce using rule 24 (expr -> NOT expr .)
    NUMBER          reduce using rule 24 (expr -> NOT expr .)
    LPAREN          reduce using rule 24 (expr -> NOT expr .)
    $end            reduce using rule 24 (expr -> NOT expr .)
    THEN            reduce using rule 24 (expr -> NOT expr .)
    DO              reduce using rule 24 (expr -> NOT expr .)
    RESCUE          reduce using rule 24 (expr -> NOT expr .)
    LBRACKET        reduce using rule 24 (expr -> NOT expr .)
    DOT             reduce using rule 24 (expr -> NOT expr .)
    UNARY_OP        reduce using rule 24 (expr -> NOT expr .)
    RANGE_INCLUSIVE reduce using rule 24 (expr -> NOT expr .)
    RANGE_EXCLUSIVE reduce using rule 24 (expr -> NOT expr .)
    PLUS            reduce using rule 24 (expr -> NOT expr .)
    MINUS           reduce using rule 24 (expr -> NOT expr .)
    TIMES           reduce using rule 24 (expr -> NOT expr .)
    DIVIDE          reduce using rule 24 (expr -> NOT expr .)
    MOD             reduce using rule 24 (expr -> NOT expr .)
    POW             reduce using rule 24 (expr -> NOT expr .)
    OR_SYMBOL       reduce using rule 24 (expr -> NOT expr .)
    BINARY_XOR_OP   reduce using rule 24 (expr -> NOT expr .)
    BINARY_AND_OP   reduce using rule 24 (expr -> NOT expr .)
    COMBINED_COMPARISON_OP reduce using rule 24 (expr -> NOT expr .)
    GREATERTHAN     reduce using rule 24 (expr -> NOT expr .)
    GREATERTHANEQUAL reduce using rule 24 (expr -> NOT expr .)
    LESSERTHAN      reduce using rule 24 (expr -> NOT expr .)
    LESSERTHANEQUAL reduce using rule 24 (expr -> NOT expr .)
    EQUAL           reduce using rule 24 (expr -> NOT expr .)
    CASE_EQUALITY   reduce using rule 24 (expr -> NOT expr .)
    NOTEQUAL        reduce using rule 24 (expr -> NOT expr .)
    MATCHED_STRINGS_OP reduce using rule 24 (expr -> NOT expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 24 (expr -> NOT expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 24 (expr -> NOT expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 24 (expr -> NOT expr .)
    COMMA           reduce using rule 24 (expr -> NOT expr .)
    RBRACKET        reduce using rule 24 (expr -> NOT expr .)
    HASH_ROCKET     reduce using rule 24 (expr -> NOT expr .)
    RKEY            reduce using rule 24 (expr -> NOT expr .)
    RPAREN          reduce using rule 24 (expr -> NOT expr .)
    WHEN            reduce using rule 24 (expr -> NOT expr .)
    LKEY            reduce using rule 24 (expr -> NOT expr .)
    END             reduce using rule 24 (expr -> NOT expr .)
    ELSIF           reduce using rule 24 (expr -> NOT expr .)
    ELSE            reduce using rule 24 (expr -> NOT expr .)
    ENSURE          reduce using rule 24 (expr -> NOT expr .)
    NOT_SYMBOL      reduce using rule 24 (expr -> NOT expr .)
    COMPLEMENT_OP   reduce using rule 24 (expr -> NOT expr .)
    DEFINED_OP      reduce using rule 24 (expr -> NOT expr .)
    RETURN          reduce using rule 24 (expr -> NOT expr .)
    YIELD           reduce using rule 24 (expr -> NOT expr .)
    CASE            reduce using rule 24 (expr -> NOT expr .)
    FOR             reduce using rule 24 (expr -> NOT expr .)
    BEGIN           reduce using rule 24 (expr -> NOT expr .)
    CLASS           reduce using rule 24 (expr -> NOT expr .)
    MODULE          reduce using rule 24 (expr -> NOT expr .)
    DEF             reduce using rule 24 (expr -> NOT expr .)
    PUTS            reduce using rule 24 (expr -> NOT expr .)
    VAR_GLOBAL      reduce using rule 24 (expr -> NOT expr .)
    VAR_LOCAL       reduce using rule 24 (expr -> NOT expr .)
    VAR_INSTANCE    reduce using rule 24 (expr -> NOT expr .)
    VAR_CLASS       reduce using rule 24 (expr -> NOT expr .)
    SYMBOL          reduce using rule 24 (expr -> NOT expr .)
    STRING          reduce using rule 24 (expr -> NOT expr .)
    IDENTIFIER      reduce using rule 24 (expr -> NOT expr .)
    SUPER           reduce using rule 24 (expr -> NOT expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 24 (expr -> NOT expr .) ]


state 165

    (26) expr -> NOT_SYMBOL command .

    AND             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    OR              reduce using rule 26 (expr -> NOT_SYMBOL command .)
    IF              reduce using rule 26 (expr -> NOT_SYMBOL command .)
    WHILE           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    UNLESS          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    UNTIL           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    TERM            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    NUMBER          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    LPAREN          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    $end            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    THEN            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    DO              reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RESCUE          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    LBRACKET        reduce using rule 26 (expr -> NOT_SYMBOL command .)
    DOT             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    UNARY_OP        reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RANGE_INCLUSIVE reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RANGE_EXCLUSIVE reduce using rule 26 (expr -> NOT_SYMBOL command .)
    PLUS            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    MINUS           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    TIMES           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    DIVIDE          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    MOD             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    POW             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    OR_SYMBOL       reduce using rule 26 (expr -> NOT_SYMBOL command .)
    BINARY_XOR_OP   reduce using rule 26 (expr -> NOT_SYMBOL command .)
    BINARY_AND_OP   reduce using rule 26 (expr -> NOT_SYMBOL command .)
    COMBINED_COMPARISON_OP reduce using rule 26 (expr -> NOT_SYMBOL command .)
    GREATERTHAN     reduce using rule 26 (expr -> NOT_SYMBOL command .)
    GREATERTHANEQUAL reduce using rule 26 (expr -> NOT_SYMBOL command .)
    LESSERTHAN      reduce using rule 26 (expr -> NOT_SYMBOL command .)
    LESSERTHANEQUAL reduce using rule 26 (expr -> NOT_SYMBOL command .)
    EQUAL           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    CASE_EQUALITY   reduce using rule 26 (expr -> NOT_SYMBOL command .)
    NOTEQUAL        reduce using rule 26 (expr -> NOT_SYMBOL command .)
    MATCHED_STRINGS_OP reduce using rule 26 (expr -> NOT_SYMBOL command .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 26 (expr -> NOT_SYMBOL command .)
    BINARY_LEFT_SHIFT_OP reduce using rule 26 (expr -> NOT_SYMBOL command .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 26 (expr -> NOT_SYMBOL command .)
    COMMA           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RBRACKET        reduce using rule 26 (expr -> NOT_SYMBOL command .)
    HASH_ROCKET     reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RKEY            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RPAREN          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    WHEN            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    LKEY            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    END             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    ELSIF           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    ELSE            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    ENSURE          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    NOT_SYMBOL      reduce using rule 26 (expr -> NOT_SYMBOL command .)
    COMPLEMENT_OP   reduce using rule 26 (expr -> NOT_SYMBOL command .)
    DEFINED_OP      reduce using rule 26 (expr -> NOT_SYMBOL command .)
    RETURN          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    YIELD           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    CASE            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    FOR             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    BEGIN           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    CLASS           reduce using rule 26 (expr -> NOT_SYMBOL command .)
    MODULE          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    DEF             reduce using rule 26 (expr -> NOT_SYMBOL command .)
    PUTS            reduce using rule 26 (expr -> NOT_SYMBOL command .)
    VAR_GLOBAL      reduce using rule 26 (expr -> NOT_SYMBOL command .)
    VAR_LOCAL       reduce using rule 26 (expr -> NOT_SYMBOL command .)
    VAR_INSTANCE    reduce using rule 26 (expr -> NOT_SYMBOL command .)
    VAR_CLASS       reduce using rule 26 (expr -> NOT_SYMBOL command .)
    SYMBOL          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    STRING          reduce using rule 26 (expr -> NOT_SYMBOL command .)
    IDENTIFIER      reduce using rule 26 (expr -> NOT_SYMBOL command .)
    SUPER           reduce using rule 26 (expr -> NOT_SYMBOL command .)


state 166

    (66) arg -> NOT_SYMBOL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    WHILE           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    UNLESS          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    UNTIL           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    TERM            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    NUMBER          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    LPAREN          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    $end            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    COMMA           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RBRACKET        reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    THEN            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    DO              reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RESCUE          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    HASH_ROCKET     reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RKEY            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    LBRACKET        reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    DOT             reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    UNARY_OP        reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RPAREN          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    WHEN            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    LKEY            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    END             reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    ELSIF           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    ELSE            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    ENSURE          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    NOT_SYMBOL      reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    COMPLEMENT_OP   reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    DEFINED_OP      reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RETURN          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    YIELD           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    CASE            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    FOR             reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    BEGIN           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    CLASS           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    MODULE          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    DEF             reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    PUTS            reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    VAR_GLOBAL      reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    VAR_LOCAL       reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    VAR_INSTANCE    reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    VAR_CLASS       reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    SYMBOL          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    STRING          reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    IDENTIFIER      reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    SUPER           reduce using rule 66 (arg -> NOT_SYMBOL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! PLUS            [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! MINUS           [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! TIMES           [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! DIVIDE          [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! MOD             [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! POW             [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! GREATERTHAN     [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! LESSERTHAN      [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! EQUAL           [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! NOTEQUAL        [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! AND             [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]
  ! OR              [ reduce using rule 66 (arg -> NOT_SYMBOL arg .) ]


state 167

    (43) arg -> arg RANGE_INCLUSIVE . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 298
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 168

    (44) arg -> arg RANGE_EXCLUSIVE . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 299
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 169

    (45) arg -> arg PLUS . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 300
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 170

    (46) arg -> arg MINUS . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 301
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 171

    (47) arg -> arg TIMES . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 302
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 172

    (48) arg -> arg DIVIDE . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 303
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 173

    (49) arg -> arg MOD . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 304
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 174

    (50) arg -> arg POW . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 305
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 175

    (53) arg -> arg OR_SYMBOL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 306
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 176

    (54) arg -> arg BINARY_XOR_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 307
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 177

    (55) arg -> arg BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 308
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 178

    (56) arg -> arg COMBINED_COMPARISON_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 309
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 179

    (57) arg -> arg GREATERTHAN . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 310
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 180

    (58) arg -> arg GREATERTHANEQUAL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 311
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 181

    (59) arg -> arg LESSERTHAN . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 312
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 182

    (60) arg -> arg LESSERTHANEQUAL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 313
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 183

    (61) arg -> arg EQUAL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 314
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 184

    (62) arg -> arg CASE_EQUALITY . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 315
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 185

    (63) arg -> arg NOTEQUAL . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 316
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 186

    (64) arg -> arg MATCHED_STRINGS_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 317
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 187

    (65) arg -> arg OPPOSITE_MATCHED_STRINGS_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 318
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 188

    (68) arg -> arg BINARY_LEFT_SHIFT_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 319
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 189

    (69) arg -> arg BINARY_RIGHT_SHIFT_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 320
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 190

    (70) arg -> arg AND . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 321
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 191

    (71) arg -> arg OR . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 322
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 192

    (34) function -> operation LBRACKET . LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (85) primary -> LBRACKET . RBRACKET
    (86) primary -> LBRACKET . args RBRACKET
    (87) primary -> LBRACKET . args COMMA RBRACKET
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 323
    RBRACKET        shift and go to state 68
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    operation                      shift and go to state 82
    args                           shift and go to state 70
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80

state 193

    (30) command -> operation call_args .

    DO              reduce using rule 30 (command -> operation call_args .)
    TERM            reduce using rule 30 (command -> operation call_args .)
    NUMBER          reduce using rule 30 (command -> operation call_args .)
    LPAREN          reduce using rule 30 (command -> operation call_args .)
    AND             reduce using rule 30 (command -> operation call_args .)
    OR              reduce using rule 30 (command -> operation call_args .)
    IF              reduce using rule 30 (command -> operation call_args .)
    WHILE           reduce using rule 30 (command -> operation call_args .)
    UNLESS          reduce using rule 30 (command -> operation call_args .)
    UNTIL           reduce using rule 30 (command -> operation call_args .)
    $end            reduce using rule 30 (command -> operation call_args .)
    THEN            reduce using rule 30 (command -> operation call_args .)
    RESCUE          reduce using rule 30 (command -> operation call_args .)
    LBRACKET        reduce using rule 30 (command -> operation call_args .)
    DOT             reduce using rule 30 (command -> operation call_args .)
    UNARY_OP        reduce using rule 30 (command -> operation call_args .)
    RANGE_INCLUSIVE reduce using rule 30 (command -> operation call_args .)
    RANGE_EXCLUSIVE reduce using rule 30 (command -> operation call_args .)
    PLUS            reduce using rule 30 (command -> operation call_args .)
    MINUS           reduce using rule 30 (command -> operation call_args .)
    TIMES           reduce using rule 30 (command -> operation call_args .)
    DIVIDE          reduce using rule 30 (command -> operation call_args .)
    MOD             reduce using rule 30 (command -> operation call_args .)
    POW             reduce using rule 30 (command -> operation call_args .)
    OR_SYMBOL       reduce using rule 30 (command -> operation call_args .)
    BINARY_XOR_OP   reduce using rule 30 (command -> operation call_args .)
    BINARY_AND_OP   reduce using rule 30 (command -> operation call_args .)
    COMBINED_COMPARISON_OP reduce using rule 30 (command -> operation call_args .)
    GREATERTHAN     reduce using rule 30 (command -> operation call_args .)
    GREATERTHANEQUAL reduce using rule 30 (command -> operation call_args .)
    LESSERTHAN      reduce using rule 30 (command -> operation call_args .)
    LESSERTHANEQUAL reduce using rule 30 (command -> operation call_args .)
    EQUAL           reduce using rule 30 (command -> operation call_args .)
    CASE_EQUALITY   reduce using rule 30 (command -> operation call_args .)
    NOTEQUAL        reduce using rule 30 (command -> operation call_args .)
    MATCHED_STRINGS_OP reduce using rule 30 (command -> operation call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 30 (command -> operation call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 30 (command -> operation call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 30 (command -> operation call_args .)
    COMMA           reduce using rule 30 (command -> operation call_args .)
    RBRACKET        reduce using rule 30 (command -> operation call_args .)
    HASH_ROCKET     reduce using rule 30 (command -> operation call_args .)
    RKEY            reduce using rule 30 (command -> operation call_args .)
    RPAREN          reduce using rule 30 (command -> operation call_args .)
    WHEN            reduce using rule 30 (command -> operation call_args .)
    LKEY            reduce using rule 30 (command -> operation call_args .)
    END             reduce using rule 30 (command -> operation call_args .)
    ELSIF           reduce using rule 30 (command -> operation call_args .)
    ELSE            reduce using rule 30 (command -> operation call_args .)
    ENSURE          reduce using rule 30 (command -> operation call_args .)
    NOT_SYMBOL      reduce using rule 30 (command -> operation call_args .)
    COMPLEMENT_OP   reduce using rule 30 (command -> operation call_args .)
    DEFINED_OP      reduce using rule 30 (command -> operation call_args .)
    RETURN          reduce using rule 30 (command -> operation call_args .)
    YIELD           reduce using rule 30 (command -> operation call_args .)
    CASE            reduce using rule 30 (command -> operation call_args .)
    FOR             reduce using rule 30 (command -> operation call_args .)
    BEGIN           reduce using rule 30 (command -> operation call_args .)
    CLASS           reduce using rule 30 (command -> operation call_args .)
    MODULE          reduce using rule 30 (command -> operation call_args .)
    DEF             reduce using rule 30 (command -> operation call_args .)
    PUTS            reduce using rule 30 (command -> operation call_args .)
    VAR_GLOBAL      reduce using rule 30 (command -> operation call_args .)
    VAR_LOCAL       reduce using rule 30 (command -> operation call_args .)
    VAR_INSTANCE    reduce using rule 30 (command -> operation call_args .)
    VAR_CLASS       reduce using rule 30 (command -> operation call_args .)
    SYMBOL          reduce using rule 30 (command -> operation call_args .)
    STRING          reduce using rule 30 (command -> operation call_args .)
    IDENTIFIER      reduce using rule 30 (command -> operation call_args .)
    SUPER           reduce using rule 30 (command -> operation call_args .)


state 194

    (78) primary -> LPAREN compstmt . RPAREN

    RPAREN          shift and go to state 324


state 195

    (161) mlhs_item -> LPAREN mlhs . RPAREN
    (19) expr -> mlhs . = mrhs

    RPAREN          shift and go to state 325
    =               shift and go to state 154


state 196

    (17) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (160) mlhs_item -> lhs .
    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    =               shift and go to state 133
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 197

    (82) primary -> UNARY_OP IDENTIFIER .

    LBRACKET        reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    DOT             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    UNARY_OP        reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    PLUS            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    MINUS           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    TIMES           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    DIVIDE          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    MOD             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    POW             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    OR_SYMBOL       reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    GREATERTHAN     reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    LESSERTHAN      reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    EQUAL           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    NOTEQUAL        reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    AND             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    OR              reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    IF              reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    WHILE           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    UNLESS          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    UNTIL           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    TERM            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    NUMBER          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    LPAREN          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    $end            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    COMMA           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RBRACKET        reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    THEN            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    DO              reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RESCUE          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    HASH_ROCKET     reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RKEY            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RPAREN          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    WHEN            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    LKEY            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    END             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    ELSIF           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    ELSE            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    ENSURE          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    NOT_SYMBOL      reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    DEFINED_OP      reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    RETURN          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    YIELD           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    CASE            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    FOR             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    BEGIN           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    CLASS           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    MODULE          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    DEF             reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    PUTS            reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    VAR_LOCAL       reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    VAR_CLASS       reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    SYMBOL          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    STRING          reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)
    SUPER           reduce using rule 82 (primary -> UNARY_OP IDENTIFIER .)


state 198

    (39) function -> SUPER LPAREN . call_args RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NOT             shift and go to state 25
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 326
    compstmt                       shift and go to state 194
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 260
    command                        shift and go to state 289
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 291
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 199

    (33) command -> SUPER call_args .

    DO              reduce using rule 33 (command -> SUPER call_args .)
    TERM            reduce using rule 33 (command -> SUPER call_args .)
    NUMBER          reduce using rule 33 (command -> SUPER call_args .)
    LPAREN          reduce using rule 33 (command -> SUPER call_args .)
    AND             reduce using rule 33 (command -> SUPER call_args .)
    OR              reduce using rule 33 (command -> SUPER call_args .)
    IF              reduce using rule 33 (command -> SUPER call_args .)
    WHILE           reduce using rule 33 (command -> SUPER call_args .)
    UNLESS          reduce using rule 33 (command -> SUPER call_args .)
    UNTIL           reduce using rule 33 (command -> SUPER call_args .)
    $end            reduce using rule 33 (command -> SUPER call_args .)
    THEN            reduce using rule 33 (command -> SUPER call_args .)
    RESCUE          reduce using rule 33 (command -> SUPER call_args .)
    LBRACKET        reduce using rule 33 (command -> SUPER call_args .)
    DOT             reduce using rule 33 (command -> SUPER call_args .)
    UNARY_OP        reduce using rule 33 (command -> SUPER call_args .)
    RANGE_INCLUSIVE reduce using rule 33 (command -> SUPER call_args .)
    RANGE_EXCLUSIVE reduce using rule 33 (command -> SUPER call_args .)
    PLUS            reduce using rule 33 (command -> SUPER call_args .)
    MINUS           reduce using rule 33 (command -> SUPER call_args .)
    TIMES           reduce using rule 33 (command -> SUPER call_args .)
    DIVIDE          reduce using rule 33 (command -> SUPER call_args .)
    MOD             reduce using rule 33 (command -> SUPER call_args .)
    POW             reduce using rule 33 (command -> SUPER call_args .)
    OR_SYMBOL       reduce using rule 33 (command -> SUPER call_args .)
    BINARY_XOR_OP   reduce using rule 33 (command -> SUPER call_args .)
    BINARY_AND_OP   reduce using rule 33 (command -> SUPER call_args .)
    COMBINED_COMPARISON_OP reduce using rule 33 (command -> SUPER call_args .)
    GREATERTHAN     reduce using rule 33 (command -> SUPER call_args .)
    GREATERTHANEQUAL reduce using rule 33 (command -> SUPER call_args .)
    LESSERTHAN      reduce using rule 33 (command -> SUPER call_args .)
    LESSERTHANEQUAL reduce using rule 33 (command -> SUPER call_args .)
    EQUAL           reduce using rule 33 (command -> SUPER call_args .)
    CASE_EQUALITY   reduce using rule 33 (command -> SUPER call_args .)
    NOTEQUAL        reduce using rule 33 (command -> SUPER call_args .)
    MATCHED_STRINGS_OP reduce using rule 33 (command -> SUPER call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 33 (command -> SUPER call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 33 (command -> SUPER call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 33 (command -> SUPER call_args .)
    COMMA           reduce using rule 33 (command -> SUPER call_args .)
    RBRACKET        reduce using rule 33 (command -> SUPER call_args .)
    HASH_ROCKET     reduce using rule 33 (command -> SUPER call_args .)
    RKEY            reduce using rule 33 (command -> SUPER call_args .)
    RPAREN          reduce using rule 33 (command -> SUPER call_args .)
    WHEN            reduce using rule 33 (command -> SUPER call_args .)
    LKEY            reduce using rule 33 (command -> SUPER call_args .)
    END             reduce using rule 33 (command -> SUPER call_args .)
    ELSIF           reduce using rule 33 (command -> SUPER call_args .)
    ELSE            reduce using rule 33 (command -> SUPER call_args .)
    ENSURE          reduce using rule 33 (command -> SUPER call_args .)
    NOT_SYMBOL      reduce using rule 33 (command -> SUPER call_args .)
    COMPLEMENT_OP   reduce using rule 33 (command -> SUPER call_args .)
    DEFINED_OP      reduce using rule 33 (command -> SUPER call_args .)
    RETURN          reduce using rule 33 (command -> SUPER call_args .)
    YIELD           reduce using rule 33 (command -> SUPER call_args .)
    CASE            reduce using rule 33 (command -> SUPER call_args .)
    FOR             reduce using rule 33 (command -> SUPER call_args .)
    BEGIN           reduce using rule 33 (command -> SUPER call_args .)
    CLASS           reduce using rule 33 (command -> SUPER call_args .)
    MODULE          reduce using rule 33 (command -> SUPER call_args .)
    DEF             reduce using rule 33 (command -> SUPER call_args .)
    PUTS            reduce using rule 33 (command -> SUPER call_args .)
    VAR_GLOBAL      reduce using rule 33 (command -> SUPER call_args .)
    VAR_LOCAL       reduce using rule 33 (command -> SUPER call_args .)
    VAR_INSTANCE    reduce using rule 33 (command -> SUPER call_args .)
    VAR_CLASS       reduce using rule 33 (command -> SUPER call_args .)
    SYMBOL          reduce using rule 33 (command -> SUPER call_args .)
    STRING          reduce using rule 33 (command -> SUPER call_args .)
    IDENTIFIER      reduce using rule 33 (command -> SUPER call_args .)
    SUPER           reduce using rule 33 (command -> SUPER call_args .)


state 200

    (99) primary -> DEFINED_OP LPAREN . arg LPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (28) call -> . function
    (29) call -> . command
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 329
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 330
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    END             shift and go to state 7
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 31
    NOT             shift and go to state 25
    TIMES           shift and go to state 45

    arg                            shift and go to state 327
    compstmt                       shift and go to state 194
    lhs                            shift and go to state 328
    primary                        shift and go to state 262
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 291
    call                           shift and go to state 5
    command                        shift and go to state 17
    operation                      shift and go to state 28
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 201

    (72) arg -> DEFINED_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 72 (arg -> DEFINED_OP arg .)
    WHILE           reduce using rule 72 (arg -> DEFINED_OP arg .)
    UNLESS          reduce using rule 72 (arg -> DEFINED_OP arg .)
    UNTIL           reduce using rule 72 (arg -> DEFINED_OP arg .)
    TERM            reduce using rule 72 (arg -> DEFINED_OP arg .)
    NUMBER          reduce using rule 72 (arg -> DEFINED_OP arg .)
    LPAREN          reduce using rule 72 (arg -> DEFINED_OP arg .)
    $end            reduce using rule 72 (arg -> DEFINED_OP arg .)
    COMMA           reduce using rule 72 (arg -> DEFINED_OP arg .)
    RBRACKET        reduce using rule 72 (arg -> DEFINED_OP arg .)
    THEN            reduce using rule 72 (arg -> DEFINED_OP arg .)
    DO              reduce using rule 72 (arg -> DEFINED_OP arg .)
    RESCUE          reduce using rule 72 (arg -> DEFINED_OP arg .)
    HASH_ROCKET     reduce using rule 72 (arg -> DEFINED_OP arg .)
    RKEY            reduce using rule 72 (arg -> DEFINED_OP arg .)
    LBRACKET        reduce using rule 72 (arg -> DEFINED_OP arg .)
    DOT             reduce using rule 72 (arg -> DEFINED_OP arg .)
    UNARY_OP        reduce using rule 72 (arg -> DEFINED_OP arg .)
    RPAREN          reduce using rule 72 (arg -> DEFINED_OP arg .)
    WHEN            reduce using rule 72 (arg -> DEFINED_OP arg .)
    LKEY            reduce using rule 72 (arg -> DEFINED_OP arg .)
    END             reduce using rule 72 (arg -> DEFINED_OP arg .)
    ELSIF           reduce using rule 72 (arg -> DEFINED_OP arg .)
    ELSE            reduce using rule 72 (arg -> DEFINED_OP arg .)
    ENSURE          reduce using rule 72 (arg -> DEFINED_OP arg .)
    NOT_SYMBOL      reduce using rule 72 (arg -> DEFINED_OP arg .)
    COMPLEMENT_OP   reduce using rule 72 (arg -> DEFINED_OP arg .)
    DEFINED_OP      reduce using rule 72 (arg -> DEFINED_OP arg .)
    RETURN          reduce using rule 72 (arg -> DEFINED_OP arg .)
    YIELD           reduce using rule 72 (arg -> DEFINED_OP arg .)
    CASE            reduce using rule 72 (arg -> DEFINED_OP arg .)
    FOR             reduce using rule 72 (arg -> DEFINED_OP arg .)
    BEGIN           reduce using rule 72 (arg -> DEFINED_OP arg .)
    CLASS           reduce using rule 72 (arg -> DEFINED_OP arg .)
    MODULE          reduce using rule 72 (arg -> DEFINED_OP arg .)
    DEF             reduce using rule 72 (arg -> DEFINED_OP arg .)
    PUTS            reduce using rule 72 (arg -> DEFINED_OP arg .)
    VAR_GLOBAL      reduce using rule 72 (arg -> DEFINED_OP arg .)
    VAR_LOCAL       reduce using rule 72 (arg -> DEFINED_OP arg .)
    VAR_INSTANCE    reduce using rule 72 (arg -> DEFINED_OP arg .)
    VAR_CLASS       reduce using rule 72 (arg -> DEFINED_OP arg .)
    SYMBOL          reduce using rule 72 (arg -> DEFINED_OP arg .)
    STRING          reduce using rule 72 (arg -> DEFINED_OP arg .)
    IDENTIFIER      reduce using rule 72 (arg -> DEFINED_OP arg .)
    SUPER           reduce using rule 72 (arg -> DEFINED_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! PLUS            [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! MINUS           [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! TIMES           [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! DIVIDE          [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! MOD             [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! POW             [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! EQUAL           [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! AND             [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]
  ! OR              [ reduce using rule 72 (arg -> DEFINED_OP arg .) ]


state 202

    (111) primary -> CASE compstmt . when END
    (112) primary -> CASE compstmt . when ELSE compstmt END
    (127) when -> . WHEN when_args then compstmt
    (128) when -> . when WHEN when_args then compstmt

    WHEN            shift and go to state 332

    when                           shift and go to state 331

state 203

    (113) primary -> FOR block_var . IN expr do compstmt END

    IN              shift and go to state 333


state 204

    (152) block_var -> lhs .
    (160) mlhs_item -> lhs .

    IN              reduce using rule 152 (block_var -> lhs .)
    OR_SYMBOL       reduce using rule 152 (block_var -> lhs .)
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)


state 205

    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

    LBRACKET        shift and go to state 149
    DOT             shift and go to state 239
    UNARY_OP        shift and go to state 240


state 206

    (99) primary -> DEFINED_OP . LPAREN arg LPAREN

    LPAREN          shift and go to state 334


state 207

    (118) primary -> CLASS IDENTIFIER . compstmt END
    (119) primary -> CLASS IDENTIFIER . LESSERTHAN IDENTIFIER compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LESSERTHAN      shift and go to state 336
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 335
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 208

    (120) primary -> MODULE IDENTIFIER . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 337
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 209

    (121) primary -> DEF fname . argdecl compstmt END
    (164) argdecl -> . LPAREN arglist RPAREN
    (165) argdecl -> . arglist term
    (166) arglist -> . IDENTIFIER
    (167) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (168) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 339
    IDENTIFIER      shift and go to state 341

    argdecl                        shift and go to state 338
    arglist                        shift and go to state 340

state 210

    (122) primary -> DEF singleton . DOT fname argdecl compstmt END
    (123) primary -> DEF singleton . UNARY_OP fname argdecl compstmt END

    DOT             shift and go to state 342
    UNARY_OP        shift and go to state 343


state 211

    (169) singleton -> variable .

    DOT             reduce using rule 169 (singleton -> variable .)
    UNARY_OP        reduce using rule 169 (singleton -> variable .)


state 212

    (170) singleton -> LPAREN . expr RPAREN
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 344
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 213

    (124) primary -> PUTS compstmt .

    LBRACKET        reduce using rule 124 (primary -> PUTS compstmt .)
    DOT             reduce using rule 124 (primary -> PUTS compstmt .)
    UNARY_OP        reduce using rule 124 (primary -> PUTS compstmt .)
    RANGE_INCLUSIVE reduce using rule 124 (primary -> PUTS compstmt .)
    RANGE_EXCLUSIVE reduce using rule 124 (primary -> PUTS compstmt .)
    PLUS            reduce using rule 124 (primary -> PUTS compstmt .)
    MINUS           reduce using rule 124 (primary -> PUTS compstmt .)
    TIMES           reduce using rule 124 (primary -> PUTS compstmt .)
    DIVIDE          reduce using rule 124 (primary -> PUTS compstmt .)
    MOD             reduce using rule 124 (primary -> PUTS compstmt .)
    POW             reduce using rule 124 (primary -> PUTS compstmt .)
    OR_SYMBOL       reduce using rule 124 (primary -> PUTS compstmt .)
    BINARY_XOR_OP   reduce using rule 124 (primary -> PUTS compstmt .)
    BINARY_AND_OP   reduce using rule 124 (primary -> PUTS compstmt .)
    COMBINED_COMPARISON_OP reduce using rule 124 (primary -> PUTS compstmt .)
    GREATERTHAN     reduce using rule 124 (primary -> PUTS compstmt .)
    GREATERTHANEQUAL reduce using rule 124 (primary -> PUTS compstmt .)
    LESSERTHAN      reduce using rule 124 (primary -> PUTS compstmt .)
    LESSERTHANEQUAL reduce using rule 124 (primary -> PUTS compstmt .)
    EQUAL           reduce using rule 124 (primary -> PUTS compstmt .)
    CASE_EQUALITY   reduce using rule 124 (primary -> PUTS compstmt .)
    NOTEQUAL        reduce using rule 124 (primary -> PUTS compstmt .)
    MATCHED_STRINGS_OP reduce using rule 124 (primary -> PUTS compstmt .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 124 (primary -> PUTS compstmt .)
    BINARY_LEFT_SHIFT_OP reduce using rule 124 (primary -> PUTS compstmt .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 124 (primary -> PUTS compstmt .)
    AND             reduce using rule 124 (primary -> PUTS compstmt .)
    OR              reduce using rule 124 (primary -> PUTS compstmt .)
    IF              reduce using rule 124 (primary -> PUTS compstmt .)
    WHILE           reduce using rule 124 (primary -> PUTS compstmt .)
    UNLESS          reduce using rule 124 (primary -> PUTS compstmt .)
    UNTIL           reduce using rule 124 (primary -> PUTS compstmt .)
    TERM            reduce using rule 124 (primary -> PUTS compstmt .)
    NUMBER          reduce using rule 124 (primary -> PUTS compstmt .)
    LPAREN          reduce using rule 124 (primary -> PUTS compstmt .)
    $end            reduce using rule 124 (primary -> PUTS compstmt .)
    COMMA           reduce using rule 124 (primary -> PUTS compstmt .)
    RBRACKET        reduce using rule 124 (primary -> PUTS compstmt .)
    THEN            reduce using rule 124 (primary -> PUTS compstmt .)
    DO              reduce using rule 124 (primary -> PUTS compstmt .)
    RESCUE          reduce using rule 124 (primary -> PUTS compstmt .)
    HASH_ROCKET     reduce using rule 124 (primary -> PUTS compstmt .)
    RKEY            reduce using rule 124 (primary -> PUTS compstmt .)
    RPAREN          reduce using rule 124 (primary -> PUTS compstmt .)
    WHEN            reduce using rule 124 (primary -> PUTS compstmt .)
    LKEY            reduce using rule 124 (primary -> PUTS compstmt .)
    END             reduce using rule 124 (primary -> PUTS compstmt .)
    ELSIF           reduce using rule 124 (primary -> PUTS compstmt .)
    ELSE            reduce using rule 124 (primary -> PUTS compstmt .)
    ENSURE          reduce using rule 124 (primary -> PUTS compstmt .)
    NOT_SYMBOL      reduce using rule 124 (primary -> PUTS compstmt .)
    COMPLEMENT_OP   reduce using rule 124 (primary -> PUTS compstmt .)
    DEFINED_OP      reduce using rule 124 (primary -> PUTS compstmt .)
    RETURN          reduce using rule 124 (primary -> PUTS compstmt .)
    YIELD           reduce using rule 124 (primary -> PUTS compstmt .)
    CASE            reduce using rule 124 (primary -> PUTS compstmt .)
    FOR             reduce using rule 124 (primary -> PUTS compstmt .)
    BEGIN           reduce using rule 124 (primary -> PUTS compstmt .)
    CLASS           reduce using rule 124 (primary -> PUTS compstmt .)
    MODULE          reduce using rule 124 (primary -> PUTS compstmt .)
    DEF             reduce using rule 124 (primary -> PUTS compstmt .)
    PUTS            reduce using rule 124 (primary -> PUTS compstmt .)
    VAR_GLOBAL      reduce using rule 124 (primary -> PUTS compstmt .)
    VAR_LOCAL       reduce using rule 124 (primary -> PUTS compstmt .)
    VAR_INSTANCE    reduce using rule 124 (primary -> PUTS compstmt .)
    VAR_CLASS       reduce using rule 124 (primary -> PUTS compstmt .)
    SYMBOL          reduce using rule 124 (primary -> PUTS compstmt .)
    STRING          reduce using rule 124 (primary -> PUTS compstmt .)
    IDENTIFIER      reduce using rule 124 (primary -> PUTS compstmt .)
    SUPER           reduce using rule 124 (primary -> PUTS compstmt .)


state 214

    (154) mlhs -> mlhs_item COMMA . mlhs_item TIMES
    (155) mlhs -> mlhs_item COMMA . mlhs_item lhs
    (156) mlhs -> mlhs_item COMMA . mult_mlhs_item TIMES
    (157) mlhs -> mlhs_item COMMA . mult_mlhs_item lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (159) mult_mlhs_item -> . COMMA mlhs_item
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 118
    COMMA           shift and go to state 346
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    mlhs_item                      shift and go to state 345
    lhs                            shift and go to state 347
    mult_mlhs_item                 shift and go to state 348
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 215

    (158) mlhs -> TIMES lhs .

    =               reduce using rule 158 (mlhs -> TIMES lhs .)
    RBRACKET        reduce using rule 158 (mlhs -> TIMES lhs .)
    RPAREN          reduce using rule 158 (mlhs -> TIMES lhs .)
    IN              reduce using rule 158 (mlhs -> TIMES lhs .)
    OR_SYMBOL       reduce using rule 158 (mlhs -> TIMES lhs .)


state 216

    (51) arg -> PLUS arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 51 (arg -> PLUS arg .)
    WHILE           reduce using rule 51 (arg -> PLUS arg .)
    UNLESS          reduce using rule 51 (arg -> PLUS arg .)
    UNTIL           reduce using rule 51 (arg -> PLUS arg .)
    TERM            reduce using rule 51 (arg -> PLUS arg .)
    NUMBER          reduce using rule 51 (arg -> PLUS arg .)
    LPAREN          reduce using rule 51 (arg -> PLUS arg .)
    $end            reduce using rule 51 (arg -> PLUS arg .)
    COMMA           reduce using rule 51 (arg -> PLUS arg .)
    RBRACKET        reduce using rule 51 (arg -> PLUS arg .)
    THEN            reduce using rule 51 (arg -> PLUS arg .)
    DO              reduce using rule 51 (arg -> PLUS arg .)
    RESCUE          reduce using rule 51 (arg -> PLUS arg .)
    HASH_ROCKET     reduce using rule 51 (arg -> PLUS arg .)
    RKEY            reduce using rule 51 (arg -> PLUS arg .)
    LBRACKET        reduce using rule 51 (arg -> PLUS arg .)
    DOT             reduce using rule 51 (arg -> PLUS arg .)
    UNARY_OP        reduce using rule 51 (arg -> PLUS arg .)
    RPAREN          reduce using rule 51 (arg -> PLUS arg .)
    WHEN            reduce using rule 51 (arg -> PLUS arg .)
    LKEY            reduce using rule 51 (arg -> PLUS arg .)
    END             reduce using rule 51 (arg -> PLUS arg .)
    ELSIF           reduce using rule 51 (arg -> PLUS arg .)
    ELSE            reduce using rule 51 (arg -> PLUS arg .)
    ENSURE          reduce using rule 51 (arg -> PLUS arg .)
    NOT_SYMBOL      reduce using rule 51 (arg -> PLUS arg .)
    COMPLEMENT_OP   reduce using rule 51 (arg -> PLUS arg .)
    DEFINED_OP      reduce using rule 51 (arg -> PLUS arg .)
    RETURN          reduce using rule 51 (arg -> PLUS arg .)
    YIELD           reduce using rule 51 (arg -> PLUS arg .)
    CASE            reduce using rule 51 (arg -> PLUS arg .)
    FOR             reduce using rule 51 (arg -> PLUS arg .)
    BEGIN           reduce using rule 51 (arg -> PLUS arg .)
    CLASS           reduce using rule 51 (arg -> PLUS arg .)
    MODULE          reduce using rule 51 (arg -> PLUS arg .)
    DEF             reduce using rule 51 (arg -> PLUS arg .)
    PUTS            reduce using rule 51 (arg -> PLUS arg .)
    VAR_GLOBAL      reduce using rule 51 (arg -> PLUS arg .)
    VAR_LOCAL       reduce using rule 51 (arg -> PLUS arg .)
    VAR_INSTANCE    reduce using rule 51 (arg -> PLUS arg .)
    VAR_CLASS       reduce using rule 51 (arg -> PLUS arg .)
    SYMBOL          reduce using rule 51 (arg -> PLUS arg .)
    STRING          reduce using rule 51 (arg -> PLUS arg .)
    IDENTIFIER      reduce using rule 51 (arg -> PLUS arg .)
    SUPER           reduce using rule 51 (arg -> PLUS arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! PLUS            [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! MINUS           [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! TIMES           [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! DIVIDE          [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! MOD             [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! POW             [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! EQUAL           [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! AND             [ reduce using rule 51 (arg -> PLUS arg .) ]
  ! OR              [ reduce using rule 51 (arg -> PLUS arg .) ]


state 217

    (52) arg -> MINUS arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 52 (arg -> MINUS arg .)
    WHILE           reduce using rule 52 (arg -> MINUS arg .)
    UNLESS          reduce using rule 52 (arg -> MINUS arg .)
    UNTIL           reduce using rule 52 (arg -> MINUS arg .)
    TERM            reduce using rule 52 (arg -> MINUS arg .)
    NUMBER          reduce using rule 52 (arg -> MINUS arg .)
    LPAREN          reduce using rule 52 (arg -> MINUS arg .)
    $end            reduce using rule 52 (arg -> MINUS arg .)
    COMMA           reduce using rule 52 (arg -> MINUS arg .)
    RBRACKET        reduce using rule 52 (arg -> MINUS arg .)
    THEN            reduce using rule 52 (arg -> MINUS arg .)
    DO              reduce using rule 52 (arg -> MINUS arg .)
    RESCUE          reduce using rule 52 (arg -> MINUS arg .)
    HASH_ROCKET     reduce using rule 52 (arg -> MINUS arg .)
    RKEY            reduce using rule 52 (arg -> MINUS arg .)
    LBRACKET        reduce using rule 52 (arg -> MINUS arg .)
    DOT             reduce using rule 52 (arg -> MINUS arg .)
    UNARY_OP        reduce using rule 52 (arg -> MINUS arg .)
    RPAREN          reduce using rule 52 (arg -> MINUS arg .)
    WHEN            reduce using rule 52 (arg -> MINUS arg .)
    LKEY            reduce using rule 52 (arg -> MINUS arg .)
    END             reduce using rule 52 (arg -> MINUS arg .)
    ELSIF           reduce using rule 52 (arg -> MINUS arg .)
    ELSE            reduce using rule 52 (arg -> MINUS arg .)
    ENSURE          reduce using rule 52 (arg -> MINUS arg .)
    NOT_SYMBOL      reduce using rule 52 (arg -> MINUS arg .)
    COMPLEMENT_OP   reduce using rule 52 (arg -> MINUS arg .)
    DEFINED_OP      reduce using rule 52 (arg -> MINUS arg .)
    RETURN          reduce using rule 52 (arg -> MINUS arg .)
    YIELD           reduce using rule 52 (arg -> MINUS arg .)
    CASE            reduce using rule 52 (arg -> MINUS arg .)
    FOR             reduce using rule 52 (arg -> MINUS arg .)
    BEGIN           reduce using rule 52 (arg -> MINUS arg .)
    CLASS           reduce using rule 52 (arg -> MINUS arg .)
    MODULE          reduce using rule 52 (arg -> MINUS arg .)
    DEF             reduce using rule 52 (arg -> MINUS arg .)
    PUTS            reduce using rule 52 (arg -> MINUS arg .)
    VAR_GLOBAL      reduce using rule 52 (arg -> MINUS arg .)
    VAR_LOCAL       reduce using rule 52 (arg -> MINUS arg .)
    VAR_INSTANCE    reduce using rule 52 (arg -> MINUS arg .)
    VAR_CLASS       reduce using rule 52 (arg -> MINUS arg .)
    SYMBOL          reduce using rule 52 (arg -> MINUS arg .)
    STRING          reduce using rule 52 (arg -> MINUS arg .)
    IDENTIFIER      reduce using rule 52 (arg -> MINUS arg .)
    SUPER           reduce using rule 52 (arg -> MINUS arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! PLUS            [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! MINUS           [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! TIMES           [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! DIVIDE          [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! MOD             [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! POW             [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! EQUAL           [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! AND             [ reduce using rule 52 (arg -> MINUS arg .) ]
  ! OR              [ reduce using rule 52 (arg -> MINUS arg .) ]


state 218

    (67) arg -> COMPLEMENT_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    WHILE           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    UNLESS          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    UNTIL           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    TERM            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    NUMBER          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    LPAREN          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    $end            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    COMMA           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RBRACKET        reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    THEN            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    DO              reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RESCUE          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    HASH_ROCKET     reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RKEY            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    LBRACKET        reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    DOT             reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    UNARY_OP        reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RPAREN          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    WHEN            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    LKEY            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    END             reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    ELSIF           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    ELSE            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    ENSURE          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    NOT_SYMBOL      reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    COMPLEMENT_OP   reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    DEFINED_OP      reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RETURN          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    YIELD           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    CASE            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    FOR             reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    BEGIN           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    CLASS           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    MODULE          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    DEF             reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    PUTS            reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    VAR_GLOBAL      reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    VAR_LOCAL       reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    VAR_INSTANCE    reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    VAR_CLASS       reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    SYMBOL          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    STRING          reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    IDENTIFIER      reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    SUPER           reduce using rule 67 (arg -> COMPLEMENT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! PLUS            [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! MINUS           [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! TIMES           [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! MOD             [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! POW             [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! EQUAL           [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! AND             [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]
  ! OR              [ reduce using rule 67 (arg -> COMPLEMENT_OP arg .) ]


state 219

    (5) compstmt -> stmt term expr . term
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 61
    OR              shift and go to state 62
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    term                           shift and go to state 349
    factor                         shift and go to state 58

state 220

    (239) term -> term TIMES . factor
    (158) mlhs -> TIMES . lhs
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    NUMBER          shift and go to state 351
    LPAREN          shift and go to state 352
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    factor                         shift and go to state 350
    lhs                            shift and go to state 215
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 221

    (240) term -> term DIVIDE . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    factor                         shift and go to state 353

state 222

    (11) stmt -> stmt IF expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 11 (stmt -> stmt IF expr .)
    WHILE           reduce using rule 11 (stmt -> stmt IF expr .)
    UNLESS          reduce using rule 11 (stmt -> stmt IF expr .)
    UNTIL           reduce using rule 11 (stmt -> stmt IF expr .)
    TERM            reduce using rule 11 (stmt -> stmt IF expr .)
    NUMBER          reduce using rule 11 (stmt -> stmt IF expr .)
    LPAREN          reduce using rule 11 (stmt -> stmt IF expr .)
    $end            reduce using rule 11 (stmt -> stmt IF expr .)
    RESCUE          reduce using rule 11 (stmt -> stmt IF expr .)
    RPAREN          reduce using rule 11 (stmt -> stmt IF expr .)
    WHEN            reduce using rule 11 (stmt -> stmt IF expr .)
    LBRACKET        reduce using rule 11 (stmt -> stmt IF expr .)
    DOT             reduce using rule 11 (stmt -> stmt IF expr .)
    UNARY_OP        reduce using rule 11 (stmt -> stmt IF expr .)
    RANGE_INCLUSIVE reduce using rule 11 (stmt -> stmt IF expr .)
    RANGE_EXCLUSIVE reduce using rule 11 (stmt -> stmt IF expr .)
    PLUS            reduce using rule 11 (stmt -> stmt IF expr .)
    MINUS           reduce using rule 11 (stmt -> stmt IF expr .)
    TIMES           reduce using rule 11 (stmt -> stmt IF expr .)
    DIVIDE          reduce using rule 11 (stmt -> stmt IF expr .)
    MOD             reduce using rule 11 (stmt -> stmt IF expr .)
    POW             reduce using rule 11 (stmt -> stmt IF expr .)
    OR_SYMBOL       reduce using rule 11 (stmt -> stmt IF expr .)
    BINARY_XOR_OP   reduce using rule 11 (stmt -> stmt IF expr .)
    BINARY_AND_OP   reduce using rule 11 (stmt -> stmt IF expr .)
    COMBINED_COMPARISON_OP reduce using rule 11 (stmt -> stmt IF expr .)
    GREATERTHAN     reduce using rule 11 (stmt -> stmt IF expr .)
    GREATERTHANEQUAL reduce using rule 11 (stmt -> stmt IF expr .)
    LESSERTHAN      reduce using rule 11 (stmt -> stmt IF expr .)
    LESSERTHANEQUAL reduce using rule 11 (stmt -> stmt IF expr .)
    EQUAL           reduce using rule 11 (stmt -> stmt IF expr .)
    CASE_EQUALITY   reduce using rule 11 (stmt -> stmt IF expr .)
    NOTEQUAL        reduce using rule 11 (stmt -> stmt IF expr .)
    MATCHED_STRINGS_OP reduce using rule 11 (stmt -> stmt IF expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 11 (stmt -> stmt IF expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 11 (stmt -> stmt IF expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 11 (stmt -> stmt IF expr .)
    COMMA           reduce using rule 11 (stmt -> stmt IF expr .)
    RBRACKET        reduce using rule 11 (stmt -> stmt IF expr .)
    THEN            reduce using rule 11 (stmt -> stmt IF expr .)
    DO              reduce using rule 11 (stmt -> stmt IF expr .)
    HASH_ROCKET     reduce using rule 11 (stmt -> stmt IF expr .)
    RKEY            reduce using rule 11 (stmt -> stmt IF expr .)
    LKEY            reduce using rule 11 (stmt -> stmt IF expr .)
    END             reduce using rule 11 (stmt -> stmt IF expr .)
    ELSIF           reduce using rule 11 (stmt -> stmt IF expr .)
    ELSE            reduce using rule 11 (stmt -> stmt IF expr .)
    ENSURE          reduce using rule 11 (stmt -> stmt IF expr .)
    NOT_SYMBOL      reduce using rule 11 (stmt -> stmt IF expr .)
    COMPLEMENT_OP   reduce using rule 11 (stmt -> stmt IF expr .)
    DEFINED_OP      reduce using rule 11 (stmt -> stmt IF expr .)
    RETURN          reduce using rule 11 (stmt -> stmt IF expr .)
    YIELD           reduce using rule 11 (stmt -> stmt IF expr .)
    CASE            reduce using rule 11 (stmt -> stmt IF expr .)
    FOR             reduce using rule 11 (stmt -> stmt IF expr .)
    BEGIN           reduce using rule 11 (stmt -> stmt IF expr .)
    CLASS           reduce using rule 11 (stmt -> stmt IF expr .)
    MODULE          reduce using rule 11 (stmt -> stmt IF expr .)
    DEF             reduce using rule 11 (stmt -> stmt IF expr .)
    PUTS            reduce using rule 11 (stmt -> stmt IF expr .)
    VAR_GLOBAL      reduce using rule 11 (stmt -> stmt IF expr .)
    VAR_LOCAL       reduce using rule 11 (stmt -> stmt IF expr .)
    VAR_INSTANCE    reduce using rule 11 (stmt -> stmt IF expr .)
    VAR_CLASS       reduce using rule 11 (stmt -> stmt IF expr .)
    SYMBOL          reduce using rule 11 (stmt -> stmt IF expr .)
    STRING          reduce using rule 11 (stmt -> stmt IF expr .)
    IDENTIFIER      reduce using rule 11 (stmt -> stmt IF expr .)
    SUPER           reduce using rule 11 (stmt -> stmt IF expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 11 (stmt -> stmt IF expr .) ]
  ! OR              [ reduce using rule 11 (stmt -> stmt IF expr .) ]


state 223

    (12) stmt -> stmt WHILE expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 12 (stmt -> stmt WHILE expr .)
    WHILE           reduce using rule 12 (stmt -> stmt WHILE expr .)
    UNLESS          reduce using rule 12 (stmt -> stmt WHILE expr .)
    UNTIL           reduce using rule 12 (stmt -> stmt WHILE expr .)
    TERM            reduce using rule 12 (stmt -> stmt WHILE expr .)
    NUMBER          reduce using rule 12 (stmt -> stmt WHILE expr .)
    LPAREN          reduce using rule 12 (stmt -> stmt WHILE expr .)
    $end            reduce using rule 12 (stmt -> stmt WHILE expr .)
    RESCUE          reduce using rule 12 (stmt -> stmt WHILE expr .)
    RPAREN          reduce using rule 12 (stmt -> stmt WHILE expr .)
    WHEN            reduce using rule 12 (stmt -> stmt WHILE expr .)
    LBRACKET        reduce using rule 12 (stmt -> stmt WHILE expr .)
    DOT             reduce using rule 12 (stmt -> stmt WHILE expr .)
    UNARY_OP        reduce using rule 12 (stmt -> stmt WHILE expr .)
    RANGE_INCLUSIVE reduce using rule 12 (stmt -> stmt WHILE expr .)
    RANGE_EXCLUSIVE reduce using rule 12 (stmt -> stmt WHILE expr .)
    PLUS            reduce using rule 12 (stmt -> stmt WHILE expr .)
    MINUS           reduce using rule 12 (stmt -> stmt WHILE expr .)
    TIMES           reduce using rule 12 (stmt -> stmt WHILE expr .)
    DIVIDE          reduce using rule 12 (stmt -> stmt WHILE expr .)
    MOD             reduce using rule 12 (stmt -> stmt WHILE expr .)
    POW             reduce using rule 12 (stmt -> stmt WHILE expr .)
    OR_SYMBOL       reduce using rule 12 (stmt -> stmt WHILE expr .)
    BINARY_XOR_OP   reduce using rule 12 (stmt -> stmt WHILE expr .)
    BINARY_AND_OP   reduce using rule 12 (stmt -> stmt WHILE expr .)
    COMBINED_COMPARISON_OP reduce using rule 12 (stmt -> stmt WHILE expr .)
    GREATERTHAN     reduce using rule 12 (stmt -> stmt WHILE expr .)
    GREATERTHANEQUAL reduce using rule 12 (stmt -> stmt WHILE expr .)
    LESSERTHAN      reduce using rule 12 (stmt -> stmt WHILE expr .)
    LESSERTHANEQUAL reduce using rule 12 (stmt -> stmt WHILE expr .)
    EQUAL           reduce using rule 12 (stmt -> stmt WHILE expr .)
    CASE_EQUALITY   reduce using rule 12 (stmt -> stmt WHILE expr .)
    NOTEQUAL        reduce using rule 12 (stmt -> stmt WHILE expr .)
    MATCHED_STRINGS_OP reduce using rule 12 (stmt -> stmt WHILE expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 12 (stmt -> stmt WHILE expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 12 (stmt -> stmt WHILE expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 12 (stmt -> stmt WHILE expr .)
    COMMA           reduce using rule 12 (stmt -> stmt WHILE expr .)
    RBRACKET        reduce using rule 12 (stmt -> stmt WHILE expr .)
    THEN            reduce using rule 12 (stmt -> stmt WHILE expr .)
    DO              reduce using rule 12 (stmt -> stmt WHILE expr .)
    HASH_ROCKET     reduce using rule 12 (stmt -> stmt WHILE expr .)
    RKEY            reduce using rule 12 (stmt -> stmt WHILE expr .)
    LKEY            reduce using rule 12 (stmt -> stmt WHILE expr .)
    END             reduce using rule 12 (stmt -> stmt WHILE expr .)
    ELSIF           reduce using rule 12 (stmt -> stmt WHILE expr .)
    ELSE            reduce using rule 12 (stmt -> stmt WHILE expr .)
    ENSURE          reduce using rule 12 (stmt -> stmt WHILE expr .)
    NOT_SYMBOL      reduce using rule 12 (stmt -> stmt WHILE expr .)
    COMPLEMENT_OP   reduce using rule 12 (stmt -> stmt WHILE expr .)
    DEFINED_OP      reduce using rule 12 (stmt -> stmt WHILE expr .)
    RETURN          reduce using rule 12 (stmt -> stmt WHILE expr .)
    YIELD           reduce using rule 12 (stmt -> stmt WHILE expr .)
    CASE            reduce using rule 12 (stmt -> stmt WHILE expr .)
    FOR             reduce using rule 12 (stmt -> stmt WHILE expr .)
    BEGIN           reduce using rule 12 (stmt -> stmt WHILE expr .)
    CLASS           reduce using rule 12 (stmt -> stmt WHILE expr .)
    MODULE          reduce using rule 12 (stmt -> stmt WHILE expr .)
    DEF             reduce using rule 12 (stmt -> stmt WHILE expr .)
    PUTS            reduce using rule 12 (stmt -> stmt WHILE expr .)
    VAR_GLOBAL      reduce using rule 12 (stmt -> stmt WHILE expr .)
    VAR_LOCAL       reduce using rule 12 (stmt -> stmt WHILE expr .)
    VAR_INSTANCE    reduce using rule 12 (stmt -> stmt WHILE expr .)
    VAR_CLASS       reduce using rule 12 (stmt -> stmt WHILE expr .)
    SYMBOL          reduce using rule 12 (stmt -> stmt WHILE expr .)
    STRING          reduce using rule 12 (stmt -> stmt WHILE expr .)
    IDENTIFIER      reduce using rule 12 (stmt -> stmt WHILE expr .)
    SUPER           reduce using rule 12 (stmt -> stmt WHILE expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 12 (stmt -> stmt WHILE expr .) ]
  ! OR              [ reduce using rule 12 (stmt -> stmt WHILE expr .) ]


state 224

    (13) stmt -> stmt UNLESS expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 13 (stmt -> stmt UNLESS expr .)
    WHILE           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    UNLESS          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    UNTIL           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    TERM            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    NUMBER          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    LPAREN          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    $end            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RESCUE          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RPAREN          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    WHEN            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    LBRACKET        reduce using rule 13 (stmt -> stmt UNLESS expr .)
    DOT             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    UNARY_OP        reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RANGE_INCLUSIVE reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RANGE_EXCLUSIVE reduce using rule 13 (stmt -> stmt UNLESS expr .)
    PLUS            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    MINUS           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    TIMES           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    DIVIDE          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    MOD             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    POW             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    OR_SYMBOL       reduce using rule 13 (stmt -> stmt UNLESS expr .)
    BINARY_XOR_OP   reduce using rule 13 (stmt -> stmt UNLESS expr .)
    BINARY_AND_OP   reduce using rule 13 (stmt -> stmt UNLESS expr .)
    COMBINED_COMPARISON_OP reduce using rule 13 (stmt -> stmt UNLESS expr .)
    GREATERTHAN     reduce using rule 13 (stmt -> stmt UNLESS expr .)
    GREATERTHANEQUAL reduce using rule 13 (stmt -> stmt UNLESS expr .)
    LESSERTHAN      reduce using rule 13 (stmt -> stmt UNLESS expr .)
    LESSERTHANEQUAL reduce using rule 13 (stmt -> stmt UNLESS expr .)
    EQUAL           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    CASE_EQUALITY   reduce using rule 13 (stmt -> stmt UNLESS expr .)
    NOTEQUAL        reduce using rule 13 (stmt -> stmt UNLESS expr .)
    MATCHED_STRINGS_OP reduce using rule 13 (stmt -> stmt UNLESS expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 13 (stmt -> stmt UNLESS expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 13 (stmt -> stmt UNLESS expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 13 (stmt -> stmt UNLESS expr .)
    COMMA           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RBRACKET        reduce using rule 13 (stmt -> stmt UNLESS expr .)
    THEN            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    DO              reduce using rule 13 (stmt -> stmt UNLESS expr .)
    HASH_ROCKET     reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RKEY            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    LKEY            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    END             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    ELSIF           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    ELSE            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    ENSURE          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    NOT_SYMBOL      reduce using rule 13 (stmt -> stmt UNLESS expr .)
    COMPLEMENT_OP   reduce using rule 13 (stmt -> stmt UNLESS expr .)
    DEFINED_OP      reduce using rule 13 (stmt -> stmt UNLESS expr .)
    RETURN          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    YIELD           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    CASE            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    FOR             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    BEGIN           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    CLASS           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    MODULE          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    DEF             reduce using rule 13 (stmt -> stmt UNLESS expr .)
    PUTS            reduce using rule 13 (stmt -> stmt UNLESS expr .)
    VAR_GLOBAL      reduce using rule 13 (stmt -> stmt UNLESS expr .)
    VAR_LOCAL       reduce using rule 13 (stmt -> stmt UNLESS expr .)
    VAR_INSTANCE    reduce using rule 13 (stmt -> stmt UNLESS expr .)
    VAR_CLASS       reduce using rule 13 (stmt -> stmt UNLESS expr .)
    SYMBOL          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    STRING          reduce using rule 13 (stmt -> stmt UNLESS expr .)
    IDENTIFIER      reduce using rule 13 (stmt -> stmt UNLESS expr .)
    SUPER           reduce using rule 13 (stmt -> stmt UNLESS expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 13 (stmt -> stmt UNLESS expr .) ]
  ! OR              [ reduce using rule 13 (stmt -> stmt UNLESS expr .) ]


state 225

    (14) stmt -> stmt UNTIL expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 14 (stmt -> stmt UNTIL expr .)
    WHILE           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    UNLESS          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    UNTIL           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    TERM            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    NUMBER          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    LPAREN          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    $end            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RESCUE          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RPAREN          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    WHEN            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    LBRACKET        reduce using rule 14 (stmt -> stmt UNTIL expr .)
    DOT             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    UNARY_OP        reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RANGE_INCLUSIVE reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RANGE_EXCLUSIVE reduce using rule 14 (stmt -> stmt UNTIL expr .)
    PLUS            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    MINUS           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    TIMES           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    DIVIDE          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    MOD             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    POW             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    OR_SYMBOL       reduce using rule 14 (stmt -> stmt UNTIL expr .)
    BINARY_XOR_OP   reduce using rule 14 (stmt -> stmt UNTIL expr .)
    BINARY_AND_OP   reduce using rule 14 (stmt -> stmt UNTIL expr .)
    COMBINED_COMPARISON_OP reduce using rule 14 (stmt -> stmt UNTIL expr .)
    GREATERTHAN     reduce using rule 14 (stmt -> stmt UNTIL expr .)
    GREATERTHANEQUAL reduce using rule 14 (stmt -> stmt UNTIL expr .)
    LESSERTHAN      reduce using rule 14 (stmt -> stmt UNTIL expr .)
    LESSERTHANEQUAL reduce using rule 14 (stmt -> stmt UNTIL expr .)
    EQUAL           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    CASE_EQUALITY   reduce using rule 14 (stmt -> stmt UNTIL expr .)
    NOTEQUAL        reduce using rule 14 (stmt -> stmt UNTIL expr .)
    MATCHED_STRINGS_OP reduce using rule 14 (stmt -> stmt UNTIL expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 14 (stmt -> stmt UNTIL expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 14 (stmt -> stmt UNTIL expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 14 (stmt -> stmt UNTIL expr .)
    COMMA           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RBRACKET        reduce using rule 14 (stmt -> stmt UNTIL expr .)
    THEN            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    DO              reduce using rule 14 (stmt -> stmt UNTIL expr .)
    HASH_ROCKET     reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RKEY            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    LKEY            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    END             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    ELSIF           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    ELSE            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    ENSURE          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    NOT_SYMBOL      reduce using rule 14 (stmt -> stmt UNTIL expr .)
    COMPLEMENT_OP   reduce using rule 14 (stmt -> stmt UNTIL expr .)
    DEFINED_OP      reduce using rule 14 (stmt -> stmt UNTIL expr .)
    RETURN          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    YIELD           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    CASE            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    FOR             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    BEGIN           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    CLASS           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    MODULE          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    DEF             reduce using rule 14 (stmt -> stmt UNTIL expr .)
    PUTS            reduce using rule 14 (stmt -> stmt UNTIL expr .)
    VAR_GLOBAL      reduce using rule 14 (stmt -> stmt UNTIL expr .)
    VAR_LOCAL       reduce using rule 14 (stmt -> stmt UNTIL expr .)
    VAR_INSTANCE    reduce using rule 14 (stmt -> stmt UNTIL expr .)
    VAR_CLASS       reduce using rule 14 (stmt -> stmt UNTIL expr .)
    SYMBOL          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    STRING          reduce using rule 14 (stmt -> stmt UNTIL expr .)
    IDENTIFIER      reduce using rule 14 (stmt -> stmt UNTIL expr .)
    SUPER           reduce using rule 14 (stmt -> stmt UNTIL expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 14 (stmt -> stmt UNTIL expr .) ]
  ! OR              [ reduce using rule 14 (stmt -> stmt UNTIL expr .) ]


state 226

    (243) factor -> LPAREN expression . RPAREN
    (236) expression -> expression . PLUS term
    (237) expression -> expression . MINUS term

    RPAREN          shift and go to state 354
    PLUS            shift and go to state 355
    MINUS           shift and go to state 356


state 227

    (238) expression -> term .
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

    RPAREN          reduce using rule 238 (expression -> term .)
    PLUS            reduce using rule 238 (expression -> term .)
    MINUS           reduce using rule 238 (expression -> term .)
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221


state 228

    (22) expr -> expr AND expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 22 (expr -> expr AND expr .)
    WHILE           reduce using rule 22 (expr -> expr AND expr .)
    UNLESS          reduce using rule 22 (expr -> expr AND expr .)
    UNTIL           reduce using rule 22 (expr -> expr AND expr .)
    TERM            reduce using rule 22 (expr -> expr AND expr .)
    NUMBER          reduce using rule 22 (expr -> expr AND expr .)
    LPAREN          reduce using rule 22 (expr -> expr AND expr .)
    $end            reduce using rule 22 (expr -> expr AND expr .)
    THEN            reduce using rule 22 (expr -> expr AND expr .)
    DO              reduce using rule 22 (expr -> expr AND expr .)
    RESCUE          reduce using rule 22 (expr -> expr AND expr .)
    LBRACKET        reduce using rule 22 (expr -> expr AND expr .)
    DOT             reduce using rule 22 (expr -> expr AND expr .)
    UNARY_OP        reduce using rule 22 (expr -> expr AND expr .)
    RANGE_INCLUSIVE reduce using rule 22 (expr -> expr AND expr .)
    RANGE_EXCLUSIVE reduce using rule 22 (expr -> expr AND expr .)
    PLUS            reduce using rule 22 (expr -> expr AND expr .)
    MINUS           reduce using rule 22 (expr -> expr AND expr .)
    TIMES           reduce using rule 22 (expr -> expr AND expr .)
    DIVIDE          reduce using rule 22 (expr -> expr AND expr .)
    MOD             reduce using rule 22 (expr -> expr AND expr .)
    POW             reduce using rule 22 (expr -> expr AND expr .)
    OR_SYMBOL       reduce using rule 22 (expr -> expr AND expr .)
    BINARY_XOR_OP   reduce using rule 22 (expr -> expr AND expr .)
    BINARY_AND_OP   reduce using rule 22 (expr -> expr AND expr .)
    COMBINED_COMPARISON_OP reduce using rule 22 (expr -> expr AND expr .)
    GREATERTHAN     reduce using rule 22 (expr -> expr AND expr .)
    GREATERTHANEQUAL reduce using rule 22 (expr -> expr AND expr .)
    LESSERTHAN      reduce using rule 22 (expr -> expr AND expr .)
    LESSERTHANEQUAL reduce using rule 22 (expr -> expr AND expr .)
    EQUAL           reduce using rule 22 (expr -> expr AND expr .)
    CASE_EQUALITY   reduce using rule 22 (expr -> expr AND expr .)
    NOTEQUAL        reduce using rule 22 (expr -> expr AND expr .)
    MATCHED_STRINGS_OP reduce using rule 22 (expr -> expr AND expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 22 (expr -> expr AND expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 22 (expr -> expr AND expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 22 (expr -> expr AND expr .)
    COMMA           reduce using rule 22 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 22 (expr -> expr AND expr .)
    HASH_ROCKET     reduce using rule 22 (expr -> expr AND expr .)
    RKEY            reduce using rule 22 (expr -> expr AND expr .)
    RPAREN          reduce using rule 22 (expr -> expr AND expr .)
    WHEN            reduce using rule 22 (expr -> expr AND expr .)
    LKEY            reduce using rule 22 (expr -> expr AND expr .)
    END             reduce using rule 22 (expr -> expr AND expr .)
    ELSIF           reduce using rule 22 (expr -> expr AND expr .)
    ELSE            reduce using rule 22 (expr -> expr AND expr .)
    ENSURE          reduce using rule 22 (expr -> expr AND expr .)
    NOT_SYMBOL      reduce using rule 22 (expr -> expr AND expr .)
    COMPLEMENT_OP   reduce using rule 22 (expr -> expr AND expr .)
    DEFINED_OP      reduce using rule 22 (expr -> expr AND expr .)
    RETURN          reduce using rule 22 (expr -> expr AND expr .)
    YIELD           reduce using rule 22 (expr -> expr AND expr .)
    CASE            reduce using rule 22 (expr -> expr AND expr .)
    FOR             reduce using rule 22 (expr -> expr AND expr .)
    BEGIN           reduce using rule 22 (expr -> expr AND expr .)
    CLASS           reduce using rule 22 (expr -> expr AND expr .)
    MODULE          reduce using rule 22 (expr -> expr AND expr .)
    DEF             reduce using rule 22 (expr -> expr AND expr .)
    PUTS            reduce using rule 22 (expr -> expr AND expr .)
    VAR_GLOBAL      reduce using rule 22 (expr -> expr AND expr .)
    VAR_LOCAL       reduce using rule 22 (expr -> expr AND expr .)
    VAR_INSTANCE    reduce using rule 22 (expr -> expr AND expr .)
    VAR_CLASS       reduce using rule 22 (expr -> expr AND expr .)
    SYMBOL          reduce using rule 22 (expr -> expr AND expr .)
    STRING          reduce using rule 22 (expr -> expr AND expr .)
    IDENTIFIER      reduce using rule 22 (expr -> expr AND expr .)
    SUPER           reduce using rule 22 (expr -> expr AND expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr AND expr .) ]


state 229

    (23) expr -> expr OR expr .
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 23 (expr -> expr OR expr .)
    WHILE           reduce using rule 23 (expr -> expr OR expr .)
    UNLESS          reduce using rule 23 (expr -> expr OR expr .)
    UNTIL           reduce using rule 23 (expr -> expr OR expr .)
    TERM            reduce using rule 23 (expr -> expr OR expr .)
    NUMBER          reduce using rule 23 (expr -> expr OR expr .)
    LPAREN          reduce using rule 23 (expr -> expr OR expr .)
    $end            reduce using rule 23 (expr -> expr OR expr .)
    THEN            reduce using rule 23 (expr -> expr OR expr .)
    DO              reduce using rule 23 (expr -> expr OR expr .)
    RESCUE          reduce using rule 23 (expr -> expr OR expr .)
    LBRACKET        reduce using rule 23 (expr -> expr OR expr .)
    DOT             reduce using rule 23 (expr -> expr OR expr .)
    UNARY_OP        reduce using rule 23 (expr -> expr OR expr .)
    RANGE_INCLUSIVE reduce using rule 23 (expr -> expr OR expr .)
    RANGE_EXCLUSIVE reduce using rule 23 (expr -> expr OR expr .)
    PLUS            reduce using rule 23 (expr -> expr OR expr .)
    MINUS           reduce using rule 23 (expr -> expr OR expr .)
    TIMES           reduce using rule 23 (expr -> expr OR expr .)
    DIVIDE          reduce using rule 23 (expr -> expr OR expr .)
    MOD             reduce using rule 23 (expr -> expr OR expr .)
    POW             reduce using rule 23 (expr -> expr OR expr .)
    OR_SYMBOL       reduce using rule 23 (expr -> expr OR expr .)
    BINARY_XOR_OP   reduce using rule 23 (expr -> expr OR expr .)
    BINARY_AND_OP   reduce using rule 23 (expr -> expr OR expr .)
    COMBINED_COMPARISON_OP reduce using rule 23 (expr -> expr OR expr .)
    GREATERTHAN     reduce using rule 23 (expr -> expr OR expr .)
    GREATERTHANEQUAL reduce using rule 23 (expr -> expr OR expr .)
    LESSERTHAN      reduce using rule 23 (expr -> expr OR expr .)
    LESSERTHANEQUAL reduce using rule 23 (expr -> expr OR expr .)
    EQUAL           reduce using rule 23 (expr -> expr OR expr .)
    CASE_EQUALITY   reduce using rule 23 (expr -> expr OR expr .)
    NOTEQUAL        reduce using rule 23 (expr -> expr OR expr .)
    MATCHED_STRINGS_OP reduce using rule 23 (expr -> expr OR expr .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 23 (expr -> expr OR expr .)
    BINARY_LEFT_SHIFT_OP reduce using rule 23 (expr -> expr OR expr .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 23 (expr -> expr OR expr .)
    COMMA           reduce using rule 23 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 23 (expr -> expr OR expr .)
    HASH_ROCKET     reduce using rule 23 (expr -> expr OR expr .)
    RKEY            reduce using rule 23 (expr -> expr OR expr .)
    RPAREN          reduce using rule 23 (expr -> expr OR expr .)
    WHEN            reduce using rule 23 (expr -> expr OR expr .)
    LKEY            reduce using rule 23 (expr -> expr OR expr .)
    END             reduce using rule 23 (expr -> expr OR expr .)
    ELSIF           reduce using rule 23 (expr -> expr OR expr .)
    ELSE            reduce using rule 23 (expr -> expr OR expr .)
    ENSURE          reduce using rule 23 (expr -> expr OR expr .)
    NOT_SYMBOL      reduce using rule 23 (expr -> expr OR expr .)
    COMPLEMENT_OP   reduce using rule 23 (expr -> expr OR expr .)
    DEFINED_OP      reduce using rule 23 (expr -> expr OR expr .)
    RETURN          reduce using rule 23 (expr -> expr OR expr .)
    YIELD           reduce using rule 23 (expr -> expr OR expr .)
    CASE            reduce using rule 23 (expr -> expr OR expr .)
    FOR             reduce using rule 23 (expr -> expr OR expr .)
    BEGIN           reduce using rule 23 (expr -> expr OR expr .)
    CLASS           reduce using rule 23 (expr -> expr OR expr .)
    MODULE          reduce using rule 23 (expr -> expr OR expr .)
    DEF             reduce using rule 23 (expr -> expr OR expr .)
    PUTS            reduce using rule 23 (expr -> expr OR expr .)
    VAR_GLOBAL      reduce using rule 23 (expr -> expr OR expr .)
    VAR_LOCAL       reduce using rule 23 (expr -> expr OR expr .)
    VAR_INSTANCE    reduce using rule 23 (expr -> expr OR expr .)
    VAR_CLASS       reduce using rule 23 (expr -> expr OR expr .)
    SYMBOL          reduce using rule 23 (expr -> expr OR expr .)
    STRING          reduce using rule 23 (expr -> expr OR expr .)
    IDENTIFIER      reduce using rule 23 (expr -> expr OR expr .)
    SUPER           reduce using rule 23 (expr -> expr OR expr .)
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! AND             [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr OR expr .) ]


state 230

    (6) stmt -> call do LBRACKET . RBRACKET

    RBRACKET        shift and go to state 357


state 231

    (141) do -> term DO .

    LBRACKET        reduce using rule 141 (do -> term DO .)
    UNDEF           reduce using rule 141 (do -> term DO .)
    ALIAS           reduce using rule 141 (do -> term DO .)
    BEGIN           reduce using rule 141 (do -> term DO .)
    END             reduce using rule 141 (do -> term DO .)
    RETURN          reduce using rule 141 (do -> term DO .)
    YIELD           reduce using rule 141 (do -> term DO .)
    NOT             reduce using rule 141 (do -> term DO .)
    NOT_SYMBOL      reduce using rule 141 (do -> term DO .)
    SUPER           reduce using rule 141 (do -> term DO .)
    VAR_GLOBAL      reduce using rule 141 (do -> term DO .)
    VAR_LOCAL       reduce using rule 141 (do -> term DO .)
    VAR_INSTANCE    reduce using rule 141 (do -> term DO .)
    VAR_CLASS       reduce using rule 141 (do -> term DO .)
    LPAREN          reduce using rule 141 (do -> term DO .)
    UNARY_OP        reduce using rule 141 (do -> term DO .)
    LKEY            reduce using rule 141 (do -> term DO .)
    DEFINED_OP      reduce using rule 141 (do -> term DO .)
    IF              reduce using rule 141 (do -> term DO .)
    UNLESS          reduce using rule 141 (do -> term DO .)
    WHILE           reduce using rule 141 (do -> term DO .)
    UNTIL           reduce using rule 141 (do -> term DO .)
    CASE            reduce using rule 141 (do -> term DO .)
    FOR             reduce using rule 141 (do -> term DO .)
    CLASS           reduce using rule 141 (do -> term DO .)
    MODULE          reduce using rule 141 (do -> term DO .)
    DEF             reduce using rule 141 (do -> term DO .)
    PUTS            reduce using rule 141 (do -> term DO .)
    TIMES           reduce using rule 141 (do -> term DO .)
    PLUS            reduce using rule 141 (do -> term DO .)
    MINUS           reduce using rule 141 (do -> term DO .)
    COMPLEMENT_OP   reduce using rule 141 (do -> term DO .)
    IDENTIFIER      reduce using rule 141 (do -> term DO .)
    NUMBER          reduce using rule 141 (do -> term DO .)
    SYMBOL          reduce using rule 141 (do -> term DO .)
    STRING          reduce using rule 141 (do -> term DO .)


state 232

    (239) term -> term TIMES . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    factor                         shift and go to state 350

state 233

    (7) stmt -> LBRACKET block_var RBRACKET .

    IF              reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    WHILE           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    UNLESS          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    UNTIL           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    TERM            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    NUMBER          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    LPAREN          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    $end            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RESCUE          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RPAREN          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    WHEN            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    LBRACKET        reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    DOT             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    UNARY_OP        reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    PLUS            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    MINUS           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    TIMES           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    DIVIDE          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    MOD             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    POW             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    OR_SYMBOL       reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    BINARY_XOR_OP   reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    BINARY_AND_OP   reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    GREATERTHAN     reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    GREATERTHANEQUAL reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    LESSERTHAN      reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    LESSERTHANEQUAL reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    EQUAL           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    CASE_EQUALITY   reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    NOTEQUAL        reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    AND             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    OR              reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    COMMA           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RBRACKET        reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    THEN            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    DO              reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    HASH_ROCKET     reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RKEY            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    LKEY            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    END             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    ELSIF           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    ELSE            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    ENSURE          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    NOT_SYMBOL      reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    COMPLEMENT_OP   reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    DEFINED_OP      reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    RETURN          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    YIELD           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    CASE            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    FOR             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    BEGIN           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    CLASS           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    MODULE          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    DEF             reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    PUTS            reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    VAR_GLOBAL      reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    VAR_LOCAL       reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    VAR_INSTANCE    reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    VAR_CLASS       reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    SYMBOL          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    STRING          reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    IDENTIFIER      reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)
    SUPER           reduce using rule 7 (stmt -> LBRACKET block_var RBRACKET .)


state 234

    (8) stmt -> LBRACKET OR_SYMBOL block_var . OR_SYMBOL RBRACKET compstmt END

    OR_SYMBOL       shift and go to state 358


state 235

    (86) primary -> LBRACKET args RBRACKET .

    LBRACKET        reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    DOT             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    PLUS            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    MINUS           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    TIMES           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    MOD             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    POW             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    AND             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    OR              reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    IF              reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    WHILE           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    TERM            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    $end            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    COMMA           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    THEN            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    DO              reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RKEY            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    WHEN            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    LKEY            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    END             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    ELSE            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    NOT_SYMBOL      reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    COMPLEMENT_OP   reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    DEFINED_OP      reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    RETURN          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    YIELD           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    CASE            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    FOR             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    BEGIN           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    CLASS           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    MODULE          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    DEF             reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    PUTS            reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    VAR_GLOBAL      reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    VAR_LOCAL       reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    VAR_INSTANCE    reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    VAR_CLASS       reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    SYMBOL          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    STRING          reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    IDENTIFIER      reduce using rule 86 (primary -> LBRACKET args RBRACKET .)
    SUPER           reduce using rule 86 (primary -> LBRACKET args RBRACKET .)


state 236

    (87) primary -> LBRACKET args COMMA . RBRACKET

    RBRACKET        shift and go to state 359


state 237

    (41) arg -> lhs = . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 130
    arg                            shift and go to state 272
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 238

    (163) args -> arg COMMA . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 360
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 239

    (151) lhs -> primary DOT . IDENTIFIER
    (35) function -> primary DOT . operation LPAREN call_args RPAREN
    (37) function -> primary DOT . operation
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 278

    operation                      shift and go to state 361

state 240

    (81) primary -> primary UNARY_OP . IDENTIFIER
    (36) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP . operation
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 281

    operation                      shift and go to state 362

state 241

    (94) primary -> RETURN LPAREN . RPAREN
    (95) primary -> RETURN LPAREN . call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RPAREN          shift and go to state 286
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 287
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 242

    (97) primary -> YIELD LPAREN . RPAREN
    (98) primary -> YIELD LPAREN . call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RPAREN          shift and go to state 296
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 297
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 243

    (34) function -> operation LBRACKET . LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET

    LPAREN          shift and go to state 363


state 244

    (39) function -> SUPER LPAREN . call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 326
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 245

    (16) stmt -> END LKEY compstmt . RKEY

    RKEY            shift and go to state 364


state 246

    (218) fname -> LBRACKET RBRACKET .
    (219) fname -> LBRACKET RBRACKET . EQUAL_SYMBOL

    IF              reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    UNLESS          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    UNTIL           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    TERM            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    $end            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RESCUE          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    DOT             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    MOD             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    POW             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    AND             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    OR              reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    THEN            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    DO              reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    LKEY            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    END             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    ENSURE          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    YIELD           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    CASE            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    FOR             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    BEGIN           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    CLASS           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    DEF             reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    STRING          reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    SUPER           reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    OVERLOAD_PLUS   reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    OVERLOAD_MINUS  reduce using rule 218 (fname -> LBRACKET RBRACKET .)
    EQUAL_SYMBOL    shift and go to state 365


state 247

    (10) stmt -> ALIAS fname fname .

    IF              reduce using rule 10 (stmt -> ALIAS fname fname .)
    WHILE           reduce using rule 10 (stmt -> ALIAS fname fname .)
    UNLESS          reduce using rule 10 (stmt -> ALIAS fname fname .)
    UNTIL           reduce using rule 10 (stmt -> ALIAS fname fname .)
    TERM            reduce using rule 10 (stmt -> ALIAS fname fname .)
    NUMBER          reduce using rule 10 (stmt -> ALIAS fname fname .)
    LPAREN          reduce using rule 10 (stmt -> ALIAS fname fname .)
    $end            reduce using rule 10 (stmt -> ALIAS fname fname .)
    RESCUE          reduce using rule 10 (stmt -> ALIAS fname fname .)
    RPAREN          reduce using rule 10 (stmt -> ALIAS fname fname .)
    WHEN            reduce using rule 10 (stmt -> ALIAS fname fname .)
    LBRACKET        reduce using rule 10 (stmt -> ALIAS fname fname .)
    DOT             reduce using rule 10 (stmt -> ALIAS fname fname .)
    UNARY_OP        reduce using rule 10 (stmt -> ALIAS fname fname .)
    RANGE_INCLUSIVE reduce using rule 10 (stmt -> ALIAS fname fname .)
    RANGE_EXCLUSIVE reduce using rule 10 (stmt -> ALIAS fname fname .)
    PLUS            reduce using rule 10 (stmt -> ALIAS fname fname .)
    MINUS           reduce using rule 10 (stmt -> ALIAS fname fname .)
    TIMES           reduce using rule 10 (stmt -> ALIAS fname fname .)
    DIVIDE          reduce using rule 10 (stmt -> ALIAS fname fname .)
    MOD             reduce using rule 10 (stmt -> ALIAS fname fname .)
    POW             reduce using rule 10 (stmt -> ALIAS fname fname .)
    OR_SYMBOL       reduce using rule 10 (stmt -> ALIAS fname fname .)
    BINARY_XOR_OP   reduce using rule 10 (stmt -> ALIAS fname fname .)
    BINARY_AND_OP   reduce using rule 10 (stmt -> ALIAS fname fname .)
    COMBINED_COMPARISON_OP reduce using rule 10 (stmt -> ALIAS fname fname .)
    GREATERTHAN     reduce using rule 10 (stmt -> ALIAS fname fname .)
    GREATERTHANEQUAL reduce using rule 10 (stmt -> ALIAS fname fname .)
    LESSERTHAN      reduce using rule 10 (stmt -> ALIAS fname fname .)
    LESSERTHANEQUAL reduce using rule 10 (stmt -> ALIAS fname fname .)
    EQUAL           reduce using rule 10 (stmt -> ALIAS fname fname .)
    CASE_EQUALITY   reduce using rule 10 (stmt -> ALIAS fname fname .)
    NOTEQUAL        reduce using rule 10 (stmt -> ALIAS fname fname .)
    MATCHED_STRINGS_OP reduce using rule 10 (stmt -> ALIAS fname fname .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 10 (stmt -> ALIAS fname fname .)
    BINARY_LEFT_SHIFT_OP reduce using rule 10 (stmt -> ALIAS fname fname .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 10 (stmt -> ALIAS fname fname .)
    AND             reduce using rule 10 (stmt -> ALIAS fname fname .)
    OR              reduce using rule 10 (stmt -> ALIAS fname fname .)
    COMMA           reduce using rule 10 (stmt -> ALIAS fname fname .)
    RBRACKET        reduce using rule 10 (stmt -> ALIAS fname fname .)
    THEN            reduce using rule 10 (stmt -> ALIAS fname fname .)
    DO              reduce using rule 10 (stmt -> ALIAS fname fname .)
    HASH_ROCKET     reduce using rule 10 (stmt -> ALIAS fname fname .)
    RKEY            reduce using rule 10 (stmt -> ALIAS fname fname .)
    LKEY            reduce using rule 10 (stmt -> ALIAS fname fname .)
    END             reduce using rule 10 (stmt -> ALIAS fname fname .)
    ELSIF           reduce using rule 10 (stmt -> ALIAS fname fname .)
    ELSE            reduce using rule 10 (stmt -> ALIAS fname fname .)
    ENSURE          reduce using rule 10 (stmt -> ALIAS fname fname .)
    NOT_SYMBOL      reduce using rule 10 (stmt -> ALIAS fname fname .)
    COMPLEMENT_OP   reduce using rule 10 (stmt -> ALIAS fname fname .)
    DEFINED_OP      reduce using rule 10 (stmt -> ALIAS fname fname .)
    RETURN          reduce using rule 10 (stmt -> ALIAS fname fname .)
    YIELD           reduce using rule 10 (stmt -> ALIAS fname fname .)
    CASE            reduce using rule 10 (stmt -> ALIAS fname fname .)
    FOR             reduce using rule 10 (stmt -> ALIAS fname fname .)
    BEGIN           reduce using rule 10 (stmt -> ALIAS fname fname .)
    CLASS           reduce using rule 10 (stmt -> ALIAS fname fname .)
    MODULE          reduce using rule 10 (stmt -> ALIAS fname fname .)
    DEF             reduce using rule 10 (stmt -> ALIAS fname fname .)
    PUTS            reduce using rule 10 (stmt -> ALIAS fname fname .)
    VAR_GLOBAL      reduce using rule 10 (stmt -> ALIAS fname fname .)
    VAR_LOCAL       reduce using rule 10 (stmt -> ALIAS fname fname .)
    VAR_INSTANCE    reduce using rule 10 (stmt -> ALIAS fname fname .)
    VAR_CLASS       reduce using rule 10 (stmt -> ALIAS fname fname .)
    SYMBOL          reduce using rule 10 (stmt -> ALIAS fname fname .)
    STRING          reduce using rule 10 (stmt -> ALIAS fname fname .)
    IDENTIFIER      reduce using rule 10 (stmt -> ALIAS fname fname .)
    SUPER           reduce using rule 10 (stmt -> ALIAS fname fname .)


state 248

    (104) primary -> IF expr then . compstmt END
    (105) primary -> IF expr then . compstmt elsif END
    (106) primary -> IF expr then . compstmt elsif ELSE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 366
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 249

    (136) then -> TERM .
    (138) then -> TERM . THEN

    LBRACKET        reduce using rule 136 (then -> TERM .)
    UNDEF           reduce using rule 136 (then -> TERM .)
    ALIAS           reduce using rule 136 (then -> TERM .)
    BEGIN           reduce using rule 136 (then -> TERM .)
    END             reduce using rule 136 (then -> TERM .)
    RETURN          reduce using rule 136 (then -> TERM .)
    YIELD           reduce using rule 136 (then -> TERM .)
    NOT             reduce using rule 136 (then -> TERM .)
    NOT_SYMBOL      reduce using rule 136 (then -> TERM .)
    SUPER           reduce using rule 136 (then -> TERM .)
    VAR_GLOBAL      reduce using rule 136 (then -> TERM .)
    VAR_LOCAL       reduce using rule 136 (then -> TERM .)
    VAR_INSTANCE    reduce using rule 136 (then -> TERM .)
    VAR_CLASS       reduce using rule 136 (then -> TERM .)
    LPAREN          reduce using rule 136 (then -> TERM .)
    UNARY_OP        reduce using rule 136 (then -> TERM .)
    LKEY            reduce using rule 136 (then -> TERM .)
    DEFINED_OP      reduce using rule 136 (then -> TERM .)
    IF              reduce using rule 136 (then -> TERM .)
    UNLESS          reduce using rule 136 (then -> TERM .)
    WHILE           reduce using rule 136 (then -> TERM .)
    UNTIL           reduce using rule 136 (then -> TERM .)
    CASE            reduce using rule 136 (then -> TERM .)
    FOR             reduce using rule 136 (then -> TERM .)
    CLASS           reduce using rule 136 (then -> TERM .)
    MODULE          reduce using rule 136 (then -> TERM .)
    DEF             reduce using rule 136 (then -> TERM .)
    PUTS            reduce using rule 136 (then -> TERM .)
    TIMES           reduce using rule 136 (then -> TERM .)
    PLUS            reduce using rule 136 (then -> TERM .)
    MINUS           reduce using rule 136 (then -> TERM .)
    COMPLEMENT_OP   reduce using rule 136 (then -> TERM .)
    IDENTIFIER      reduce using rule 136 (then -> TERM .)
    NUMBER          reduce using rule 136 (then -> TERM .)
    SYMBOL          reduce using rule 136 (then -> TERM .)
    STRING          reduce using rule 136 (then -> TERM .)
    THEN            shift and go to state 367


state 250

    (137) then -> THEN .

    LBRACKET        reduce using rule 137 (then -> THEN .)
    UNDEF           reduce using rule 137 (then -> THEN .)
    ALIAS           reduce using rule 137 (then -> THEN .)
    BEGIN           reduce using rule 137 (then -> THEN .)
    END             reduce using rule 137 (then -> THEN .)
    RETURN          reduce using rule 137 (then -> THEN .)
    YIELD           reduce using rule 137 (then -> THEN .)
    NOT             reduce using rule 137 (then -> THEN .)
    NOT_SYMBOL      reduce using rule 137 (then -> THEN .)
    SUPER           reduce using rule 137 (then -> THEN .)
    VAR_GLOBAL      reduce using rule 137 (then -> THEN .)
    VAR_LOCAL       reduce using rule 137 (then -> THEN .)
    VAR_INSTANCE    reduce using rule 137 (then -> THEN .)
    VAR_CLASS       reduce using rule 137 (then -> THEN .)
    LPAREN          reduce using rule 137 (then -> THEN .)
    UNARY_OP        reduce using rule 137 (then -> THEN .)
    LKEY            reduce using rule 137 (then -> THEN .)
    DEFINED_OP      reduce using rule 137 (then -> THEN .)
    IF              reduce using rule 137 (then -> THEN .)
    UNLESS          reduce using rule 137 (then -> THEN .)
    WHILE           reduce using rule 137 (then -> THEN .)
    UNTIL           reduce using rule 137 (then -> THEN .)
    CASE            reduce using rule 137 (then -> THEN .)
    FOR             reduce using rule 137 (then -> THEN .)
    CLASS           reduce using rule 137 (then -> THEN .)
    MODULE          reduce using rule 137 (then -> THEN .)
    DEF             reduce using rule 137 (then -> THEN .)
    PUTS            reduce using rule 137 (then -> THEN .)
    TIMES           reduce using rule 137 (then -> THEN .)
    PLUS            reduce using rule 137 (then -> THEN .)
    MINUS           reduce using rule 137 (then -> THEN .)
    COMPLEMENT_OP   reduce using rule 137 (then -> THEN .)
    IDENTIFIER      reduce using rule 137 (then -> THEN .)
    NUMBER          reduce using rule 137 (then -> THEN .)
    SYMBOL          reduce using rule 137 (then -> THEN .)
    STRING          reduce using rule 137 (then -> THEN .)


state 251

    (31) command -> primary DOT . operation call_args
    (151) lhs -> primary DOT . IDENTIFIER
    (35) function -> primary DOT . operation LPAREN call_args RPAREN
    (37) function -> primary DOT . operation
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 278

    operation                      shift and go to state 368

state 252

    (32) command -> primary UNARY_OP . operation call_args
    (81) primary -> primary UNARY_OP . IDENTIFIER
    (36) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP . operation
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 281

    operation                      shift and go to state 369

state 253

    (83) primary -> primary LBRACKET . RBRACKET
    (84) primary -> primary LBRACKET . args RBRACKET
    (149) lhs -> primary LBRACKET . RBRACKET
    (150) lhs -> primary LBRACKET . args RBRACKET
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 370
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    primary                        shift and go to state 131
    args                           shift and go to state 371
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 254

    (160) mlhs_item -> lhs .
    (17) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    =               shift and go to state 133
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 255

    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation
    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args
    (73) arg -> primary .

    LBRACKET        shift and go to state 149
    DOT             shift and go to state 150
    UNARY_OP        shift and go to state 372
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)


state 256

    (109) primary -> WHILE expr do . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 373
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 257

    (107) primary -> UNLESS expr then . compstmt END
    (108) primary -> UNLESS expr then . compstmt ELSE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 374
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 258

    (110) primary -> UNTIL expr do . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 375
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 259

    (15) stmt -> BEGIN LKEY compstmt . RKEY

    RKEY            shift and go to state 376


state 260

    (162) args -> arg .
    (163) args -> arg . COMMA arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg
    (173) assoc -> arg . HASH_ROCKET arg
    (27) expr -> arg .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for RKEY resolved using rule 27 (expr -> arg .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (expr -> arg .)
    COMMA           shift and go to state 238
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191
    HASH_ROCKET     shift and go to state 269
    IF              reduce using rule 27 (expr -> arg .)
    WHILE           reduce using rule 27 (expr -> arg .)
    UNLESS          reduce using rule 27 (expr -> arg .)
    UNTIL           reduce using rule 27 (expr -> arg .)
    TERM            reduce using rule 27 (expr -> arg .)
    NUMBER          reduce using rule 27 (expr -> arg .)
    LPAREN          reduce using rule 27 (expr -> arg .)
    RKEY            reduce using rule 27 (expr -> arg .)
    RPAREN          reduce using rule 27 (expr -> arg .)

  ! RKEY            [ reduce using rule 162 (args -> arg .) ]
  ! COMMA           [ reduce using rule 162 (args -> arg .) ]
  ! RPAREN          [ reduce using rule 162 (args -> arg .) ]
  ! AND             [ reduce using rule 27 (expr -> arg .) ]
  ! OR              [ reduce using rule 27 (expr -> arg .) ]


state 261

    (66) arg -> NOT_SYMBOL . arg
    (26) expr -> NOT_SYMBOL . command
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    SUPER           shift and go to state 117
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    IDENTIFIER      shift and go to state 21
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    arg                            shift and go to state 166
    command                        shift and go to state 165
    lhs                            shift and go to state 130
    primary                        shift and go to state 377
    operation                      shift and go to state 115
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80

state 262

    (73) arg -> primary .
    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation
    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args

    COMMA           reduce using rule 73 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RKEY            reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)
    LBRACKET        shift and go to state 149
    DOT             shift and go to state 150
    UNARY_OP        shift and go to state 372


state 263

    (114) primary -> BEGIN compstmt rescue . END
    (115) primary -> BEGIN compstmt rescue . ELSE compstmt END
    (116) primary -> BEGIN compstmt rescue . ENSURE compstmt END
    (117) primary -> BEGIN compstmt rescue . ELSE compstmt ENSURE compstmt END
    (131) rescue -> rescue . RESCUE args do compstmt
    (132) rescue -> rescue . RESCUE do compstmt

    END             shift and go to state 378
    ELSE            shift and go to state 379
    ENSURE          shift and go to state 380
    RESCUE          shift and go to state 381


state 264

    (129) rescue -> RESCUE . args do compstmt
    (130) rescue -> RESCUE . do compstmt
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    DO              shift and go to state 65
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    TERM            shift and go to state 57
    LPAREN          shift and go to state 384
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 351
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    args                           shift and go to state 382
    do                             shift and go to state 383
    arg                            shift and go to state 73
    term                           shift and go to state 64
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    factor                         shift and go to state 58
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 265

    (89) primary -> LKEY args RKEY .

    LBRACKET        reduce using rule 89 (primary -> LKEY args RKEY .)
    DOT             reduce using rule 89 (primary -> LKEY args RKEY .)
    UNARY_OP        reduce using rule 89 (primary -> LKEY args RKEY .)
    RANGE_INCLUSIVE reduce using rule 89 (primary -> LKEY args RKEY .)
    RANGE_EXCLUSIVE reduce using rule 89 (primary -> LKEY args RKEY .)
    PLUS            reduce using rule 89 (primary -> LKEY args RKEY .)
    MINUS           reduce using rule 89 (primary -> LKEY args RKEY .)
    TIMES           reduce using rule 89 (primary -> LKEY args RKEY .)
    DIVIDE          reduce using rule 89 (primary -> LKEY args RKEY .)
    MOD             reduce using rule 89 (primary -> LKEY args RKEY .)
    POW             reduce using rule 89 (primary -> LKEY args RKEY .)
    OR_SYMBOL       reduce using rule 89 (primary -> LKEY args RKEY .)
    BINARY_XOR_OP   reduce using rule 89 (primary -> LKEY args RKEY .)
    BINARY_AND_OP   reduce using rule 89 (primary -> LKEY args RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 89 (primary -> LKEY args RKEY .)
    GREATERTHAN     reduce using rule 89 (primary -> LKEY args RKEY .)
    GREATERTHANEQUAL reduce using rule 89 (primary -> LKEY args RKEY .)
    LESSERTHAN      reduce using rule 89 (primary -> LKEY args RKEY .)
    LESSERTHANEQUAL reduce using rule 89 (primary -> LKEY args RKEY .)
    EQUAL           reduce using rule 89 (primary -> LKEY args RKEY .)
    CASE_EQUALITY   reduce using rule 89 (primary -> LKEY args RKEY .)
    NOTEQUAL        reduce using rule 89 (primary -> LKEY args RKEY .)
    MATCHED_STRINGS_OP reduce using rule 89 (primary -> LKEY args RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 89 (primary -> LKEY args RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 89 (primary -> LKEY args RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 89 (primary -> LKEY args RKEY .)
    AND             reduce using rule 89 (primary -> LKEY args RKEY .)
    OR              reduce using rule 89 (primary -> LKEY args RKEY .)
    IF              reduce using rule 89 (primary -> LKEY args RKEY .)
    WHILE           reduce using rule 89 (primary -> LKEY args RKEY .)
    UNLESS          reduce using rule 89 (primary -> LKEY args RKEY .)
    UNTIL           reduce using rule 89 (primary -> LKEY args RKEY .)
    TERM            reduce using rule 89 (primary -> LKEY args RKEY .)
    NUMBER          reduce using rule 89 (primary -> LKEY args RKEY .)
    LPAREN          reduce using rule 89 (primary -> LKEY args RKEY .)
    $end            reduce using rule 89 (primary -> LKEY args RKEY .)
    COMMA           reduce using rule 89 (primary -> LKEY args RKEY .)
    RBRACKET        reduce using rule 89 (primary -> LKEY args RKEY .)
    THEN            reduce using rule 89 (primary -> LKEY args RKEY .)
    DO              reduce using rule 89 (primary -> LKEY args RKEY .)
    RESCUE          reduce using rule 89 (primary -> LKEY args RKEY .)
    HASH_ROCKET     reduce using rule 89 (primary -> LKEY args RKEY .)
    RKEY            reduce using rule 89 (primary -> LKEY args RKEY .)
    RPAREN          reduce using rule 89 (primary -> LKEY args RKEY .)
    WHEN            reduce using rule 89 (primary -> LKEY args RKEY .)
    LKEY            reduce using rule 89 (primary -> LKEY args RKEY .)
    END             reduce using rule 89 (primary -> LKEY args RKEY .)
    ELSIF           reduce using rule 89 (primary -> LKEY args RKEY .)
    ELSE            reduce using rule 89 (primary -> LKEY args RKEY .)
    ENSURE          reduce using rule 89 (primary -> LKEY args RKEY .)
    NOT_SYMBOL      reduce using rule 89 (primary -> LKEY args RKEY .)
    COMPLEMENT_OP   reduce using rule 89 (primary -> LKEY args RKEY .)
    DEFINED_OP      reduce using rule 89 (primary -> LKEY args RKEY .)
    RETURN          reduce using rule 89 (primary -> LKEY args RKEY .)
    YIELD           reduce using rule 89 (primary -> LKEY args RKEY .)
    CASE            reduce using rule 89 (primary -> LKEY args RKEY .)
    FOR             reduce using rule 89 (primary -> LKEY args RKEY .)
    BEGIN           reduce using rule 89 (primary -> LKEY args RKEY .)
    CLASS           reduce using rule 89 (primary -> LKEY args RKEY .)
    MODULE          reduce using rule 89 (primary -> LKEY args RKEY .)
    DEF             reduce using rule 89 (primary -> LKEY args RKEY .)
    PUTS            reduce using rule 89 (primary -> LKEY args RKEY .)
    VAR_GLOBAL      reduce using rule 89 (primary -> LKEY args RKEY .)
    VAR_LOCAL       reduce using rule 89 (primary -> LKEY args RKEY .)
    VAR_INSTANCE    reduce using rule 89 (primary -> LKEY args RKEY .)
    VAR_CLASS       reduce using rule 89 (primary -> LKEY args RKEY .)
    SYMBOL          reduce using rule 89 (primary -> LKEY args RKEY .)
    STRING          reduce using rule 89 (primary -> LKEY args RKEY .)
    IDENTIFIER      reduce using rule 89 (primary -> LKEY args RKEY .)
    SUPER           reduce using rule 89 (primary -> LKEY args RKEY .)


state 266

    (91) primary -> LKEY args COMMA . RKEY

    RKEY            shift and go to state 385


state 267

    (90) primary -> LKEY assocs RKEY .

    LBRACKET        reduce using rule 90 (primary -> LKEY assocs RKEY .)
    DOT             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    UNARY_OP        reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RANGE_INCLUSIVE reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RANGE_EXCLUSIVE reduce using rule 90 (primary -> LKEY assocs RKEY .)
    PLUS            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    MINUS           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    TIMES           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    DIVIDE          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    MOD             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    POW             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    OR_SYMBOL       reduce using rule 90 (primary -> LKEY assocs RKEY .)
    BINARY_XOR_OP   reduce using rule 90 (primary -> LKEY assocs RKEY .)
    BINARY_AND_OP   reduce using rule 90 (primary -> LKEY assocs RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 90 (primary -> LKEY assocs RKEY .)
    GREATERTHAN     reduce using rule 90 (primary -> LKEY assocs RKEY .)
    GREATERTHANEQUAL reduce using rule 90 (primary -> LKEY assocs RKEY .)
    LESSERTHAN      reduce using rule 90 (primary -> LKEY assocs RKEY .)
    LESSERTHANEQUAL reduce using rule 90 (primary -> LKEY assocs RKEY .)
    EQUAL           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    CASE_EQUALITY   reduce using rule 90 (primary -> LKEY assocs RKEY .)
    NOTEQUAL        reduce using rule 90 (primary -> LKEY assocs RKEY .)
    MATCHED_STRINGS_OP reduce using rule 90 (primary -> LKEY assocs RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 90 (primary -> LKEY assocs RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 90 (primary -> LKEY assocs RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 90 (primary -> LKEY assocs RKEY .)
    AND             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    OR              reduce using rule 90 (primary -> LKEY assocs RKEY .)
    IF              reduce using rule 90 (primary -> LKEY assocs RKEY .)
    WHILE           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    UNLESS          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    UNTIL           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    TERM            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    NUMBER          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    LPAREN          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    $end            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    COMMA           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RBRACKET        reduce using rule 90 (primary -> LKEY assocs RKEY .)
    THEN            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    DO              reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RESCUE          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    HASH_ROCKET     reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RKEY            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RPAREN          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    WHEN            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    LKEY            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    END             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    ELSIF           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    ELSE            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    ENSURE          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    NOT_SYMBOL      reduce using rule 90 (primary -> LKEY assocs RKEY .)
    COMPLEMENT_OP   reduce using rule 90 (primary -> LKEY assocs RKEY .)
    DEFINED_OP      reduce using rule 90 (primary -> LKEY assocs RKEY .)
    RETURN          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    YIELD           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    CASE            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    FOR             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    BEGIN           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    CLASS           reduce using rule 90 (primary -> LKEY assocs RKEY .)
    MODULE          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    DEF             reduce using rule 90 (primary -> LKEY assocs RKEY .)
    PUTS            reduce using rule 90 (primary -> LKEY assocs RKEY .)
    VAR_GLOBAL      reduce using rule 90 (primary -> LKEY assocs RKEY .)
    VAR_LOCAL       reduce using rule 90 (primary -> LKEY assocs RKEY .)
    VAR_INSTANCE    reduce using rule 90 (primary -> LKEY assocs RKEY .)
    VAR_CLASS       reduce using rule 90 (primary -> LKEY assocs RKEY .)
    SYMBOL          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    STRING          reduce using rule 90 (primary -> LKEY assocs RKEY .)
    IDENTIFIER      reduce using rule 90 (primary -> LKEY assocs RKEY .)
    SUPER           reduce using rule 90 (primary -> LKEY assocs RKEY .)


state 268

    (92) primary -> LKEY assocs COMMA . RKEY

    RKEY            shift and go to state 386


state 269

    (173) assoc -> arg HASH_ROCKET . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 387
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 270

    (172) assocs -> assoc COMMA . assoc
    (173) assoc -> . arg HASH_ROCKET arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    assoc                          shift and go to state 388
    arg                            shift and go to state 389
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 271

    (17) stmt -> lhs = command . LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    LBRACKET        shift and go to state 390


state 272

    (41) arg -> lhs = arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 41 (arg -> lhs = arg .)
    WHILE           reduce using rule 41 (arg -> lhs = arg .)
    UNLESS          reduce using rule 41 (arg -> lhs = arg .)
    UNTIL           reduce using rule 41 (arg -> lhs = arg .)
    TERM            reduce using rule 41 (arg -> lhs = arg .)
    NUMBER          reduce using rule 41 (arg -> lhs = arg .)
    LPAREN          reduce using rule 41 (arg -> lhs = arg .)
    $end            reduce using rule 41 (arg -> lhs = arg .)
    COMMA           reduce using rule 41 (arg -> lhs = arg .)
    RBRACKET        reduce using rule 41 (arg -> lhs = arg .)
    THEN            reduce using rule 41 (arg -> lhs = arg .)
    DO              reduce using rule 41 (arg -> lhs = arg .)
    RESCUE          reduce using rule 41 (arg -> lhs = arg .)
    HASH_ROCKET     reduce using rule 41 (arg -> lhs = arg .)
    RKEY            reduce using rule 41 (arg -> lhs = arg .)
    LBRACKET        reduce using rule 41 (arg -> lhs = arg .)
    DOT             reduce using rule 41 (arg -> lhs = arg .)
    UNARY_OP        reduce using rule 41 (arg -> lhs = arg .)
    RPAREN          reduce using rule 41 (arg -> lhs = arg .)
    WHEN            reduce using rule 41 (arg -> lhs = arg .)
    LKEY            reduce using rule 41 (arg -> lhs = arg .)
    END             reduce using rule 41 (arg -> lhs = arg .)
    ELSIF           reduce using rule 41 (arg -> lhs = arg .)
    ELSE            reduce using rule 41 (arg -> lhs = arg .)
    ENSURE          reduce using rule 41 (arg -> lhs = arg .)
    NOT_SYMBOL      reduce using rule 41 (arg -> lhs = arg .)
    COMPLEMENT_OP   reduce using rule 41 (arg -> lhs = arg .)
    DEFINED_OP      reduce using rule 41 (arg -> lhs = arg .)
    RETURN          reduce using rule 41 (arg -> lhs = arg .)
    YIELD           reduce using rule 41 (arg -> lhs = arg .)
    CASE            reduce using rule 41 (arg -> lhs = arg .)
    FOR             reduce using rule 41 (arg -> lhs = arg .)
    BEGIN           reduce using rule 41 (arg -> lhs = arg .)
    CLASS           reduce using rule 41 (arg -> lhs = arg .)
    MODULE          reduce using rule 41 (arg -> lhs = arg .)
    DEF             reduce using rule 41 (arg -> lhs = arg .)
    PUTS            reduce using rule 41 (arg -> lhs = arg .)
    VAR_GLOBAL      reduce using rule 41 (arg -> lhs = arg .)
    VAR_LOCAL       reduce using rule 41 (arg -> lhs = arg .)
    VAR_INSTANCE    reduce using rule 41 (arg -> lhs = arg .)
    VAR_CLASS       reduce using rule 41 (arg -> lhs = arg .)
    SYMBOL          reduce using rule 41 (arg -> lhs = arg .)
    STRING          reduce using rule 41 (arg -> lhs = arg .)
    IDENTIFIER      reduce using rule 41 (arg -> lhs = arg .)
    SUPER           reduce using rule 41 (arg -> lhs = arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! PLUS            [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! MINUS           [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! TIMES           [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! DIVIDE          [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! MOD             [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! POW             [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! OR_SYMBOL       [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! GREATERTHAN     [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! LESSERTHAN      [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! EQUAL           [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! NOTEQUAL        [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! AND             [ reduce using rule 41 (arg -> lhs = arg .) ]
  ! OR              [ reduce using rule 41 (arg -> lhs = arg .) ]


state 273

    (42) arg -> lhs op_asgn arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 42 (arg -> lhs op_asgn arg .)
    WHILE           reduce using rule 42 (arg -> lhs op_asgn arg .)
    UNLESS          reduce using rule 42 (arg -> lhs op_asgn arg .)
    UNTIL           reduce using rule 42 (arg -> lhs op_asgn arg .)
    TERM            reduce using rule 42 (arg -> lhs op_asgn arg .)
    NUMBER          reduce using rule 42 (arg -> lhs op_asgn arg .)
    LPAREN          reduce using rule 42 (arg -> lhs op_asgn arg .)
    $end            reduce using rule 42 (arg -> lhs op_asgn arg .)
    COMMA           reduce using rule 42 (arg -> lhs op_asgn arg .)
    RBRACKET        reduce using rule 42 (arg -> lhs op_asgn arg .)
    THEN            reduce using rule 42 (arg -> lhs op_asgn arg .)
    DO              reduce using rule 42 (arg -> lhs op_asgn arg .)
    RESCUE          reduce using rule 42 (arg -> lhs op_asgn arg .)
    HASH_ROCKET     reduce using rule 42 (arg -> lhs op_asgn arg .)
    RKEY            reduce using rule 42 (arg -> lhs op_asgn arg .)
    LBRACKET        reduce using rule 42 (arg -> lhs op_asgn arg .)
    DOT             reduce using rule 42 (arg -> lhs op_asgn arg .)
    UNARY_OP        reduce using rule 42 (arg -> lhs op_asgn arg .)
    RPAREN          reduce using rule 42 (arg -> lhs op_asgn arg .)
    WHEN            reduce using rule 42 (arg -> lhs op_asgn arg .)
    LKEY            reduce using rule 42 (arg -> lhs op_asgn arg .)
    END             reduce using rule 42 (arg -> lhs op_asgn arg .)
    ELSIF           reduce using rule 42 (arg -> lhs op_asgn arg .)
    ELSE            reduce using rule 42 (arg -> lhs op_asgn arg .)
    ENSURE          reduce using rule 42 (arg -> lhs op_asgn arg .)
    NOT_SYMBOL      reduce using rule 42 (arg -> lhs op_asgn arg .)
    COMPLEMENT_OP   reduce using rule 42 (arg -> lhs op_asgn arg .)
    DEFINED_OP      reduce using rule 42 (arg -> lhs op_asgn arg .)
    RETURN          reduce using rule 42 (arg -> lhs op_asgn arg .)
    YIELD           reduce using rule 42 (arg -> lhs op_asgn arg .)
    CASE            reduce using rule 42 (arg -> lhs op_asgn arg .)
    FOR             reduce using rule 42 (arg -> lhs op_asgn arg .)
    BEGIN           reduce using rule 42 (arg -> lhs op_asgn arg .)
    CLASS           reduce using rule 42 (arg -> lhs op_asgn arg .)
    MODULE          reduce using rule 42 (arg -> lhs op_asgn arg .)
    DEF             reduce using rule 42 (arg -> lhs op_asgn arg .)
    PUTS            reduce using rule 42 (arg -> lhs op_asgn arg .)
    VAR_GLOBAL      reduce using rule 42 (arg -> lhs op_asgn arg .)
    VAR_LOCAL       reduce using rule 42 (arg -> lhs op_asgn arg .)
    VAR_INSTANCE    reduce using rule 42 (arg -> lhs op_asgn arg .)
    VAR_CLASS       reduce using rule 42 (arg -> lhs op_asgn arg .)
    SYMBOL          reduce using rule 42 (arg -> lhs op_asgn arg .)
    STRING          reduce using rule 42 (arg -> lhs op_asgn arg .)
    IDENTIFIER      reduce using rule 42 (arg -> lhs op_asgn arg .)
    SUPER           reduce using rule 42 (arg -> lhs op_asgn arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! PLUS            [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! MINUS           [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! TIMES           [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! DIVIDE          [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! MOD             [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! POW             [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! OR_SYMBOL       [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! GREATERTHAN     [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! LESSERTHAN      [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! EQUAL           [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! NOTEQUAL        [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! AND             [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]
  ! OR              [ reduce using rule 42 (arg -> lhs op_asgn arg .) ]


state 274

    (101) primary -> function LKEY compstmt . LKEY

    LKEY            shift and go to state 391


state 275

    (102) primary -> function LKEY OR_SYMBOL . OR_SYMBOL compstmt LKEY
    (103) primary -> function LKEY OR_SYMBOL . block_var OR_SYMBOL compstmt LKEY
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    OR_SYMBOL       shift and go to state 392
    TIMES           shift and go to state 45
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    function                       shift and go to state 80
    block_var                      shift and go to state 393
    lhs                            shift and go to state 204
    mlhs                           shift and go to state 72
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    operation                      shift and go to state 82

state 276

    (149) lhs -> primary LBRACKET RBRACKET .
    (83) primary -> primary LBRACKET RBRACKET .

  ! reduce/reduce conflict for LBRACKET resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for TIMES resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNLESS resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNTIL resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for LKEY resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for YIELD resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for BEGIN resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for CLASS resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for MODULE resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for STRING resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for SUPER resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
    =               reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    PLUS_EQUAL      reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    MINUS_EQUAL     reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    TIMES_EQUAL     reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    MOD_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    POW_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    XOR_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    AND_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    OR_EQUAL        reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    IN              reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DOT             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    PLUS            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MINUS           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    TIMES           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MOD             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    POW             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    EQUAL           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    AND             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OR              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    IF              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    WHILE           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNLESS          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNTIL           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    TERM            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NUMBER          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LPAREN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    $end            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMMA           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RESCUE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RKEY            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RPAREN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    THEN            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DO              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    WHEN            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LKEY            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    END             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ELSIF           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ELSE            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ENSURE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RETURN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    YIELD           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CASE            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    FOR             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BEGIN           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CLASS           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MODULE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DEF             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    PUTS            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    STRING          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    SUPER           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)

  ! COMMA           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RPAREN          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! OR_SYMBOL       [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! TIMES           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_GLOBAL      [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_LOCAL       [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_INSTANCE    [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_CLASS       [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LPAREN          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNARY_OP        [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LKEY            [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RETURN          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! YIELD           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! DEFINED_OP      [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! IF              [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNLESS          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! WHILE           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNTIL           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! CASE            [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! FOR             [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! BEGIN           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! CLASS           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! MODULE          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! DEF             [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! PUTS            [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! SYMBOL          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! STRING          [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! IDENTIFIER      [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]
  ! SUPER           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]


state 277

    (150) lhs -> primary LBRACKET args . RBRACKET
    (84) primary -> primary LBRACKET args . RBRACKET

    RBRACKET        shift and go to state 394


state 278

    (151) lhs -> primary DOT IDENTIFIER .
    (220) operation -> IDENTIFIER .
    (221) operation -> IDENTIFIER . NOT_SYMBOL
    (222) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LPAREN resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 151 (lhs -> primary DOT IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    =               reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    PLUS_EQUAL      reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    MINUS_EQUAL     reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    TIMES_EQUAL     reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    DIVIDE_EQUAL    reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    MOD_EQUAL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    POW_EQUAL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    SINGLE_AND_EQUAL reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    SINGLE_OR_EQUAL reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    XOR_EQUAL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    BINARY_LEFT_EQUAL reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    BINARY_RIGHT_EQUAL reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    AND_EQUAL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    OR_EQUAL        reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    COMMA           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    RBRACKET        reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    IN              reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    RPAREN          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    OR_SYMBOL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    TIMES           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    VAR_LOCAL       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    VAR_CLASS       reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    LPAREN          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    UNARY_OP        reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    LBRACKET        reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    LKEY            reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    RETURN          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    YIELD           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    DEFINED_OP      reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    IF              reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    UNLESS          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    WHILE           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    UNTIL           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    CASE            reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    FOR             reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    BEGIN           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    CLASS           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    MODULE          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    DEF             reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    PUTS            reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    NUMBER          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    SYMBOL          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    STRING          reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    SUPER           reduce using rule 151 (lhs -> primary DOT IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 220 (operation -> IDENTIFIER .)
    PLUS            reduce using rule 220 (operation -> IDENTIFIER .)
    MINUS           reduce using rule 220 (operation -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 220 (operation -> IDENTIFIER .)
    DO              reduce using rule 220 (operation -> IDENTIFIER .)
    TERM            reduce using rule 220 (operation -> IDENTIFIER .)
    DOT             reduce using rule 220 (operation -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 220 (operation -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 220 (operation -> IDENTIFIER .)
    DIVIDE          reduce using rule 220 (operation -> IDENTIFIER .)
    MOD             reduce using rule 220 (operation -> IDENTIFIER .)
    POW             reduce using rule 220 (operation -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 220 (operation -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 220 (operation -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 220 (operation -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 220 (operation -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 220 (operation -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 220 (operation -> IDENTIFIER .)
    EQUAL           reduce using rule 220 (operation -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 220 (operation -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 220 (operation -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 220 (operation -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 220 (operation -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 220 (operation -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 220 (operation -> IDENTIFIER .)
    AND             reduce using rule 220 (operation -> IDENTIFIER .)
    OR              reduce using rule 220 (operation -> IDENTIFIER .)
    $end            reduce using rule 220 (operation -> IDENTIFIER .)
    RESCUE          reduce using rule 220 (operation -> IDENTIFIER .)
    WHEN            reduce using rule 220 (operation -> IDENTIFIER .)
    THEN            reduce using rule 220 (operation -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 220 (operation -> IDENTIFIER .)
    RKEY            reduce using rule 220 (operation -> IDENTIFIER .)
    END             reduce using rule 220 (operation -> IDENTIFIER .)
    ELSIF           reduce using rule 220 (operation -> IDENTIFIER .)
    ELSE            reduce using rule 220 (operation -> IDENTIFIER .)
    ENSURE          reduce using rule 220 (operation -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 152
    OPTIONAL_SYMBOL shift and go to state 153

  ! LPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! OR_SYMBOL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]


state 279

    (35) function -> primary DOT operation . LPAREN call_args RPAREN
    (37) function -> primary DOT operation .
    (31) command -> primary DOT operation . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 395
    DO              reduce using rule 37 (function -> primary DOT operation .)
    TERM            reduce using rule 37 (function -> primary DOT operation .)
    DOT             reduce using rule 37 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 37 (function -> primary DOT operation .)
    MOD             reduce using rule 37 (function -> primary DOT operation .)
    POW             reduce using rule 37 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    EQUAL           reduce using rule 37 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    AND             reduce using rule 37 (function -> primary DOT operation .)
    OR              reduce using rule 37 (function -> primary DOT operation .)
    $end            reduce using rule 37 (function -> primary DOT operation .)
    RESCUE          reduce using rule 37 (function -> primary DOT operation .)
    RPAREN          reduce using rule 37 (function -> primary DOT operation .)
    WHEN            reduce using rule 37 (function -> primary DOT operation .)
    COMMA           reduce using rule 37 (function -> primary DOT operation .)
    RBRACKET        reduce using rule 37 (function -> primary DOT operation .)
    THEN            reduce using rule 37 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary DOT operation .)
    RKEY            reduce using rule 37 (function -> primary DOT operation .)
    END             reduce using rule 37 (function -> primary DOT operation .)
    ELSIF           reduce using rule 37 (function -> primary DOT operation .)
    ELSE            reduce using rule 37 (function -> primary DOT operation .)
    ENSURE          reduce using rule 37 (function -> primary DOT operation .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! NUMBER          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! LPAREN          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! LBRACKET        [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNARY_OP        [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! PLUS            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! MINUS           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! TIMES           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! IF              [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! WHILE           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNLESS          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNTIL           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! NOT_SYMBOL      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! COMPLEMENT_OP   [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! DEFINED_OP      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! RETURN          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! YIELD           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! CASE            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! FOR             [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! BEGIN           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! CLASS           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! MODULE          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! DEF             [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! PUTS            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_GLOBAL      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_LOCAL       [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_INSTANCE    [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_CLASS       [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! SYMBOL          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! STRING          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! IDENTIFIER      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! SUPER           [ reduce using rule 37 (function -> primary DOT operation .) ]

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 396
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 280

    (36) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP operation .
    (32) command -> primary UNARY_OP operation . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 397
    DO              reduce using rule 38 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 38 (function -> primary UNARY_OP operation .)
    DOT             reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 38 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 38 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 38 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 38 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 38 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 38 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 38 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 38 (function -> primary UNARY_OP operation .)
    RBRACKET        reduce using rule 38 (function -> primary UNARY_OP operation .)
    THEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 38 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 38 (function -> primary UNARY_OP operation .)
    END             reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 38 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! NUMBER          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! LPAREN          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! LBRACKET        [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNARY_OP        [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! PLUS            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! MINUS           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! TIMES           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! IF              [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! WHILE           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNLESS          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNTIL           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! NOT_SYMBOL      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! COMPLEMENT_OP   [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! DEFINED_OP      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! RETURN          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! YIELD           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! CASE            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! FOR             [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! BEGIN           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! CLASS           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! MODULE          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! DEF             [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! PUTS            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_GLOBAL      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_LOCAL       [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_INSTANCE    [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_CLASS       [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! SYMBOL          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! STRING          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! IDENTIFIER      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! SUPER           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 398
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 281

    (81) primary -> primary UNARY_OP IDENTIFIER .
    (220) operation -> IDENTIFIER .
    (221) operation -> IDENTIFIER . NOT_SYMBOL
    (222) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LPAREN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMPLEMENT_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for TERM resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MOD resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for POW resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_XOR_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMBINED_COMPARISON_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CASE_EQUALITY resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MATCHED_STRINGS_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_LEFT_SHIFT_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RESCUE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for WHEN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for THEN resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for HASH_ROCKET resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RKEY resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ELSIF resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ENSURE resolved using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    LBRACKET        reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    DOT             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    UNARY_OP        reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    PLUS            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    MINUS           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    TIMES           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    DIVIDE          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    MOD             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    POW             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    OR_SYMBOL       reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    GREATERTHAN     reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    LESSERTHAN      reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    EQUAL           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    NOTEQUAL        reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    AND             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    OR              reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    IF              reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    WHILE           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    UNLESS          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    UNTIL           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    TERM            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    NUMBER          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    LPAREN          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    $end            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    COMMA           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RBRACKET        reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    THEN            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    DO              reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RESCUE          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    HASH_ROCKET     reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RKEY            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RPAREN          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    WHEN            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    LKEY            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    END             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    ELSIF           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    ELSE            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    ENSURE          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    DEFINED_OP      reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    RETURN          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    YIELD           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    CASE            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    FOR             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    BEGIN           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    CLASS           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    MODULE          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    DEF             reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    PUTS            reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_LOCAL       reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_CLASS       reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    SYMBOL          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    STRING          reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    IDENTIFIER      reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    SUPER           reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 152
    OPTIONAL_SYMBOL shift and go to state 153

  ! NOT_SYMBOL      [ reduce using rule 81 (primary -> primary UNARY_OP IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! TERM            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MOD             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! POW             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! OR_SYMBOL       [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_XOR_OP   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! GREATERTHAN     [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! GREATERTHANEQUAL [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LESSERTHAN      [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! LESSERTHANEQUAL [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! CASE_EQUALITY   [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! NOTEQUAL        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RESCUE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! WHEN            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! THEN            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! HASH_ROCKET     [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! RKEY            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! END             [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! ELSIF           [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 220 (operation -> IDENTIFIER .) ]
  ! ENSURE          [ reduce using rule 220 (operation -> IDENTIFIER .) ]


state 282

    (19) expr -> mlhs = mrhs .

    AND             reduce using rule 19 (expr -> mlhs = mrhs .)
    OR              reduce using rule 19 (expr -> mlhs = mrhs .)
    IF              reduce using rule 19 (expr -> mlhs = mrhs .)
    WHILE           reduce using rule 19 (expr -> mlhs = mrhs .)
    UNLESS          reduce using rule 19 (expr -> mlhs = mrhs .)
    UNTIL           reduce using rule 19 (expr -> mlhs = mrhs .)
    TERM            reduce using rule 19 (expr -> mlhs = mrhs .)
    NUMBER          reduce using rule 19 (expr -> mlhs = mrhs .)
    LPAREN          reduce using rule 19 (expr -> mlhs = mrhs .)
    $end            reduce using rule 19 (expr -> mlhs = mrhs .)
    THEN            reduce using rule 19 (expr -> mlhs = mrhs .)
    DO              reduce using rule 19 (expr -> mlhs = mrhs .)
    RESCUE          reduce using rule 19 (expr -> mlhs = mrhs .)
    LBRACKET        reduce using rule 19 (expr -> mlhs = mrhs .)
    DOT             reduce using rule 19 (expr -> mlhs = mrhs .)
    UNARY_OP        reduce using rule 19 (expr -> mlhs = mrhs .)
    RANGE_INCLUSIVE reduce using rule 19 (expr -> mlhs = mrhs .)
    RANGE_EXCLUSIVE reduce using rule 19 (expr -> mlhs = mrhs .)
    PLUS            reduce using rule 19 (expr -> mlhs = mrhs .)
    MINUS           reduce using rule 19 (expr -> mlhs = mrhs .)
    TIMES           reduce using rule 19 (expr -> mlhs = mrhs .)
    DIVIDE          reduce using rule 19 (expr -> mlhs = mrhs .)
    MOD             reduce using rule 19 (expr -> mlhs = mrhs .)
    POW             reduce using rule 19 (expr -> mlhs = mrhs .)
    OR_SYMBOL       reduce using rule 19 (expr -> mlhs = mrhs .)
    BINARY_XOR_OP   reduce using rule 19 (expr -> mlhs = mrhs .)
    BINARY_AND_OP   reduce using rule 19 (expr -> mlhs = mrhs .)
    COMBINED_COMPARISON_OP reduce using rule 19 (expr -> mlhs = mrhs .)
    GREATERTHAN     reduce using rule 19 (expr -> mlhs = mrhs .)
    GREATERTHANEQUAL reduce using rule 19 (expr -> mlhs = mrhs .)
    LESSERTHAN      reduce using rule 19 (expr -> mlhs = mrhs .)
    LESSERTHANEQUAL reduce using rule 19 (expr -> mlhs = mrhs .)
    EQUAL           reduce using rule 19 (expr -> mlhs = mrhs .)
    CASE_EQUALITY   reduce using rule 19 (expr -> mlhs = mrhs .)
    NOTEQUAL        reduce using rule 19 (expr -> mlhs = mrhs .)
    MATCHED_STRINGS_OP reduce using rule 19 (expr -> mlhs = mrhs .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 19 (expr -> mlhs = mrhs .)
    BINARY_LEFT_SHIFT_OP reduce using rule 19 (expr -> mlhs = mrhs .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 19 (expr -> mlhs = mrhs .)
    COMMA           reduce using rule 19 (expr -> mlhs = mrhs .)
    RBRACKET        reduce using rule 19 (expr -> mlhs = mrhs .)
    HASH_ROCKET     reduce using rule 19 (expr -> mlhs = mrhs .)
    RKEY            reduce using rule 19 (expr -> mlhs = mrhs .)
    RPAREN          reduce using rule 19 (expr -> mlhs = mrhs .)
    WHEN            reduce using rule 19 (expr -> mlhs = mrhs .)
    LKEY            reduce using rule 19 (expr -> mlhs = mrhs .)
    END             reduce using rule 19 (expr -> mlhs = mrhs .)
    ELSIF           reduce using rule 19 (expr -> mlhs = mrhs .)
    ELSE            reduce using rule 19 (expr -> mlhs = mrhs .)
    ENSURE          reduce using rule 19 (expr -> mlhs = mrhs .)
    NOT_SYMBOL      reduce using rule 19 (expr -> mlhs = mrhs .)
    COMPLEMENT_OP   reduce using rule 19 (expr -> mlhs = mrhs .)
    DEFINED_OP      reduce using rule 19 (expr -> mlhs = mrhs .)
    RETURN          reduce using rule 19 (expr -> mlhs = mrhs .)
    YIELD           reduce using rule 19 (expr -> mlhs = mrhs .)
    CASE            reduce using rule 19 (expr -> mlhs = mrhs .)
    FOR             reduce using rule 19 (expr -> mlhs = mrhs .)
    BEGIN           reduce using rule 19 (expr -> mlhs = mrhs .)
    CLASS           reduce using rule 19 (expr -> mlhs = mrhs .)
    MODULE          reduce using rule 19 (expr -> mlhs = mrhs .)
    DEF             reduce using rule 19 (expr -> mlhs = mrhs .)
    PUTS            reduce using rule 19 (expr -> mlhs = mrhs .)
    VAR_GLOBAL      reduce using rule 19 (expr -> mlhs = mrhs .)
    VAR_LOCAL       reduce using rule 19 (expr -> mlhs = mrhs .)
    VAR_INSTANCE    reduce using rule 19 (expr -> mlhs = mrhs .)
    VAR_CLASS       reduce using rule 19 (expr -> mlhs = mrhs .)
    SYMBOL          reduce using rule 19 (expr -> mlhs = mrhs .)
    STRING          reduce using rule 19 (expr -> mlhs = mrhs .)
    IDENTIFIER      reduce using rule 19 (expr -> mlhs = mrhs .)
    SUPER           reduce using rule 19 (expr -> mlhs = mrhs .)


state 283

    (143) mrhs -> args .
    (144) mrhs -> args . COMMA
    (145) mrhs -> args . TIMES
    (146) mrhs -> args . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
    DOT             reduce using rule 143 (mrhs -> args .)
    RANGE_INCLUSIVE reduce using rule 143 (mrhs -> args .)
    RANGE_EXCLUSIVE reduce using rule 143 (mrhs -> args .)
    DIVIDE          reduce using rule 143 (mrhs -> args .)
    MOD             reduce using rule 143 (mrhs -> args .)
    POW             reduce using rule 143 (mrhs -> args .)
    OR_SYMBOL       reduce using rule 143 (mrhs -> args .)
    BINARY_XOR_OP   reduce using rule 143 (mrhs -> args .)
    BINARY_AND_OP   reduce using rule 143 (mrhs -> args .)
    COMBINED_COMPARISON_OP reduce using rule 143 (mrhs -> args .)
    GREATERTHAN     reduce using rule 143 (mrhs -> args .)
    GREATERTHANEQUAL reduce using rule 143 (mrhs -> args .)
    LESSERTHAN      reduce using rule 143 (mrhs -> args .)
    LESSERTHANEQUAL reduce using rule 143 (mrhs -> args .)
    EQUAL           reduce using rule 143 (mrhs -> args .)
    CASE_EQUALITY   reduce using rule 143 (mrhs -> args .)
    NOTEQUAL        reduce using rule 143 (mrhs -> args .)
    MATCHED_STRINGS_OP reduce using rule 143 (mrhs -> args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 143 (mrhs -> args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 143 (mrhs -> args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 143 (mrhs -> args .)
    AND             reduce using rule 143 (mrhs -> args .)
    OR              reduce using rule 143 (mrhs -> args .)
    TERM            reduce using rule 143 (mrhs -> args .)
    $end            reduce using rule 143 (mrhs -> args .)
    RBRACKET        reduce using rule 143 (mrhs -> args .)
    THEN            reduce using rule 143 (mrhs -> args .)
    DO              reduce using rule 143 (mrhs -> args .)
    RESCUE          reduce using rule 143 (mrhs -> args .)
    HASH_ROCKET     reduce using rule 143 (mrhs -> args .)
    RKEY            reduce using rule 143 (mrhs -> args .)
    RPAREN          reduce using rule 143 (mrhs -> args .)
    WHEN            reduce using rule 143 (mrhs -> args .)
    END             reduce using rule 143 (mrhs -> args .)
    ELSIF           reduce using rule 143 (mrhs -> args .)
    ELSE            reduce using rule 143 (mrhs -> args .)
    ENSURE          reduce using rule 143 (mrhs -> args .)
    COMMA           shift and go to state 399
    TIMES           shift and go to state 400
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

  ! LBRACKET        [ reduce using rule 143 (mrhs -> args .) ]
  ! UNARY_OP        [ reduce using rule 143 (mrhs -> args .) ]
  ! PLUS            [ reduce using rule 143 (mrhs -> args .) ]
  ! MINUS           [ reduce using rule 143 (mrhs -> args .) ]
  ! TIMES           [ reduce using rule 143 (mrhs -> args .) ]
  ! IF              [ reduce using rule 143 (mrhs -> args .) ]
  ! WHILE           [ reduce using rule 143 (mrhs -> args .) ]
  ! UNLESS          [ reduce using rule 143 (mrhs -> args .) ]
  ! UNTIL           [ reduce using rule 143 (mrhs -> args .) ]
  ! NUMBER          [ reduce using rule 143 (mrhs -> args .) ]
  ! LPAREN          [ reduce using rule 143 (mrhs -> args .) ]
  ! COMMA           [ reduce using rule 143 (mrhs -> args .) ]
  ! LKEY            [ reduce using rule 143 (mrhs -> args .) ]
  ! NOT_SYMBOL      [ reduce using rule 143 (mrhs -> args .) ]
  ! COMPLEMENT_OP   [ reduce using rule 143 (mrhs -> args .) ]
  ! DEFINED_OP      [ reduce using rule 143 (mrhs -> args .) ]
  ! RETURN          [ reduce using rule 143 (mrhs -> args .) ]
  ! YIELD           [ reduce using rule 143 (mrhs -> args .) ]
  ! CASE            [ reduce using rule 143 (mrhs -> args .) ]
  ! FOR             [ reduce using rule 143 (mrhs -> args .) ]
  ! BEGIN           [ reduce using rule 143 (mrhs -> args .) ]
  ! CLASS           [ reduce using rule 143 (mrhs -> args .) ]
  ! MODULE          [ reduce using rule 143 (mrhs -> args .) ]
  ! DEF             [ reduce using rule 143 (mrhs -> args .) ]
  ! PUTS            [ reduce using rule 143 (mrhs -> args .) ]
  ! VAR_GLOBAL      [ reduce using rule 143 (mrhs -> args .) ]
  ! VAR_LOCAL       [ reduce using rule 143 (mrhs -> args .) ]
  ! VAR_INSTANCE    [ reduce using rule 143 (mrhs -> args .) ]
  ! VAR_CLASS       [ reduce using rule 143 (mrhs -> args .) ]
  ! SYMBOL          [ reduce using rule 143 (mrhs -> args .) ]
  ! STRING          [ reduce using rule 143 (mrhs -> args .) ]
  ! IDENTIFIER      [ reduce using rule 143 (mrhs -> args .) ]
  ! SUPER           [ reduce using rule 143 (mrhs -> args .) ]

    arg                            shift and go to state 401
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 284

    (147) mrhs -> TIMES . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 402
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 285

    (93) primary -> RETURN .
    (94) primary -> RETURN . LPAREN RPAREN
    (95) primary -> RETURN . LPAREN call_args RPAREN
    (20) expr -> RETURN . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 93 (primary -> RETURN .)
    COMMA           reduce using rule 93 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 93 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 93 (primary -> RETURN .)
    DIVIDE          reduce using rule 93 (primary -> RETURN .)
    MOD             reduce using rule 93 (primary -> RETURN .)
    POW             reduce using rule 93 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 93 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 93 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 93 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 93 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 93 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 93 (primary -> RETURN .)
    EQUAL           reduce using rule 93 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 93 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 93 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 93 (primary -> RETURN .)
    AND             reduce using rule 93 (primary -> RETURN .)
    OR              reduce using rule 93 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 93 (primary -> RETURN .)
    RPAREN          reduce using rule 93 (primary -> RETURN .)
    TERM            reduce using rule 93 (primary -> RETURN .)
    LPAREN          shift and go to state 156
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! UNARY_OP        [ reduce using rule 93 (primary -> RETURN .) ]
  ! LBRACKET        [ reduce using rule 93 (primary -> RETURN .) ]
  ! PLUS            [ reduce using rule 93 (primary -> RETURN .) ]
  ! MINUS           [ reduce using rule 93 (primary -> RETURN .) ]
  ! TIMES           [ reduce using rule 93 (primary -> RETURN .) ]
  ! BINARY_AND_OP   [ reduce using rule 93 (primary -> RETURN .) ]
  ! IF              [ reduce using rule 93 (primary -> RETURN .) ]
  ! WHILE           [ reduce using rule 93 (primary -> RETURN .) ]
  ! UNLESS          [ reduce using rule 93 (primary -> RETURN .) ]
  ! UNTIL           [ reduce using rule 93 (primary -> RETURN .) ]
  ! NUMBER          [ reduce using rule 93 (primary -> RETURN .) ]
  ! LPAREN          [ reduce using rule 93 (primary -> RETURN .) ]

    call_args                      shift and go to state 155
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 286

    (94) primary -> RETURN LPAREN RPAREN .

    LBRACKET        reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    DOT             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    UNARY_OP        reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    PLUS            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    MINUS           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    TIMES           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    DIVIDE          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    MOD             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    POW             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    BINARY_XOR_OP   reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    BINARY_AND_OP   reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    GREATERTHANEQUAL reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    LESSERTHAN      reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    LESSERTHANEQUAL reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    EQUAL           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    CASE_EQUALITY   reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    AND             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    OR              reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    IF              reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    WHILE           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    UNLESS          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    UNTIL           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    TERM            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    NUMBER          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    LPAREN          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    $end            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    COMMA           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RBRACKET        reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    THEN            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    DO              reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RESCUE          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    HASH_ROCKET     reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RKEY            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RPAREN          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    WHEN            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    LKEY            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    END             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    ELSIF           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    ELSE            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    ENSURE          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    COMPLEMENT_OP   reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    RETURN          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    YIELD           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    CASE            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    FOR             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    BEGIN           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    CLASS           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    MODULE          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    DEF             reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    PUTS            reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    SYMBOL          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    STRING          reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)
    SUPER           reduce using rule 94 (primary -> RETURN LPAREN RPAREN .)


state 287

    (95) primary -> RETURN LPAREN call_args . RPAREN

    RPAREN          shift and go to state 403


state 288

    (186) call_args -> TIMES . arg
    (187) call_args -> TIMES . arg COMMA BINARY_AND_OP arg
    (158) mlhs -> TIMES . lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 294
    lhs                            shift and go to state 404
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 289

    (189) call_args -> command .
    (29) call -> command .
    (25) expr -> command .

  ! reduce/reduce conflict for TERM resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (expr -> command .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (expr -> command .)
    DO              reduce using rule 29 (call -> command .)
    AND             reduce using rule 25 (expr -> command .)
    OR              reduce using rule 25 (expr -> command .)
    IF              reduce using rule 25 (expr -> command .)
    WHILE           reduce using rule 25 (expr -> command .)
    UNLESS          reduce using rule 25 (expr -> command .)
    UNTIL           reduce using rule 25 (expr -> command .)
    TERM            reduce using rule 25 (expr -> command .)
    NUMBER          reduce using rule 25 (expr -> command .)
    LPAREN          reduce using rule 25 (expr -> command .)
    RPAREN          reduce using rule 25 (expr -> command .)

  ! RPAREN          [ reduce using rule 189 (call_args -> command .) ]
  ! TERM            [ reduce using rule 29 (call -> command .) ]
  ! NUMBER          [ reduce using rule 29 (call -> command .) ]
  ! LPAREN          [ reduce using rule 29 (call -> command .) ]


state 290

    (96) primary -> YIELD .
    (97) primary -> YIELD . LPAREN RPAREN
    (98) primary -> YIELD . LPAREN call_args RPAREN
    (21) expr -> YIELD . call_args
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 96 (primary -> YIELD .)
    COMMA           reduce using rule 96 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 96 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 96 (primary -> YIELD .)
    DIVIDE          reduce using rule 96 (primary -> YIELD .)
    MOD             reduce using rule 96 (primary -> YIELD .)
    POW             reduce using rule 96 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 96 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 96 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 96 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 96 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 96 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 96 (primary -> YIELD .)
    EQUAL           reduce using rule 96 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 96 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 96 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 96 (primary -> YIELD .)
    AND             reduce using rule 96 (primary -> YIELD .)
    OR              reduce using rule 96 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 96 (primary -> YIELD .)
    RPAREN          reduce using rule 96 (primary -> YIELD .)
    TERM            reduce using rule 96 (primary -> YIELD .)
    LPAREN          shift and go to state 163
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! UNARY_OP        [ reduce using rule 96 (primary -> YIELD .) ]
  ! LBRACKET        [ reduce using rule 96 (primary -> YIELD .) ]
  ! PLUS            [ reduce using rule 96 (primary -> YIELD .) ]
  ! MINUS           [ reduce using rule 96 (primary -> YIELD .) ]
  ! TIMES           [ reduce using rule 96 (primary -> YIELD .) ]
  ! BINARY_AND_OP   [ reduce using rule 96 (primary -> YIELD .) ]
  ! IF              [ reduce using rule 96 (primary -> YIELD .) ]
  ! WHILE           [ reduce using rule 96 (primary -> YIELD .) ]
  ! UNLESS          [ reduce using rule 96 (primary -> YIELD .) ]
  ! UNTIL           [ reduce using rule 96 (primary -> YIELD .) ]
  ! NUMBER          [ reduce using rule 96 (primary -> YIELD .) ]
  ! LPAREN          [ reduce using rule 96 (primary -> YIELD .) ]

    call_args                      shift and go to state 162
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 291

    (100) primary -> function .
    (101) primary -> function . LKEY compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (28) call -> function .

  ! reduce/reduce conflict for TERM resolved using rule 28 (call -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 28 (call -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (call -> function .)
    DOT             reduce using rule 100 (primary -> function .)
    UNARY_OP        reduce using rule 100 (primary -> function .)
    LBRACKET        reduce using rule 100 (primary -> function .)
    COMMA           reduce using rule 100 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 100 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 100 (primary -> function .)
    PLUS            reduce using rule 100 (primary -> function .)
    MINUS           reduce using rule 100 (primary -> function .)
    TIMES           reduce using rule 100 (primary -> function .)
    DIVIDE          reduce using rule 100 (primary -> function .)
    MOD             reduce using rule 100 (primary -> function .)
    POW             reduce using rule 100 (primary -> function .)
    OR_SYMBOL       reduce using rule 100 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 100 (primary -> function .)
    BINARY_AND_OP   reduce using rule 100 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 100 (primary -> function .)
    GREATERTHAN     reduce using rule 100 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 100 (primary -> function .)
    LESSERTHAN      reduce using rule 100 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 100 (primary -> function .)
    EQUAL           reduce using rule 100 (primary -> function .)
    CASE_EQUALITY   reduce using rule 100 (primary -> function .)
    NOTEQUAL        reduce using rule 100 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 100 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 100 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 100 (primary -> function .)
    AND             reduce using rule 100 (primary -> function .)
    OR              reduce using rule 100 (primary -> function .)
    HASH_ROCKET     reduce using rule 100 (primary -> function .)
    RPAREN          reduce using rule 100 (primary -> function .)
    IF              reduce using rule 100 (primary -> function .)
    WHILE           reduce using rule 100 (primary -> function .)
    UNLESS          reduce using rule 100 (primary -> function .)
    UNTIL           reduce using rule 100 (primary -> function .)
    LKEY            shift and go to state 148
    DO              reduce using rule 28 (call -> function .)
    TERM            reduce using rule 28 (call -> function .)
    NUMBER          reduce using rule 28 (call -> function .)
    LPAREN          reduce using rule 28 (call -> function .)

  ! TERM            [ reduce using rule 100 (primary -> function .) ]
  ! NUMBER          [ reduce using rule 100 (primary -> function .) ]
  ! LPAREN          [ reduce using rule 100 (primary -> function .) ]


state 292

    (175) call_args -> args COMMA . assocs
    (176) call_args -> args COMMA . TIMES arg
    (177) call_args -> args COMMA . BINARY_AND_OP arg
    (178) call_args -> args COMMA . assocs COMMA TIMES arg
    (179) call_args -> args COMMA . assocs COMMA BINARY_AND_OP arg
    (180) call_args -> args COMMA . TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> args COMMA . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (173) assoc -> . arg HASH_ROCKET arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 406
    BINARY_AND_OP   shift and go to state 407
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    assocs                         shift and go to state 405
    arg                            shift and go to state 389
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 293

    (183) call_args -> assocs COMMA . TIMES arg
    (184) call_args -> assocs COMMA . BINARY_AND_OP arg
    (185) call_args -> assocs COMMA . TIMES arg COMMA BINARY_AND_OP arg

    TIMES           shift and go to state 408
    BINARY_AND_OP   shift and go to state 409


state 294

    (186) call_args -> TIMES arg .
    (187) call_args -> TIMES arg . COMMA BINARY_AND_OP arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 186 (call_args -> TIMES arg .)
    DOT             reduce using rule 186 (call_args -> TIMES arg .)
    UNARY_OP        reduce using rule 186 (call_args -> TIMES arg .)
    IF              reduce using rule 186 (call_args -> TIMES arg .)
    WHILE           reduce using rule 186 (call_args -> TIMES arg .)
    UNLESS          reduce using rule 186 (call_args -> TIMES arg .)
    UNTIL           reduce using rule 186 (call_args -> TIMES arg .)
    TERM            reduce using rule 186 (call_args -> TIMES arg .)
    NUMBER          reduce using rule 186 (call_args -> TIMES arg .)
    LPAREN          reduce using rule 186 (call_args -> TIMES arg .)
    $end            reduce using rule 186 (call_args -> TIMES arg .)
    RBRACKET        reduce using rule 186 (call_args -> TIMES arg .)
    THEN            reduce using rule 186 (call_args -> TIMES arg .)
    DO              reduce using rule 186 (call_args -> TIMES arg .)
    RESCUE          reduce using rule 186 (call_args -> TIMES arg .)
    HASH_ROCKET     reduce using rule 186 (call_args -> TIMES arg .)
    RKEY            reduce using rule 186 (call_args -> TIMES arg .)
    RPAREN          reduce using rule 186 (call_args -> TIMES arg .)
    WHEN            reduce using rule 186 (call_args -> TIMES arg .)
    LKEY            reduce using rule 186 (call_args -> TIMES arg .)
    END             reduce using rule 186 (call_args -> TIMES arg .)
    ELSIF           reduce using rule 186 (call_args -> TIMES arg .)
    ELSE            reduce using rule 186 (call_args -> TIMES arg .)
    ENSURE          reduce using rule 186 (call_args -> TIMES arg .)
    NOT_SYMBOL      reduce using rule 186 (call_args -> TIMES arg .)
    COMPLEMENT_OP   reduce using rule 186 (call_args -> TIMES arg .)
    DEFINED_OP      reduce using rule 186 (call_args -> TIMES arg .)
    RETURN          reduce using rule 186 (call_args -> TIMES arg .)
    YIELD           reduce using rule 186 (call_args -> TIMES arg .)
    CASE            reduce using rule 186 (call_args -> TIMES arg .)
    FOR             reduce using rule 186 (call_args -> TIMES arg .)
    BEGIN           reduce using rule 186 (call_args -> TIMES arg .)
    CLASS           reduce using rule 186 (call_args -> TIMES arg .)
    MODULE          reduce using rule 186 (call_args -> TIMES arg .)
    DEF             reduce using rule 186 (call_args -> TIMES arg .)
    PUTS            reduce using rule 186 (call_args -> TIMES arg .)
    VAR_GLOBAL      reduce using rule 186 (call_args -> TIMES arg .)
    VAR_LOCAL       reduce using rule 186 (call_args -> TIMES arg .)
    VAR_INSTANCE    reduce using rule 186 (call_args -> TIMES arg .)
    VAR_CLASS       reduce using rule 186 (call_args -> TIMES arg .)
    SYMBOL          reduce using rule 186 (call_args -> TIMES arg .)
    STRING          reduce using rule 186 (call_args -> TIMES arg .)
    IDENTIFIER      reduce using rule 186 (call_args -> TIMES arg .)
    SUPER           reduce using rule 186 (call_args -> TIMES arg .)
    COMMA           shift and go to state 410
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! PLUS            [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! MINUS           [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! TIMES           [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! MOD             [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! POW             [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! EQUAL           [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! AND             [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! OR              [ reduce using rule 186 (call_args -> TIMES arg .) ]
  ! COMMA           [ reduce using rule 186 (call_args -> TIMES arg .) ]


state 295

    (188) call_args -> BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    DOT             reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    IF              reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    WHILE           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    UNLESS          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    UNTIL           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    TERM            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    NUMBER          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    LPAREN          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    $end            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    COMMA           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    THEN            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    DO              reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RESCUE          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RKEY            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RPAREN          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    WHEN            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    LKEY            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    END             reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    ELSIF           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    ELSE            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    ENSURE          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RETURN          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    YIELD           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    CASE            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    FOR             reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    BEGIN           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    CLASS           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    MODULE          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    DEF             reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    PUTS            reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    STRING          reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    SUPER           reduce using rule 188 (call_args -> BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 188 (call_args -> BINARY_AND_OP arg .) ]


state 296

    (97) primary -> YIELD LPAREN RPAREN .

    LBRACKET        reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    DOT             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    UNARY_OP        reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    PLUS            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    MINUS           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    TIMES           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    DIVIDE          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    MOD             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    POW             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    BINARY_XOR_OP   reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    BINARY_AND_OP   reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    GREATERTHANEQUAL reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    LESSERTHAN      reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    LESSERTHANEQUAL reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    EQUAL           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    CASE_EQUALITY   reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    AND             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    OR              reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    IF              reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    WHILE           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    UNLESS          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    UNTIL           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    TERM            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    NUMBER          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    LPAREN          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    $end            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    COMMA           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RBRACKET        reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    THEN            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    DO              reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RESCUE          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    HASH_ROCKET     reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RKEY            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RPAREN          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    WHEN            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    LKEY            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    END             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    ELSIF           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    ELSE            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    ENSURE          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    COMPLEMENT_OP   reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    RETURN          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    YIELD           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    CASE            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    FOR             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    BEGIN           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    CLASS           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    MODULE          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    DEF             reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    PUTS            reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    SYMBOL          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    STRING          reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)
    SUPER           reduce using rule 97 (primary -> YIELD LPAREN RPAREN .)


state 297

    (98) primary -> YIELD LPAREN call_args . RPAREN

    RPAREN          shift and go to state 411


state 298

    (43) arg -> arg RANGE_INCLUSIVE arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    WHILE           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    UNLESS          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    UNTIL           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    TERM            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    NUMBER          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    LPAREN          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    $end            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    COMMA           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RBRACKET        reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    THEN            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    DO              reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RESCUE          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    HASH_ROCKET     reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RKEY            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    LBRACKET        reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    DOT             reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    UNARY_OP        reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RPAREN          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    WHEN            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    LKEY            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    END             reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    ELSIF           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    ELSE            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    ENSURE          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    NOT_SYMBOL      reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    COMPLEMENT_OP   reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    DEFINED_OP      reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RETURN          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    YIELD           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    CASE            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    FOR             reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    BEGIN           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    CLASS           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    MODULE          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    DEF             reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    PUTS            reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_GLOBAL      reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_LOCAL       reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_INSTANCE    reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_CLASS       reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    SYMBOL          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    STRING          reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    IDENTIFIER      reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    SUPER           reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! PLUS            [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MINUS           [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! TIMES           [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! DIVIDE          [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MOD             [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! POW             [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! GREATERTHAN     [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! LESSERTHAN      [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! EQUAL           [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! NOTEQUAL        [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! AND             [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OR              [ reduce using rule 43 (arg -> arg RANGE_INCLUSIVE arg .) ]


state 299

    (44) arg -> arg RANGE_EXCLUSIVE arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    WHILE           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNLESS          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNTIL           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    TERM            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    NUMBER          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    LPAREN          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    $end            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    COMMA           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RBRACKET        reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    THEN            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    DO              reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RESCUE          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    HASH_ROCKET     reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RKEY            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    LBRACKET        reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    DOT             reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNARY_OP        reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RPAREN          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    WHEN            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    LKEY            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    END             reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    ELSIF           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    ELSE            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    ENSURE          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    NOT_SYMBOL      reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    COMPLEMENT_OP   reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    DEFINED_OP      reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RETURN          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    YIELD           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    CASE            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    FOR             reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    BEGIN           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    CLASS           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    MODULE          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    DEF             reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    PUTS            reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_GLOBAL      reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_LOCAL       reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_INSTANCE    reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_CLASS       reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    SYMBOL          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    STRING          reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    IDENTIFIER      reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    SUPER           reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! PLUS            [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MINUS           [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! TIMES           [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! DIVIDE          [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MOD             [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! POW             [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! GREATERTHAN     [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! LESSERTHAN      [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! EQUAL           [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! NOTEQUAL        [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! AND             [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OR              [ reduce using rule 44 (arg -> arg RANGE_EXCLUSIVE arg .) ]


state 300

    (45) arg -> arg PLUS arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 45 (arg -> arg PLUS arg .)
    WHILE           reduce using rule 45 (arg -> arg PLUS arg .)
    UNLESS          reduce using rule 45 (arg -> arg PLUS arg .)
    UNTIL           reduce using rule 45 (arg -> arg PLUS arg .)
    TERM            reduce using rule 45 (arg -> arg PLUS arg .)
    NUMBER          reduce using rule 45 (arg -> arg PLUS arg .)
    LPAREN          reduce using rule 45 (arg -> arg PLUS arg .)
    $end            reduce using rule 45 (arg -> arg PLUS arg .)
    COMMA           reduce using rule 45 (arg -> arg PLUS arg .)
    RBRACKET        reduce using rule 45 (arg -> arg PLUS arg .)
    THEN            reduce using rule 45 (arg -> arg PLUS arg .)
    DO              reduce using rule 45 (arg -> arg PLUS arg .)
    RESCUE          reduce using rule 45 (arg -> arg PLUS arg .)
    HASH_ROCKET     reduce using rule 45 (arg -> arg PLUS arg .)
    RKEY            reduce using rule 45 (arg -> arg PLUS arg .)
    LBRACKET        reduce using rule 45 (arg -> arg PLUS arg .)
    DOT             reduce using rule 45 (arg -> arg PLUS arg .)
    UNARY_OP        reduce using rule 45 (arg -> arg PLUS arg .)
    RPAREN          reduce using rule 45 (arg -> arg PLUS arg .)
    WHEN            reduce using rule 45 (arg -> arg PLUS arg .)
    LKEY            reduce using rule 45 (arg -> arg PLUS arg .)
    END             reduce using rule 45 (arg -> arg PLUS arg .)
    ELSIF           reduce using rule 45 (arg -> arg PLUS arg .)
    ELSE            reduce using rule 45 (arg -> arg PLUS arg .)
    ENSURE          reduce using rule 45 (arg -> arg PLUS arg .)
    NOT_SYMBOL      reduce using rule 45 (arg -> arg PLUS arg .)
    COMPLEMENT_OP   reduce using rule 45 (arg -> arg PLUS arg .)
    DEFINED_OP      reduce using rule 45 (arg -> arg PLUS arg .)
    RETURN          reduce using rule 45 (arg -> arg PLUS arg .)
    YIELD           reduce using rule 45 (arg -> arg PLUS arg .)
    CASE            reduce using rule 45 (arg -> arg PLUS arg .)
    FOR             reduce using rule 45 (arg -> arg PLUS arg .)
    BEGIN           reduce using rule 45 (arg -> arg PLUS arg .)
    CLASS           reduce using rule 45 (arg -> arg PLUS arg .)
    MODULE          reduce using rule 45 (arg -> arg PLUS arg .)
    DEF             reduce using rule 45 (arg -> arg PLUS arg .)
    PUTS            reduce using rule 45 (arg -> arg PLUS arg .)
    VAR_GLOBAL      reduce using rule 45 (arg -> arg PLUS arg .)
    VAR_LOCAL       reduce using rule 45 (arg -> arg PLUS arg .)
    VAR_INSTANCE    reduce using rule 45 (arg -> arg PLUS arg .)
    VAR_CLASS       reduce using rule 45 (arg -> arg PLUS arg .)
    SYMBOL          reduce using rule 45 (arg -> arg PLUS arg .)
    STRING          reduce using rule 45 (arg -> arg PLUS arg .)
    IDENTIFIER      reduce using rule 45 (arg -> arg PLUS arg .)
    SUPER           reduce using rule 45 (arg -> arg PLUS arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! PLUS            [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! MINUS           [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! TIMES           [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! DIVIDE          [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! MOD             [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! POW             [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! EQUAL           [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! AND             [ reduce using rule 45 (arg -> arg PLUS arg .) ]
  ! OR              [ reduce using rule 45 (arg -> arg PLUS arg .) ]


state 301

    (46) arg -> arg MINUS arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 46 (arg -> arg MINUS arg .)
    WHILE           reduce using rule 46 (arg -> arg MINUS arg .)
    UNLESS          reduce using rule 46 (arg -> arg MINUS arg .)
    UNTIL           reduce using rule 46 (arg -> arg MINUS arg .)
    TERM            reduce using rule 46 (arg -> arg MINUS arg .)
    NUMBER          reduce using rule 46 (arg -> arg MINUS arg .)
    LPAREN          reduce using rule 46 (arg -> arg MINUS arg .)
    $end            reduce using rule 46 (arg -> arg MINUS arg .)
    COMMA           reduce using rule 46 (arg -> arg MINUS arg .)
    RBRACKET        reduce using rule 46 (arg -> arg MINUS arg .)
    THEN            reduce using rule 46 (arg -> arg MINUS arg .)
    DO              reduce using rule 46 (arg -> arg MINUS arg .)
    RESCUE          reduce using rule 46 (arg -> arg MINUS arg .)
    HASH_ROCKET     reduce using rule 46 (arg -> arg MINUS arg .)
    RKEY            reduce using rule 46 (arg -> arg MINUS arg .)
    LBRACKET        reduce using rule 46 (arg -> arg MINUS arg .)
    DOT             reduce using rule 46 (arg -> arg MINUS arg .)
    UNARY_OP        reduce using rule 46 (arg -> arg MINUS arg .)
    RPAREN          reduce using rule 46 (arg -> arg MINUS arg .)
    WHEN            reduce using rule 46 (arg -> arg MINUS arg .)
    LKEY            reduce using rule 46 (arg -> arg MINUS arg .)
    END             reduce using rule 46 (arg -> arg MINUS arg .)
    ELSIF           reduce using rule 46 (arg -> arg MINUS arg .)
    ELSE            reduce using rule 46 (arg -> arg MINUS arg .)
    ENSURE          reduce using rule 46 (arg -> arg MINUS arg .)
    NOT_SYMBOL      reduce using rule 46 (arg -> arg MINUS arg .)
    COMPLEMENT_OP   reduce using rule 46 (arg -> arg MINUS arg .)
    DEFINED_OP      reduce using rule 46 (arg -> arg MINUS arg .)
    RETURN          reduce using rule 46 (arg -> arg MINUS arg .)
    YIELD           reduce using rule 46 (arg -> arg MINUS arg .)
    CASE            reduce using rule 46 (arg -> arg MINUS arg .)
    FOR             reduce using rule 46 (arg -> arg MINUS arg .)
    BEGIN           reduce using rule 46 (arg -> arg MINUS arg .)
    CLASS           reduce using rule 46 (arg -> arg MINUS arg .)
    MODULE          reduce using rule 46 (arg -> arg MINUS arg .)
    DEF             reduce using rule 46 (arg -> arg MINUS arg .)
    PUTS            reduce using rule 46 (arg -> arg MINUS arg .)
    VAR_GLOBAL      reduce using rule 46 (arg -> arg MINUS arg .)
    VAR_LOCAL       reduce using rule 46 (arg -> arg MINUS arg .)
    VAR_INSTANCE    reduce using rule 46 (arg -> arg MINUS arg .)
    VAR_CLASS       reduce using rule 46 (arg -> arg MINUS arg .)
    SYMBOL          reduce using rule 46 (arg -> arg MINUS arg .)
    STRING          reduce using rule 46 (arg -> arg MINUS arg .)
    IDENTIFIER      reduce using rule 46 (arg -> arg MINUS arg .)
    SUPER           reduce using rule 46 (arg -> arg MINUS arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! PLUS            [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! MINUS           [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! TIMES           [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! DIVIDE          [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! MOD             [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! POW             [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! EQUAL           [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! AND             [ reduce using rule 46 (arg -> arg MINUS arg .) ]
  ! OR              [ reduce using rule 46 (arg -> arg MINUS arg .) ]


state 302

    (47) arg -> arg TIMES arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 47 (arg -> arg TIMES arg .)
    WHILE           reduce using rule 47 (arg -> arg TIMES arg .)
    UNLESS          reduce using rule 47 (arg -> arg TIMES arg .)
    UNTIL           reduce using rule 47 (arg -> arg TIMES arg .)
    TERM            reduce using rule 47 (arg -> arg TIMES arg .)
    NUMBER          reduce using rule 47 (arg -> arg TIMES arg .)
    LPAREN          reduce using rule 47 (arg -> arg TIMES arg .)
    $end            reduce using rule 47 (arg -> arg TIMES arg .)
    COMMA           reduce using rule 47 (arg -> arg TIMES arg .)
    RBRACKET        reduce using rule 47 (arg -> arg TIMES arg .)
    THEN            reduce using rule 47 (arg -> arg TIMES arg .)
    DO              reduce using rule 47 (arg -> arg TIMES arg .)
    RESCUE          reduce using rule 47 (arg -> arg TIMES arg .)
    HASH_ROCKET     reduce using rule 47 (arg -> arg TIMES arg .)
    RKEY            reduce using rule 47 (arg -> arg TIMES arg .)
    LBRACKET        reduce using rule 47 (arg -> arg TIMES arg .)
    DOT             reduce using rule 47 (arg -> arg TIMES arg .)
    UNARY_OP        reduce using rule 47 (arg -> arg TIMES arg .)
    RPAREN          reduce using rule 47 (arg -> arg TIMES arg .)
    WHEN            reduce using rule 47 (arg -> arg TIMES arg .)
    LKEY            reduce using rule 47 (arg -> arg TIMES arg .)
    END             reduce using rule 47 (arg -> arg TIMES arg .)
    ELSIF           reduce using rule 47 (arg -> arg TIMES arg .)
    ELSE            reduce using rule 47 (arg -> arg TIMES arg .)
    ENSURE          reduce using rule 47 (arg -> arg TIMES arg .)
    NOT_SYMBOL      reduce using rule 47 (arg -> arg TIMES arg .)
    COMPLEMENT_OP   reduce using rule 47 (arg -> arg TIMES arg .)
    DEFINED_OP      reduce using rule 47 (arg -> arg TIMES arg .)
    RETURN          reduce using rule 47 (arg -> arg TIMES arg .)
    YIELD           reduce using rule 47 (arg -> arg TIMES arg .)
    CASE            reduce using rule 47 (arg -> arg TIMES arg .)
    FOR             reduce using rule 47 (arg -> arg TIMES arg .)
    BEGIN           reduce using rule 47 (arg -> arg TIMES arg .)
    CLASS           reduce using rule 47 (arg -> arg TIMES arg .)
    MODULE          reduce using rule 47 (arg -> arg TIMES arg .)
    DEF             reduce using rule 47 (arg -> arg TIMES arg .)
    PUTS            reduce using rule 47 (arg -> arg TIMES arg .)
    VAR_GLOBAL      reduce using rule 47 (arg -> arg TIMES arg .)
    VAR_LOCAL       reduce using rule 47 (arg -> arg TIMES arg .)
    VAR_INSTANCE    reduce using rule 47 (arg -> arg TIMES arg .)
    VAR_CLASS       reduce using rule 47 (arg -> arg TIMES arg .)
    SYMBOL          reduce using rule 47 (arg -> arg TIMES arg .)
    STRING          reduce using rule 47 (arg -> arg TIMES arg .)
    IDENTIFIER      reduce using rule 47 (arg -> arg TIMES arg .)
    SUPER           reduce using rule 47 (arg -> arg TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! PLUS            [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! MINUS           [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! TIMES           [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! MOD             [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! POW             [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! EQUAL           [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! AND             [ reduce using rule 47 (arg -> arg TIMES arg .) ]
  ! OR              [ reduce using rule 47 (arg -> arg TIMES arg .) ]


state 303

    (48) arg -> arg DIVIDE arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 48 (arg -> arg DIVIDE arg .)
    WHILE           reduce using rule 48 (arg -> arg DIVIDE arg .)
    UNLESS          reduce using rule 48 (arg -> arg DIVIDE arg .)
    UNTIL           reduce using rule 48 (arg -> arg DIVIDE arg .)
    TERM            reduce using rule 48 (arg -> arg DIVIDE arg .)
    NUMBER          reduce using rule 48 (arg -> arg DIVIDE arg .)
    LPAREN          reduce using rule 48 (arg -> arg DIVIDE arg .)
    $end            reduce using rule 48 (arg -> arg DIVIDE arg .)
    COMMA           reduce using rule 48 (arg -> arg DIVIDE arg .)
    RBRACKET        reduce using rule 48 (arg -> arg DIVIDE arg .)
    THEN            reduce using rule 48 (arg -> arg DIVIDE arg .)
    DO              reduce using rule 48 (arg -> arg DIVIDE arg .)
    RESCUE          reduce using rule 48 (arg -> arg DIVIDE arg .)
    HASH_ROCKET     reduce using rule 48 (arg -> arg DIVIDE arg .)
    RKEY            reduce using rule 48 (arg -> arg DIVIDE arg .)
    LBRACKET        reduce using rule 48 (arg -> arg DIVIDE arg .)
    DOT             reduce using rule 48 (arg -> arg DIVIDE arg .)
    UNARY_OP        reduce using rule 48 (arg -> arg DIVIDE arg .)
    RPAREN          reduce using rule 48 (arg -> arg DIVIDE arg .)
    WHEN            reduce using rule 48 (arg -> arg DIVIDE arg .)
    LKEY            reduce using rule 48 (arg -> arg DIVIDE arg .)
    END             reduce using rule 48 (arg -> arg DIVIDE arg .)
    ELSIF           reduce using rule 48 (arg -> arg DIVIDE arg .)
    ELSE            reduce using rule 48 (arg -> arg DIVIDE arg .)
    ENSURE          reduce using rule 48 (arg -> arg DIVIDE arg .)
    NOT_SYMBOL      reduce using rule 48 (arg -> arg DIVIDE arg .)
    COMPLEMENT_OP   reduce using rule 48 (arg -> arg DIVIDE arg .)
    DEFINED_OP      reduce using rule 48 (arg -> arg DIVIDE arg .)
    RETURN          reduce using rule 48 (arg -> arg DIVIDE arg .)
    YIELD           reduce using rule 48 (arg -> arg DIVIDE arg .)
    CASE            reduce using rule 48 (arg -> arg DIVIDE arg .)
    FOR             reduce using rule 48 (arg -> arg DIVIDE arg .)
    BEGIN           reduce using rule 48 (arg -> arg DIVIDE arg .)
    CLASS           reduce using rule 48 (arg -> arg DIVIDE arg .)
    MODULE          reduce using rule 48 (arg -> arg DIVIDE arg .)
    DEF             reduce using rule 48 (arg -> arg DIVIDE arg .)
    PUTS            reduce using rule 48 (arg -> arg DIVIDE arg .)
    VAR_GLOBAL      reduce using rule 48 (arg -> arg DIVIDE arg .)
    VAR_LOCAL       reduce using rule 48 (arg -> arg DIVIDE arg .)
    VAR_INSTANCE    reduce using rule 48 (arg -> arg DIVIDE arg .)
    VAR_CLASS       reduce using rule 48 (arg -> arg DIVIDE arg .)
    SYMBOL          reduce using rule 48 (arg -> arg DIVIDE arg .)
    STRING          reduce using rule 48 (arg -> arg DIVIDE arg .)
    IDENTIFIER      reduce using rule 48 (arg -> arg DIVIDE arg .)
    SUPER           reduce using rule 48 (arg -> arg DIVIDE arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! PLUS            [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! MINUS           [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! TIMES           [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! DIVIDE          [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! MOD             [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! POW             [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! GREATERTHAN     [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! LESSERTHAN      [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! EQUAL           [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! NOTEQUAL        [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! AND             [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]
  ! OR              [ reduce using rule 48 (arg -> arg DIVIDE arg .) ]


state 304

    (49) arg -> arg MOD arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 49 (arg -> arg MOD arg .)
    WHILE           reduce using rule 49 (arg -> arg MOD arg .)
    UNLESS          reduce using rule 49 (arg -> arg MOD arg .)
    UNTIL           reduce using rule 49 (arg -> arg MOD arg .)
    TERM            reduce using rule 49 (arg -> arg MOD arg .)
    NUMBER          reduce using rule 49 (arg -> arg MOD arg .)
    LPAREN          reduce using rule 49 (arg -> arg MOD arg .)
    $end            reduce using rule 49 (arg -> arg MOD arg .)
    COMMA           reduce using rule 49 (arg -> arg MOD arg .)
    RBRACKET        reduce using rule 49 (arg -> arg MOD arg .)
    THEN            reduce using rule 49 (arg -> arg MOD arg .)
    DO              reduce using rule 49 (arg -> arg MOD arg .)
    RESCUE          reduce using rule 49 (arg -> arg MOD arg .)
    HASH_ROCKET     reduce using rule 49 (arg -> arg MOD arg .)
    RKEY            reduce using rule 49 (arg -> arg MOD arg .)
    LBRACKET        reduce using rule 49 (arg -> arg MOD arg .)
    DOT             reduce using rule 49 (arg -> arg MOD arg .)
    UNARY_OP        reduce using rule 49 (arg -> arg MOD arg .)
    RPAREN          reduce using rule 49 (arg -> arg MOD arg .)
    WHEN            reduce using rule 49 (arg -> arg MOD arg .)
    LKEY            reduce using rule 49 (arg -> arg MOD arg .)
    END             reduce using rule 49 (arg -> arg MOD arg .)
    ELSIF           reduce using rule 49 (arg -> arg MOD arg .)
    ELSE            reduce using rule 49 (arg -> arg MOD arg .)
    ENSURE          reduce using rule 49 (arg -> arg MOD arg .)
    NOT_SYMBOL      reduce using rule 49 (arg -> arg MOD arg .)
    COMPLEMENT_OP   reduce using rule 49 (arg -> arg MOD arg .)
    DEFINED_OP      reduce using rule 49 (arg -> arg MOD arg .)
    RETURN          reduce using rule 49 (arg -> arg MOD arg .)
    YIELD           reduce using rule 49 (arg -> arg MOD arg .)
    CASE            reduce using rule 49 (arg -> arg MOD arg .)
    FOR             reduce using rule 49 (arg -> arg MOD arg .)
    BEGIN           reduce using rule 49 (arg -> arg MOD arg .)
    CLASS           reduce using rule 49 (arg -> arg MOD arg .)
    MODULE          reduce using rule 49 (arg -> arg MOD arg .)
    DEF             reduce using rule 49 (arg -> arg MOD arg .)
    PUTS            reduce using rule 49 (arg -> arg MOD arg .)
    VAR_GLOBAL      reduce using rule 49 (arg -> arg MOD arg .)
    VAR_LOCAL       reduce using rule 49 (arg -> arg MOD arg .)
    VAR_INSTANCE    reduce using rule 49 (arg -> arg MOD arg .)
    VAR_CLASS       reduce using rule 49 (arg -> arg MOD arg .)
    SYMBOL          reduce using rule 49 (arg -> arg MOD arg .)
    STRING          reduce using rule 49 (arg -> arg MOD arg .)
    IDENTIFIER      reduce using rule 49 (arg -> arg MOD arg .)
    SUPER           reduce using rule 49 (arg -> arg MOD arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! PLUS            [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! MINUS           [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! TIMES           [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! DIVIDE          [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! MOD             [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! POW             [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! OR_SYMBOL       [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! GREATERTHAN     [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! LESSERTHAN      [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! EQUAL           [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! NOTEQUAL        [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! AND             [ reduce using rule 49 (arg -> arg MOD arg .) ]
  ! OR              [ reduce using rule 49 (arg -> arg MOD arg .) ]


state 305

    (50) arg -> arg POW arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 50 (arg -> arg POW arg .)
    WHILE           reduce using rule 50 (arg -> arg POW arg .)
    UNLESS          reduce using rule 50 (arg -> arg POW arg .)
    UNTIL           reduce using rule 50 (arg -> arg POW arg .)
    TERM            reduce using rule 50 (arg -> arg POW arg .)
    NUMBER          reduce using rule 50 (arg -> arg POW arg .)
    LPAREN          reduce using rule 50 (arg -> arg POW arg .)
    $end            reduce using rule 50 (arg -> arg POW arg .)
    COMMA           reduce using rule 50 (arg -> arg POW arg .)
    RBRACKET        reduce using rule 50 (arg -> arg POW arg .)
    THEN            reduce using rule 50 (arg -> arg POW arg .)
    DO              reduce using rule 50 (arg -> arg POW arg .)
    RESCUE          reduce using rule 50 (arg -> arg POW arg .)
    HASH_ROCKET     reduce using rule 50 (arg -> arg POW arg .)
    RKEY            reduce using rule 50 (arg -> arg POW arg .)
    LBRACKET        reduce using rule 50 (arg -> arg POW arg .)
    DOT             reduce using rule 50 (arg -> arg POW arg .)
    UNARY_OP        reduce using rule 50 (arg -> arg POW arg .)
    RPAREN          reduce using rule 50 (arg -> arg POW arg .)
    WHEN            reduce using rule 50 (arg -> arg POW arg .)
    LKEY            reduce using rule 50 (arg -> arg POW arg .)
    END             reduce using rule 50 (arg -> arg POW arg .)
    ELSIF           reduce using rule 50 (arg -> arg POW arg .)
    ELSE            reduce using rule 50 (arg -> arg POW arg .)
    ENSURE          reduce using rule 50 (arg -> arg POW arg .)
    NOT_SYMBOL      reduce using rule 50 (arg -> arg POW arg .)
    COMPLEMENT_OP   reduce using rule 50 (arg -> arg POW arg .)
    DEFINED_OP      reduce using rule 50 (arg -> arg POW arg .)
    RETURN          reduce using rule 50 (arg -> arg POW arg .)
    YIELD           reduce using rule 50 (arg -> arg POW arg .)
    CASE            reduce using rule 50 (arg -> arg POW arg .)
    FOR             reduce using rule 50 (arg -> arg POW arg .)
    BEGIN           reduce using rule 50 (arg -> arg POW arg .)
    CLASS           reduce using rule 50 (arg -> arg POW arg .)
    MODULE          reduce using rule 50 (arg -> arg POW arg .)
    DEF             reduce using rule 50 (arg -> arg POW arg .)
    PUTS            reduce using rule 50 (arg -> arg POW arg .)
    VAR_GLOBAL      reduce using rule 50 (arg -> arg POW arg .)
    VAR_LOCAL       reduce using rule 50 (arg -> arg POW arg .)
    VAR_INSTANCE    reduce using rule 50 (arg -> arg POW arg .)
    VAR_CLASS       reduce using rule 50 (arg -> arg POW arg .)
    SYMBOL          reduce using rule 50 (arg -> arg POW arg .)
    STRING          reduce using rule 50 (arg -> arg POW arg .)
    IDENTIFIER      reduce using rule 50 (arg -> arg POW arg .)
    SUPER           reduce using rule 50 (arg -> arg POW arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! PLUS            [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! MINUS           [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! TIMES           [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! DIVIDE          [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! MOD             [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! POW             [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! OR_SYMBOL       [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! GREATERTHAN     [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! LESSERTHAN      [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! EQUAL           [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! NOTEQUAL        [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! AND             [ reduce using rule 50 (arg -> arg POW arg .) ]
  ! OR              [ reduce using rule 50 (arg -> arg POW arg .) ]


state 306

    (53) arg -> arg OR_SYMBOL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    WHILE           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    UNLESS          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    UNTIL           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    TERM            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    NUMBER          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    LPAREN          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    $end            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    COMMA           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RBRACKET        reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    THEN            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    DO              reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RESCUE          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    HASH_ROCKET     reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RKEY            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    LBRACKET        reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    DOT             reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    UNARY_OP        reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RPAREN          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    WHEN            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    LKEY            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    END             reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    ELSIF           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    ELSE            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    ENSURE          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    NOT_SYMBOL      reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    COMPLEMENT_OP   reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    DEFINED_OP      reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RETURN          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    YIELD           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    CASE            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    FOR             reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    BEGIN           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    CLASS           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    MODULE          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    DEF             reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    PUTS            reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    VAR_GLOBAL      reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    VAR_LOCAL       reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    VAR_INSTANCE    reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    VAR_CLASS       reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    SYMBOL          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    STRING          reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    IDENTIFIER      reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    SUPER           reduce using rule 53 (arg -> arg OR_SYMBOL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! PLUS            [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! MINUS           [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! TIMES           [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! DIVIDE          [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! MOD             [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! POW             [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! GREATERTHAN     [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! LESSERTHAN      [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! EQUAL           [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! NOTEQUAL        [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! AND             [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]
  ! OR              [ reduce using rule 53 (arg -> arg OR_SYMBOL arg .) ]


state 307

    (54) arg -> arg BINARY_XOR_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    WHILE           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    UNLESS          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    UNTIL           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    TERM            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    NUMBER          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    LPAREN          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    $end            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    COMMA           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RBRACKET        reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    THEN            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    DO              reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RESCUE          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    HASH_ROCKET     reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RKEY            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    LBRACKET        reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    DOT             reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    UNARY_OP        reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RPAREN          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    WHEN            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    LKEY            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    END             reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    ELSIF           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    ELSE            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    ENSURE          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    NOT_SYMBOL      reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    COMPLEMENT_OP   reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    DEFINED_OP      reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RETURN          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    YIELD           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    CASE            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    FOR             reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    BEGIN           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    CLASS           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    MODULE          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    DEF             reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    PUTS            reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    VAR_GLOBAL      reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    VAR_LOCAL       reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    VAR_INSTANCE    reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    VAR_CLASS       reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    SYMBOL          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    STRING          reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    IDENTIFIER      reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    SUPER           reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! PLUS            [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MINUS           [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! TIMES           [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! DIVIDE          [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MOD             [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! POW             [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! EQUAL           [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! AND             [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OR              [ reduce using rule 54 (arg -> arg BINARY_XOR_OP arg .) ]


state 308

    (55) arg -> arg BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    WHILE           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    UNLESS          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    UNTIL           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    TERM            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    NUMBER          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    LPAREN          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    $end            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    COMMA           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    THEN            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    DO              reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RESCUE          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RKEY            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    DOT             reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RPAREN          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    WHEN            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    LKEY            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    END             reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    ELSIF           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    ELSE            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    ENSURE          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RETURN          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    YIELD           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    CASE            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    FOR             reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    BEGIN           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    CLASS           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    MODULE          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    DEF             reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    PUTS            reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    STRING          reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    SUPER           reduce using rule 55 (arg -> arg BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 55 (arg -> arg BINARY_AND_OP arg .) ]


state 309

    (56) arg -> arg COMBINED_COMPARISON_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    WHILE           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNLESS          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNTIL           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    TERM            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    NUMBER          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LPAREN          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    $end            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    COMMA           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RBRACKET        reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    THEN            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DO              reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RESCUE          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    HASH_ROCKET     reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RKEY            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LBRACKET        reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DOT             reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNARY_OP        reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RPAREN          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    WHEN            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LKEY            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    END             reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ELSIF           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ELSE            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ENSURE          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    NOT_SYMBOL      reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    COMPLEMENT_OP   reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DEFINED_OP      reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RETURN          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    YIELD           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    CASE            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    FOR             reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    BEGIN           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    CLASS           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    MODULE          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DEF             reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    PUTS            reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_GLOBAL      reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_LOCAL       reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_INSTANCE    reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_CLASS       reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    SYMBOL          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    STRING          reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    IDENTIFIER      reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    SUPER           reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! PLUS            [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MINUS           [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! TIMES           [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! DIVIDE          [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MOD             [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! POW             [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! EQUAL           [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! AND             [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OR              [ reduce using rule 56 (arg -> arg COMBINED_COMPARISON_OP arg .) ]


state 310

    (57) arg -> arg GREATERTHAN arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    WHILE           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    UNLESS          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    UNTIL           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    TERM            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    NUMBER          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    LPAREN          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    $end            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    COMMA           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RBRACKET        reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    THEN            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    DO              reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RESCUE          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    HASH_ROCKET     reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RKEY            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    LBRACKET        reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    DOT             reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    UNARY_OP        reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RPAREN          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    WHEN            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    LKEY            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    END             reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    ELSIF           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    ELSE            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    ENSURE          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    NOT_SYMBOL      reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    COMPLEMENT_OP   reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    DEFINED_OP      reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RETURN          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    YIELD           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    CASE            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    FOR             reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    BEGIN           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    CLASS           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    MODULE          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    DEF             reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    PUTS            reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    VAR_GLOBAL      reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    VAR_LOCAL       reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    VAR_INSTANCE    reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    VAR_CLASS       reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    SYMBOL          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    STRING          reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    IDENTIFIER      reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    SUPER           reduce using rule 57 (arg -> arg GREATERTHAN arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! PLUS            [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! MINUS           [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! TIMES           [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! DIVIDE          [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! MOD             [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! POW             [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! OR_SYMBOL       [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! GREATERTHAN     [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! LESSERTHAN      [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! EQUAL           [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! NOTEQUAL        [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! AND             [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]
  ! OR              [ reduce using rule 57 (arg -> arg GREATERTHAN arg .) ]


state 311

    (58) arg -> arg GREATERTHANEQUAL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    WHILE           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    UNLESS          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    UNTIL           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    TERM            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    NUMBER          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    LPAREN          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    $end            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    COMMA           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RBRACKET        reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    THEN            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    DO              reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RESCUE          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    HASH_ROCKET     reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RKEY            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    LBRACKET        reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    DOT             reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    UNARY_OP        reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RPAREN          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    WHEN            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    LKEY            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    END             reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    ELSIF           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    ELSE            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    ENSURE          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    NOT_SYMBOL      reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    DEFINED_OP      reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RETURN          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    YIELD           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    CASE            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    FOR             reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    BEGIN           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    CLASS           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    MODULE          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    DEF             reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    PUTS            reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_GLOBAL      reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_LOCAL       reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_INSTANCE    reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_CLASS       reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    SYMBOL          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    STRING          reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    IDENTIFIER      reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    SUPER           reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! PLUS            [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MINUS           [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! TIMES           [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MOD             [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! POW             [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! AND             [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OR              [ reduce using rule 58 (arg -> arg GREATERTHANEQUAL arg .) ]


state 312

    (59) arg -> arg LESSERTHAN arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    WHILE           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    UNLESS          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    UNTIL           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    TERM            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    NUMBER          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    LPAREN          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    $end            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    COMMA           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RBRACKET        reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    THEN            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    DO              reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RESCUE          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    HASH_ROCKET     reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RKEY            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    LBRACKET        reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    DOT             reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    UNARY_OP        reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RPAREN          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    WHEN            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    LKEY            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    END             reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    ELSIF           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    ELSE            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    ENSURE          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    NOT_SYMBOL      reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    COMPLEMENT_OP   reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    DEFINED_OP      reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RETURN          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    YIELD           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    CASE            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    FOR             reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    BEGIN           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    CLASS           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    MODULE          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    DEF             reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    PUTS            reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    VAR_GLOBAL      reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    VAR_LOCAL       reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    VAR_INSTANCE    reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    VAR_CLASS       reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    SYMBOL          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    STRING          reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    IDENTIFIER      reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    SUPER           reduce using rule 59 (arg -> arg LESSERTHAN arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! PLUS            [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! MINUS           [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! TIMES           [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! DIVIDE          [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! MOD             [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! POW             [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! OR_SYMBOL       [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! GREATERTHAN     [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! LESSERTHAN      [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! EQUAL           [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! NOTEQUAL        [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! AND             [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]
  ! OR              [ reduce using rule 59 (arg -> arg LESSERTHAN arg .) ]


state 313

    (60) arg -> arg LESSERTHANEQUAL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    WHILE           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    UNLESS          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    UNTIL           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    TERM            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    NUMBER          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    LPAREN          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    $end            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    COMMA           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RBRACKET        reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    THEN            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    DO              reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RESCUE          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    HASH_ROCKET     reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RKEY            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    LBRACKET        reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    DOT             reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    UNARY_OP        reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RPAREN          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    WHEN            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    LKEY            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    END             reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    ELSIF           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    ELSE            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    ENSURE          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    NOT_SYMBOL      reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    DEFINED_OP      reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RETURN          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    YIELD           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    CASE            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    FOR             reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    BEGIN           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    CLASS           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    MODULE          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    DEF             reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    PUTS            reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_GLOBAL      reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_LOCAL       reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_INSTANCE    reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_CLASS       reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    SYMBOL          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    STRING          reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    IDENTIFIER      reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    SUPER           reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! PLUS            [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MINUS           [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! TIMES           [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MOD             [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! POW             [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! AND             [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OR              [ reduce using rule 60 (arg -> arg LESSERTHANEQUAL arg .) ]


state 314

    (61) arg -> arg EQUAL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 61 (arg -> arg EQUAL arg .)
    WHILE           reduce using rule 61 (arg -> arg EQUAL arg .)
    UNLESS          reduce using rule 61 (arg -> arg EQUAL arg .)
    UNTIL           reduce using rule 61 (arg -> arg EQUAL arg .)
    TERM            reduce using rule 61 (arg -> arg EQUAL arg .)
    NUMBER          reduce using rule 61 (arg -> arg EQUAL arg .)
    LPAREN          reduce using rule 61 (arg -> arg EQUAL arg .)
    $end            reduce using rule 61 (arg -> arg EQUAL arg .)
    COMMA           reduce using rule 61 (arg -> arg EQUAL arg .)
    RBRACKET        reduce using rule 61 (arg -> arg EQUAL arg .)
    THEN            reduce using rule 61 (arg -> arg EQUAL arg .)
    DO              reduce using rule 61 (arg -> arg EQUAL arg .)
    RESCUE          reduce using rule 61 (arg -> arg EQUAL arg .)
    HASH_ROCKET     reduce using rule 61 (arg -> arg EQUAL arg .)
    RKEY            reduce using rule 61 (arg -> arg EQUAL arg .)
    LBRACKET        reduce using rule 61 (arg -> arg EQUAL arg .)
    DOT             reduce using rule 61 (arg -> arg EQUAL arg .)
    UNARY_OP        reduce using rule 61 (arg -> arg EQUAL arg .)
    RPAREN          reduce using rule 61 (arg -> arg EQUAL arg .)
    WHEN            reduce using rule 61 (arg -> arg EQUAL arg .)
    LKEY            reduce using rule 61 (arg -> arg EQUAL arg .)
    END             reduce using rule 61 (arg -> arg EQUAL arg .)
    ELSIF           reduce using rule 61 (arg -> arg EQUAL arg .)
    ELSE            reduce using rule 61 (arg -> arg EQUAL arg .)
    ENSURE          reduce using rule 61 (arg -> arg EQUAL arg .)
    NOT_SYMBOL      reduce using rule 61 (arg -> arg EQUAL arg .)
    COMPLEMENT_OP   reduce using rule 61 (arg -> arg EQUAL arg .)
    DEFINED_OP      reduce using rule 61 (arg -> arg EQUAL arg .)
    RETURN          reduce using rule 61 (arg -> arg EQUAL arg .)
    YIELD           reduce using rule 61 (arg -> arg EQUAL arg .)
    CASE            reduce using rule 61 (arg -> arg EQUAL arg .)
    FOR             reduce using rule 61 (arg -> arg EQUAL arg .)
    BEGIN           reduce using rule 61 (arg -> arg EQUAL arg .)
    CLASS           reduce using rule 61 (arg -> arg EQUAL arg .)
    MODULE          reduce using rule 61 (arg -> arg EQUAL arg .)
    DEF             reduce using rule 61 (arg -> arg EQUAL arg .)
    PUTS            reduce using rule 61 (arg -> arg EQUAL arg .)
    VAR_GLOBAL      reduce using rule 61 (arg -> arg EQUAL arg .)
    VAR_LOCAL       reduce using rule 61 (arg -> arg EQUAL arg .)
    VAR_INSTANCE    reduce using rule 61 (arg -> arg EQUAL arg .)
    VAR_CLASS       reduce using rule 61 (arg -> arg EQUAL arg .)
    SYMBOL          reduce using rule 61 (arg -> arg EQUAL arg .)
    STRING          reduce using rule 61 (arg -> arg EQUAL arg .)
    IDENTIFIER      reduce using rule 61 (arg -> arg EQUAL arg .)
    SUPER           reduce using rule 61 (arg -> arg EQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! PLUS            [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! MINUS           [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! TIMES           [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! MOD             [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! POW             [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! EQUAL           [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! AND             [ reduce using rule 61 (arg -> arg EQUAL arg .) ]
  ! OR              [ reduce using rule 61 (arg -> arg EQUAL arg .) ]


state 315

    (62) arg -> arg CASE_EQUALITY arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    WHILE           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    UNLESS          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    UNTIL           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    TERM            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    NUMBER          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    LPAREN          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    $end            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    COMMA           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RBRACKET        reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    THEN            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    DO              reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RESCUE          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    HASH_ROCKET     reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RKEY            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    LBRACKET        reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    DOT             reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    UNARY_OP        reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RPAREN          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    WHEN            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    LKEY            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    END             reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    ELSIF           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    ELSE            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    ENSURE          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    NOT_SYMBOL      reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    COMPLEMENT_OP   reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    DEFINED_OP      reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RETURN          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    YIELD           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    CASE            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    FOR             reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    BEGIN           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    CLASS           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    MODULE          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    DEF             reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    PUTS            reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    VAR_GLOBAL      reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    VAR_LOCAL       reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    VAR_INSTANCE    reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    VAR_CLASS       reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    SYMBOL          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    STRING          reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    IDENTIFIER      reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    SUPER           reduce using rule 62 (arg -> arg CASE_EQUALITY arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! PLUS            [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! MINUS           [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! TIMES           [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! DIVIDE          [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! MOD             [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! POW             [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! OR_SYMBOL       [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! GREATERTHAN     [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! LESSERTHAN      [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! EQUAL           [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! NOTEQUAL        [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! AND             [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]
  ! OR              [ reduce using rule 62 (arg -> arg CASE_EQUALITY arg .) ]


state 316

    (63) arg -> arg NOTEQUAL arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    WHILE           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    UNLESS          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    UNTIL           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    TERM            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    NUMBER          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    LPAREN          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    $end            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    COMMA           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RBRACKET        reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    THEN            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    DO              reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RESCUE          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    HASH_ROCKET     reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RKEY            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    LBRACKET        reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    DOT             reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    UNARY_OP        reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RPAREN          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    WHEN            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    LKEY            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    END             reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    ELSIF           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    ELSE            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    ENSURE          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    NOT_SYMBOL      reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    DEFINED_OP      reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RETURN          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    YIELD           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    CASE            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    FOR             reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    BEGIN           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    CLASS           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    MODULE          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    DEF             reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    PUTS            reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    VAR_GLOBAL      reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    VAR_LOCAL       reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    VAR_INSTANCE    reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    VAR_CLASS       reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    SYMBOL          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    STRING          reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    IDENTIFIER      reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    SUPER           reduce using rule 63 (arg -> arg NOTEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! PLUS            [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! MINUS           [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! TIMES           [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! MOD             [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! POW             [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! AND             [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]
  ! OR              [ reduce using rule 63 (arg -> arg NOTEQUAL arg .) ]


state 317

    (64) arg -> arg MATCHED_STRINGS_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    WHILE           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNLESS          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNTIL           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    TERM            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    NUMBER          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    LPAREN          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    $end            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    COMMA           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RBRACKET        reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    THEN            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    DO              reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RESCUE          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    HASH_ROCKET     reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RKEY            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    LBRACKET        reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    DOT             reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNARY_OP        reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RPAREN          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    WHEN            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    LKEY            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    END             reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    ELSIF           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    ELSE            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    ENSURE          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    NOT_SYMBOL      reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    COMPLEMENT_OP   reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    DEFINED_OP      reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RETURN          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    YIELD           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    CASE            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    FOR             reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    BEGIN           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    CLASS           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    MODULE          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    DEF             reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    PUTS            reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_GLOBAL      reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_LOCAL       reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_INSTANCE    reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_CLASS       reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    SYMBOL          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    STRING          reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    IDENTIFIER      reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    SUPER           reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! PLUS            [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MINUS           [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! TIMES           [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! DIVIDE          [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MOD             [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! POW             [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! EQUAL           [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! AND             [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OR              [ reduce using rule 64 (arg -> arg MATCHED_STRINGS_OP arg .) ]


state 318

    (65) arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    WHILE           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNLESS          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNTIL           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    TERM            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    NUMBER          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LPAREN          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    $end            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    COMMA           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RBRACKET        reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    THEN            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DO              reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RESCUE          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    HASH_ROCKET     reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RKEY            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LBRACKET        reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DOT             reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNARY_OP        reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RPAREN          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    WHEN            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LKEY            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    END             reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ELSIF           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ELSE            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ENSURE          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    NOT_SYMBOL      reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    COMPLEMENT_OP   reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DEFINED_OP      reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RETURN          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    YIELD           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    CASE            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    FOR             reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    BEGIN           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    CLASS           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    MODULE          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DEF             reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    PUTS            reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_GLOBAL      reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_LOCAL       reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_INSTANCE    reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_CLASS       reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    SYMBOL          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    STRING          reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    IDENTIFIER      reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    SUPER           reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! PLUS            [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MINUS           [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! TIMES           [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! DIVIDE          [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MOD             [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! POW             [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! EQUAL           [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! AND             [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OR              [ reduce using rule 65 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]


state 319

    (68) arg -> arg BINARY_LEFT_SHIFT_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    WHILE           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNLESS          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNTIL           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    TERM            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    NUMBER          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LPAREN          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    $end            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    COMMA           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RBRACKET        reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    THEN            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DO              reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RESCUE          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    HASH_ROCKET     reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RKEY            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LBRACKET        reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DOT             reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNARY_OP        reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RPAREN          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    WHEN            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LKEY            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    END             reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ELSIF           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ELSE            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ENSURE          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    NOT_SYMBOL      reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    COMPLEMENT_OP   reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DEFINED_OP      reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RETURN          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    YIELD           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    CASE            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    FOR             reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    BEGIN           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    CLASS           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    MODULE          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DEF             reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    PUTS            reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_GLOBAL      reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_LOCAL       reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_INSTANCE    reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_CLASS       reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    SYMBOL          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    STRING          reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    IDENTIFIER      reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    SUPER           reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! PLUS            [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MINUS           [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! TIMES           [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MOD             [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! POW             [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! EQUAL           [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! AND             [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OR              [ reduce using rule 68 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]


state 320

    (69) arg -> arg BINARY_RIGHT_SHIFT_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    WHILE           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNLESS          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNTIL           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    TERM            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    NUMBER          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LPAREN          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    $end            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    COMMA           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RBRACKET        reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    THEN            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DO              reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RESCUE          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    HASH_ROCKET     reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RKEY            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LBRACKET        reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DOT             reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNARY_OP        reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RPAREN          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    WHEN            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LKEY            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    END             reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ELSIF           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ELSE            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ENSURE          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    NOT_SYMBOL      reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    COMPLEMENT_OP   reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DEFINED_OP      reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RETURN          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    YIELD           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    CASE            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    FOR             reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    BEGIN           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    CLASS           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    MODULE          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DEF             reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    PUTS            reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_GLOBAL      reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_LOCAL       reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_INSTANCE    reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_CLASS       reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    SYMBOL          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    STRING          reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    IDENTIFIER      reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    SUPER           reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! PLUS            [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MINUS           [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! TIMES           [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MOD             [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! POW             [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! EQUAL           [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! AND             [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OR              [ reduce using rule 69 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]


state 321

    (70) arg -> arg AND arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 70 (arg -> arg AND arg .)
    WHILE           reduce using rule 70 (arg -> arg AND arg .)
    UNLESS          reduce using rule 70 (arg -> arg AND arg .)
    UNTIL           reduce using rule 70 (arg -> arg AND arg .)
    TERM            reduce using rule 70 (arg -> arg AND arg .)
    NUMBER          reduce using rule 70 (arg -> arg AND arg .)
    LPAREN          reduce using rule 70 (arg -> arg AND arg .)
    $end            reduce using rule 70 (arg -> arg AND arg .)
    COMMA           reduce using rule 70 (arg -> arg AND arg .)
    RBRACKET        reduce using rule 70 (arg -> arg AND arg .)
    THEN            reduce using rule 70 (arg -> arg AND arg .)
    DO              reduce using rule 70 (arg -> arg AND arg .)
    RESCUE          reduce using rule 70 (arg -> arg AND arg .)
    HASH_ROCKET     reduce using rule 70 (arg -> arg AND arg .)
    RKEY            reduce using rule 70 (arg -> arg AND arg .)
    LBRACKET        reduce using rule 70 (arg -> arg AND arg .)
    DOT             reduce using rule 70 (arg -> arg AND arg .)
    UNARY_OP        reduce using rule 70 (arg -> arg AND arg .)
    RPAREN          reduce using rule 70 (arg -> arg AND arg .)
    WHEN            reduce using rule 70 (arg -> arg AND arg .)
    LKEY            reduce using rule 70 (arg -> arg AND arg .)
    END             reduce using rule 70 (arg -> arg AND arg .)
    ELSIF           reduce using rule 70 (arg -> arg AND arg .)
    ELSE            reduce using rule 70 (arg -> arg AND arg .)
    ENSURE          reduce using rule 70 (arg -> arg AND arg .)
    NOT_SYMBOL      reduce using rule 70 (arg -> arg AND arg .)
    COMPLEMENT_OP   reduce using rule 70 (arg -> arg AND arg .)
    DEFINED_OP      reduce using rule 70 (arg -> arg AND arg .)
    RETURN          reduce using rule 70 (arg -> arg AND arg .)
    YIELD           reduce using rule 70 (arg -> arg AND arg .)
    CASE            reduce using rule 70 (arg -> arg AND arg .)
    FOR             reduce using rule 70 (arg -> arg AND arg .)
    BEGIN           reduce using rule 70 (arg -> arg AND arg .)
    CLASS           reduce using rule 70 (arg -> arg AND arg .)
    MODULE          reduce using rule 70 (arg -> arg AND arg .)
    DEF             reduce using rule 70 (arg -> arg AND arg .)
    PUTS            reduce using rule 70 (arg -> arg AND arg .)
    VAR_GLOBAL      reduce using rule 70 (arg -> arg AND arg .)
    VAR_LOCAL       reduce using rule 70 (arg -> arg AND arg .)
    VAR_INSTANCE    reduce using rule 70 (arg -> arg AND arg .)
    VAR_CLASS       reduce using rule 70 (arg -> arg AND arg .)
    SYMBOL          reduce using rule 70 (arg -> arg AND arg .)
    STRING          reduce using rule 70 (arg -> arg AND arg .)
    IDENTIFIER      reduce using rule 70 (arg -> arg AND arg .)
    SUPER           reduce using rule 70 (arg -> arg AND arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! PLUS            [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! MINUS           [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! TIMES           [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! DIVIDE          [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! MOD             [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! POW             [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! OR_SYMBOL       [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! GREATERTHAN     [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! LESSERTHAN      [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! EQUAL           [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! NOTEQUAL        [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! AND             [ reduce using rule 70 (arg -> arg AND arg .) ]
  ! OR              [ reduce using rule 70 (arg -> arg AND arg .) ]


state 322

    (71) arg -> arg OR arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 71 (arg -> arg OR arg .)
    WHILE           reduce using rule 71 (arg -> arg OR arg .)
    UNLESS          reduce using rule 71 (arg -> arg OR arg .)
    UNTIL           reduce using rule 71 (arg -> arg OR arg .)
    TERM            reduce using rule 71 (arg -> arg OR arg .)
    NUMBER          reduce using rule 71 (arg -> arg OR arg .)
    LPAREN          reduce using rule 71 (arg -> arg OR arg .)
    $end            reduce using rule 71 (arg -> arg OR arg .)
    COMMA           reduce using rule 71 (arg -> arg OR arg .)
    RBRACKET        reduce using rule 71 (arg -> arg OR arg .)
    THEN            reduce using rule 71 (arg -> arg OR arg .)
    DO              reduce using rule 71 (arg -> arg OR arg .)
    RESCUE          reduce using rule 71 (arg -> arg OR arg .)
    HASH_ROCKET     reduce using rule 71 (arg -> arg OR arg .)
    RKEY            reduce using rule 71 (arg -> arg OR arg .)
    LBRACKET        reduce using rule 71 (arg -> arg OR arg .)
    DOT             reduce using rule 71 (arg -> arg OR arg .)
    UNARY_OP        reduce using rule 71 (arg -> arg OR arg .)
    RPAREN          reduce using rule 71 (arg -> arg OR arg .)
    WHEN            reduce using rule 71 (arg -> arg OR arg .)
    LKEY            reduce using rule 71 (arg -> arg OR arg .)
    END             reduce using rule 71 (arg -> arg OR arg .)
    ELSIF           reduce using rule 71 (arg -> arg OR arg .)
    ELSE            reduce using rule 71 (arg -> arg OR arg .)
    ENSURE          reduce using rule 71 (arg -> arg OR arg .)
    NOT_SYMBOL      reduce using rule 71 (arg -> arg OR arg .)
    COMPLEMENT_OP   reduce using rule 71 (arg -> arg OR arg .)
    DEFINED_OP      reduce using rule 71 (arg -> arg OR arg .)
    RETURN          reduce using rule 71 (arg -> arg OR arg .)
    YIELD           reduce using rule 71 (arg -> arg OR arg .)
    CASE            reduce using rule 71 (arg -> arg OR arg .)
    FOR             reduce using rule 71 (arg -> arg OR arg .)
    BEGIN           reduce using rule 71 (arg -> arg OR arg .)
    CLASS           reduce using rule 71 (arg -> arg OR arg .)
    MODULE          reduce using rule 71 (arg -> arg OR arg .)
    DEF             reduce using rule 71 (arg -> arg OR arg .)
    PUTS            reduce using rule 71 (arg -> arg OR arg .)
    VAR_GLOBAL      reduce using rule 71 (arg -> arg OR arg .)
    VAR_LOCAL       reduce using rule 71 (arg -> arg OR arg .)
    VAR_INSTANCE    reduce using rule 71 (arg -> arg OR arg .)
    VAR_CLASS       reduce using rule 71 (arg -> arg OR arg .)
    SYMBOL          reduce using rule 71 (arg -> arg OR arg .)
    STRING          reduce using rule 71 (arg -> arg OR arg .)
    IDENTIFIER      reduce using rule 71 (arg -> arg OR arg .)
    SUPER           reduce using rule 71 (arg -> arg OR arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! PLUS            [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! MINUS           [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! TIMES           [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! DIVIDE          [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! MOD             [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! POW             [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! OR_SYMBOL       [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! GREATERTHAN     [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! LESSERTHAN      [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! EQUAL           [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! NOTEQUAL        [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! AND             [ reduce using rule 71 (arg -> arg OR arg .) ]
  ! OR              [ reduce using rule 71 (arg -> arg OR arg .) ]


state 323

    (34) function -> operation LBRACKET LPAREN . LBRACKET call_args RBRACKET RPAREN RBRACKET
    (78) primary -> LPAREN . compstmt RPAREN
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 412
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    operation                      shift and go to state 28
    compstmt                       shift and go to state 194
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 324

    (78) primary -> LPAREN compstmt RPAREN .

    LBRACKET        reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    DOT             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    UNARY_OP        reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RANGE_INCLUSIVE reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    PLUS            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    MINUS           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    TIMES           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    DIVIDE          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    MOD             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    POW             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    OR_SYMBOL       reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    BINARY_XOR_OP   reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    BINARY_AND_OP   reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    GREATERTHAN     reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    GREATERTHANEQUAL reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    LESSERTHAN      reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    LESSERTHANEQUAL reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    EQUAL           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    CASE_EQUALITY   reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    NOTEQUAL        reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    AND             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    OR              reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    IF              reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    WHILE           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    UNLESS          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    UNTIL           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    TERM            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    NUMBER          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    LPAREN          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    $end            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    COMMA           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RBRACKET        reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    THEN            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    DO              reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RESCUE          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    HASH_ROCKET     reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RKEY            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RPAREN          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    WHEN            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    LKEY            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    END             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    ELSIF           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    ELSE            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    ENSURE          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    NOT_SYMBOL      reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    COMPLEMENT_OP   reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    DEFINED_OP      reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    RETURN          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    YIELD           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    CASE            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    FOR             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    BEGIN           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    CLASS           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    MODULE          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    DEF             reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    PUTS            reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    VAR_GLOBAL      reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    VAR_LOCAL       reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    VAR_INSTANCE    reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    VAR_CLASS       reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    SYMBOL          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    STRING          reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    IDENTIFIER      reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)
    SUPER           reduce using rule 78 (primary -> LPAREN compstmt RPAREN .)


state 325

    (161) mlhs_item -> LPAREN mlhs RPAREN .

    COMMA           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    TIMES           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_GLOBAL      reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_LOCAL       reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_INSTANCE    reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_CLASS       reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    LPAREN          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNARY_OP        reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    LBRACKET        reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    LKEY            reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    RETURN          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    YIELD           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    DEFINED_OP      reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    IF              reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNLESS          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    WHILE           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNTIL           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    CASE            reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    FOR             reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    BEGIN           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    CLASS           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    MODULE          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    DEF             reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    PUTS            reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    NUMBER          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    SYMBOL          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    STRING          reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    IDENTIFIER      reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)
    SUPER           reduce using rule 161 (mlhs_item -> LPAREN mlhs RPAREN .)


state 326

    (39) function -> SUPER LPAREN call_args . RPAREN

    RPAREN          shift and go to state 413


state 327

    (99) primary -> DEFINED_OP LPAREN arg . LPAREN
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg
    (27) expr -> arg .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 414
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191
    IF              reduce using rule 27 (expr -> arg .)
    WHILE           reduce using rule 27 (expr -> arg .)
    UNLESS          reduce using rule 27 (expr -> arg .)
    UNTIL           reduce using rule 27 (expr -> arg .)
    TERM            reduce using rule 27 (expr -> arg .)
    NUMBER          reduce using rule 27 (expr -> arg .)
    RPAREN          reduce using rule 27 (expr -> arg .)

  ! AND             [ reduce using rule 27 (expr -> arg .) ]
  ! OR              [ reduce using rule 27 (expr -> arg .) ]
  ! LPAREN          [ reduce using rule 27 (expr -> arg .) ]


state 328

    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (17) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (160) mlhs_item -> lhs .
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

    =               shift and go to state 415
    COMMA           reduce using rule 160 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

    op_asgn                        shift and go to state 134

state 329

    (85) primary -> LBRACKET . RBRACKET
    (86) primary -> LBRACKET . args RBRACKET
    (87) primary -> LBRACKET . args COMMA RBRACKET
    (7) stmt -> LBRACKET . block_var RBRACKET
    (8) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 68
    OR_SYMBOL       shift and go to state 69
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    TIMES           shift and go to state 45
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    args                           shift and go to state 70
    block_var                      shift and go to state 67
    arg                            shift and go to state 73
    lhs                            shift and go to state 71
    mlhs                           shift and go to state 72
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 330

    (114) primary -> BEGIN . compstmt rescue END
    (115) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (116) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (117) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (15) stmt -> BEGIN . LKEY compstmt RKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LKEY            shift and go to state 123
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 124
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 331

    (111) primary -> CASE compstmt when . END
    (112) primary -> CASE compstmt when . ELSE compstmt END
    (128) when -> when . WHEN when_args then compstmt

    END             shift and go to state 416
    ELSE            shift and go to state 417
    WHEN            shift and go to state 418


state 332

    (127) when -> WHEN . when_args then compstmt
    (133) when_args -> . args
    (134) when_args -> . args COMMA TIMES arg
    (135) when_args -> . TIMES arg
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 421
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    when_args                      shift and go to state 419
    args                           shift and go to state 420
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 333

    (113) primary -> FOR block_var IN . expr do compstmt END
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 422
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 334

    (99) primary -> DEFINED_OP LPAREN . arg LPAREN
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 423
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 335

    (118) primary -> CLASS IDENTIFIER compstmt . END

    END             shift and go to state 424


state 336

    (119) primary -> CLASS IDENTIFIER LESSERTHAN . IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 425


state 337

    (120) primary -> MODULE IDENTIFIER compstmt . END

    END             shift and go to state 426


state 338

    (121) primary -> DEF fname argdecl . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 427
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 339

    (164) argdecl -> LPAREN . arglist RPAREN
    (166) arglist -> . IDENTIFIER
    (167) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (168) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    IDENTIFIER      shift and go to state 341

    arglist                        shift and go to state 428

state 340

    (165) argdecl -> arglist . term
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    term                           shift and go to state 429
    factor                         shift and go to state 58

state 341

    (166) arglist -> IDENTIFIER .
    (167) arglist -> IDENTIFIER . COMMA IDENTIFIER
    (168) arglist -> IDENTIFIER . COMMA & IDENTIFIER

    TERM            reduce using rule 166 (arglist -> IDENTIFIER .)
    NUMBER          reduce using rule 166 (arglist -> IDENTIFIER .)
    LPAREN          reduce using rule 166 (arglist -> IDENTIFIER .)
    RPAREN          reduce using rule 166 (arglist -> IDENTIFIER .)
    COMMA           shift and go to state 430


state 342

    (122) primary -> DEF singleton DOT . fname argdecl compstmt END
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110

    fname                          shift and go to state 431

state 343

    (123) primary -> DEF singleton UNARY_OP . fname argdecl compstmt END
    (194) fname -> . IDENTIFIER
    (195) fname -> . RANGE_INCLUSIVE
    (196) fname -> . OR_SYMBOL
    (197) fname -> . BINARY_AND_OP
    (198) fname -> . BINARY_XOR_OP
    (199) fname -> . COMBINED_COMPARISON_OP
    (200) fname -> . EQUAL
    (201) fname -> . CASE_EQUALITY
    (202) fname -> . MATCHED_STRINGS_OP
    (203) fname -> . GREATERTHAN
    (204) fname -> . GREATERTHANEQUAL
    (205) fname -> . LESSERTHAN
    (206) fname -> . LESSERTHANEQUAL
    (207) fname -> . PLUS
    (208) fname -> . MINUS
    (209) fname -> . TIMES
    (210) fname -> . DIVIDE
    (211) fname -> . MOD
    (212) fname -> . POW
    (213) fname -> . BINARY_RIGHT_SHIFT_OP
    (214) fname -> . BINARY_LEFT_SHIFT_OP
    (215) fname -> . COMPLEMENT_OP
    (216) fname -> . OVERLOAD_PLUS
    (217) fname -> . OVERLOAD_MINUS
    (218) fname -> . LBRACKET RBRACKET
    (219) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 86
    RANGE_INCLUSIVE shift and go to state 87
    OR_SYMBOL       shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    BINARY_XOR_OP   shift and go to state 90
    COMBINED_COMPARISON_OP shift and go to state 91
    EQUAL           shift and go to state 92
    CASE_EQUALITY   shift and go to state 93
    MATCHED_STRINGS_OP shift and go to state 94
    GREATERTHAN     shift and go to state 95
    GREATERTHANEQUAL shift and go to state 96
    LESSERTHAN      shift and go to state 97
    LESSERTHANEQUAL shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103
    POW             shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    BINARY_LEFT_SHIFT_OP shift and go to state 106
    COMPLEMENT_OP   shift and go to state 107
    OVERLOAD_PLUS   shift and go to state 108
    OVERLOAD_MINUS  shift and go to state 109
    LBRACKET        shift and go to state 110

    fname                          shift and go to state 432

state 344

    (170) singleton -> LPAREN expr . RPAREN
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr

    RPAREN          shift and go to state 433
    AND             shift and go to state 61
    OR              shift and go to state 62


state 345

    (154) mlhs -> mlhs_item COMMA mlhs_item . TIMES
    (155) mlhs -> mlhs_item COMMA mlhs_item . lhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 434
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 435
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 346

    (159) mult_mlhs_item -> COMMA . mlhs_item
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 118
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    mlhs_item                      shift and go to state 436
    lhs                            shift and go to state 347
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 347

    (160) mlhs_item -> lhs .

    TIMES           reduce using rule 160 (mlhs_item -> lhs .)
    VAR_GLOBAL      reduce using rule 160 (mlhs_item -> lhs .)
    VAR_LOCAL       reduce using rule 160 (mlhs_item -> lhs .)
    VAR_INSTANCE    reduce using rule 160 (mlhs_item -> lhs .)
    VAR_CLASS       reduce using rule 160 (mlhs_item -> lhs .)
    LPAREN          reduce using rule 160 (mlhs_item -> lhs .)
    UNARY_OP        reduce using rule 160 (mlhs_item -> lhs .)
    LBRACKET        reduce using rule 160 (mlhs_item -> lhs .)
    LKEY            reduce using rule 160 (mlhs_item -> lhs .)
    RETURN          reduce using rule 160 (mlhs_item -> lhs .)
    YIELD           reduce using rule 160 (mlhs_item -> lhs .)
    DEFINED_OP      reduce using rule 160 (mlhs_item -> lhs .)
    IF              reduce using rule 160 (mlhs_item -> lhs .)
    UNLESS          reduce using rule 160 (mlhs_item -> lhs .)
    WHILE           reduce using rule 160 (mlhs_item -> lhs .)
    UNTIL           reduce using rule 160 (mlhs_item -> lhs .)
    CASE            reduce using rule 160 (mlhs_item -> lhs .)
    FOR             reduce using rule 160 (mlhs_item -> lhs .)
    BEGIN           reduce using rule 160 (mlhs_item -> lhs .)
    CLASS           reduce using rule 160 (mlhs_item -> lhs .)
    MODULE          reduce using rule 160 (mlhs_item -> lhs .)
    DEF             reduce using rule 160 (mlhs_item -> lhs .)
    PUTS            reduce using rule 160 (mlhs_item -> lhs .)
    NUMBER          reduce using rule 160 (mlhs_item -> lhs .)
    SYMBOL          reduce using rule 160 (mlhs_item -> lhs .)
    STRING          reduce using rule 160 (mlhs_item -> lhs .)
    IDENTIFIER      reduce using rule 160 (mlhs_item -> lhs .)
    SUPER           reduce using rule 160 (mlhs_item -> lhs .)


state 348

    (156) mlhs -> mlhs_item COMMA mult_mlhs_item . TIMES
    (157) mlhs -> mlhs_item COMMA mult_mlhs_item . lhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 437
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 438
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 349

    (5) compstmt -> stmt term expr term .
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (compstmt -> stmt term expr term .)
    RESCUE          reduce using rule 5 (compstmt -> stmt term expr term .)
    RPAREN          reduce using rule 5 (compstmt -> stmt term expr term .)
    WHEN            reduce using rule 5 (compstmt -> stmt term expr term .)
    LBRACKET        reduce using rule 5 (compstmt -> stmt term expr term .)
    DOT             reduce using rule 5 (compstmt -> stmt term expr term .)
    UNARY_OP        reduce using rule 5 (compstmt -> stmt term expr term .)
    RANGE_INCLUSIVE reduce using rule 5 (compstmt -> stmt term expr term .)
    RANGE_EXCLUSIVE reduce using rule 5 (compstmt -> stmt term expr term .)
    PLUS            reduce using rule 5 (compstmt -> stmt term expr term .)
    MINUS           reduce using rule 5 (compstmt -> stmt term expr term .)
    MOD             reduce using rule 5 (compstmt -> stmt term expr term .)
    POW             reduce using rule 5 (compstmt -> stmt term expr term .)
    OR_SYMBOL       reduce using rule 5 (compstmt -> stmt term expr term .)
    BINARY_XOR_OP   reduce using rule 5 (compstmt -> stmt term expr term .)
    BINARY_AND_OP   reduce using rule 5 (compstmt -> stmt term expr term .)
    COMBINED_COMPARISON_OP reduce using rule 5 (compstmt -> stmt term expr term .)
    GREATERTHAN     reduce using rule 5 (compstmt -> stmt term expr term .)
    GREATERTHANEQUAL reduce using rule 5 (compstmt -> stmt term expr term .)
    LESSERTHAN      reduce using rule 5 (compstmt -> stmt term expr term .)
    LESSERTHANEQUAL reduce using rule 5 (compstmt -> stmt term expr term .)
    EQUAL           reduce using rule 5 (compstmt -> stmt term expr term .)
    CASE_EQUALITY   reduce using rule 5 (compstmt -> stmt term expr term .)
    NOTEQUAL        reduce using rule 5 (compstmt -> stmt term expr term .)
    MATCHED_STRINGS_OP reduce using rule 5 (compstmt -> stmt term expr term .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 5 (compstmt -> stmt term expr term .)
    BINARY_LEFT_SHIFT_OP reduce using rule 5 (compstmt -> stmt term expr term .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 5 (compstmt -> stmt term expr term .)
    AND             reduce using rule 5 (compstmt -> stmt term expr term .)
    OR              reduce using rule 5 (compstmt -> stmt term expr term .)
    IF              reduce using rule 5 (compstmt -> stmt term expr term .)
    WHILE           reduce using rule 5 (compstmt -> stmt term expr term .)
    UNLESS          reduce using rule 5 (compstmt -> stmt term expr term .)
    UNTIL           reduce using rule 5 (compstmt -> stmt term expr term .)
    TERM            reduce using rule 5 (compstmt -> stmt term expr term .)
    NUMBER          reduce using rule 5 (compstmt -> stmt term expr term .)
    LPAREN          reduce using rule 5 (compstmt -> stmt term expr term .)
    COMMA           reduce using rule 5 (compstmt -> stmt term expr term .)
    RBRACKET        reduce using rule 5 (compstmt -> stmt term expr term .)
    THEN            reduce using rule 5 (compstmt -> stmt term expr term .)
    DO              reduce using rule 5 (compstmt -> stmt term expr term .)
    HASH_ROCKET     reduce using rule 5 (compstmt -> stmt term expr term .)
    RKEY            reduce using rule 5 (compstmt -> stmt term expr term .)
    LKEY            reduce using rule 5 (compstmt -> stmt term expr term .)
    END             reduce using rule 5 (compstmt -> stmt term expr term .)
    ELSIF           reduce using rule 5 (compstmt -> stmt term expr term .)
    ELSE            reduce using rule 5 (compstmt -> stmt term expr term .)
    ENSURE          reduce using rule 5 (compstmt -> stmt term expr term .)
    NOT_SYMBOL      reduce using rule 5 (compstmt -> stmt term expr term .)
    COMPLEMENT_OP   reduce using rule 5 (compstmt -> stmt term expr term .)
    DEFINED_OP      reduce using rule 5 (compstmt -> stmt term expr term .)
    RETURN          reduce using rule 5 (compstmt -> stmt term expr term .)
    YIELD           reduce using rule 5 (compstmt -> stmt term expr term .)
    CASE            reduce using rule 5 (compstmt -> stmt term expr term .)
    FOR             reduce using rule 5 (compstmt -> stmt term expr term .)
    BEGIN           reduce using rule 5 (compstmt -> stmt term expr term .)
    CLASS           reduce using rule 5 (compstmt -> stmt term expr term .)
    MODULE          reduce using rule 5 (compstmt -> stmt term expr term .)
    DEF             reduce using rule 5 (compstmt -> stmt term expr term .)
    PUTS            reduce using rule 5 (compstmt -> stmt term expr term .)
    VAR_GLOBAL      reduce using rule 5 (compstmt -> stmt term expr term .)
    VAR_LOCAL       reduce using rule 5 (compstmt -> stmt term expr term .)
    VAR_INSTANCE    reduce using rule 5 (compstmt -> stmt term expr term .)
    VAR_CLASS       reduce using rule 5 (compstmt -> stmt term expr term .)
    SYMBOL          reduce using rule 5 (compstmt -> stmt term expr term .)
    STRING          reduce using rule 5 (compstmt -> stmt term expr term .)
    IDENTIFIER      reduce using rule 5 (compstmt -> stmt term expr term .)
    SUPER           reduce using rule 5 (compstmt -> stmt term expr term .)
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221

  ! TIMES           [ reduce using rule 5 (compstmt -> stmt term expr term .) ]
  ! DIVIDE          [ reduce using rule 5 (compstmt -> stmt term expr term .) ]


state 350

    (239) term -> term TIMES factor .

    TIMES           reduce using rule 239 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 239 (term -> term TIMES factor .)
    RETURN          reduce using rule 239 (term -> term TIMES factor .)
    YIELD           reduce using rule 239 (term -> term TIMES factor .)
    NOT             reduce using rule 239 (term -> term TIMES factor .)
    NOT_SYMBOL      reduce using rule 239 (term -> term TIMES factor .)
    SUPER           reduce using rule 239 (term -> term TIMES factor .)
    PLUS            reduce using rule 239 (term -> term TIMES factor .)
    MINUS           reduce using rule 239 (term -> term TIMES factor .)
    COMPLEMENT_OP   reduce using rule 239 (term -> term TIMES factor .)
    DEFINED_OP      reduce using rule 239 (term -> term TIMES factor .)
    LPAREN          reduce using rule 239 (term -> term TIMES factor .)
    IDENTIFIER      reduce using rule 239 (term -> term TIMES factor .)
    UNARY_OP        reduce using rule 239 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 239 (term -> term TIMES factor .)
    LKEY            reduce using rule 239 (term -> term TIMES factor .)
    IF              reduce using rule 239 (term -> term TIMES factor .)
    UNLESS          reduce using rule 239 (term -> term TIMES factor .)
    WHILE           reduce using rule 239 (term -> term TIMES factor .)
    UNTIL           reduce using rule 239 (term -> term TIMES factor .)
    CASE            reduce using rule 239 (term -> term TIMES factor .)
    FOR             reduce using rule 239 (term -> term TIMES factor .)
    BEGIN           reduce using rule 239 (term -> term TIMES factor .)
    CLASS           reduce using rule 239 (term -> term TIMES factor .)
    MODULE          reduce using rule 239 (term -> term TIMES factor .)
    DEF             reduce using rule 239 (term -> term TIMES factor .)
    PUTS            reduce using rule 239 (term -> term TIMES factor .)
    NUMBER          reduce using rule 239 (term -> term TIMES factor .)
    SYMBOL          reduce using rule 239 (term -> term TIMES factor .)
    STRING          reduce using rule 239 (term -> term TIMES factor .)
    VAR_GLOBAL      reduce using rule 239 (term -> term TIMES factor .)
    VAR_LOCAL       reduce using rule 239 (term -> term TIMES factor .)
    VAR_INSTANCE    reduce using rule 239 (term -> term TIMES factor .)
    VAR_CLASS       reduce using rule 239 (term -> term TIMES factor .)
    $end            reduce using rule 239 (term -> term TIMES factor .)
    RESCUE          reduce using rule 239 (term -> term TIMES factor .)
    RPAREN          reduce using rule 239 (term -> term TIMES factor .)
    WHEN            reduce using rule 239 (term -> term TIMES factor .)
    DOT             reduce using rule 239 (term -> term TIMES factor .)
    RANGE_INCLUSIVE reduce using rule 239 (term -> term TIMES factor .)
    RANGE_EXCLUSIVE reduce using rule 239 (term -> term TIMES factor .)
    MOD             reduce using rule 239 (term -> term TIMES factor .)
    POW             reduce using rule 239 (term -> term TIMES factor .)
    OR_SYMBOL       reduce using rule 239 (term -> term TIMES factor .)
    BINARY_XOR_OP   reduce using rule 239 (term -> term TIMES factor .)
    BINARY_AND_OP   reduce using rule 239 (term -> term TIMES factor .)
    COMBINED_COMPARISON_OP reduce using rule 239 (term -> term TIMES factor .)
    GREATERTHAN     reduce using rule 239 (term -> term TIMES factor .)
    GREATERTHANEQUAL reduce using rule 239 (term -> term TIMES factor .)
    LESSERTHAN      reduce using rule 239 (term -> term TIMES factor .)
    LESSERTHANEQUAL reduce using rule 239 (term -> term TIMES factor .)
    EQUAL           reduce using rule 239 (term -> term TIMES factor .)
    CASE_EQUALITY   reduce using rule 239 (term -> term TIMES factor .)
    NOTEQUAL        reduce using rule 239 (term -> term TIMES factor .)
    MATCHED_STRINGS_OP reduce using rule 239 (term -> term TIMES factor .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 239 (term -> term TIMES factor .)
    BINARY_LEFT_SHIFT_OP reduce using rule 239 (term -> term TIMES factor .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 239 (term -> term TIMES factor .)
    AND             reduce using rule 239 (term -> term TIMES factor .)
    OR              reduce using rule 239 (term -> term TIMES factor .)
    TERM            reduce using rule 239 (term -> term TIMES factor .)
    COMMA           reduce using rule 239 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 239 (term -> term TIMES factor .)
    THEN            reduce using rule 239 (term -> term TIMES factor .)
    DO              reduce using rule 239 (term -> term TIMES factor .)
    HASH_ROCKET     reduce using rule 239 (term -> term TIMES factor .)
    RKEY            reduce using rule 239 (term -> term TIMES factor .)
    END             reduce using rule 239 (term -> term TIMES factor .)
    ELSIF           reduce using rule 239 (term -> term TIMES factor .)
    ELSE            reduce using rule 239 (term -> term TIMES factor .)
    ENSURE          reduce using rule 239 (term -> term TIMES factor .)
    UNDEF           reduce using rule 239 (term -> term TIMES factor .)
    ALIAS           reduce using rule 239 (term -> term TIMES factor .)


state 351

    (242) factor -> NUMBER .
    (190) literal -> NUMBER .

  ! reduce/reduce conflict for LBRACKET resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for DOT resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for MOD resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for POW resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for BINARY_XOR_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for COMBINED_COMPARISON_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for CASE_EQUALITY resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for MATCHED_STRINGS_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for BINARY_LEFT_SHIFT_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for TERM resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 190 (literal -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 190 (literal -> NUMBER .)
    RETURN          reduce using rule 242 (factor -> NUMBER .)
    YIELD           reduce using rule 242 (factor -> NUMBER .)
    NOT             reduce using rule 242 (factor -> NUMBER .)
    NOT_SYMBOL      reduce using rule 242 (factor -> NUMBER .)
    SUPER           reduce using rule 242 (factor -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 242 (factor -> NUMBER .)
    DEFINED_OP      reduce using rule 242 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 242 (factor -> NUMBER .)
    LKEY            reduce using rule 242 (factor -> NUMBER .)
    CASE            reduce using rule 242 (factor -> NUMBER .)
    FOR             reduce using rule 242 (factor -> NUMBER .)
    BEGIN           reduce using rule 242 (factor -> NUMBER .)
    CLASS           reduce using rule 242 (factor -> NUMBER .)
    MODULE          reduce using rule 242 (factor -> NUMBER .)
    DEF             reduce using rule 242 (factor -> NUMBER .)
    PUTS            reduce using rule 242 (factor -> NUMBER .)
    SYMBOL          reduce using rule 242 (factor -> NUMBER .)
    STRING          reduce using rule 242 (factor -> NUMBER .)
    VAR_GLOBAL      reduce using rule 242 (factor -> NUMBER .)
    VAR_LOCAL       reduce using rule 242 (factor -> NUMBER .)
    VAR_INSTANCE    reduce using rule 242 (factor -> NUMBER .)
    VAR_CLASS       reduce using rule 242 (factor -> NUMBER .)
    $end            reduce using rule 242 (factor -> NUMBER .)
    RESCUE          reduce using rule 242 (factor -> NUMBER .)
    WHEN            reduce using rule 242 (factor -> NUMBER .)
    RBRACKET        reduce using rule 242 (factor -> NUMBER .)
    THEN            reduce using rule 242 (factor -> NUMBER .)
    HASH_ROCKET     reduce using rule 242 (factor -> NUMBER .)
    RKEY            reduce using rule 242 (factor -> NUMBER .)
    END             reduce using rule 242 (factor -> NUMBER .)
    ELSIF           reduce using rule 242 (factor -> NUMBER .)
    ELSE            reduce using rule 242 (factor -> NUMBER .)
    ENSURE          reduce using rule 242 (factor -> NUMBER .)
    UNDEF           reduce using rule 242 (factor -> NUMBER .)
    ALIAS           reduce using rule 242 (factor -> NUMBER .)
    LBRACKET        reduce using rule 190 (literal -> NUMBER .)
    DOT             reduce using rule 190 (literal -> NUMBER .)
    UNARY_OP        reduce using rule 190 (literal -> NUMBER .)
    COMMA           reduce using rule 190 (literal -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 190 (literal -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 190 (literal -> NUMBER .)
    PLUS            reduce using rule 190 (literal -> NUMBER .)
    MINUS           reduce using rule 190 (literal -> NUMBER .)
    TIMES           reduce using rule 190 (literal -> NUMBER .)
    DIVIDE          reduce using rule 190 (literal -> NUMBER .)
    MOD             reduce using rule 190 (literal -> NUMBER .)
    POW             reduce using rule 190 (literal -> NUMBER .)
    OR_SYMBOL       reduce using rule 190 (literal -> NUMBER .)
    BINARY_XOR_OP   reduce using rule 190 (literal -> NUMBER .)
    BINARY_AND_OP   reduce using rule 190 (literal -> NUMBER .)
    COMBINED_COMPARISON_OP reduce using rule 190 (literal -> NUMBER .)
    GREATERTHAN     reduce using rule 190 (literal -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 190 (literal -> NUMBER .)
    LESSERTHAN      reduce using rule 190 (literal -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 190 (literal -> NUMBER .)
    EQUAL           reduce using rule 190 (literal -> NUMBER .)
    CASE_EQUALITY   reduce using rule 190 (literal -> NUMBER .)
    NOTEQUAL        reduce using rule 190 (literal -> NUMBER .)
    MATCHED_STRINGS_OP reduce using rule 190 (literal -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 190 (literal -> NUMBER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 190 (literal -> NUMBER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 190 (literal -> NUMBER .)
    AND             reduce using rule 190 (literal -> NUMBER .)
    OR              reduce using rule 190 (literal -> NUMBER .)
    DO              reduce using rule 190 (literal -> NUMBER .)
    TERM            reduce using rule 190 (literal -> NUMBER .)
    NUMBER          reduce using rule 190 (literal -> NUMBER .)
    LPAREN          reduce using rule 190 (literal -> NUMBER .)
    IF              reduce using rule 190 (literal -> NUMBER .)
    WHILE           reduce using rule 190 (literal -> NUMBER .)
    UNLESS          reduce using rule 190 (literal -> NUMBER .)
    UNTIL           reduce using rule 190 (literal -> NUMBER .)
    RPAREN          reduce using rule 190 (literal -> NUMBER .)

  ! TIMES           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 242 (factor -> NUMBER .) ]
  ! PLUS            [ reduce using rule 242 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! LPAREN          [ reduce using rule 242 (factor -> NUMBER .) ]
  ! UNARY_OP        [ reduce using rule 242 (factor -> NUMBER .) ]
  ! LBRACKET        [ reduce using rule 242 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 242 (factor -> NUMBER .) ]
  ! UNLESS          [ reduce using rule 242 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! UNTIL           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! NUMBER          [ reduce using rule 242 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 242 (factor -> NUMBER .) ]
  ! DOT             [ reduce using rule 242 (factor -> NUMBER .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 242 (factor -> NUMBER .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 242 (factor -> NUMBER .) ]
  ! MOD             [ reduce using rule 242 (factor -> NUMBER .) ]
  ! POW             [ reduce using rule 242 (factor -> NUMBER .) ]
  ! OR_SYMBOL       [ reduce using rule 242 (factor -> NUMBER .) ]
  ! BINARY_XOR_OP   [ reduce using rule 242 (factor -> NUMBER .) ]
  ! BINARY_AND_OP   [ reduce using rule 242 (factor -> NUMBER .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 242 (factor -> NUMBER .) ]
  ! GREATERTHAN     [ reduce using rule 242 (factor -> NUMBER .) ]
  ! GREATERTHANEQUAL [ reduce using rule 242 (factor -> NUMBER .) ]
  ! LESSERTHAN      [ reduce using rule 242 (factor -> NUMBER .) ]
  ! LESSERTHANEQUAL [ reduce using rule 242 (factor -> NUMBER .) ]
  ! EQUAL           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! CASE_EQUALITY   [ reduce using rule 242 (factor -> NUMBER .) ]
  ! NOTEQUAL        [ reduce using rule 242 (factor -> NUMBER .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 242 (factor -> NUMBER .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 242 (factor -> NUMBER .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 242 (factor -> NUMBER .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 242 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 242 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 242 (factor -> NUMBER .) ]
  ! TERM            [ reduce using rule 242 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 242 (factor -> NUMBER .) ]
  ! DO              [ reduce using rule 242 (factor -> NUMBER .) ]


state 352

    (243) factor -> LPAREN . expression RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (236) expression -> . expression PLUS term
    (237) expression -> . expression MINUS term
    (238) expression -> . term
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    TERM            shift and go to state 57
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    NUMBER          shift and go to state 351
    LPAREN          shift and go to state 439
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expression                     shift and go to state 226
    compstmt                       shift and go to state 194
    term                           shift and go to state 227
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    factor                         shift and go to state 58
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 353

    (240) term -> term DIVIDE factor .

    TIMES           reduce using rule 240 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 240 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 240 (term -> term DIVIDE factor .)
    YIELD           reduce using rule 240 (term -> term DIVIDE factor .)
    NOT             reduce using rule 240 (term -> term DIVIDE factor .)
    NOT_SYMBOL      reduce using rule 240 (term -> term DIVIDE factor .)
    SUPER           reduce using rule 240 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 240 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 240 (term -> term DIVIDE factor .)
    COMPLEMENT_OP   reduce using rule 240 (term -> term DIVIDE factor .)
    DEFINED_OP      reduce using rule 240 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 240 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 240 (term -> term DIVIDE factor .)
    UNARY_OP        reduce using rule 240 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 240 (term -> term DIVIDE factor .)
    LKEY            reduce using rule 240 (term -> term DIVIDE factor .)
    IF              reduce using rule 240 (term -> term DIVIDE factor .)
    UNLESS          reduce using rule 240 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 240 (term -> term DIVIDE factor .)
    UNTIL           reduce using rule 240 (term -> term DIVIDE factor .)
    CASE            reduce using rule 240 (term -> term DIVIDE factor .)
    FOR             reduce using rule 240 (term -> term DIVIDE factor .)
    BEGIN           reduce using rule 240 (term -> term DIVIDE factor .)
    CLASS           reduce using rule 240 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 240 (term -> term DIVIDE factor .)
    DEF             reduce using rule 240 (term -> term DIVIDE factor .)
    PUTS            reduce using rule 240 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 240 (term -> term DIVIDE factor .)
    SYMBOL          reduce using rule 240 (term -> term DIVIDE factor .)
    STRING          reduce using rule 240 (term -> term DIVIDE factor .)
    VAR_GLOBAL      reduce using rule 240 (term -> term DIVIDE factor .)
    VAR_LOCAL       reduce using rule 240 (term -> term DIVIDE factor .)
    VAR_INSTANCE    reduce using rule 240 (term -> term DIVIDE factor .)
    VAR_CLASS       reduce using rule 240 (term -> term DIVIDE factor .)
    $end            reduce using rule 240 (term -> term DIVIDE factor .)
    RESCUE          reduce using rule 240 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 240 (term -> term DIVIDE factor .)
    WHEN            reduce using rule 240 (term -> term DIVIDE factor .)
    DOT             reduce using rule 240 (term -> term DIVIDE factor .)
    RANGE_INCLUSIVE reduce using rule 240 (term -> term DIVIDE factor .)
    RANGE_EXCLUSIVE reduce using rule 240 (term -> term DIVIDE factor .)
    MOD             reduce using rule 240 (term -> term DIVIDE factor .)
    POW             reduce using rule 240 (term -> term DIVIDE factor .)
    OR_SYMBOL       reduce using rule 240 (term -> term DIVIDE factor .)
    BINARY_XOR_OP   reduce using rule 240 (term -> term DIVIDE factor .)
    BINARY_AND_OP   reduce using rule 240 (term -> term DIVIDE factor .)
    COMBINED_COMPARISON_OP reduce using rule 240 (term -> term DIVIDE factor .)
    GREATERTHAN     reduce using rule 240 (term -> term DIVIDE factor .)
    GREATERTHANEQUAL reduce using rule 240 (term -> term DIVIDE factor .)
    LESSERTHAN      reduce using rule 240 (term -> term DIVIDE factor .)
    LESSERTHANEQUAL reduce using rule 240 (term -> term DIVIDE factor .)
    EQUAL           reduce using rule 240 (term -> term DIVIDE factor .)
    CASE_EQUALITY   reduce using rule 240 (term -> term DIVIDE factor .)
    NOTEQUAL        reduce using rule 240 (term -> term DIVIDE factor .)
    MATCHED_STRINGS_OP reduce using rule 240 (term -> term DIVIDE factor .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 240 (term -> term DIVIDE factor .)
    BINARY_LEFT_SHIFT_OP reduce using rule 240 (term -> term DIVIDE factor .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 240 (term -> term DIVIDE factor .)
    AND             reduce using rule 240 (term -> term DIVIDE factor .)
    OR              reduce using rule 240 (term -> term DIVIDE factor .)
    TERM            reduce using rule 240 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 240 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 240 (term -> term DIVIDE factor .)
    THEN            reduce using rule 240 (term -> term DIVIDE factor .)
    DO              reduce using rule 240 (term -> term DIVIDE factor .)
    HASH_ROCKET     reduce using rule 240 (term -> term DIVIDE factor .)
    RKEY            reduce using rule 240 (term -> term DIVIDE factor .)
    END             reduce using rule 240 (term -> term DIVIDE factor .)
    ELSIF           reduce using rule 240 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 240 (term -> term DIVIDE factor .)
    ENSURE          reduce using rule 240 (term -> term DIVIDE factor .)
    UNDEF           reduce using rule 240 (term -> term DIVIDE factor .)
    ALIAS           reduce using rule 240 (term -> term DIVIDE factor .)


state 354

    (243) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    YIELD           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    NOT_SYMBOL      reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    SUPER           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    COMPLEMENT_OP   reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    DEFINED_OP      reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    UNARY_OP        reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    LKEY            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    SYMBOL          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    VAR_GLOBAL      reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    VAR_LOCAL       reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    VAR_INSTANCE    reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    VAR_CLASS       reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RESCUE          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    DOT             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RANGE_INCLUSIVE reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    POW             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    OR_SYMBOL       reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    BINARY_XOR_OP   reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    BINARY_AND_OP   reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    LESSERTHAN      reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    LESSERTHANEQUAL reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    CASE_EQUALITY   reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    TERM            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    HASH_ROCKET     reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    RKEY            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    ENSURE          reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    UNDEF           reduce using rule 243 (factor -> LPAREN expression RPAREN .)
    ALIAS           reduce using rule 243 (factor -> LPAREN expression RPAREN .)


state 355

    (236) expression -> expression PLUS . term
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    term                           shift and go to state 440
    factor                         shift and go to state 58

state 356

    (237) expression -> expression MINUS . term
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    term                           shift and go to state 441
    factor                         shift and go to state 58

state 357

    (6) stmt -> call do LBRACKET RBRACKET .

    IF              reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    WHILE           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    UNLESS          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    UNTIL           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    TERM            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    NUMBER          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    LPAREN          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    $end            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RESCUE          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RPAREN          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    WHEN            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    DOT             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    PLUS            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    MINUS           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    TIMES           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    MOD             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    POW             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    EQUAL           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    AND             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    OR              reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    COMMA           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    THEN            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    DO              reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RKEY            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    LKEY            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    END             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    ELSIF           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    ELSE            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    ENSURE          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    RETURN          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    YIELD           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    CASE            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    FOR             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    BEGIN           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    CLASS           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    MODULE          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    DEF             reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    PUTS            reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    STRING          reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)
    SUPER           reduce using rule 6 (stmt -> call do LBRACKET RBRACKET .)


state 358

    (8) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL . RBRACKET compstmt END

    RBRACKET        shift and go to state 442


state 359

    (87) primary -> LBRACKET args COMMA RBRACKET .

    LBRACKET        reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    DOT             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    UNARY_OP        reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    PLUS            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    MINUS           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    TIMES           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    DIVIDE          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    MOD             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    POW             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    OR_SYMBOL       reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_XOR_OP   reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_AND_OP   reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    GREATERTHAN     reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    GREATERTHANEQUAL reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    LESSERTHAN      reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    LESSERTHANEQUAL reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    EQUAL           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    CASE_EQUALITY   reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    NOTEQUAL        reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    AND             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    OR              reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    IF              reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    WHILE           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    UNLESS          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    UNTIL           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    TERM            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    NUMBER          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    LPAREN          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    $end            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    COMMA           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RBRACKET        reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    THEN            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    DO              reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RESCUE          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    HASH_ROCKET     reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RKEY            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RPAREN          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    WHEN            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    LKEY            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    END             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    ELSIF           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    ELSE            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    ENSURE          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    NOT_SYMBOL      reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    COMPLEMENT_OP   reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    DEFINED_OP      reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    RETURN          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    YIELD           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    CASE            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    FOR             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    BEGIN           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    CLASS           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    MODULE          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    DEF             reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    PUTS            reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_GLOBAL      reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_LOCAL       reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_INSTANCE    reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_CLASS       reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    SYMBOL          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    STRING          reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    IDENTIFIER      reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)
    SUPER           reduce using rule 87 (primary -> LBRACKET args COMMA RBRACKET .)


state 360

    (163) args -> arg COMMA arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 163 (args -> arg COMMA arg .)
    COMMA           reduce using rule 163 (args -> arg COMMA arg .)
    RKEY            reduce using rule 163 (args -> arg COMMA arg .)
    LBRACKET        reduce using rule 163 (args -> arg COMMA arg .)
    DOT             reduce using rule 163 (args -> arg COMMA arg .)
    UNARY_OP        reduce using rule 163 (args -> arg COMMA arg .)
    IF              reduce using rule 163 (args -> arg COMMA arg .)
    WHILE           reduce using rule 163 (args -> arg COMMA arg .)
    UNLESS          reduce using rule 163 (args -> arg COMMA arg .)
    UNTIL           reduce using rule 163 (args -> arg COMMA arg .)
    TERM            reduce using rule 163 (args -> arg COMMA arg .)
    NUMBER          reduce using rule 163 (args -> arg COMMA arg .)
    LPAREN          reduce using rule 163 (args -> arg COMMA arg .)
    $end            reduce using rule 163 (args -> arg COMMA arg .)
    THEN            reduce using rule 163 (args -> arg COMMA arg .)
    DO              reduce using rule 163 (args -> arg COMMA arg .)
    RESCUE          reduce using rule 163 (args -> arg COMMA arg .)
    HASH_ROCKET     reduce using rule 163 (args -> arg COMMA arg .)
    RPAREN          reduce using rule 163 (args -> arg COMMA arg .)
    WHEN            reduce using rule 163 (args -> arg COMMA arg .)
    LKEY            reduce using rule 163 (args -> arg COMMA arg .)
    END             reduce using rule 163 (args -> arg COMMA arg .)
    ELSIF           reduce using rule 163 (args -> arg COMMA arg .)
    ELSE            reduce using rule 163 (args -> arg COMMA arg .)
    ENSURE          reduce using rule 163 (args -> arg COMMA arg .)
    NOT_SYMBOL      reduce using rule 163 (args -> arg COMMA arg .)
    COMPLEMENT_OP   reduce using rule 163 (args -> arg COMMA arg .)
    DEFINED_OP      reduce using rule 163 (args -> arg COMMA arg .)
    RETURN          reduce using rule 163 (args -> arg COMMA arg .)
    YIELD           reduce using rule 163 (args -> arg COMMA arg .)
    CASE            reduce using rule 163 (args -> arg COMMA arg .)
    FOR             reduce using rule 163 (args -> arg COMMA arg .)
    BEGIN           reduce using rule 163 (args -> arg COMMA arg .)
    CLASS           reduce using rule 163 (args -> arg COMMA arg .)
    MODULE          reduce using rule 163 (args -> arg COMMA arg .)
    DEF             reduce using rule 163 (args -> arg COMMA arg .)
    PUTS            reduce using rule 163 (args -> arg COMMA arg .)
    VAR_GLOBAL      reduce using rule 163 (args -> arg COMMA arg .)
    VAR_LOCAL       reduce using rule 163 (args -> arg COMMA arg .)
    VAR_INSTANCE    reduce using rule 163 (args -> arg COMMA arg .)
    VAR_CLASS       reduce using rule 163 (args -> arg COMMA arg .)
    SYMBOL          reduce using rule 163 (args -> arg COMMA arg .)
    STRING          reduce using rule 163 (args -> arg COMMA arg .)
    IDENTIFIER      reduce using rule 163 (args -> arg COMMA arg .)
    SUPER           reduce using rule 163 (args -> arg COMMA arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! PLUS            [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! MINUS           [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! TIMES           [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! DIVIDE          [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! MOD             [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! POW             [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! OR_SYMBOL       [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! GREATERTHAN     [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! LESSERTHAN      [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! EQUAL           [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! NOTEQUAL        [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! AND             [ reduce using rule 163 (args -> arg COMMA arg .) ]
  ! OR              [ reduce using rule 163 (args -> arg COMMA arg .) ]


state 361

    (35) function -> primary DOT operation . LPAREN call_args RPAREN
    (37) function -> primary DOT operation .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 443
    LKEY            reduce using rule 37 (function -> primary DOT operation .)
    LBRACKET        reduce using rule 37 (function -> primary DOT operation .)
    DOT             reduce using rule 37 (function -> primary DOT operation .)
    UNARY_OP        reduce using rule 37 (function -> primary DOT operation .)
    COMMA           reduce using rule 37 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    PLUS            reduce using rule 37 (function -> primary DOT operation .)
    MINUS           reduce using rule 37 (function -> primary DOT operation .)
    TIMES           reduce using rule 37 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 37 (function -> primary DOT operation .)
    MOD             reduce using rule 37 (function -> primary DOT operation .)
    POW             reduce using rule 37 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary DOT operation .)
    BINARY_AND_OP   reduce using rule 37 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    EQUAL           reduce using rule 37 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    AND             reduce using rule 37 (function -> primary DOT operation .)
    OR              reduce using rule 37 (function -> primary DOT operation .)
    RBRACKET        reduce using rule 37 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary DOT operation .)
    RKEY            reduce using rule 37 (function -> primary DOT operation .)
    IF              reduce using rule 37 (function -> primary DOT operation .)
    WHILE           reduce using rule 37 (function -> primary DOT operation .)
    UNLESS          reduce using rule 37 (function -> primary DOT operation .)
    UNTIL           reduce using rule 37 (function -> primary DOT operation .)
    TERM            reduce using rule 37 (function -> primary DOT operation .)
    NUMBER          reduce using rule 37 (function -> primary DOT operation .)
    $end            reduce using rule 37 (function -> primary DOT operation .)
    THEN            reduce using rule 37 (function -> primary DOT operation .)
    DO              reduce using rule 37 (function -> primary DOT operation .)
    RESCUE          reduce using rule 37 (function -> primary DOT operation .)
    RPAREN          reduce using rule 37 (function -> primary DOT operation .)
    WHEN            reduce using rule 37 (function -> primary DOT operation .)
    END             reduce using rule 37 (function -> primary DOT operation .)
    ELSIF           reduce using rule 37 (function -> primary DOT operation .)
    ELSE            reduce using rule 37 (function -> primary DOT operation .)
    ENSURE          reduce using rule 37 (function -> primary DOT operation .)
    NOT_SYMBOL      reduce using rule 37 (function -> primary DOT operation .)
    COMPLEMENT_OP   reduce using rule 37 (function -> primary DOT operation .)
    DEFINED_OP      reduce using rule 37 (function -> primary DOT operation .)
    RETURN          reduce using rule 37 (function -> primary DOT operation .)
    YIELD           reduce using rule 37 (function -> primary DOT operation .)
    CASE            reduce using rule 37 (function -> primary DOT operation .)
    FOR             reduce using rule 37 (function -> primary DOT operation .)
    BEGIN           reduce using rule 37 (function -> primary DOT operation .)
    CLASS           reduce using rule 37 (function -> primary DOT operation .)
    MODULE          reduce using rule 37 (function -> primary DOT operation .)
    DEF             reduce using rule 37 (function -> primary DOT operation .)
    PUTS            reduce using rule 37 (function -> primary DOT operation .)
    VAR_GLOBAL      reduce using rule 37 (function -> primary DOT operation .)
    VAR_LOCAL       reduce using rule 37 (function -> primary DOT operation .)
    VAR_INSTANCE    reduce using rule 37 (function -> primary DOT operation .)
    VAR_CLASS       reduce using rule 37 (function -> primary DOT operation .)
    SYMBOL          reduce using rule 37 (function -> primary DOT operation .)
    STRING          reduce using rule 37 (function -> primary DOT operation .)
    IDENTIFIER      reduce using rule 37 (function -> primary DOT operation .)
    SUPER           reduce using rule 37 (function -> primary DOT operation .)

  ! LPAREN          [ reduce using rule 37 (function -> primary DOT operation .) ]


state 362

    (36) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP operation .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 444
    LKEY            reduce using rule 38 (function -> primary UNARY_OP operation .)
    LBRACKET        reduce using rule 38 (function -> primary UNARY_OP operation .)
    DOT             reduce using rule 38 (function -> primary UNARY_OP operation .)
    UNARY_OP        reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    PLUS            reduce using rule 38 (function -> primary UNARY_OP operation .)
    MINUS           reduce using rule 38 (function -> primary UNARY_OP operation .)
    TIMES           reduce using rule 38 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 38 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_AND_OP   reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 38 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 38 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 38 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 38 (function -> primary UNARY_OP operation .)
    RBRACKET        reduce using rule 38 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 38 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 38 (function -> primary UNARY_OP operation .)
    IF              reduce using rule 38 (function -> primary UNARY_OP operation .)
    WHILE           reduce using rule 38 (function -> primary UNARY_OP operation .)
    UNLESS          reduce using rule 38 (function -> primary UNARY_OP operation .)
    UNTIL           reduce using rule 38 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 38 (function -> primary UNARY_OP operation .)
    NUMBER          reduce using rule 38 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 38 (function -> primary UNARY_OP operation .)
    THEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    DO              reduce using rule 38 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 38 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    END             reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 38 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    NOT_SYMBOL      reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMPLEMENT_OP   reduce using rule 38 (function -> primary UNARY_OP operation .)
    DEFINED_OP      reduce using rule 38 (function -> primary UNARY_OP operation .)
    RETURN          reduce using rule 38 (function -> primary UNARY_OP operation .)
    YIELD           reduce using rule 38 (function -> primary UNARY_OP operation .)
    CASE            reduce using rule 38 (function -> primary UNARY_OP operation .)
    FOR             reduce using rule 38 (function -> primary UNARY_OP operation .)
    BEGIN           reduce using rule 38 (function -> primary UNARY_OP operation .)
    CLASS           reduce using rule 38 (function -> primary UNARY_OP operation .)
    MODULE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    DEF             reduce using rule 38 (function -> primary UNARY_OP operation .)
    PUTS            reduce using rule 38 (function -> primary UNARY_OP operation .)
    VAR_GLOBAL      reduce using rule 38 (function -> primary UNARY_OP operation .)
    VAR_LOCAL       reduce using rule 38 (function -> primary UNARY_OP operation .)
    VAR_INSTANCE    reduce using rule 38 (function -> primary UNARY_OP operation .)
    VAR_CLASS       reduce using rule 38 (function -> primary UNARY_OP operation .)
    SYMBOL          reduce using rule 38 (function -> primary UNARY_OP operation .)
    STRING          reduce using rule 38 (function -> primary UNARY_OP operation .)
    IDENTIFIER      reduce using rule 38 (function -> primary UNARY_OP operation .)
    SUPER           reduce using rule 38 (function -> primary UNARY_OP operation .)

  ! LPAREN          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]


state 363

    (34) function -> operation LBRACKET LPAREN . LBRACKET call_args RBRACKET RPAREN RBRACKET

    LBRACKET        shift and go to state 445


state 364

    (16) stmt -> END LKEY compstmt RKEY .

    IF              reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    WHILE           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    UNLESS          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    UNTIL           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    TERM            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    NUMBER          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    LPAREN          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    $end            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RESCUE          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RPAREN          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    WHEN            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    LBRACKET        reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    DOT             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    UNARY_OP        reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RANGE_INCLUSIVE reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RANGE_EXCLUSIVE reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    PLUS            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    MINUS           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    TIMES           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    DIVIDE          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    MOD             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    POW             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    OR_SYMBOL       reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    BINARY_XOR_OP   reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    BINARY_AND_OP   reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    GREATERTHAN     reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    GREATERTHANEQUAL reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    LESSERTHAN      reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    LESSERTHANEQUAL reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    EQUAL           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    CASE_EQUALITY   reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    NOTEQUAL        reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    MATCHED_STRINGS_OP reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    AND             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    OR              reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    COMMA           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RBRACKET        reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    THEN            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    DO              reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    HASH_ROCKET     reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RKEY            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    LKEY            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    END             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    ELSIF           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    ELSE            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    ENSURE          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    NOT_SYMBOL      reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    COMPLEMENT_OP   reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    DEFINED_OP      reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    RETURN          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    YIELD           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    CASE            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    FOR             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    BEGIN           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    CLASS           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    MODULE          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    DEF             reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    PUTS            reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    VAR_GLOBAL      reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    VAR_LOCAL       reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    VAR_INSTANCE    reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    VAR_CLASS       reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    SYMBOL          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    STRING          reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    IDENTIFIER      reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)
    SUPER           reduce using rule 16 (stmt -> END LKEY compstmt RKEY .)


state 365

    (219) fname -> LBRACKET RBRACKET EQUAL_SYMBOL .

    IF              reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    WHILE           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    UNLESS          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    UNTIL           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    TERM            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    NUMBER          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LPAREN          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    $end            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RESCUE          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RPAREN          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    WHEN            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LBRACKET        reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DOT             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    UNARY_OP        reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    PLUS            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MINUS           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    TIMES           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DIVIDE          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MOD             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    POW             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OR_SYMBOL       reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_AND_OP   reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    GREATERTHAN     reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LESSERTHAN      reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    EQUAL           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    CASE_EQUALITY   reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    NOTEQUAL        reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    AND             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OR              reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    COMMA           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RBRACKET        reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    THEN            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DO              reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    HASH_ROCKET     reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RKEY            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LKEY            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    END             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ELSIF           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ELSE            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ENSURE          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    NOT_SYMBOL      reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DEFINED_OP      reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RETURN          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    YIELD           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    CASE            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    FOR             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BEGIN           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    CLASS           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MODULE          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DEF             reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    PUTS            reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    VAR_GLOBAL      reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    VAR_LOCAL       reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    VAR_INSTANCE    reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    VAR_CLASS       reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    SYMBOL          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    STRING          reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    IDENTIFIER      reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    SUPER           reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OVERLOAD_PLUS   reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OVERLOAD_MINUS  reduce using rule 219 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)


state 366

    (104) primary -> IF expr then compstmt . END
    (105) primary -> IF expr then compstmt . elsif END
    (106) primary -> IF expr then compstmt . elsif ELSE compstmt END
    (125) elsif -> . ELSIF expr then compstmt
    (126) elsif -> . ELSIF expr then compstmt elsif

    END             shift and go to state 446
    ELSIF           shift and go to state 448

    elsif                          shift and go to state 447

state 367

    (138) then -> TERM THEN .

    LBRACKET        reduce using rule 138 (then -> TERM THEN .)
    UNDEF           reduce using rule 138 (then -> TERM THEN .)
    ALIAS           reduce using rule 138 (then -> TERM THEN .)
    BEGIN           reduce using rule 138 (then -> TERM THEN .)
    END             reduce using rule 138 (then -> TERM THEN .)
    RETURN          reduce using rule 138 (then -> TERM THEN .)
    YIELD           reduce using rule 138 (then -> TERM THEN .)
    NOT             reduce using rule 138 (then -> TERM THEN .)
    NOT_SYMBOL      reduce using rule 138 (then -> TERM THEN .)
    SUPER           reduce using rule 138 (then -> TERM THEN .)
    VAR_GLOBAL      reduce using rule 138 (then -> TERM THEN .)
    VAR_LOCAL       reduce using rule 138 (then -> TERM THEN .)
    VAR_INSTANCE    reduce using rule 138 (then -> TERM THEN .)
    VAR_CLASS       reduce using rule 138 (then -> TERM THEN .)
    LPAREN          reduce using rule 138 (then -> TERM THEN .)
    UNARY_OP        reduce using rule 138 (then -> TERM THEN .)
    LKEY            reduce using rule 138 (then -> TERM THEN .)
    DEFINED_OP      reduce using rule 138 (then -> TERM THEN .)
    IF              reduce using rule 138 (then -> TERM THEN .)
    UNLESS          reduce using rule 138 (then -> TERM THEN .)
    WHILE           reduce using rule 138 (then -> TERM THEN .)
    UNTIL           reduce using rule 138 (then -> TERM THEN .)
    CASE            reduce using rule 138 (then -> TERM THEN .)
    FOR             reduce using rule 138 (then -> TERM THEN .)
    CLASS           reduce using rule 138 (then -> TERM THEN .)
    MODULE          reduce using rule 138 (then -> TERM THEN .)
    DEF             reduce using rule 138 (then -> TERM THEN .)
    PUTS            reduce using rule 138 (then -> TERM THEN .)
    TIMES           reduce using rule 138 (then -> TERM THEN .)
    PLUS            reduce using rule 138 (then -> TERM THEN .)
    MINUS           reduce using rule 138 (then -> TERM THEN .)
    COMPLEMENT_OP   reduce using rule 138 (then -> TERM THEN .)
    IDENTIFIER      reduce using rule 138 (then -> TERM THEN .)
    NUMBER          reduce using rule 138 (then -> TERM THEN .)
    SYMBOL          reduce using rule 138 (then -> TERM THEN .)
    STRING          reduce using rule 138 (then -> TERM THEN .)


state 368

    (31) command -> primary DOT operation . call_args
    (35) function -> primary DOT operation . LPAREN call_args RPAREN
    (37) function -> primary DOT operation .
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 395
    DOT             reduce using rule 37 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 37 (function -> primary DOT operation .)
    MOD             reduce using rule 37 (function -> primary DOT operation .)
    POW             reduce using rule 37 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary DOT operation .)
    EQUAL           reduce using rule 37 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary DOT operation .)
    AND             reduce using rule 37 (function -> primary DOT operation .)
    OR              reduce using rule 37 (function -> primary DOT operation .)
    TERM            reduce using rule 37 (function -> primary DOT operation .)
    THEN            reduce using rule 37 (function -> primary DOT operation .)
    DO              reduce using rule 37 (function -> primary DOT operation .)
    $end            reduce using rule 37 (function -> primary DOT operation .)
    COMMA           reduce using rule 37 (function -> primary DOT operation .)
    RBRACKET        reduce using rule 37 (function -> primary DOT operation .)
    RESCUE          reduce using rule 37 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary DOT operation .)
    RKEY            reduce using rule 37 (function -> primary DOT operation .)
    RPAREN          reduce using rule 37 (function -> primary DOT operation .)
    WHEN            reduce using rule 37 (function -> primary DOT operation .)
    END             reduce using rule 37 (function -> primary DOT operation .)
    ELSIF           reduce using rule 37 (function -> primary DOT operation .)
    ELSE            reduce using rule 37 (function -> primary DOT operation .)
    ENSURE          reduce using rule 37 (function -> primary DOT operation .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNARY_OP        [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! LBRACKET        [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! PLUS            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! MINUS           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! TIMES           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! NUMBER          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! LPAREN          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! IF              [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! WHILE           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNLESS          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! UNTIL           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! NOT_SYMBOL      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! COMPLEMENT_OP   [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! DEFINED_OP      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! RETURN          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! YIELD           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! CASE            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! FOR             [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! BEGIN           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! CLASS           [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! MODULE          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! DEF             [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! PUTS            [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_GLOBAL      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_LOCAL       [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_INSTANCE    [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! VAR_CLASS       [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! SYMBOL          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! STRING          [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! IDENTIFIER      [ reduce using rule 37 (function -> primary DOT operation .) ]
  ! SUPER           [ reduce using rule 37 (function -> primary DOT operation .) ]

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 396
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 369

    (32) command -> primary UNARY_OP operation . call_args
    (36) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP operation .
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! shift/reduce conflict for COMPLEMENT_OP resolved as shift
  ! shift/reduce conflict for DEFINED_OP resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for SYMBOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VAR_GLOBAL resolved as shift
  ! shift/reduce conflict for VAR_LOCAL resolved as shift
  ! shift/reduce conflict for VAR_INSTANCE resolved as shift
  ! shift/reduce conflict for VAR_CLASS resolved as shift
    LPAREN          shift and go to state 397
    DOT             reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 38 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 38 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 38 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 38 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 38 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 38 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 38 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 38 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 38 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 38 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 38 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 38 (function -> primary UNARY_OP operation .)
    THEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    DO              reduce using rule 38 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 38 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 38 (function -> primary UNARY_OP operation .)
    RBRACKET        reduce using rule 38 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 38 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 38 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 38 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 38 (function -> primary UNARY_OP operation .)
    END             reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 38 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 38 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 38 (function -> primary UNARY_OP operation .)
    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNARY_OP        [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! LBRACKET        [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! PLUS            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! MINUS           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! TIMES           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! NUMBER          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! LPAREN          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! IF              [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! WHILE           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNLESS          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! UNTIL           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! NOT_SYMBOL      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! COMPLEMENT_OP   [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! DEFINED_OP      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! RETURN          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! YIELD           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! CASE            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! FOR             [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! BEGIN           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! CLASS           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! MODULE          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! DEF             [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! PUTS            [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_GLOBAL      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_LOCAL       [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_INSTANCE    [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! VAR_CLASS       [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! SYMBOL          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! STRING          [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! IDENTIFIER      [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]
  ! SUPER           [ reduce using rule 38 (function -> primary UNARY_OP operation .) ]

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 398
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 370

    (83) primary -> primary LBRACKET RBRACKET .
    (149) lhs -> primary LBRACKET RBRACKET .

  ! reduce/reduce conflict for COMMA resolved using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DOT             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    PLUS            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MINUS           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    TIMES           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MOD             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    POW             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    EQUAL           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    AND             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    OR              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    TERM            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    THEN            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DO              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NUMBER          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LPAREN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    IF              reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    WHILE           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNLESS          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    UNTIL           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    $end            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMMA           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RESCUE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RKEY            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RPAREN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    WHEN            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    LKEY            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    END             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ELSIF           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ELSE            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    ENSURE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    RETURN          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    YIELD           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CASE            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    FOR             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    BEGIN           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    CLASS           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    MODULE          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    DEF             reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    PUTS            reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    STRING          reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    SUPER           reduce using rule 83 (primary -> primary LBRACKET RBRACKET .)
    =               reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    PLUS_EQUAL      reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    MINUS_EQUAL     reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    TIMES_EQUAL     reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    MOD_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    POW_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    XOR_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    AND_EQUAL       reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)
    OR_EQUAL        reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .)

  ! COMMA           [ reduce using rule 149 (lhs -> primary LBRACKET RBRACKET .) ]


state 371

    (84) primary -> primary LBRACKET args . RBRACKET
    (150) lhs -> primary LBRACKET args . RBRACKET

    RBRACKET        shift and go to state 449


state 372

    (81) primary -> primary UNARY_OP . IDENTIFIER
    (36) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (38) function -> primary UNARY_OP . operation
    (32) command -> primary UNARY_OP . operation call_args
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 281

    operation                      shift and go to state 280

state 373

    (109) primary -> WHILE expr do compstmt . END

    END             shift and go to state 450


state 374

    (107) primary -> UNLESS expr then compstmt . END
    (108) primary -> UNLESS expr then compstmt . ELSE compstmt END

    END             shift and go to state 451
    ELSE            shift and go to state 452


state 375

    (110) primary -> UNTIL expr do compstmt . END

    END             shift and go to state 453


state 376

    (15) stmt -> BEGIN LKEY compstmt RKEY .

    IF              reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    WHILE           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    UNLESS          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    UNTIL           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    TERM            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    NUMBER          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    LPAREN          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    $end            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RESCUE          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RPAREN          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    WHEN            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    LBRACKET        reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    DOT             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    UNARY_OP        reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RANGE_INCLUSIVE reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RANGE_EXCLUSIVE reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    PLUS            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    MINUS           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    TIMES           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    DIVIDE          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    MOD             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    POW             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    OR_SYMBOL       reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    BINARY_XOR_OP   reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    BINARY_AND_OP   reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    GREATERTHAN     reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    GREATERTHANEQUAL reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    LESSERTHAN      reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    LESSERTHANEQUAL reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    EQUAL           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    CASE_EQUALITY   reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    NOTEQUAL        reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    MATCHED_STRINGS_OP reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    AND             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    OR              reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    COMMA           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RBRACKET        reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    THEN            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    DO              reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    HASH_ROCKET     reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RKEY            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    LKEY            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    END             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    ELSIF           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    ELSE            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    ENSURE          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    NOT_SYMBOL      reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    COMPLEMENT_OP   reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    DEFINED_OP      reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    RETURN          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    YIELD           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    CASE            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    FOR             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    BEGIN           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    CLASS           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    MODULE          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    DEF             reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    PUTS            reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    VAR_GLOBAL      reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    VAR_LOCAL       reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    VAR_INSTANCE    reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    VAR_CLASS       reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    SYMBOL          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    STRING          reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    IDENTIFIER      reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)
    SUPER           reduce using rule 15 (stmt -> BEGIN LKEY compstmt RKEY .)


state 377

    (73) arg -> primary .
    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args
    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    COMMA           reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RKEY            reduce using rule 73 (arg -> primary .)
    IF              reduce using rule 73 (arg -> primary .)
    WHILE           reduce using rule 73 (arg -> primary .)
    UNLESS          reduce using rule 73 (arg -> primary .)
    UNTIL           reduce using rule 73 (arg -> primary .)
    TERM            reduce using rule 73 (arg -> primary .)
    NUMBER          reduce using rule 73 (arg -> primary .)
    LPAREN          reduce using rule 73 (arg -> primary .)
    RPAREN          reduce using rule 73 (arg -> primary .)
    DOT             shift and go to state 251
    UNARY_OP        shift and go to state 252
    LBRACKET        shift and go to state 149


state 378

    (114) primary -> BEGIN compstmt rescue END .

    LBRACKET        reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    DOT             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    UNARY_OP        reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RANGE_INCLUSIVE reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RANGE_EXCLUSIVE reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    PLUS            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    MINUS           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    TIMES           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    DIVIDE          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    MOD             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    POW             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    OR_SYMBOL       reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    BINARY_XOR_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    BINARY_AND_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    COMBINED_COMPARISON_OP reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    GREATERTHAN     reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    GREATERTHANEQUAL reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    LESSERTHAN      reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    LESSERTHANEQUAL reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    EQUAL           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    CASE_EQUALITY   reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    NOTEQUAL        reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    MATCHED_STRINGS_OP reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    AND             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    OR              reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    IF              reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    WHILE           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    UNLESS          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    UNTIL           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    TERM            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    NUMBER          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    LPAREN          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    $end            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    COMMA           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RBRACKET        reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    THEN            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    DO              reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RESCUE          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    HASH_ROCKET     reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RKEY            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RPAREN          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    WHEN            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    LKEY            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    END             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    ELSIF           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    ELSE            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    ENSURE          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    NOT_SYMBOL      reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    COMPLEMENT_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    DEFINED_OP      reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    RETURN          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    YIELD           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    CASE            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    FOR             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    BEGIN           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    CLASS           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    MODULE          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    DEF             reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    PUTS            reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    VAR_GLOBAL      reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    VAR_LOCAL       reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    VAR_INSTANCE    reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    VAR_CLASS       reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    SYMBOL          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    STRING          reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    IDENTIFIER      reduce using rule 114 (primary -> BEGIN compstmt rescue END .)
    SUPER           reduce using rule 114 (primary -> BEGIN compstmt rescue END .)


state 379

    (115) primary -> BEGIN compstmt rescue ELSE . compstmt END
    (117) primary -> BEGIN compstmt rescue ELSE . compstmt ENSURE compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 454
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 380

    (116) primary -> BEGIN compstmt rescue ENSURE . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 455
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 381

    (131) rescue -> rescue RESCUE . args do compstmt
    (132) rescue -> rescue RESCUE . do compstmt
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    DO              shift and go to state 65
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    TERM            shift and go to state 57
    LPAREN          shift and go to state 384
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 351
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    args                           shift and go to state 456
    do                             shift and go to state 457
    arg                            shift and go to state 73
    term                           shift and go to state 64
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    factor                         shift and go to state 58
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 382

    (129) rescue -> RESCUE args . do compstmt
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 458
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 383

    (130) rescue -> RESCUE do . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 459
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 384

    (78) primary -> LPAREN . compstmt RPAREN
    (243) factor -> LPAREN . expression RPAREN
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (236) expression -> . expression PLUS term
    (237) expression -> . expression MINUS term
    (238) expression -> . term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    TERM            shift and go to state 57
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    NUMBER          shift and go to state 351
    LPAREN          shift and go to state 439
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 194
    expression                     shift and go to state 226
    stmt                           shift and go to state 3
    term                           shift and go to state 227
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    factor                         shift and go to state 58
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 385

    (91) primary -> LKEY args COMMA RKEY .

    LBRACKET        reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    DOT             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    UNARY_OP        reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RANGE_INCLUSIVE reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RANGE_EXCLUSIVE reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    PLUS            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    MINUS           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    TIMES           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    DIVIDE          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    MOD             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    POW             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    OR_SYMBOL       reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    BINARY_XOR_OP   reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    BINARY_AND_OP   reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    GREATERTHAN     reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    GREATERTHANEQUAL reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    LESSERTHAN      reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    LESSERTHANEQUAL reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    EQUAL           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    CASE_EQUALITY   reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    NOTEQUAL        reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    MATCHED_STRINGS_OP reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    AND             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    OR              reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    IF              reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    WHILE           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    UNLESS          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    UNTIL           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    TERM            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    NUMBER          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    LPAREN          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    $end            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    COMMA           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RBRACKET        reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    THEN            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    DO              reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RESCUE          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    HASH_ROCKET     reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RKEY            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RPAREN          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    WHEN            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    LKEY            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    END             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    ELSIF           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    ELSE            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    ENSURE          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    NOT_SYMBOL      reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    COMPLEMENT_OP   reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    DEFINED_OP      reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    RETURN          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    YIELD           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    CASE            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    FOR             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    BEGIN           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    CLASS           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    MODULE          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    DEF             reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    PUTS            reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    VAR_GLOBAL      reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    VAR_LOCAL       reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    VAR_INSTANCE    reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    VAR_CLASS       reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    SYMBOL          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    STRING          reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    IDENTIFIER      reduce using rule 91 (primary -> LKEY args COMMA RKEY .)
    SUPER           reduce using rule 91 (primary -> LKEY args COMMA RKEY .)


state 386

    (92) primary -> LKEY assocs COMMA RKEY .

    LBRACKET        reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    DOT             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    UNARY_OP        reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RANGE_INCLUSIVE reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RANGE_EXCLUSIVE reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    PLUS            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    MINUS           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    TIMES           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    DIVIDE          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    MOD             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    POW             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    OR_SYMBOL       reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_XOR_OP   reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_AND_OP   reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    GREATERTHAN     reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    GREATERTHANEQUAL reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    LESSERTHAN      reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    LESSERTHANEQUAL reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    EQUAL           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    CASE_EQUALITY   reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    NOTEQUAL        reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    MATCHED_STRINGS_OP reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    AND             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    OR              reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    IF              reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    WHILE           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    UNLESS          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    UNTIL           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    TERM            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    NUMBER          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    LPAREN          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    $end            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    COMMA           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RBRACKET        reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    THEN            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    DO              reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RESCUE          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    HASH_ROCKET     reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RKEY            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RPAREN          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    WHEN            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    LKEY            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    END             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    ELSIF           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    ELSE            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    ENSURE          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    NOT_SYMBOL      reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    COMPLEMENT_OP   reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    DEFINED_OP      reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    RETURN          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    YIELD           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    CASE            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    FOR             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    BEGIN           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    CLASS           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    MODULE          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    DEF             reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    PUTS            reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    VAR_GLOBAL      reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    VAR_LOCAL       reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    VAR_INSTANCE    reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    VAR_CLASS       reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    SYMBOL          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    STRING          reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    IDENTIFIER      reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)
    SUPER           reduce using rule 92 (primary -> LKEY assocs COMMA RKEY .)


state 387

    (173) assoc -> arg HASH_ROCKET arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RKEY            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    LBRACKET        reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    DOT             reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    UNARY_OP        reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    IF              reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    WHILE           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    UNLESS          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    UNTIL           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    TERM            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    NUMBER          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    LPAREN          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    $end            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RBRACKET        reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    THEN            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    DO              reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RESCUE          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    HASH_ROCKET     reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RPAREN          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    WHEN            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    LKEY            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    END             reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    ELSIF           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    ELSE            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    ENSURE          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    NOT_SYMBOL      reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    COMPLEMENT_OP   reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    DEFINED_OP      reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RETURN          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    YIELD           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    CASE            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    FOR             reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    BEGIN           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    CLASS           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    MODULE          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    DEF             reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    PUTS            reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    VAR_GLOBAL      reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    VAR_LOCAL       reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    VAR_INSTANCE    reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    VAR_CLASS       reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    SYMBOL          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    STRING          reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    IDENTIFIER      reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    SUPER           reduce using rule 173 (assoc -> arg HASH_ROCKET arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! PLUS            [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! MINUS           [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! TIMES           [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! DIVIDE          [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! MOD             [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! POW             [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! OR_SYMBOL       [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! GREATERTHAN     [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! LESSERTHAN      [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! EQUAL           [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! NOTEQUAL        [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! AND             [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]
  ! OR              [ reduce using rule 173 (assoc -> arg HASH_ROCKET arg .) ]


state 388

    (172) assocs -> assoc COMMA assoc .

    RKEY            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    COMMA           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    LBRACKET        reduce using rule 172 (assocs -> assoc COMMA assoc .)
    DOT             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    UNARY_OP        reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RANGE_INCLUSIVE reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RANGE_EXCLUSIVE reduce using rule 172 (assocs -> assoc COMMA assoc .)
    PLUS            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    MINUS           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    TIMES           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    DIVIDE          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    MOD             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    POW             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    OR_SYMBOL       reduce using rule 172 (assocs -> assoc COMMA assoc .)
    BINARY_XOR_OP   reduce using rule 172 (assocs -> assoc COMMA assoc .)
    BINARY_AND_OP   reduce using rule 172 (assocs -> assoc COMMA assoc .)
    COMBINED_COMPARISON_OP reduce using rule 172 (assocs -> assoc COMMA assoc .)
    GREATERTHAN     reduce using rule 172 (assocs -> assoc COMMA assoc .)
    GREATERTHANEQUAL reduce using rule 172 (assocs -> assoc COMMA assoc .)
    LESSERTHAN      reduce using rule 172 (assocs -> assoc COMMA assoc .)
    LESSERTHANEQUAL reduce using rule 172 (assocs -> assoc COMMA assoc .)
    EQUAL           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    CASE_EQUALITY   reduce using rule 172 (assocs -> assoc COMMA assoc .)
    NOTEQUAL        reduce using rule 172 (assocs -> assoc COMMA assoc .)
    MATCHED_STRINGS_OP reduce using rule 172 (assocs -> assoc COMMA assoc .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 172 (assocs -> assoc COMMA assoc .)
    BINARY_LEFT_SHIFT_OP reduce using rule 172 (assocs -> assoc COMMA assoc .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 172 (assocs -> assoc COMMA assoc .)
    AND             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    OR              reduce using rule 172 (assocs -> assoc COMMA assoc .)
    IF              reduce using rule 172 (assocs -> assoc COMMA assoc .)
    WHILE           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    UNLESS          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    UNTIL           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    TERM            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    NUMBER          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    LPAREN          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    $end            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RBRACKET        reduce using rule 172 (assocs -> assoc COMMA assoc .)
    THEN            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    DO              reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RESCUE          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    HASH_ROCKET     reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RPAREN          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    WHEN            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    LKEY            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    END             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    ELSIF           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    ELSE            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    ENSURE          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    NOT_SYMBOL      reduce using rule 172 (assocs -> assoc COMMA assoc .)
    COMPLEMENT_OP   reduce using rule 172 (assocs -> assoc COMMA assoc .)
    DEFINED_OP      reduce using rule 172 (assocs -> assoc COMMA assoc .)
    RETURN          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    YIELD           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    CASE            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    FOR             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    BEGIN           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    CLASS           reduce using rule 172 (assocs -> assoc COMMA assoc .)
    MODULE          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    DEF             reduce using rule 172 (assocs -> assoc COMMA assoc .)
    PUTS            reduce using rule 172 (assocs -> assoc COMMA assoc .)
    VAR_GLOBAL      reduce using rule 172 (assocs -> assoc COMMA assoc .)
    VAR_LOCAL       reduce using rule 172 (assocs -> assoc COMMA assoc .)
    VAR_INSTANCE    reduce using rule 172 (assocs -> assoc COMMA assoc .)
    VAR_CLASS       reduce using rule 172 (assocs -> assoc COMMA assoc .)
    SYMBOL          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    STRING          reduce using rule 172 (assocs -> assoc COMMA assoc .)
    IDENTIFIER      reduce using rule 172 (assocs -> assoc COMMA assoc .)
    SUPER           reduce using rule 172 (assocs -> assoc COMMA assoc .)


state 389

    (173) assoc -> arg . HASH_ROCKET arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

    HASH_ROCKET     shift and go to state 269
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191


state 390

    (17) stmt -> lhs = command LBRACKET . do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 460
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 391

    (101) primary -> function LKEY compstmt LKEY .

    LBRACKET        reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    DOT             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    UNARY_OP        reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    PLUS            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    MINUS           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    TIMES           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    DIVIDE          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    MOD             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    POW             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    OR_SYMBOL       reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    GREATERTHAN     reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    LESSERTHAN      reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    EQUAL           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    NOTEQUAL        reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    AND             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    OR              reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    IF              reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    WHILE           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    UNLESS          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    UNTIL           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    TERM            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    NUMBER          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    LPAREN          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    $end            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    COMMA           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RBRACKET        reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    THEN            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    DO              reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RESCUE          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    HASH_ROCKET     reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RKEY            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RPAREN          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    WHEN            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    LKEY            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    END             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    ELSIF           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    ELSE            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    ENSURE          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    DEFINED_OP      reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    RETURN          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    YIELD           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    CASE            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    FOR             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    BEGIN           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    CLASS           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    MODULE          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    DEF             reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    PUTS            reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    VAR_LOCAL       reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    VAR_CLASS       reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    SYMBOL          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    STRING          reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    IDENTIFIER      reduce using rule 101 (primary -> function LKEY compstmt LKEY .)
    SUPER           reduce using rule 101 (primary -> function LKEY compstmt LKEY .)


state 392

    (102) primary -> function LKEY OR_SYMBOL OR_SYMBOL . compstmt LKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    function                       shift and go to state 18
    compstmt                       shift and go to state 461
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 393

    (103) primary -> function LKEY OR_SYMBOL block_var . OR_SYMBOL compstmt LKEY

    OR_SYMBOL       shift and go to state 462


state 394

    (150) lhs -> primary LBRACKET args RBRACKET .
    (84) primary -> primary LBRACKET args RBRACKET .

  ! reduce/reduce conflict for LBRACKET resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for TIMES resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNLESS resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNTIL resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for LKEY resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for YIELD resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for BEGIN resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for CLASS resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for MODULE resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for STRING resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for SUPER resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    =               reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    PLUS_EQUAL      reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    MINUS_EQUAL     reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    TIMES_EQUAL     reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    MOD_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    POW_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    XOR_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    AND_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    OR_EQUAL        reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    IN              reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    LBRACKET        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DOT             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    PLUS            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MINUS           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    TIMES           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MOD             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    POW             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    AND             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OR              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    IF              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    WHILE           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    TERM            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    $end            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMMA           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RKEY            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    THEN            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DO              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    WHEN            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LKEY            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    END             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ELSE            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NOT_SYMBOL      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMPLEMENT_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DEFINED_OP      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RETURN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    YIELD           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CASE            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    FOR             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BEGIN           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CLASS           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MODULE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DEF             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    PUTS            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_GLOBAL      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_LOCAL       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_INSTANCE    reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_CLASS       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    SYMBOL          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    STRING          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    IDENTIFIER      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    SUPER           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)

  ! COMMA           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RPAREN          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! OR_SYMBOL       [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! TIMES           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_GLOBAL      [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_LOCAL       [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_INSTANCE    [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_CLASS       [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LPAREN          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNARY_OP        [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LKEY            [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RETURN          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! YIELD           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! DEFINED_OP      [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! IF              [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNLESS          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! WHILE           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNTIL           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! CASE            [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! FOR             [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! BEGIN           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! CLASS           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! MODULE          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! DEF             [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! PUTS            [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! NUMBER          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! SYMBOL          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! STRING          [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! IDENTIFIER      [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! SUPER           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]


state 395

    (35) function -> primary DOT operation LPAREN . call_args RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NOT             shift and go to state 25
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 463
    compstmt                       shift and go to state 194
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 260
    command                        shift and go to state 289
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 129
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 291
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 396

    (31) command -> primary DOT operation call_args .

    DO              reduce using rule 31 (command -> primary DOT operation call_args .)
    TERM            reduce using rule 31 (command -> primary DOT operation call_args .)
    NUMBER          reduce using rule 31 (command -> primary DOT operation call_args .)
    LPAREN          reduce using rule 31 (command -> primary DOT operation call_args .)
    AND             reduce using rule 31 (command -> primary DOT operation call_args .)
    OR              reduce using rule 31 (command -> primary DOT operation call_args .)
    IF              reduce using rule 31 (command -> primary DOT operation call_args .)
    WHILE           reduce using rule 31 (command -> primary DOT operation call_args .)
    UNLESS          reduce using rule 31 (command -> primary DOT operation call_args .)
    UNTIL           reduce using rule 31 (command -> primary DOT operation call_args .)
    $end            reduce using rule 31 (command -> primary DOT operation call_args .)
    THEN            reduce using rule 31 (command -> primary DOT operation call_args .)
    RESCUE          reduce using rule 31 (command -> primary DOT operation call_args .)
    LBRACKET        reduce using rule 31 (command -> primary DOT operation call_args .)
    DOT             reduce using rule 31 (command -> primary DOT operation call_args .)
    UNARY_OP        reduce using rule 31 (command -> primary DOT operation call_args .)
    RANGE_INCLUSIVE reduce using rule 31 (command -> primary DOT operation call_args .)
    RANGE_EXCLUSIVE reduce using rule 31 (command -> primary DOT operation call_args .)
    PLUS            reduce using rule 31 (command -> primary DOT operation call_args .)
    MINUS           reduce using rule 31 (command -> primary DOT operation call_args .)
    TIMES           reduce using rule 31 (command -> primary DOT operation call_args .)
    DIVIDE          reduce using rule 31 (command -> primary DOT operation call_args .)
    MOD             reduce using rule 31 (command -> primary DOT operation call_args .)
    POW             reduce using rule 31 (command -> primary DOT operation call_args .)
    OR_SYMBOL       reduce using rule 31 (command -> primary DOT operation call_args .)
    BINARY_XOR_OP   reduce using rule 31 (command -> primary DOT operation call_args .)
    BINARY_AND_OP   reduce using rule 31 (command -> primary DOT operation call_args .)
    COMBINED_COMPARISON_OP reduce using rule 31 (command -> primary DOT operation call_args .)
    GREATERTHAN     reduce using rule 31 (command -> primary DOT operation call_args .)
    GREATERTHANEQUAL reduce using rule 31 (command -> primary DOT operation call_args .)
    LESSERTHAN      reduce using rule 31 (command -> primary DOT operation call_args .)
    LESSERTHANEQUAL reduce using rule 31 (command -> primary DOT operation call_args .)
    EQUAL           reduce using rule 31 (command -> primary DOT operation call_args .)
    CASE_EQUALITY   reduce using rule 31 (command -> primary DOT operation call_args .)
    NOTEQUAL        reduce using rule 31 (command -> primary DOT operation call_args .)
    MATCHED_STRINGS_OP reduce using rule 31 (command -> primary DOT operation call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 31 (command -> primary DOT operation call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 31 (command -> primary DOT operation call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 31 (command -> primary DOT operation call_args .)
    COMMA           reduce using rule 31 (command -> primary DOT operation call_args .)
    RBRACKET        reduce using rule 31 (command -> primary DOT operation call_args .)
    HASH_ROCKET     reduce using rule 31 (command -> primary DOT operation call_args .)
    RKEY            reduce using rule 31 (command -> primary DOT operation call_args .)
    RPAREN          reduce using rule 31 (command -> primary DOT operation call_args .)
    WHEN            reduce using rule 31 (command -> primary DOT operation call_args .)
    LKEY            reduce using rule 31 (command -> primary DOT operation call_args .)
    END             reduce using rule 31 (command -> primary DOT operation call_args .)
    ELSIF           reduce using rule 31 (command -> primary DOT operation call_args .)
    ELSE            reduce using rule 31 (command -> primary DOT operation call_args .)
    ENSURE          reduce using rule 31 (command -> primary DOT operation call_args .)
    NOT_SYMBOL      reduce using rule 31 (command -> primary DOT operation call_args .)
    COMPLEMENT_OP   reduce using rule 31 (command -> primary DOT operation call_args .)
    DEFINED_OP      reduce using rule 31 (command -> primary DOT operation call_args .)
    RETURN          reduce using rule 31 (command -> primary DOT operation call_args .)
    YIELD           reduce using rule 31 (command -> primary DOT operation call_args .)
    CASE            reduce using rule 31 (command -> primary DOT operation call_args .)
    FOR             reduce using rule 31 (command -> primary DOT operation call_args .)
    BEGIN           reduce using rule 31 (command -> primary DOT operation call_args .)
    CLASS           reduce using rule 31 (command -> primary DOT operation call_args .)
    MODULE          reduce using rule 31 (command -> primary DOT operation call_args .)
    DEF             reduce using rule 31 (command -> primary DOT operation call_args .)
    PUTS            reduce using rule 31 (command -> primary DOT operation call_args .)
    VAR_GLOBAL      reduce using rule 31 (command -> primary DOT operation call_args .)
    VAR_LOCAL       reduce using rule 31 (command -> primary DOT operation call_args .)
    VAR_INSTANCE    reduce using rule 31 (command -> primary DOT operation call_args .)
    VAR_CLASS       reduce using rule 31 (command -> primary DOT operation call_args .)
    SYMBOL          reduce using rule 31 (command -> primary DOT operation call_args .)
    STRING          reduce using rule 31 (command -> primary DOT operation call_args .)
    IDENTIFIER      reduce using rule 31 (command -> primary DOT operation call_args .)
    SUPER           reduce using rule 31 (command -> primary DOT operation call_args .)


state 397

    (36) function -> primary UNARY_OP operation LPAREN . call_args RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 261
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 285
    YIELD           shift and go to state 290
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NOT             shift and go to state 25
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 464
    compstmt                       shift and go to state 194
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 260
    command                        shift and go to state 289
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 129
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 291
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 44

state 398

    (32) command -> primary UNARY_OP operation call_args .

    DO              reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    TERM            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    NUMBER          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    LPAREN          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    AND             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    OR              reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    IF              reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    WHILE           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    UNLESS          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    UNTIL           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    $end            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    THEN            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RESCUE          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    LBRACKET        reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    DOT             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    UNARY_OP        reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RANGE_INCLUSIVE reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RANGE_EXCLUSIVE reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    PLUS            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    MINUS           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    TIMES           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    DIVIDE          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    MOD             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    POW             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    OR_SYMBOL       reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    BINARY_XOR_OP   reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    BINARY_AND_OP   reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    COMBINED_COMPARISON_OP reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    GREATERTHAN     reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    GREATERTHANEQUAL reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    LESSERTHAN      reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    LESSERTHANEQUAL reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    EQUAL           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    CASE_EQUALITY   reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    NOTEQUAL        reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    MATCHED_STRINGS_OP reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    BINARY_LEFT_SHIFT_OP reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    COMMA           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RBRACKET        reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    HASH_ROCKET     reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RKEY            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RPAREN          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    WHEN            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    LKEY            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    END             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    ELSIF           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    ELSE            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    ENSURE          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    NOT_SYMBOL      reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    COMPLEMENT_OP   reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    DEFINED_OP      reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    RETURN          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    YIELD           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    CASE            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    FOR             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    BEGIN           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    CLASS           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    MODULE          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    DEF             reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    PUTS            reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    VAR_GLOBAL      reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    VAR_LOCAL       reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    VAR_INSTANCE    reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    VAR_CLASS       reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    SYMBOL          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    STRING          reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    IDENTIFIER      reduce using rule 32 (command -> primary UNARY_OP operation call_args .)
    SUPER           reduce using rule 32 (command -> primary UNARY_OP operation call_args .)


state 399

    (144) mrhs -> args COMMA .

    LBRACKET        reduce using rule 144 (mrhs -> args COMMA .)
    DOT             reduce using rule 144 (mrhs -> args COMMA .)
    UNARY_OP        reduce using rule 144 (mrhs -> args COMMA .)
    RANGE_INCLUSIVE reduce using rule 144 (mrhs -> args COMMA .)
    RANGE_EXCLUSIVE reduce using rule 144 (mrhs -> args COMMA .)
    PLUS            reduce using rule 144 (mrhs -> args COMMA .)
    MINUS           reduce using rule 144 (mrhs -> args COMMA .)
    TIMES           reduce using rule 144 (mrhs -> args COMMA .)
    DIVIDE          reduce using rule 144 (mrhs -> args COMMA .)
    MOD             reduce using rule 144 (mrhs -> args COMMA .)
    POW             reduce using rule 144 (mrhs -> args COMMA .)
    OR_SYMBOL       reduce using rule 144 (mrhs -> args COMMA .)
    BINARY_XOR_OP   reduce using rule 144 (mrhs -> args COMMA .)
    BINARY_AND_OP   reduce using rule 144 (mrhs -> args COMMA .)
    COMBINED_COMPARISON_OP reduce using rule 144 (mrhs -> args COMMA .)
    GREATERTHAN     reduce using rule 144 (mrhs -> args COMMA .)
    GREATERTHANEQUAL reduce using rule 144 (mrhs -> args COMMA .)
    LESSERTHAN      reduce using rule 144 (mrhs -> args COMMA .)
    LESSERTHANEQUAL reduce using rule 144 (mrhs -> args COMMA .)
    EQUAL           reduce using rule 144 (mrhs -> args COMMA .)
    CASE_EQUALITY   reduce using rule 144 (mrhs -> args COMMA .)
    NOTEQUAL        reduce using rule 144 (mrhs -> args COMMA .)
    MATCHED_STRINGS_OP reduce using rule 144 (mrhs -> args COMMA .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 144 (mrhs -> args COMMA .)
    BINARY_LEFT_SHIFT_OP reduce using rule 144 (mrhs -> args COMMA .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 144 (mrhs -> args COMMA .)
    AND             reduce using rule 144 (mrhs -> args COMMA .)
    OR              reduce using rule 144 (mrhs -> args COMMA .)
    IF              reduce using rule 144 (mrhs -> args COMMA .)
    WHILE           reduce using rule 144 (mrhs -> args COMMA .)
    UNLESS          reduce using rule 144 (mrhs -> args COMMA .)
    UNTIL           reduce using rule 144 (mrhs -> args COMMA .)
    TERM            reduce using rule 144 (mrhs -> args COMMA .)
    NUMBER          reduce using rule 144 (mrhs -> args COMMA .)
    LPAREN          reduce using rule 144 (mrhs -> args COMMA .)
    $end            reduce using rule 144 (mrhs -> args COMMA .)
    COMMA           reduce using rule 144 (mrhs -> args COMMA .)
    RBRACKET        reduce using rule 144 (mrhs -> args COMMA .)
    THEN            reduce using rule 144 (mrhs -> args COMMA .)
    DO              reduce using rule 144 (mrhs -> args COMMA .)
    RESCUE          reduce using rule 144 (mrhs -> args COMMA .)
    HASH_ROCKET     reduce using rule 144 (mrhs -> args COMMA .)
    RKEY            reduce using rule 144 (mrhs -> args COMMA .)
    RPAREN          reduce using rule 144 (mrhs -> args COMMA .)
    WHEN            reduce using rule 144 (mrhs -> args COMMA .)
    LKEY            reduce using rule 144 (mrhs -> args COMMA .)
    END             reduce using rule 144 (mrhs -> args COMMA .)
    ELSIF           reduce using rule 144 (mrhs -> args COMMA .)
    ELSE            reduce using rule 144 (mrhs -> args COMMA .)
    ENSURE          reduce using rule 144 (mrhs -> args COMMA .)
    NOT_SYMBOL      reduce using rule 144 (mrhs -> args COMMA .)
    COMPLEMENT_OP   reduce using rule 144 (mrhs -> args COMMA .)
    DEFINED_OP      reduce using rule 144 (mrhs -> args COMMA .)
    RETURN          reduce using rule 144 (mrhs -> args COMMA .)
    YIELD           reduce using rule 144 (mrhs -> args COMMA .)
    CASE            reduce using rule 144 (mrhs -> args COMMA .)
    FOR             reduce using rule 144 (mrhs -> args COMMA .)
    BEGIN           reduce using rule 144 (mrhs -> args COMMA .)
    CLASS           reduce using rule 144 (mrhs -> args COMMA .)
    MODULE          reduce using rule 144 (mrhs -> args COMMA .)
    DEF             reduce using rule 144 (mrhs -> args COMMA .)
    PUTS            reduce using rule 144 (mrhs -> args COMMA .)
    VAR_GLOBAL      reduce using rule 144 (mrhs -> args COMMA .)
    VAR_LOCAL       reduce using rule 144 (mrhs -> args COMMA .)
    VAR_INSTANCE    reduce using rule 144 (mrhs -> args COMMA .)
    VAR_CLASS       reduce using rule 144 (mrhs -> args COMMA .)
    SYMBOL          reduce using rule 144 (mrhs -> args COMMA .)
    STRING          reduce using rule 144 (mrhs -> args COMMA .)
    IDENTIFIER      reduce using rule 144 (mrhs -> args COMMA .)
    SUPER           reduce using rule 144 (mrhs -> args COMMA .)


state 400

    (145) mrhs -> args TIMES .

    LBRACKET        reduce using rule 145 (mrhs -> args TIMES .)
    DOT             reduce using rule 145 (mrhs -> args TIMES .)
    UNARY_OP        reduce using rule 145 (mrhs -> args TIMES .)
    RANGE_INCLUSIVE reduce using rule 145 (mrhs -> args TIMES .)
    RANGE_EXCLUSIVE reduce using rule 145 (mrhs -> args TIMES .)
    PLUS            reduce using rule 145 (mrhs -> args TIMES .)
    MINUS           reduce using rule 145 (mrhs -> args TIMES .)
    TIMES           reduce using rule 145 (mrhs -> args TIMES .)
    DIVIDE          reduce using rule 145 (mrhs -> args TIMES .)
    MOD             reduce using rule 145 (mrhs -> args TIMES .)
    POW             reduce using rule 145 (mrhs -> args TIMES .)
    OR_SYMBOL       reduce using rule 145 (mrhs -> args TIMES .)
    BINARY_XOR_OP   reduce using rule 145 (mrhs -> args TIMES .)
    BINARY_AND_OP   reduce using rule 145 (mrhs -> args TIMES .)
    COMBINED_COMPARISON_OP reduce using rule 145 (mrhs -> args TIMES .)
    GREATERTHAN     reduce using rule 145 (mrhs -> args TIMES .)
    GREATERTHANEQUAL reduce using rule 145 (mrhs -> args TIMES .)
    LESSERTHAN      reduce using rule 145 (mrhs -> args TIMES .)
    LESSERTHANEQUAL reduce using rule 145 (mrhs -> args TIMES .)
    EQUAL           reduce using rule 145 (mrhs -> args TIMES .)
    CASE_EQUALITY   reduce using rule 145 (mrhs -> args TIMES .)
    NOTEQUAL        reduce using rule 145 (mrhs -> args TIMES .)
    MATCHED_STRINGS_OP reduce using rule 145 (mrhs -> args TIMES .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 145 (mrhs -> args TIMES .)
    BINARY_LEFT_SHIFT_OP reduce using rule 145 (mrhs -> args TIMES .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 145 (mrhs -> args TIMES .)
    AND             reduce using rule 145 (mrhs -> args TIMES .)
    OR              reduce using rule 145 (mrhs -> args TIMES .)
    IF              reduce using rule 145 (mrhs -> args TIMES .)
    WHILE           reduce using rule 145 (mrhs -> args TIMES .)
    UNLESS          reduce using rule 145 (mrhs -> args TIMES .)
    UNTIL           reduce using rule 145 (mrhs -> args TIMES .)
    TERM            reduce using rule 145 (mrhs -> args TIMES .)
    NUMBER          reduce using rule 145 (mrhs -> args TIMES .)
    LPAREN          reduce using rule 145 (mrhs -> args TIMES .)
    $end            reduce using rule 145 (mrhs -> args TIMES .)
    COMMA           reduce using rule 145 (mrhs -> args TIMES .)
    RBRACKET        reduce using rule 145 (mrhs -> args TIMES .)
    THEN            reduce using rule 145 (mrhs -> args TIMES .)
    DO              reduce using rule 145 (mrhs -> args TIMES .)
    RESCUE          reduce using rule 145 (mrhs -> args TIMES .)
    HASH_ROCKET     reduce using rule 145 (mrhs -> args TIMES .)
    RKEY            reduce using rule 145 (mrhs -> args TIMES .)
    RPAREN          reduce using rule 145 (mrhs -> args TIMES .)
    WHEN            reduce using rule 145 (mrhs -> args TIMES .)
    LKEY            reduce using rule 145 (mrhs -> args TIMES .)
    END             reduce using rule 145 (mrhs -> args TIMES .)
    ELSIF           reduce using rule 145 (mrhs -> args TIMES .)
    ELSE            reduce using rule 145 (mrhs -> args TIMES .)
    ENSURE          reduce using rule 145 (mrhs -> args TIMES .)
    NOT_SYMBOL      reduce using rule 145 (mrhs -> args TIMES .)
    COMPLEMENT_OP   reduce using rule 145 (mrhs -> args TIMES .)
    DEFINED_OP      reduce using rule 145 (mrhs -> args TIMES .)
    RETURN          reduce using rule 145 (mrhs -> args TIMES .)
    YIELD           reduce using rule 145 (mrhs -> args TIMES .)
    CASE            reduce using rule 145 (mrhs -> args TIMES .)
    FOR             reduce using rule 145 (mrhs -> args TIMES .)
    BEGIN           reduce using rule 145 (mrhs -> args TIMES .)
    CLASS           reduce using rule 145 (mrhs -> args TIMES .)
    MODULE          reduce using rule 145 (mrhs -> args TIMES .)
    DEF             reduce using rule 145 (mrhs -> args TIMES .)
    PUTS            reduce using rule 145 (mrhs -> args TIMES .)
    VAR_GLOBAL      reduce using rule 145 (mrhs -> args TIMES .)
    VAR_LOCAL       reduce using rule 145 (mrhs -> args TIMES .)
    VAR_INSTANCE    reduce using rule 145 (mrhs -> args TIMES .)
    VAR_CLASS       reduce using rule 145 (mrhs -> args TIMES .)
    SYMBOL          reduce using rule 145 (mrhs -> args TIMES .)
    STRING          reduce using rule 145 (mrhs -> args TIMES .)
    IDENTIFIER      reduce using rule 145 (mrhs -> args TIMES .)
    SUPER           reduce using rule 145 (mrhs -> args TIMES .)


state 401

    (146) mrhs -> args arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 146 (mrhs -> args arg .)
    DOT             reduce using rule 146 (mrhs -> args arg .)
    UNARY_OP        reduce using rule 146 (mrhs -> args arg .)
    IF              reduce using rule 146 (mrhs -> args arg .)
    WHILE           reduce using rule 146 (mrhs -> args arg .)
    UNLESS          reduce using rule 146 (mrhs -> args arg .)
    UNTIL           reduce using rule 146 (mrhs -> args arg .)
    TERM            reduce using rule 146 (mrhs -> args arg .)
    NUMBER          reduce using rule 146 (mrhs -> args arg .)
    LPAREN          reduce using rule 146 (mrhs -> args arg .)
    $end            reduce using rule 146 (mrhs -> args arg .)
    COMMA           reduce using rule 146 (mrhs -> args arg .)
    RBRACKET        reduce using rule 146 (mrhs -> args arg .)
    THEN            reduce using rule 146 (mrhs -> args arg .)
    DO              reduce using rule 146 (mrhs -> args arg .)
    RESCUE          reduce using rule 146 (mrhs -> args arg .)
    HASH_ROCKET     reduce using rule 146 (mrhs -> args arg .)
    RKEY            reduce using rule 146 (mrhs -> args arg .)
    RPAREN          reduce using rule 146 (mrhs -> args arg .)
    WHEN            reduce using rule 146 (mrhs -> args arg .)
    LKEY            reduce using rule 146 (mrhs -> args arg .)
    END             reduce using rule 146 (mrhs -> args arg .)
    ELSIF           reduce using rule 146 (mrhs -> args arg .)
    ELSE            reduce using rule 146 (mrhs -> args arg .)
    ENSURE          reduce using rule 146 (mrhs -> args arg .)
    NOT_SYMBOL      reduce using rule 146 (mrhs -> args arg .)
    COMPLEMENT_OP   reduce using rule 146 (mrhs -> args arg .)
    DEFINED_OP      reduce using rule 146 (mrhs -> args arg .)
    RETURN          reduce using rule 146 (mrhs -> args arg .)
    YIELD           reduce using rule 146 (mrhs -> args arg .)
    CASE            reduce using rule 146 (mrhs -> args arg .)
    FOR             reduce using rule 146 (mrhs -> args arg .)
    BEGIN           reduce using rule 146 (mrhs -> args arg .)
    CLASS           reduce using rule 146 (mrhs -> args arg .)
    MODULE          reduce using rule 146 (mrhs -> args arg .)
    DEF             reduce using rule 146 (mrhs -> args arg .)
    PUTS            reduce using rule 146 (mrhs -> args arg .)
    VAR_GLOBAL      reduce using rule 146 (mrhs -> args arg .)
    VAR_LOCAL       reduce using rule 146 (mrhs -> args arg .)
    VAR_INSTANCE    reduce using rule 146 (mrhs -> args arg .)
    VAR_CLASS       reduce using rule 146 (mrhs -> args arg .)
    SYMBOL          reduce using rule 146 (mrhs -> args arg .)
    STRING          reduce using rule 146 (mrhs -> args arg .)
    IDENTIFIER      reduce using rule 146 (mrhs -> args arg .)
    SUPER           reduce using rule 146 (mrhs -> args arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 146 (mrhs -> args arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 146 (mrhs -> args arg .) ]
  ! PLUS            [ reduce using rule 146 (mrhs -> args arg .) ]
  ! MINUS           [ reduce using rule 146 (mrhs -> args arg .) ]
  ! TIMES           [ reduce using rule 146 (mrhs -> args arg .) ]
  ! DIVIDE          [ reduce using rule 146 (mrhs -> args arg .) ]
  ! MOD             [ reduce using rule 146 (mrhs -> args arg .) ]
  ! POW             [ reduce using rule 146 (mrhs -> args arg .) ]
  ! OR_SYMBOL       [ reduce using rule 146 (mrhs -> args arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 146 (mrhs -> args arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 146 (mrhs -> args arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 146 (mrhs -> args arg .) ]
  ! GREATERTHAN     [ reduce using rule 146 (mrhs -> args arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 146 (mrhs -> args arg .) ]
  ! LESSERTHAN      [ reduce using rule 146 (mrhs -> args arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 146 (mrhs -> args arg .) ]
  ! EQUAL           [ reduce using rule 146 (mrhs -> args arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 146 (mrhs -> args arg .) ]
  ! NOTEQUAL        [ reduce using rule 146 (mrhs -> args arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 146 (mrhs -> args arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 146 (mrhs -> args arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 146 (mrhs -> args arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 146 (mrhs -> args arg .) ]
  ! AND             [ reduce using rule 146 (mrhs -> args arg .) ]
  ! OR              [ reduce using rule 146 (mrhs -> args arg .) ]


state 402

    (147) mrhs -> TIMES arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 147 (mrhs -> TIMES arg .)
    DOT             reduce using rule 147 (mrhs -> TIMES arg .)
    UNARY_OP        reduce using rule 147 (mrhs -> TIMES arg .)
    IF              reduce using rule 147 (mrhs -> TIMES arg .)
    WHILE           reduce using rule 147 (mrhs -> TIMES arg .)
    UNLESS          reduce using rule 147 (mrhs -> TIMES arg .)
    UNTIL           reduce using rule 147 (mrhs -> TIMES arg .)
    TERM            reduce using rule 147 (mrhs -> TIMES arg .)
    NUMBER          reduce using rule 147 (mrhs -> TIMES arg .)
    LPAREN          reduce using rule 147 (mrhs -> TIMES arg .)
    $end            reduce using rule 147 (mrhs -> TIMES arg .)
    COMMA           reduce using rule 147 (mrhs -> TIMES arg .)
    RBRACKET        reduce using rule 147 (mrhs -> TIMES arg .)
    THEN            reduce using rule 147 (mrhs -> TIMES arg .)
    DO              reduce using rule 147 (mrhs -> TIMES arg .)
    RESCUE          reduce using rule 147 (mrhs -> TIMES arg .)
    HASH_ROCKET     reduce using rule 147 (mrhs -> TIMES arg .)
    RKEY            reduce using rule 147 (mrhs -> TIMES arg .)
    RPAREN          reduce using rule 147 (mrhs -> TIMES arg .)
    WHEN            reduce using rule 147 (mrhs -> TIMES arg .)
    LKEY            reduce using rule 147 (mrhs -> TIMES arg .)
    END             reduce using rule 147 (mrhs -> TIMES arg .)
    ELSIF           reduce using rule 147 (mrhs -> TIMES arg .)
    ELSE            reduce using rule 147 (mrhs -> TIMES arg .)
    ENSURE          reduce using rule 147 (mrhs -> TIMES arg .)
    NOT_SYMBOL      reduce using rule 147 (mrhs -> TIMES arg .)
    COMPLEMENT_OP   reduce using rule 147 (mrhs -> TIMES arg .)
    DEFINED_OP      reduce using rule 147 (mrhs -> TIMES arg .)
    RETURN          reduce using rule 147 (mrhs -> TIMES arg .)
    YIELD           reduce using rule 147 (mrhs -> TIMES arg .)
    CASE            reduce using rule 147 (mrhs -> TIMES arg .)
    FOR             reduce using rule 147 (mrhs -> TIMES arg .)
    BEGIN           reduce using rule 147 (mrhs -> TIMES arg .)
    CLASS           reduce using rule 147 (mrhs -> TIMES arg .)
    MODULE          reduce using rule 147 (mrhs -> TIMES arg .)
    DEF             reduce using rule 147 (mrhs -> TIMES arg .)
    PUTS            reduce using rule 147 (mrhs -> TIMES arg .)
    VAR_GLOBAL      reduce using rule 147 (mrhs -> TIMES arg .)
    VAR_LOCAL       reduce using rule 147 (mrhs -> TIMES arg .)
    VAR_INSTANCE    reduce using rule 147 (mrhs -> TIMES arg .)
    VAR_CLASS       reduce using rule 147 (mrhs -> TIMES arg .)
    SYMBOL          reduce using rule 147 (mrhs -> TIMES arg .)
    STRING          reduce using rule 147 (mrhs -> TIMES arg .)
    IDENTIFIER      reduce using rule 147 (mrhs -> TIMES arg .)
    SUPER           reduce using rule 147 (mrhs -> TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! PLUS            [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! MINUS           [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! TIMES           [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! MOD             [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! POW             [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! EQUAL           [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! AND             [ reduce using rule 147 (mrhs -> TIMES arg .) ]
  ! OR              [ reduce using rule 147 (mrhs -> TIMES arg .) ]


state 403

    (95) primary -> RETURN LPAREN call_args RPAREN .

    LBRACKET        reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    DOT             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    PLUS            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    MINUS           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    TIMES           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    MOD             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    POW             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    AND             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    OR              reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    IF              reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    WHILE           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    TERM            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    $end            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    COMMA           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    THEN            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    DO              reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RKEY            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    WHEN            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    LKEY            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    END             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    ELSE            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    RETURN          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    YIELD           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    CASE            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    FOR             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    CLASS           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    MODULE          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    DEF             reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    PUTS            reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    STRING          reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)
    SUPER           reduce using rule 95 (primary -> RETURN LPAREN call_args RPAREN .)


state 404

    (158) mlhs -> TIMES lhs .
    (41) arg -> lhs . = arg
    (42) arg -> lhs . op_asgn arg
    (223) op_asgn -> . PLUS_EQUAL
    (224) op_asgn -> . MINUS_EQUAL
    (225) op_asgn -> . TIMES_EQUAL
    (226) op_asgn -> . DIVIDE_EQUAL
    (227) op_asgn -> . MOD_EQUAL
    (228) op_asgn -> . POW_EQUAL
    (229) op_asgn -> . SINGLE_AND_EQUAL
    (230) op_asgn -> . SINGLE_OR_EQUAL
    (231) op_asgn -> . XOR_EQUAL
    (232) op_asgn -> . BINARY_LEFT_EQUAL
    (233) op_asgn -> . BINARY_RIGHT_EQUAL
    (234) op_asgn -> . AND_EQUAL
    (235) op_asgn -> . OR_EQUAL

  ! shift/reduce conflict for = resolved as shift
    RBRACKET        reduce using rule 158 (mlhs -> TIMES lhs .)
    =               shift and go to state 237
    PLUS_EQUAL      shift and go to state 135
    MINUS_EQUAL     shift and go to state 136
    TIMES_EQUAL     shift and go to state 137
    DIVIDE_EQUAL    shift and go to state 138
    MOD_EQUAL       shift and go to state 139
    POW_EQUAL       shift and go to state 140
    SINGLE_AND_EQUAL shift and go to state 141
    SINGLE_OR_EQUAL shift and go to state 142
    XOR_EQUAL       shift and go to state 143
    BINARY_LEFT_EQUAL shift and go to state 144
    BINARY_RIGHT_EQUAL shift and go to state 145
    AND_EQUAL       shift and go to state 146
    OR_EQUAL        shift and go to state 147

  ! =               [ reduce using rule 158 (mlhs -> TIMES lhs .) ]

    op_asgn                        shift and go to state 134

state 405

    (175) call_args -> args COMMA assocs .
    (178) call_args -> args COMMA assocs . COMMA TIMES arg
    (179) call_args -> args COMMA assocs . COMMA BINARY_AND_OP arg
    (181) call_args -> args COMMA assocs . COMMA TIMES arg COMMA BINARY_AND_OP arg

  ! shift/reduce conflict for COMMA resolved as shift
    LBRACKET        reduce using rule 175 (call_args -> args COMMA assocs .)
    DOT             reduce using rule 175 (call_args -> args COMMA assocs .)
    UNARY_OP        reduce using rule 175 (call_args -> args COMMA assocs .)
    RANGE_INCLUSIVE reduce using rule 175 (call_args -> args COMMA assocs .)
    RANGE_EXCLUSIVE reduce using rule 175 (call_args -> args COMMA assocs .)
    PLUS            reduce using rule 175 (call_args -> args COMMA assocs .)
    MINUS           reduce using rule 175 (call_args -> args COMMA assocs .)
    TIMES           reduce using rule 175 (call_args -> args COMMA assocs .)
    DIVIDE          reduce using rule 175 (call_args -> args COMMA assocs .)
    MOD             reduce using rule 175 (call_args -> args COMMA assocs .)
    POW             reduce using rule 175 (call_args -> args COMMA assocs .)
    OR_SYMBOL       reduce using rule 175 (call_args -> args COMMA assocs .)
    BINARY_XOR_OP   reduce using rule 175 (call_args -> args COMMA assocs .)
    BINARY_AND_OP   reduce using rule 175 (call_args -> args COMMA assocs .)
    COMBINED_COMPARISON_OP reduce using rule 175 (call_args -> args COMMA assocs .)
    GREATERTHAN     reduce using rule 175 (call_args -> args COMMA assocs .)
    GREATERTHANEQUAL reduce using rule 175 (call_args -> args COMMA assocs .)
    LESSERTHAN      reduce using rule 175 (call_args -> args COMMA assocs .)
    LESSERTHANEQUAL reduce using rule 175 (call_args -> args COMMA assocs .)
    EQUAL           reduce using rule 175 (call_args -> args COMMA assocs .)
    CASE_EQUALITY   reduce using rule 175 (call_args -> args COMMA assocs .)
    NOTEQUAL        reduce using rule 175 (call_args -> args COMMA assocs .)
    MATCHED_STRINGS_OP reduce using rule 175 (call_args -> args COMMA assocs .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 175 (call_args -> args COMMA assocs .)
    BINARY_LEFT_SHIFT_OP reduce using rule 175 (call_args -> args COMMA assocs .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 175 (call_args -> args COMMA assocs .)
    AND             reduce using rule 175 (call_args -> args COMMA assocs .)
    OR              reduce using rule 175 (call_args -> args COMMA assocs .)
    IF              reduce using rule 175 (call_args -> args COMMA assocs .)
    WHILE           reduce using rule 175 (call_args -> args COMMA assocs .)
    UNLESS          reduce using rule 175 (call_args -> args COMMA assocs .)
    UNTIL           reduce using rule 175 (call_args -> args COMMA assocs .)
    TERM            reduce using rule 175 (call_args -> args COMMA assocs .)
    NUMBER          reduce using rule 175 (call_args -> args COMMA assocs .)
    LPAREN          reduce using rule 175 (call_args -> args COMMA assocs .)
    $end            reduce using rule 175 (call_args -> args COMMA assocs .)
    RBRACKET        reduce using rule 175 (call_args -> args COMMA assocs .)
    THEN            reduce using rule 175 (call_args -> args COMMA assocs .)
    DO              reduce using rule 175 (call_args -> args COMMA assocs .)
    RESCUE          reduce using rule 175 (call_args -> args COMMA assocs .)
    HASH_ROCKET     reduce using rule 175 (call_args -> args COMMA assocs .)
    RKEY            reduce using rule 175 (call_args -> args COMMA assocs .)
    RPAREN          reduce using rule 175 (call_args -> args COMMA assocs .)
    WHEN            reduce using rule 175 (call_args -> args COMMA assocs .)
    LKEY            reduce using rule 175 (call_args -> args COMMA assocs .)
    END             reduce using rule 175 (call_args -> args COMMA assocs .)
    ELSIF           reduce using rule 175 (call_args -> args COMMA assocs .)
    ELSE            reduce using rule 175 (call_args -> args COMMA assocs .)
    ENSURE          reduce using rule 175 (call_args -> args COMMA assocs .)
    NOT_SYMBOL      reduce using rule 175 (call_args -> args COMMA assocs .)
    COMPLEMENT_OP   reduce using rule 175 (call_args -> args COMMA assocs .)
    DEFINED_OP      reduce using rule 175 (call_args -> args COMMA assocs .)
    RETURN          reduce using rule 175 (call_args -> args COMMA assocs .)
    YIELD           reduce using rule 175 (call_args -> args COMMA assocs .)
    CASE            reduce using rule 175 (call_args -> args COMMA assocs .)
    FOR             reduce using rule 175 (call_args -> args COMMA assocs .)
    BEGIN           reduce using rule 175 (call_args -> args COMMA assocs .)
    CLASS           reduce using rule 175 (call_args -> args COMMA assocs .)
    MODULE          reduce using rule 175 (call_args -> args COMMA assocs .)
    DEF             reduce using rule 175 (call_args -> args COMMA assocs .)
    PUTS            reduce using rule 175 (call_args -> args COMMA assocs .)
    VAR_GLOBAL      reduce using rule 175 (call_args -> args COMMA assocs .)
    VAR_LOCAL       reduce using rule 175 (call_args -> args COMMA assocs .)
    VAR_INSTANCE    reduce using rule 175 (call_args -> args COMMA assocs .)
    VAR_CLASS       reduce using rule 175 (call_args -> args COMMA assocs .)
    SYMBOL          reduce using rule 175 (call_args -> args COMMA assocs .)
    STRING          reduce using rule 175 (call_args -> args COMMA assocs .)
    IDENTIFIER      reduce using rule 175 (call_args -> args COMMA assocs .)
    SUPER           reduce using rule 175 (call_args -> args COMMA assocs .)
    COMMA           shift and go to state 465

  ! COMMA           [ reduce using rule 175 (call_args -> args COMMA assocs .) ]


state 406

    (176) call_args -> args COMMA TIMES . arg
    (180) call_args -> args COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 466
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 407

    (177) call_args -> args COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 467
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 408

    (183) call_args -> assocs COMMA TIMES . arg
    (185) call_args -> assocs COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 468
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 409

    (184) call_args -> assocs COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 469
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 410

    (187) call_args -> TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 470


state 411

    (98) primary -> YIELD LPAREN call_args RPAREN .

    LBRACKET        reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    DOT             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    PLUS            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    MINUS           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    TIMES           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    MOD             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    POW             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    AND             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    OR              reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    IF              reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    WHILE           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    TERM            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    $end            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    COMMA           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    THEN            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    DO              reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RKEY            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    WHEN            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    LKEY            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    END             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    ELSE            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    RETURN          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    YIELD           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    CASE            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    FOR             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    CLASS           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    MODULE          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    DEF             reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    PUTS            reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    STRING          reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)
    SUPER           reduce using rule 98 (primary -> YIELD LPAREN call_args RPAREN .)


state 412

    (34) function -> operation LBRACKET LPAREN LBRACKET . call_args RBRACKET RPAREN RBRACKET
    (7) stmt -> LBRACKET . block_var RBRACKET
    (8) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (85) primary -> LBRACKET . RBRACKET
    (86) primary -> LBRACKET . args RBRACKET
    (87) primary -> LBRACKET . args COMMA RBRACKET
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    OR_SYMBOL       shift and go to state 69
    RBRACKET        shift and go to state 68
    TIMES           shift and go to state 288
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    operation                      shift and go to state 115
    call_args                      shift and go to state 471
    block_var                      shift and go to state 67
    args                           shift and go to state 472
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    lhs                            shift and go to state 71
    mlhs                           shift and go to state 72
    assoc                          shift and go to state 129
    primary                        shift and go to state 473
    variable                       shift and go to state 19
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80

state 413

    (39) function -> SUPER LPAREN call_args RPAREN .

    LKEY            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    DO              reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    TERM            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    DOT             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    PLUS            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    MINUS           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    TIMES           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    MOD             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    POW             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    AND             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    OR              reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    IF              reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    WHILE           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    $end            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    COMMA           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    THEN            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RKEY            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    WHEN            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    END             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    ELSE            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    RETURN          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    YIELD           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    CASE            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    FOR             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    CLASS           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    MODULE          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    DEF             reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    PUTS            reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    STRING          reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)
    SUPER           reduce using rule 39 (function -> SUPER LPAREN call_args RPAREN .)


state 414

    (99) primary -> DEFINED_OP LPAREN arg LPAREN .

    LBRACKET        reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DOT             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNARY_OP        reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RANGE_INCLUSIVE reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RANGE_EXCLUSIVE reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    PLUS            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MINUS           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    TIMES           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DIVIDE          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MOD             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    POW             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OR_SYMBOL       reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_XOR_OP   reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_AND_OP   reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    GREATERTHAN     reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    GREATERTHANEQUAL reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LESSERTHAN      reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LESSERTHANEQUAL reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    EQUAL           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CASE_EQUALITY   reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NOTEQUAL        reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MATCHED_STRINGS_OP reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    AND             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OR              reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    IF              reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    WHILE           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNLESS          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNTIL           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    TERM            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NUMBER          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LPAREN          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    $end            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMMA           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RBRACKET        reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    THEN            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DO              reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RESCUE          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    HASH_ROCKET     reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RKEY            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RPAREN          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    WHEN            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LKEY            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    END             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ELSIF           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ELSE            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ENSURE          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NOT_SYMBOL      reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMPLEMENT_OP   reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DEFINED_OP      reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RETURN          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    YIELD           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CASE            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    FOR             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BEGIN           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CLASS           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MODULE          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DEF             reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    PUTS            reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_GLOBAL      reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_LOCAL       reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_INSTANCE    reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_CLASS       reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    SYMBOL          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    STRING          reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    IDENTIFIER      reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    SUPER           reduce using rule 99 (primary -> DEFINED_OP LPAREN arg LPAREN .)


state 415

    (41) arg -> lhs = . arg
    (17) stmt -> lhs = . command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    SUPER           shift and go to state 117
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    IDENTIFIER      shift and go to state 21
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    lhs                            shift and go to state 130
    arg                            shift and go to state 272
    command                        shift and go to state 271
    primary                        shift and go to state 377
    operation                      shift and go to state 115
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80

state 416

    (111) primary -> CASE compstmt when END .

    LBRACKET        reduce using rule 111 (primary -> CASE compstmt when END .)
    DOT             reduce using rule 111 (primary -> CASE compstmt when END .)
    UNARY_OP        reduce using rule 111 (primary -> CASE compstmt when END .)
    RANGE_INCLUSIVE reduce using rule 111 (primary -> CASE compstmt when END .)
    RANGE_EXCLUSIVE reduce using rule 111 (primary -> CASE compstmt when END .)
    PLUS            reduce using rule 111 (primary -> CASE compstmt when END .)
    MINUS           reduce using rule 111 (primary -> CASE compstmt when END .)
    TIMES           reduce using rule 111 (primary -> CASE compstmt when END .)
    DIVIDE          reduce using rule 111 (primary -> CASE compstmt when END .)
    MOD             reduce using rule 111 (primary -> CASE compstmt when END .)
    POW             reduce using rule 111 (primary -> CASE compstmt when END .)
    OR_SYMBOL       reduce using rule 111 (primary -> CASE compstmt when END .)
    BINARY_XOR_OP   reduce using rule 111 (primary -> CASE compstmt when END .)
    BINARY_AND_OP   reduce using rule 111 (primary -> CASE compstmt when END .)
    COMBINED_COMPARISON_OP reduce using rule 111 (primary -> CASE compstmt when END .)
    GREATERTHAN     reduce using rule 111 (primary -> CASE compstmt when END .)
    GREATERTHANEQUAL reduce using rule 111 (primary -> CASE compstmt when END .)
    LESSERTHAN      reduce using rule 111 (primary -> CASE compstmt when END .)
    LESSERTHANEQUAL reduce using rule 111 (primary -> CASE compstmt when END .)
    EQUAL           reduce using rule 111 (primary -> CASE compstmt when END .)
    CASE_EQUALITY   reduce using rule 111 (primary -> CASE compstmt when END .)
    NOTEQUAL        reduce using rule 111 (primary -> CASE compstmt when END .)
    MATCHED_STRINGS_OP reduce using rule 111 (primary -> CASE compstmt when END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 111 (primary -> CASE compstmt when END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 111 (primary -> CASE compstmt when END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 111 (primary -> CASE compstmt when END .)
    AND             reduce using rule 111 (primary -> CASE compstmt when END .)
    OR              reduce using rule 111 (primary -> CASE compstmt when END .)
    IF              reduce using rule 111 (primary -> CASE compstmt when END .)
    WHILE           reduce using rule 111 (primary -> CASE compstmt when END .)
    UNLESS          reduce using rule 111 (primary -> CASE compstmt when END .)
    UNTIL           reduce using rule 111 (primary -> CASE compstmt when END .)
    TERM            reduce using rule 111 (primary -> CASE compstmt when END .)
    NUMBER          reduce using rule 111 (primary -> CASE compstmt when END .)
    LPAREN          reduce using rule 111 (primary -> CASE compstmt when END .)
    $end            reduce using rule 111 (primary -> CASE compstmt when END .)
    COMMA           reduce using rule 111 (primary -> CASE compstmt when END .)
    RBRACKET        reduce using rule 111 (primary -> CASE compstmt when END .)
    THEN            reduce using rule 111 (primary -> CASE compstmt when END .)
    DO              reduce using rule 111 (primary -> CASE compstmt when END .)
    RESCUE          reduce using rule 111 (primary -> CASE compstmt when END .)
    HASH_ROCKET     reduce using rule 111 (primary -> CASE compstmt when END .)
    RKEY            reduce using rule 111 (primary -> CASE compstmt when END .)
    RPAREN          reduce using rule 111 (primary -> CASE compstmt when END .)
    WHEN            reduce using rule 111 (primary -> CASE compstmt when END .)
    LKEY            reduce using rule 111 (primary -> CASE compstmt when END .)
    END             reduce using rule 111 (primary -> CASE compstmt when END .)
    ELSIF           reduce using rule 111 (primary -> CASE compstmt when END .)
    ELSE            reduce using rule 111 (primary -> CASE compstmt when END .)
    ENSURE          reduce using rule 111 (primary -> CASE compstmt when END .)
    NOT_SYMBOL      reduce using rule 111 (primary -> CASE compstmt when END .)
    COMPLEMENT_OP   reduce using rule 111 (primary -> CASE compstmt when END .)
    DEFINED_OP      reduce using rule 111 (primary -> CASE compstmt when END .)
    RETURN          reduce using rule 111 (primary -> CASE compstmt when END .)
    YIELD           reduce using rule 111 (primary -> CASE compstmt when END .)
    CASE            reduce using rule 111 (primary -> CASE compstmt when END .)
    FOR             reduce using rule 111 (primary -> CASE compstmt when END .)
    BEGIN           reduce using rule 111 (primary -> CASE compstmt when END .)
    CLASS           reduce using rule 111 (primary -> CASE compstmt when END .)
    MODULE          reduce using rule 111 (primary -> CASE compstmt when END .)
    DEF             reduce using rule 111 (primary -> CASE compstmt when END .)
    PUTS            reduce using rule 111 (primary -> CASE compstmt when END .)
    VAR_GLOBAL      reduce using rule 111 (primary -> CASE compstmt when END .)
    VAR_LOCAL       reduce using rule 111 (primary -> CASE compstmt when END .)
    VAR_INSTANCE    reduce using rule 111 (primary -> CASE compstmt when END .)
    VAR_CLASS       reduce using rule 111 (primary -> CASE compstmt when END .)
    SYMBOL          reduce using rule 111 (primary -> CASE compstmt when END .)
    STRING          reduce using rule 111 (primary -> CASE compstmt when END .)
    IDENTIFIER      reduce using rule 111 (primary -> CASE compstmt when END .)
    SUPER           reduce using rule 111 (primary -> CASE compstmt when END .)


state 417

    (112) primary -> CASE compstmt when ELSE . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 474
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 418

    (128) when -> when WHEN . when_args then compstmt
    (133) when_args -> . args
    (134) when_args -> . args COMMA TIMES arg
    (135) when_args -> . TIMES arg
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 421
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    when_args                      shift and go to state 475
    args                           shift and go to state 420
    arg                            shift and go to state 73
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 419

    (127) when -> WHEN when_args . then compstmt
    (136) then -> . TERM
    (137) then -> . THEN
    (138) then -> . TERM THEN

    TERM            shift and go to state 249
    THEN            shift and go to state 250

    then                           shift and go to state 476

state 420

    (133) when_args -> args .
    (134) when_args -> args . COMMA TIMES arg

    TERM            reduce using rule 133 (when_args -> args .)
    THEN            reduce using rule 133 (when_args -> args .)
    COMMA           shift and go to state 477


state 421

    (135) when_args -> TIMES . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 478
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 422

    (113) primary -> FOR block_var IN expr . do compstmt END
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 61
    OR              shift and go to state 62
    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 479
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 423

    (99) primary -> DEFINED_OP LPAREN arg . LPAREN
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

    LPAREN          shift and go to state 414
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191


state 424

    (118) primary -> CLASS IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    DOT             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    PLUS            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    MINUS           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    TIMES           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    MOD             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    POW             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    AND             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    OR              reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    IF              reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    WHILE           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    TERM            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    $end            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    COMMA           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    THEN            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    DO              reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RKEY            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    WHEN            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    LKEY            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    END             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    ELSE            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    RETURN          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    YIELD           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    CASE            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    FOR             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    CLASS           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    MODULE          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    DEF             reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    PUTS            reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    STRING          reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)
    SUPER           reduce using rule 118 (primary -> CLASS IDENTIFIER compstmt END .)


state 425

    (119) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 480
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 426

    (120) primary -> MODULE IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    DOT             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    PLUS            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    MINUS           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    TIMES           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    MOD             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    POW             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    AND             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    OR              reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    IF              reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    WHILE           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    TERM            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    $end            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    COMMA           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    THEN            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    DO              reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RKEY            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    WHEN            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    LKEY            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    END             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    ELSE            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    RETURN          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    YIELD           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    CASE            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    FOR             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    CLASS           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    MODULE          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    DEF             reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    PUTS            reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    STRING          reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)
    SUPER           reduce using rule 120 (primary -> MODULE IDENTIFIER compstmt END .)


state 427

    (121) primary -> DEF fname argdecl compstmt . END

    END             shift and go to state 481


state 428

    (164) argdecl -> LPAREN arglist . RPAREN

    RPAREN          shift and go to state 482


state 429

    (165) argdecl -> arglist term .
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
    LBRACKET        reduce using rule 165 (argdecl -> arglist term .)
    UNDEF           reduce using rule 165 (argdecl -> arglist term .)
    ALIAS           reduce using rule 165 (argdecl -> arglist term .)
    BEGIN           reduce using rule 165 (argdecl -> arglist term .)
    END             reduce using rule 165 (argdecl -> arglist term .)
    RETURN          reduce using rule 165 (argdecl -> arglist term .)
    YIELD           reduce using rule 165 (argdecl -> arglist term .)
    NOT             reduce using rule 165 (argdecl -> arglist term .)
    NOT_SYMBOL      reduce using rule 165 (argdecl -> arglist term .)
    SUPER           reduce using rule 165 (argdecl -> arglist term .)
    VAR_GLOBAL      reduce using rule 165 (argdecl -> arglist term .)
    VAR_LOCAL       reduce using rule 165 (argdecl -> arglist term .)
    VAR_INSTANCE    reduce using rule 165 (argdecl -> arglist term .)
    VAR_CLASS       reduce using rule 165 (argdecl -> arglist term .)
    LPAREN          reduce using rule 165 (argdecl -> arglist term .)
    UNARY_OP        reduce using rule 165 (argdecl -> arglist term .)
    LKEY            reduce using rule 165 (argdecl -> arglist term .)
    DEFINED_OP      reduce using rule 165 (argdecl -> arglist term .)
    IF              reduce using rule 165 (argdecl -> arglist term .)
    UNLESS          reduce using rule 165 (argdecl -> arglist term .)
    WHILE           reduce using rule 165 (argdecl -> arglist term .)
    UNTIL           reduce using rule 165 (argdecl -> arglist term .)
    CASE            reduce using rule 165 (argdecl -> arglist term .)
    FOR             reduce using rule 165 (argdecl -> arglist term .)
    CLASS           reduce using rule 165 (argdecl -> arglist term .)
    MODULE          reduce using rule 165 (argdecl -> arglist term .)
    DEF             reduce using rule 165 (argdecl -> arglist term .)
    PUTS            reduce using rule 165 (argdecl -> arglist term .)
    PLUS            reduce using rule 165 (argdecl -> arglist term .)
    MINUS           reduce using rule 165 (argdecl -> arglist term .)
    COMPLEMENT_OP   reduce using rule 165 (argdecl -> arglist term .)
    IDENTIFIER      reduce using rule 165 (argdecl -> arglist term .)
    NUMBER          reduce using rule 165 (argdecl -> arglist term .)
    SYMBOL          reduce using rule 165 (argdecl -> arglist term .)
    STRING          reduce using rule 165 (argdecl -> arglist term .)
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221

  ! TIMES           [ reduce using rule 165 (argdecl -> arglist term .) ]


state 430

    (167) arglist -> IDENTIFIER COMMA . IDENTIFIER
    (168) arglist -> IDENTIFIER COMMA . & IDENTIFIER

    IDENTIFIER      shift and go to state 483
    &               shift and go to state 484


state 431

    (122) primary -> DEF singleton DOT fname . argdecl compstmt END
    (164) argdecl -> . LPAREN arglist RPAREN
    (165) argdecl -> . arglist term
    (166) arglist -> . IDENTIFIER
    (167) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (168) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 339
    IDENTIFIER      shift and go to state 341

    argdecl                        shift and go to state 485
    arglist                        shift and go to state 340

state 432

    (123) primary -> DEF singleton UNARY_OP fname . argdecl compstmt END
    (164) argdecl -> . LPAREN arglist RPAREN
    (165) argdecl -> . arglist term
    (166) arglist -> . IDENTIFIER
    (167) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (168) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 339
    IDENTIFIER      shift and go to state 341

    argdecl                        shift and go to state 486
    arglist                        shift and go to state 340

state 433

    (170) singleton -> LPAREN expr RPAREN .

    DOT             reduce using rule 170 (singleton -> LPAREN expr RPAREN .)
    UNARY_OP        reduce using rule 170 (singleton -> LPAREN expr RPAREN .)


state 434

    (154) mlhs -> mlhs_item COMMA mlhs_item TIMES .

    =               reduce using rule 154 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    RBRACKET        reduce using rule 154 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    RPAREN          reduce using rule 154 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    IN              reduce using rule 154 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    OR_SYMBOL       reduce using rule 154 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)


state 435

    (155) mlhs -> mlhs_item COMMA mlhs_item lhs .

    =               reduce using rule 155 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    RBRACKET        reduce using rule 155 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    RPAREN          reduce using rule 155 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    IN              reduce using rule 155 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    OR_SYMBOL       reduce using rule 155 (mlhs -> mlhs_item COMMA mlhs_item lhs .)


state 436

    (159) mult_mlhs_item -> COMMA mlhs_item .

    TIMES           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_GLOBAL      reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_LOCAL       reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_INSTANCE    reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_CLASS       reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    LPAREN          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    UNARY_OP        reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    LBRACKET        reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    LKEY            reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    RETURN          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    YIELD           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    DEFINED_OP      reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    IF              reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    UNLESS          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    WHILE           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    UNTIL           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    CASE            reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    FOR             reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    BEGIN           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    CLASS           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    MODULE          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    DEF             reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    PUTS            reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    NUMBER          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    SYMBOL          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    STRING          reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    IDENTIFIER      reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)
    SUPER           reduce using rule 159 (mult_mlhs_item -> COMMA mlhs_item .)


state 437

    (156) mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .

    =               reduce using rule 156 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    RBRACKET        reduce using rule 156 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    RPAREN          reduce using rule 156 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    IN              reduce using rule 156 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    OR_SYMBOL       reduce using rule 156 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)


state 438

    (157) mlhs -> mlhs_item COMMA mult_mlhs_item lhs .

    =               reduce using rule 157 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    RBRACKET        reduce using rule 157 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    RPAREN          reduce using rule 157 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    IN              reduce using rule 157 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    OR_SYMBOL       reduce using rule 157 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)


state 439

    (243) factor -> LPAREN . expression RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (161) mlhs_item -> LPAREN . mlhs RPAREN
    (236) expression -> . expression PLUS term
    (237) expression -> . expression MINUS term
    (238) expression -> . term
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER

    TIMES           shift and go to state 45
    TERM            shift and go to state 57
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    LPAREN          shift and go to state 487
    NUMBER          shift and go to state 351
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expression                     shift and go to state 226
    compstmt                       shift and go to state 194
    mlhs                           shift and go to state 195
    term                           shift and go to state 227
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 196
    factor                         shift and go to state 58
    call                           shift and go to state 5
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36

state 440

    (236) expression -> expression PLUS term .
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

    RPAREN          reduce using rule 236 (expression -> expression PLUS term .)
    PLUS            reduce using rule 236 (expression -> expression PLUS term .)
    MINUS           reduce using rule 236 (expression -> expression PLUS term .)
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221


state 441

    (237) expression -> expression MINUS term .
    (239) term -> term . TIMES factor
    (240) term -> term . DIVIDE factor

    RPAREN          reduce using rule 237 (expression -> expression MINUS term .)
    PLUS            reduce using rule 237 (expression -> expression MINUS term .)
    MINUS           reduce using rule 237 (expression -> expression MINUS term .)
    TIMES           shift and go to state 232
    DIVIDE          shift and go to state 221


state 442

    (8) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 488
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 443

    (35) function -> primary DOT operation LPAREN . call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 463
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 444

    (36) function -> primary UNARY_OP operation LPAREN . call_args RPAREN
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 116
    operation                      shift and go to state 115
    call_args                      shift and go to state 464
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 445

    (34) function -> operation LBRACKET LPAREN LBRACKET . call_args RBRACKET RPAREN RBRACKET
    (174) call_args -> . args
    (175) call_args -> . args COMMA assocs
    (176) call_args -> . args COMMA TIMES arg
    (177) call_args -> . args COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA assocs COMMA TIMES arg
    (179) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (182) call_args -> . assocs
    (183) call_args -> . assocs COMMA TIMES arg
    (184) call_args -> . assocs COMMA BINARY_AND_OP arg
    (185) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . TIMES arg
    (187) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (188) call_args -> . BINARY_AND_OP arg
    (189) call_args -> . command
    (162) args -> . arg
    (163) args -> . arg COMMA arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (173) assoc -> . arg HASH_ROCKET arg
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    TIMES           shift and go to state 159
    BINARY_AND_OP   shift and go to state 160
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 115
    call_args                      shift and go to state 471
    args                           shift and go to state 157
    assocs                         shift and go to state 158
    arg                            shift and go to state 128
    command                        shift and go to state 161
    assoc                          shift and go to state 129
    primary                        shift and go to state 116
    lhs                            shift and go to state 130
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 446

    (104) primary -> IF expr then compstmt END .

    LBRACKET        reduce using rule 104 (primary -> IF expr then compstmt END .)
    DOT             reduce using rule 104 (primary -> IF expr then compstmt END .)
    UNARY_OP        reduce using rule 104 (primary -> IF expr then compstmt END .)
    RANGE_INCLUSIVE reduce using rule 104 (primary -> IF expr then compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 104 (primary -> IF expr then compstmt END .)
    PLUS            reduce using rule 104 (primary -> IF expr then compstmt END .)
    MINUS           reduce using rule 104 (primary -> IF expr then compstmt END .)
    TIMES           reduce using rule 104 (primary -> IF expr then compstmt END .)
    DIVIDE          reduce using rule 104 (primary -> IF expr then compstmt END .)
    MOD             reduce using rule 104 (primary -> IF expr then compstmt END .)
    POW             reduce using rule 104 (primary -> IF expr then compstmt END .)
    OR_SYMBOL       reduce using rule 104 (primary -> IF expr then compstmt END .)
    BINARY_XOR_OP   reduce using rule 104 (primary -> IF expr then compstmt END .)
    BINARY_AND_OP   reduce using rule 104 (primary -> IF expr then compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 104 (primary -> IF expr then compstmt END .)
    GREATERTHAN     reduce using rule 104 (primary -> IF expr then compstmt END .)
    GREATERTHANEQUAL reduce using rule 104 (primary -> IF expr then compstmt END .)
    LESSERTHAN      reduce using rule 104 (primary -> IF expr then compstmt END .)
    LESSERTHANEQUAL reduce using rule 104 (primary -> IF expr then compstmt END .)
    EQUAL           reduce using rule 104 (primary -> IF expr then compstmt END .)
    CASE_EQUALITY   reduce using rule 104 (primary -> IF expr then compstmt END .)
    NOTEQUAL        reduce using rule 104 (primary -> IF expr then compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 104 (primary -> IF expr then compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 104 (primary -> IF expr then compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 104 (primary -> IF expr then compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 104 (primary -> IF expr then compstmt END .)
    AND             reduce using rule 104 (primary -> IF expr then compstmt END .)
    OR              reduce using rule 104 (primary -> IF expr then compstmt END .)
    IF              reduce using rule 104 (primary -> IF expr then compstmt END .)
    WHILE           reduce using rule 104 (primary -> IF expr then compstmt END .)
    UNLESS          reduce using rule 104 (primary -> IF expr then compstmt END .)
    UNTIL           reduce using rule 104 (primary -> IF expr then compstmt END .)
    TERM            reduce using rule 104 (primary -> IF expr then compstmt END .)
    NUMBER          reduce using rule 104 (primary -> IF expr then compstmt END .)
    LPAREN          reduce using rule 104 (primary -> IF expr then compstmt END .)
    $end            reduce using rule 104 (primary -> IF expr then compstmt END .)
    COMMA           reduce using rule 104 (primary -> IF expr then compstmt END .)
    RBRACKET        reduce using rule 104 (primary -> IF expr then compstmt END .)
    THEN            reduce using rule 104 (primary -> IF expr then compstmt END .)
    DO              reduce using rule 104 (primary -> IF expr then compstmt END .)
    RESCUE          reduce using rule 104 (primary -> IF expr then compstmt END .)
    HASH_ROCKET     reduce using rule 104 (primary -> IF expr then compstmt END .)
    RKEY            reduce using rule 104 (primary -> IF expr then compstmt END .)
    RPAREN          reduce using rule 104 (primary -> IF expr then compstmt END .)
    WHEN            reduce using rule 104 (primary -> IF expr then compstmt END .)
    LKEY            reduce using rule 104 (primary -> IF expr then compstmt END .)
    END             reduce using rule 104 (primary -> IF expr then compstmt END .)
    ELSIF           reduce using rule 104 (primary -> IF expr then compstmt END .)
    ELSE            reduce using rule 104 (primary -> IF expr then compstmt END .)
    ENSURE          reduce using rule 104 (primary -> IF expr then compstmt END .)
    NOT_SYMBOL      reduce using rule 104 (primary -> IF expr then compstmt END .)
    COMPLEMENT_OP   reduce using rule 104 (primary -> IF expr then compstmt END .)
    DEFINED_OP      reduce using rule 104 (primary -> IF expr then compstmt END .)
    RETURN          reduce using rule 104 (primary -> IF expr then compstmt END .)
    YIELD           reduce using rule 104 (primary -> IF expr then compstmt END .)
    CASE            reduce using rule 104 (primary -> IF expr then compstmt END .)
    FOR             reduce using rule 104 (primary -> IF expr then compstmt END .)
    BEGIN           reduce using rule 104 (primary -> IF expr then compstmt END .)
    CLASS           reduce using rule 104 (primary -> IF expr then compstmt END .)
    MODULE          reduce using rule 104 (primary -> IF expr then compstmt END .)
    DEF             reduce using rule 104 (primary -> IF expr then compstmt END .)
    PUTS            reduce using rule 104 (primary -> IF expr then compstmt END .)
    VAR_GLOBAL      reduce using rule 104 (primary -> IF expr then compstmt END .)
    VAR_LOCAL       reduce using rule 104 (primary -> IF expr then compstmt END .)
    VAR_INSTANCE    reduce using rule 104 (primary -> IF expr then compstmt END .)
    VAR_CLASS       reduce using rule 104 (primary -> IF expr then compstmt END .)
    SYMBOL          reduce using rule 104 (primary -> IF expr then compstmt END .)
    STRING          reduce using rule 104 (primary -> IF expr then compstmt END .)
    IDENTIFIER      reduce using rule 104 (primary -> IF expr then compstmt END .)
    SUPER           reduce using rule 104 (primary -> IF expr then compstmt END .)


state 447

    (105) primary -> IF expr then compstmt elsif . END
    (106) primary -> IF expr then compstmt elsif . ELSE compstmt END

    END             shift and go to state 489
    ELSE            shift and go to state 490


state 448

    (125) elsif -> ELSIF . expr then compstmt
    (126) elsif -> ELSIF . expr then compstmt elsif
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 45
    SUPER           shift and go to state 117
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 118
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 491
    mlhs                           shift and go to state 22
    command                        shift and go to state 113
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 114
    operation                      shift and go to state 115
    primary                        shift and go to state 116
    literal                        shift and go to state 36
    variable                       shift and go to state 119
    function                       shift and go to state 80

state 449

    (84) primary -> primary LBRACKET args RBRACKET .
    (150) lhs -> primary LBRACKET args RBRACKET .

  ! reduce/reduce conflict for COMMA resolved using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DOT             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LBRACKET        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    PLUS            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MINUS           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    TIMES           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MOD             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    POW             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    AND             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    OR              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    TERM            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    THEN            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DO              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    IF              reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    WHILE           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    $end            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMMA           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RKEY            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    WHEN            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    LKEY            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    END             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ELSE            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    NOT_SYMBOL      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    COMPLEMENT_OP   reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DEFINED_OP      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    RETURN          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    YIELD           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CASE            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    FOR             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    BEGIN           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    CLASS           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    MODULE          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    DEF             reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    PUTS            reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_GLOBAL      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_LOCAL       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_INSTANCE    reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    VAR_CLASS       reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    SYMBOL          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    STRING          reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    IDENTIFIER      reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    SUPER           reduce using rule 84 (primary -> primary LBRACKET args RBRACKET .)
    =               reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    PLUS_EQUAL      reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    MINUS_EQUAL     reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    TIMES_EQUAL     reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    MOD_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    POW_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    XOR_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    AND_EQUAL       reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)
    OR_EQUAL        reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .)

  ! COMMA           [ reduce using rule 150 (lhs -> primary LBRACKET args RBRACKET .) ]


state 450

    (109) primary -> WHILE expr do compstmt END .

    LBRACKET        reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    DOT             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    UNARY_OP        reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    PLUS            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    MINUS           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    TIMES           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    DIVIDE          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    MOD             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    POW             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    OR_SYMBOL       reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    GREATERTHAN     reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    LESSERTHAN      reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    EQUAL           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    NOTEQUAL        reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    AND             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    OR              reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    IF              reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    WHILE           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    UNLESS          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    UNTIL           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    TERM            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    NUMBER          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    LPAREN          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    $end            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    COMMA           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RBRACKET        reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    THEN            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    DO              reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RESCUE          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    HASH_ROCKET     reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RKEY            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RPAREN          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    WHEN            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    LKEY            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    END             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    ELSIF           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    ELSE            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    ENSURE          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    DEFINED_OP      reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    RETURN          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    YIELD           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    CASE            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    FOR             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    BEGIN           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    CLASS           reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    MODULE          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    DEF             reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    PUTS            reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    VAR_LOCAL       reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    VAR_CLASS       reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    SYMBOL          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    STRING          reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    IDENTIFIER      reduce using rule 109 (primary -> WHILE expr do compstmt END .)
    SUPER           reduce using rule 109 (primary -> WHILE expr do compstmt END .)


state 451

    (107) primary -> UNLESS expr then compstmt END .

    LBRACKET        reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    DOT             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    UNARY_OP        reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RANGE_INCLUSIVE reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    PLUS            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    MINUS           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    TIMES           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    DIVIDE          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    MOD             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    POW             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    OR_SYMBOL       reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    BINARY_XOR_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    BINARY_AND_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    GREATERTHAN     reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    GREATERTHANEQUAL reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    LESSERTHAN      reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    LESSERTHANEQUAL reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    EQUAL           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    CASE_EQUALITY   reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    NOTEQUAL        reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    AND             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    OR              reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    IF              reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    WHILE           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    UNLESS          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    UNTIL           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    TERM            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    NUMBER          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    LPAREN          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    $end            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    COMMA           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RBRACKET        reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    THEN            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    DO              reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RESCUE          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    HASH_ROCKET     reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RKEY            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RPAREN          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    WHEN            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    LKEY            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    END             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    ELSIF           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    ELSE            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    ENSURE          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    NOT_SYMBOL      reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    COMPLEMENT_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    DEFINED_OP      reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    RETURN          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    YIELD           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    CASE            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    FOR             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    BEGIN           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    CLASS           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    MODULE          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    DEF             reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    PUTS            reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    VAR_GLOBAL      reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    VAR_LOCAL       reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    VAR_INSTANCE    reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    VAR_CLASS       reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    SYMBOL          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    STRING          reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    IDENTIFIER      reduce using rule 107 (primary -> UNLESS expr then compstmt END .)
    SUPER           reduce using rule 107 (primary -> UNLESS expr then compstmt END .)


state 452

    (108) primary -> UNLESS expr then compstmt ELSE . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 492
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 453

    (110) primary -> UNTIL expr do compstmt END .

    LBRACKET        reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    DOT             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    UNARY_OP        reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    PLUS            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    MINUS           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    TIMES           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    DIVIDE          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    MOD             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    POW             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    OR_SYMBOL       reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    GREATERTHAN     reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    LESSERTHAN      reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    EQUAL           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    NOTEQUAL        reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    AND             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    OR              reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    IF              reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    WHILE           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    UNLESS          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    UNTIL           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    TERM            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    NUMBER          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    LPAREN          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    $end            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    COMMA           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RBRACKET        reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    THEN            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    DO              reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RESCUE          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    HASH_ROCKET     reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RKEY            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RPAREN          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    WHEN            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    LKEY            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    END             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    ELSIF           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    ELSE            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    ENSURE          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    DEFINED_OP      reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    RETURN          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    YIELD           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    CASE            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    FOR             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    BEGIN           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    CLASS           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    MODULE          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    DEF             reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    PUTS            reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    VAR_LOCAL       reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    VAR_CLASS       reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    SYMBOL          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    STRING          reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    IDENTIFIER      reduce using rule 110 (primary -> UNTIL expr do compstmt END .)
    SUPER           reduce using rule 110 (primary -> UNTIL expr do compstmt END .)


state 454

    (115) primary -> BEGIN compstmt rescue ELSE compstmt . END
    (117) primary -> BEGIN compstmt rescue ELSE compstmt . ENSURE compstmt END

    END             shift and go to state 493
    ENSURE          shift and go to state 494


state 455

    (116) primary -> BEGIN compstmt rescue ENSURE compstmt . END

    END             shift and go to state 495


state 456

    (131) rescue -> rescue RESCUE args . do compstmt
    (139) do -> . term
    (140) do -> . DO
    (141) do -> . term DO
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 65
    TERM            shift and go to state 57
    NUMBER          shift and go to state 59
    LPAREN          shift and go to state 60

    do                             shift and go to state 496
    term                           shift and go to state 64
    factor                         shift and go to state 58

state 457

    (132) rescue -> rescue RESCUE do . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 497
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 458

    (129) rescue -> RESCUE args do . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 498
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 459

    (130) rescue -> RESCUE do compstmt .

    END             reduce using rule 130 (rescue -> RESCUE do compstmt .)
    ELSE            reduce using rule 130 (rescue -> RESCUE do compstmt .)
    ENSURE          reduce using rule 130 (rescue -> RESCUE do compstmt .)
    RESCUE          reduce using rule 130 (rescue -> RESCUE do compstmt .)


state 460

    (17) stmt -> lhs = command LBRACKET do . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    LBRACKET        shift and go to state 499


state 461

    (102) primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt . LKEY

    LKEY            shift and go to state 500


state 462

    (103) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL . compstmt LKEY
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    function                       shift and go to state 18
    compstmt                       shift and go to state 501
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 463

    (35) function -> primary DOT operation LPAREN call_args . RPAREN

    RPAREN          shift and go to state 502


state 464

    (36) function -> primary UNARY_OP operation LPAREN call_args . RPAREN

    RPAREN          shift and go to state 503


state 465

    (178) call_args -> args COMMA assocs COMMA . TIMES arg
    (179) call_args -> args COMMA assocs COMMA . BINARY_AND_OP arg
    (181) call_args -> args COMMA assocs COMMA . TIMES arg COMMA BINARY_AND_OP arg

    TIMES           shift and go to state 504
    BINARY_AND_OP   shift and go to state 505


state 466

    (176) call_args -> args COMMA TIMES arg .
    (180) call_args -> args COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    DOT             reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    UNARY_OP        reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    IF              reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    WHILE           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    UNLESS          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    UNTIL           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    TERM            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    NUMBER          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    LPAREN          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    $end            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    RBRACKET        reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    THEN            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    DO              reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    RESCUE          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    HASH_ROCKET     reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    RKEY            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    RPAREN          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    WHEN            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    LKEY            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    END             reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    ELSIF           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    ELSE            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    ENSURE          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    NOT_SYMBOL      reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    COMPLEMENT_OP   reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    DEFINED_OP      reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    RETURN          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    YIELD           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    CASE            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    FOR             reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    BEGIN           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    CLASS           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    MODULE          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    DEF             reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    PUTS            reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    VAR_GLOBAL      reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    VAR_LOCAL       reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    VAR_INSTANCE    reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    VAR_CLASS       reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    SYMBOL          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    STRING          reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    IDENTIFIER      reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    SUPER           reduce using rule 176 (call_args -> args COMMA TIMES arg .)
    COMMA           shift and go to state 506
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! PLUS            [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! MINUS           [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! TIMES           [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! MOD             [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! POW             [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! EQUAL           [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! AND             [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]
  ! COMMA           [ reduce using rule 176 (call_args -> args COMMA TIMES arg .) ]


state 467

    (177) call_args -> args COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    END             reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 177 (call_args -> args COMMA BINARY_AND_OP arg .) ]


state 468

    (183) call_args -> assocs COMMA TIMES arg .
    (185) call_args -> assocs COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    DOT             reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    UNARY_OP        reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    IF              reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    WHILE           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    UNLESS          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    UNTIL           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    TERM            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    NUMBER          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    LPAREN          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    $end            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    RBRACKET        reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    THEN            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    DO              reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    RESCUE          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    HASH_ROCKET     reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    RKEY            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    RPAREN          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    WHEN            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    LKEY            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    END             reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    ELSIF           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    ELSE            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    ENSURE          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    NOT_SYMBOL      reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    COMPLEMENT_OP   reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    DEFINED_OP      reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    RETURN          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    YIELD           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    CASE            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    FOR             reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    BEGIN           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    CLASS           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    MODULE          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    DEF             reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    PUTS            reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    VAR_GLOBAL      reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    VAR_LOCAL       reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    VAR_INSTANCE    reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    VAR_CLASS       reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    SYMBOL          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    STRING          reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    IDENTIFIER      reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    SUPER           reduce using rule 183 (call_args -> assocs COMMA TIMES arg .)
    COMMA           shift and go to state 507
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! PLUS            [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! MINUS           [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! TIMES           [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! MOD             [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! POW             [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! EQUAL           [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! AND             [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]
  ! COMMA           [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg .) ]


state 469

    (184) call_args -> assocs COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    END             reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 184 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]


state 470

    (187) call_args -> TIMES arg COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 508
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 471

    (34) function -> operation LBRACKET LPAREN LBRACKET call_args . RBRACKET RPAREN RBRACKET

    RBRACKET        shift and go to state 509


state 472

    (86) primary -> LBRACKET args . RBRACKET
    (87) primary -> LBRACKET args . COMMA RBRACKET
    (174) call_args -> args .
    (175) call_args -> args . COMMA assocs
    (176) call_args -> args . COMMA TIMES arg
    (177) call_args -> args . COMMA BINARY_AND_OP arg
    (178) call_args -> args . COMMA assocs COMMA TIMES arg
    (179) call_args -> args . COMMA assocs COMMA BINARY_AND_OP arg
    (180) call_args -> args . COMMA TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> args . COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 235
    COMMA           shift and go to state 510

  ! RBRACKET        [ reduce using rule 174 (call_args -> args .) ]


state 473

    (31) command -> primary . DOT operation call_args
    (32) command -> primary . UNARY_OP operation call_args
    (149) lhs -> primary . LBRACKET RBRACKET
    (150) lhs -> primary . LBRACKET args RBRACKET
    (151) lhs -> primary . DOT IDENTIFIER
    (73) arg -> primary .
    (81) primary -> primary . UNARY_OP IDENTIFIER
    (83) primary -> primary . LBRACKET RBRACKET
    (84) primary -> primary . LBRACKET args RBRACKET
    (35) function -> primary . DOT operation LPAREN call_args RPAREN
    (36) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> primary . DOT operation
    (38) function -> primary . UNARY_OP operation

    DOT             shift and go to state 251
    UNARY_OP        shift and go to state 252
    LBRACKET        shift and go to state 149
    COMMA           reduce using rule 73 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 73 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 73 (arg -> primary .)
    PLUS            reduce using rule 73 (arg -> primary .)
    MINUS           reduce using rule 73 (arg -> primary .)
    TIMES           reduce using rule 73 (arg -> primary .)
    DIVIDE          reduce using rule 73 (arg -> primary .)
    MOD             reduce using rule 73 (arg -> primary .)
    POW             reduce using rule 73 (arg -> primary .)
    OR_SYMBOL       reduce using rule 73 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 73 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 73 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 73 (arg -> primary .)
    GREATERTHAN     reduce using rule 73 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 73 (arg -> primary .)
    LESSERTHAN      reduce using rule 73 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 73 (arg -> primary .)
    EQUAL           reduce using rule 73 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 73 (arg -> primary .)
    NOTEQUAL        reduce using rule 73 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (arg -> primary .)
    AND             reduce using rule 73 (arg -> primary .)
    OR              reduce using rule 73 (arg -> primary .)
    HASH_ROCKET     reduce using rule 73 (arg -> primary .)
    RBRACKET        reduce using rule 73 (arg -> primary .)


state 474

    (112) primary -> CASE compstmt when ELSE compstmt . END

    END             shift and go to state 511


state 475

    (128) when -> when WHEN when_args . then compstmt
    (136) then -> . TERM
    (137) then -> . THEN
    (138) then -> . TERM THEN

    TERM            shift and go to state 249
    THEN            shift and go to state 250

    then                           shift and go to state 512

state 476

    (127) when -> WHEN when_args then . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 513
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 477

    (134) when_args -> args COMMA . TIMES arg

    TIMES           shift and go to state 514


state 478

    (135) when_args -> TIMES arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

    TERM            reduce using rule 135 (when_args -> TIMES arg .)
    THEN            reduce using rule 135 (when_args -> TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191


state 479

    (113) primary -> FOR block_var IN expr do . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 515
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 480

    (119) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt . END

    END             shift and go to state 516


state 481

    (121) primary -> DEF fname argdecl compstmt END .

    LBRACKET        reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    DOT             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    PLUS            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    MINUS           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    TIMES           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    DIVIDE          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    MOD             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    POW             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    EQUAL           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    AND             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    OR              reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    IF              reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    WHILE           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    UNLESS          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    UNTIL           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    TERM            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    NUMBER          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    LPAREN          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    $end            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    COMMA           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RBRACKET        reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    THEN            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    DO              reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RESCUE          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RKEY            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RPAREN          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    WHEN            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    LKEY            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    END             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    ELSIF           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    ELSE            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    ENSURE          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    RETURN          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    YIELD           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    CASE            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    FOR             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    BEGIN           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    CLASS           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    MODULE          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    DEF             reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    PUTS            reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    SYMBOL          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    STRING          reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)
    SUPER           reduce using rule 121 (primary -> DEF fname argdecl compstmt END .)


state 482

    (164) argdecl -> LPAREN arglist RPAREN .

    LBRACKET        reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    UNDEF           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    ALIAS           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    BEGIN           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    END             reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    RETURN          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    YIELD           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    NOT             reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    NOT_SYMBOL      reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    SUPER           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    VAR_GLOBAL      reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    VAR_LOCAL       reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    VAR_INSTANCE    reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    VAR_CLASS       reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    LPAREN          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    UNARY_OP        reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    LKEY            reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    DEFINED_OP      reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    IF              reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    UNLESS          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    WHILE           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    UNTIL           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    CASE            reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    FOR             reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    CLASS           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    MODULE          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    DEF             reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    PUTS            reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    TIMES           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    PLUS            reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    MINUS           reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    COMPLEMENT_OP   reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    IDENTIFIER      reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    NUMBER          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    SYMBOL          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)
    STRING          reduce using rule 164 (argdecl -> LPAREN arglist RPAREN .)


state 483

    (167) arglist -> IDENTIFIER COMMA IDENTIFIER .

    TERM            reduce using rule 167 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    NUMBER          reduce using rule 167 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    LPAREN          reduce using rule 167 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    RPAREN          reduce using rule 167 (arglist -> IDENTIFIER COMMA IDENTIFIER .)


state 484

    (168) arglist -> IDENTIFIER COMMA & . IDENTIFIER

    IDENTIFIER      shift and go to state 517


state 485

    (122) primary -> DEF singleton DOT fname argdecl . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 518
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 486

    (123) primary -> DEF singleton UNARY_OP fname argdecl . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 519
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 487

    (161) mlhs_item -> LPAREN . mlhs RPAREN
    (243) factor -> LPAREN . expression RPAREN
    (78) primary -> LPAREN . compstmt RPAREN
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (236) expression -> . expression PLUS term
    (237) expression -> . expression MINUS term
    (238) expression -> . term
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (142) term -> . TERM
    (239) term -> . term TIMES factor
    (240) term -> . term DIVIDE factor
    (241) term -> . factor
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (242) factor -> . NUMBER
    (243) factor -> . LPAREN expression RPAREN
    (28) call -> . function
    (29) call -> . command
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 45
    LPAREN          shift and go to state 487
    TERM            shift and go to state 57
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    NUMBER          shift and go to state 351
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    SUPER           shift and go to state 31
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75

    mlhs                           shift and go to state 195
    expression                     shift and go to state 226
    compstmt                       shift and go to state 194
    mlhs_item                      shift and go to state 44
    lhs                            shift and go to state 254
    term                           shift and go to state 227
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    factor                         shift and go to state 58
    call                           shift and go to state 5
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 255
    function                       shift and go to state 18
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    operation                      shift and go to state 28

state 488

    (8) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt . END

    END             shift and go to state 520


state 489

    (105) primary -> IF expr then compstmt elsif END .

    LBRACKET        reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    DOT             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    UNARY_OP        reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RANGE_INCLUSIVE reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RANGE_EXCLUSIVE reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    PLUS            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    MINUS           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    TIMES           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    DIVIDE          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    MOD             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    POW             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    OR_SYMBOL       reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    BINARY_XOR_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    BINARY_AND_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    COMBINED_COMPARISON_OP reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    GREATERTHAN     reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    GREATERTHANEQUAL reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    LESSERTHAN      reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    LESSERTHANEQUAL reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    EQUAL           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    CASE_EQUALITY   reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    NOTEQUAL        reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    MATCHED_STRINGS_OP reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    AND             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    OR              reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    IF              reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    WHILE           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    UNLESS          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    UNTIL           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    TERM            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    NUMBER          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    LPAREN          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    $end            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    COMMA           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RBRACKET        reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    THEN            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    DO              reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RESCUE          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    HASH_ROCKET     reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RKEY            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RPAREN          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    WHEN            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    LKEY            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    END             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    ELSIF           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    ELSE            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    ENSURE          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    NOT_SYMBOL      reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    COMPLEMENT_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    DEFINED_OP      reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    RETURN          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    YIELD           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    CASE            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    FOR             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    BEGIN           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    CLASS           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    MODULE          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    DEF             reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    PUTS            reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    VAR_GLOBAL      reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    VAR_LOCAL       reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    VAR_INSTANCE    reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    VAR_CLASS       reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    SYMBOL          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    STRING          reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    IDENTIFIER      reduce using rule 105 (primary -> IF expr then compstmt elsif END .)
    SUPER           reduce using rule 105 (primary -> IF expr then compstmt elsif END .)


state 490

    (106) primary -> IF expr then compstmt elsif ELSE . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 521
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 491

    (125) elsif -> ELSIF expr . then compstmt
    (126) elsif -> ELSIF expr . then compstmt elsif
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (136) then -> . TERM
    (137) then -> . THEN
    (138) then -> . TERM THEN

    AND             shift and go to state 61
    OR              shift and go to state 62
    TERM            shift and go to state 249
    THEN            shift and go to state 250

    then                           shift and go to state 522

state 492

    (108) primary -> UNLESS expr then compstmt ELSE compstmt . END

    END             shift and go to state 523


state 493

    (115) primary -> BEGIN compstmt rescue ELSE compstmt END .

    LBRACKET        reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DOT             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNARY_OP        reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    PLUS            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MINUS           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    TIMES           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DIVIDE          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MOD             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    POW             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    GREATERTHAN     reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LESSERTHAN      reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    EQUAL           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NOTEQUAL        reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    AND             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OR              reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    IF              reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    WHILE           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNLESS          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNTIL           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    TERM            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NUMBER          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LPAREN          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    $end            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMMA           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RBRACKET        reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    THEN            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DO              reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RESCUE          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RKEY            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RPAREN          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    WHEN            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LKEY            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    END             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ELSIF           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ELSE            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ENSURE          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DEFINED_OP      reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RETURN          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    YIELD           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CASE            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    FOR             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BEGIN           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CLASS           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MODULE          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DEF             reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    PUTS            reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_CLASS       reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    SYMBOL          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    STRING          reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    IDENTIFIER      reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    SUPER           reduce using rule 115 (primary -> BEGIN compstmt rescue ELSE compstmt END .)


state 494

    (117) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE . compstmt END
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 524
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 495

    (116) primary -> BEGIN compstmt rescue ENSURE compstmt END .

    LBRACKET        reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DOT             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNARY_OP        reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    PLUS            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MINUS           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    TIMES           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DIVIDE          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MOD             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    POW             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OR_SYMBOL       reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_XOR_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_AND_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    GREATERTHAN     reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    GREATERTHANEQUAL reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LESSERTHAN      reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LESSERTHANEQUAL reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    EQUAL           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CASE_EQUALITY   reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NOTEQUAL        reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    AND             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OR              reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    IF              reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    WHILE           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNLESS          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNTIL           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    TERM            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NUMBER          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LPAREN          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    $end            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMMA           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RBRACKET        reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    THEN            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DO              reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RESCUE          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    HASH_ROCKET     reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RKEY            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RPAREN          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    WHEN            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LKEY            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    END             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ELSIF           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ELSE            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ENSURE          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NOT_SYMBOL      reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMPLEMENT_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DEFINED_OP      reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RETURN          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    YIELD           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CASE            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    FOR             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BEGIN           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CLASS           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MODULE          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DEF             reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    PUTS            reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_GLOBAL      reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_LOCAL       reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_INSTANCE    reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_CLASS       reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    SYMBOL          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    STRING          reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    IDENTIFIER      reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    SUPER           reduce using rule 116 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)


state 496

    (131) rescue -> rescue RESCUE args do . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 525
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 497

    (132) rescue -> rescue RESCUE do compstmt .

    END             reduce using rule 132 (rescue -> rescue RESCUE do compstmt .)
    ELSE            reduce using rule 132 (rescue -> rescue RESCUE do compstmt .)
    ENSURE          reduce using rule 132 (rescue -> rescue RESCUE do compstmt .)
    RESCUE          reduce using rule 132 (rescue -> rescue RESCUE do compstmt .)


state 498

    (129) rescue -> RESCUE args do compstmt .

    END             reduce using rule 129 (rescue -> RESCUE args do compstmt .)
    ELSE            reduce using rule 129 (rescue -> RESCUE args do compstmt .)
    ENSURE          reduce using rule 129 (rescue -> RESCUE args do compstmt .)
    RESCUE          reduce using rule 129 (rescue -> RESCUE args do compstmt .)


state 499

    (17) stmt -> lhs = command LBRACKET do LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    OR_SYMBOL       shift and go to state 526


state 500

    (102) primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .

    LBRACKET        reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DOT             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNARY_OP        reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    PLUS            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MINUS           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    TIMES           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DIVIDE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MOD             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    POW             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OR_SYMBOL       reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    GREATERTHAN     reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LESSERTHAN      reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    EQUAL           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NOTEQUAL        reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    AND             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OR              reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    IF              reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    WHILE           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNLESS          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNTIL           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    TERM            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NUMBER          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LPAREN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    $end            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMMA           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RBRACKET        reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    THEN            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DO              reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RESCUE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    HASH_ROCKET     reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RKEY            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RPAREN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    WHEN            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LKEY            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    END             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ELSIF           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ELSE            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ENSURE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DEFINED_OP      reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RETURN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    YIELD           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CASE            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    FOR             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BEGIN           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CLASS           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MODULE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DEF             reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    PUTS            reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_LOCAL       reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_CLASS       reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    SYMBOL          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    STRING          reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    IDENTIFIER      reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    SUPER           reduce using rule 102 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)


state 501

    (103) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt . LKEY

    LKEY            shift and go to state 527


state 502

    (35) function -> primary DOT operation LPAREN call_args RPAREN .

    LKEY            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DO              reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    TERM            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DOT             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    PLUS            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MINUS           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    TIMES           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MOD             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    POW             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    AND             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OR              reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    IF              reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    WHILE           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    $end            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMMA           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    THEN            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RKEY            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    WHEN            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    END             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ELSE            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RETURN          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    YIELD           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CASE            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    FOR             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CLASS           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MODULE          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DEF             reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    PUTS            reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    STRING          reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)
    SUPER           reduce using rule 35 (function -> primary DOT operation LPAREN call_args RPAREN .)


state 503

    (36) function -> primary UNARY_OP operation LPAREN call_args RPAREN .

    LKEY            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DO              reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    TERM            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DOT             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    PLUS            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MINUS           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    TIMES           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MOD             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    POW             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    AND             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OR              reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    IF              reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    WHILE           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    $end            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMMA           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    THEN            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RKEY            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    WHEN            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    END             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ELSE            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RETURN          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    YIELD           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CASE            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    FOR             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CLASS           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MODULE          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DEF             reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    PUTS            reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    STRING          reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    SUPER           reduce using rule 36 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)


state 504

    (178) call_args -> args COMMA assocs COMMA TIMES . arg
    (181) call_args -> args COMMA assocs COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 528
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 505

    (179) call_args -> args COMMA assocs COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 529
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 506

    (180) call_args -> args COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 530


state 507

    (185) call_args -> assocs COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 531


state 508

    (187) call_args -> TIMES arg COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 187 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]


state 509

    (34) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET . RPAREN RBRACKET

    RPAREN          shift and go to state 532


state 510

    (87) primary -> LBRACKET args COMMA . RBRACKET
    (175) call_args -> args COMMA . assocs
    (176) call_args -> args COMMA . TIMES arg
    (177) call_args -> args COMMA . BINARY_AND_OP arg
    (178) call_args -> args COMMA . assocs COMMA TIMES arg
    (179) call_args -> args COMMA . assocs COMMA BINARY_AND_OP arg
    (180) call_args -> args COMMA . TIMES arg COMMA BINARY_AND_OP arg
    (181) call_args -> args COMMA . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (171) assocs -> . assoc
    (172) assocs -> . assoc COMMA assoc
    (173) assoc -> . arg HASH_ROCKET arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 359
    TIMES           shift and go to state 406
    BINARY_AND_OP   shift and go to state 407
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    assocs                         shift and go to state 405
    arg                            shift and go to state 389
    assoc                          shift and go to state 129
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 511

    (112) primary -> CASE compstmt when ELSE compstmt END .

    LBRACKET        reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    DOT             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    UNARY_OP        reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    PLUS            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    MINUS           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    TIMES           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    DIVIDE          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    MOD             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    POW             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    GREATERTHAN     reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    LESSERTHAN      reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    EQUAL           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    NOTEQUAL        reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    AND             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    OR              reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    IF              reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    WHILE           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    UNLESS          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    UNTIL           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    TERM            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    NUMBER          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    LPAREN          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    $end            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    COMMA           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RBRACKET        reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    THEN            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    DO              reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RESCUE          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RKEY            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RPAREN          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    WHEN            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    LKEY            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    END             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    ELSIF           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    ELSE            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    ENSURE          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    DEFINED_OP      reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    RETURN          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    YIELD           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    CASE            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    FOR             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    BEGIN           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    CLASS           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    MODULE          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    DEF             reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    PUTS            reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_CLASS       reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    SYMBOL          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    STRING          reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    IDENTIFIER      reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)
    SUPER           reduce using rule 112 (primary -> CASE compstmt when ELSE compstmt END .)


state 512

    (128) when -> when WHEN when_args then . compstmt
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    compstmt                       shift and go to state 533
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 513

    (127) when -> WHEN when_args then compstmt .

    END             reduce using rule 127 (when -> WHEN when_args then compstmt .)
    ELSE            reduce using rule 127 (when -> WHEN when_args then compstmt .)
    WHEN            reduce using rule 127 (when -> WHEN when_args then compstmt .)


state 514

    (134) when_args -> args COMMA TIMES . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 534
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 515

    (113) primary -> FOR block_var IN expr do compstmt . END

    END             shift and go to state 535


state 516

    (119) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DOT             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    PLUS            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MINUS           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    TIMES           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MOD             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    POW             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    AND             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OR              reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    IF              reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    WHILE           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    TERM            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    $end            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMMA           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    THEN            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DO              reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RKEY            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    WHEN            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LKEY            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    END             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ELSE            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RETURN          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    YIELD           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CASE            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    FOR             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CLASS           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MODULE          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DEF             reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    PUTS            reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    STRING          reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    SUPER           reduce using rule 119 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)


state 517

    (168) arglist -> IDENTIFIER COMMA & IDENTIFIER .

    TERM            reduce using rule 168 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    NUMBER          reduce using rule 168 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    LPAREN          reduce using rule 168 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    RPAREN          reduce using rule 168 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)


state 518

    (122) primary -> DEF singleton DOT fname argdecl compstmt . END

    END             shift and go to state 536


state 519

    (123) primary -> DEF singleton UNARY_OP fname argdecl compstmt . END

    END             shift and go to state 537


state 520

    (8) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .

    IF              reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    WHILE           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    UNLESS          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    UNTIL           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    TERM            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    NUMBER          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LPAREN          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    $end            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RESCUE          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RPAREN          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    WHEN            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LBRACKET        reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    DOT             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    UNARY_OP        reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RANGE_INCLUSIVE reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    PLUS            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    MINUS           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    TIMES           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    DIVIDE          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    MOD             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    POW             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    OR_SYMBOL       reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    BINARY_XOR_OP   reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    BINARY_AND_OP   reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    GREATERTHAN     reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    GREATERTHANEQUAL reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LESSERTHAN      reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LESSERTHANEQUAL reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    EQUAL           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    CASE_EQUALITY   reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    NOTEQUAL        reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    AND             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    OR              reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    COMMA           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RBRACKET        reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    THEN            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    DO              reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    HASH_ROCKET     reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RKEY            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LKEY            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    END             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ELSIF           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ELSE            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ENSURE          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    NOT_SYMBOL      reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    COMPLEMENT_OP   reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    DEFINED_OP      reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RETURN          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    YIELD           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    CASE            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    FOR             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    BEGIN           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    CLASS           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    MODULE          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    DEF             reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    PUTS            reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    VAR_GLOBAL      reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    VAR_LOCAL       reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    VAR_INSTANCE    reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    VAR_CLASS       reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    SYMBOL          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    STRING          reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    IDENTIFIER      reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    SUPER           reduce using rule 8 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)


state 521

    (106) primary -> IF expr then compstmt elsif ELSE compstmt . END

    END             shift and go to state 538


state 522

    (125) elsif -> ELSIF expr then . compstmt
    (126) elsif -> ELSIF expr then . compstmt elsif
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    expr                           shift and go to state 4
    compstmt                       shift and go to state 539
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 523

    (108) primary -> UNLESS expr then compstmt ELSE compstmt END .

    LBRACKET        reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DOT             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNARY_OP        reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    PLUS            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MINUS           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    TIMES           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DIVIDE          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MOD             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    POW             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    GREATERTHAN     reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LESSERTHAN      reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    EQUAL           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NOTEQUAL        reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    AND             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OR              reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    IF              reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    WHILE           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNLESS          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNTIL           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    TERM            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NUMBER          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LPAREN          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    $end            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMMA           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RBRACKET        reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    THEN            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DO              reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RESCUE          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RKEY            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RPAREN          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    WHEN            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LKEY            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    END             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ELSIF           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ELSE            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ENSURE          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DEFINED_OP      reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RETURN          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    YIELD           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CASE            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    FOR             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BEGIN           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CLASS           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MODULE          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DEF             reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    PUTS            reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_CLASS       reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    SYMBOL          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    STRING          reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    IDENTIFIER      reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    SUPER           reduce using rule 108 (primary -> UNLESS expr then compstmt ELSE compstmt END .)


state 524

    (117) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt . END

    END             shift and go to state 540


state 525

    (131) rescue -> rescue RESCUE args do compstmt .

    END             reduce using rule 131 (rescue -> rescue RESCUE args do compstmt .)
    ELSE            reduce using rule 131 (rescue -> rescue RESCUE args do compstmt .)
    ENSURE          reduce using rule 131 (rescue -> rescue RESCUE args do compstmt .)
    RESCUE          reduce using rule 131 (rescue -> rescue RESCUE args do compstmt .)


state 526

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL . block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (152) block_var -> . lhs
    (153) block_var -> . mlhs
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 45
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    DEFINED_OP      shift and go to state 206
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    lhs                            shift and go to state 204
    block_var                      shift and go to state 541
    mlhs                           shift and go to state 72
    variable                       shift and go to state 19
    primary                        shift and go to state 205
    mlhs_item                      shift and go to state 44
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 527

    (103) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .

    LBRACKET        reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DOT             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNARY_OP        reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    PLUS            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MINUS           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    TIMES           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DIVIDE          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MOD             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    POW             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OR_SYMBOL       reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    GREATERTHAN     reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LESSERTHAN      reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    EQUAL           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NOTEQUAL        reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    AND             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OR              reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    IF              reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    WHILE           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNLESS          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNTIL           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    TERM            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NUMBER          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LPAREN          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    $end            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMMA           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RBRACKET        reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    THEN            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DO              reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RESCUE          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    HASH_ROCKET     reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RKEY            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RPAREN          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    WHEN            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LKEY            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    END             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ELSIF           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ELSE            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ENSURE          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DEFINED_OP      reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RETURN          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    YIELD           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CASE            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    FOR             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BEGIN           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CLASS           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MODULE          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DEF             reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    PUTS            reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_LOCAL       reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_CLASS       reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    SYMBOL          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    STRING          reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    IDENTIFIER      reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    SUPER           reduce using rule 103 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)


state 528

    (178) call_args -> args COMMA assocs COMMA TIMES arg .
    (181) call_args -> args COMMA assocs COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    DOT             reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    UNARY_OP        reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    IF              reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    WHILE           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    UNLESS          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    UNTIL           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    TERM            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    NUMBER          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    LPAREN          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    $end            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RBRACKET        reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    THEN            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    DO              reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RESCUE          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    HASH_ROCKET     reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RKEY            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RPAREN          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    WHEN            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    LKEY            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    END             reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ELSIF           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ELSE            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ENSURE          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    NOT_SYMBOL      reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    COMPLEMENT_OP   reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    DEFINED_OP      reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RETURN          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    YIELD           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    CASE            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    FOR             reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    BEGIN           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    CLASS           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    MODULE          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    DEF             reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    PUTS            reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    VAR_GLOBAL      reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    VAR_LOCAL       reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    VAR_INSTANCE    reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    VAR_CLASS       reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    SYMBOL          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    STRING          reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    IDENTIFIER      reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    SUPER           reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .)
    COMMA           shift and go to state 542
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! PLUS            [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! MINUS           [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! TIMES           [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! MOD             [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! POW             [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! EQUAL           [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! AND             [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! COMMA           [ reduce using rule 178 (call_args -> args COMMA assocs COMMA TIMES arg .) ]


state 529

    (179) call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    END             reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 179 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]


state 530

    (180) call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 543
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 531

    (185) call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 544
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 532

    (34) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN . RBRACKET

    RBRACKET        shift and go to state 545


state 533

    (128) when -> when WHEN when_args then compstmt .

    END             reduce using rule 128 (when -> when WHEN when_args then compstmt .)
    ELSE            reduce using rule 128 (when -> when WHEN when_args then compstmt .)
    WHEN            reduce using rule 128 (when -> when WHEN when_args then compstmt .)


state 534

    (134) when_args -> args COMMA TIMES arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

    TERM            reduce using rule 134 (when_args -> args COMMA TIMES arg .)
    THEN            reduce using rule 134 (when_args -> args COMMA TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191


state 535

    (113) primary -> FOR block_var IN expr do compstmt END .

    LBRACKET        reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    DOT             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    UNARY_OP        reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    PLUS            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    MINUS           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    TIMES           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    DIVIDE          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    MOD             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    POW             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    OR_SYMBOL       reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    GREATERTHAN     reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    LESSERTHAN      reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    EQUAL           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    NOTEQUAL        reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    AND             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    OR              reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    IF              reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    WHILE           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    UNLESS          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    UNTIL           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    TERM            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    NUMBER          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    LPAREN          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    $end            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    COMMA           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RBRACKET        reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    THEN            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    DO              reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RESCUE          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    HASH_ROCKET     reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RKEY            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RPAREN          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    WHEN            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    LKEY            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    END             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    ELSIF           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    ELSE            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    ENSURE          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    DEFINED_OP      reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    RETURN          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    YIELD           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    CASE            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    FOR             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    BEGIN           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    CLASS           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    MODULE          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    DEF             reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    PUTS            reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_LOCAL       reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_CLASS       reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    SYMBOL          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    STRING          reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    IDENTIFIER      reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)
    SUPER           reduce using rule 113 (primary -> FOR block_var IN expr do compstmt END .)


state 536

    (122) primary -> DEF singleton DOT fname argdecl compstmt END .

    LBRACKET        reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DOT             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    PLUS            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MINUS           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    TIMES           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DIVIDE          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MOD             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    POW             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    EQUAL           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    AND             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OR              reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    IF              reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    WHILE           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNLESS          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNTIL           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    TERM            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NUMBER          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LPAREN          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    $end            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMMA           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RBRACKET        reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    THEN            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DO              reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RESCUE          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RKEY            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RPAREN          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    WHEN            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LKEY            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    END             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ELSIF           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ELSE            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ENSURE          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RETURN          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    YIELD           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CASE            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    FOR             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BEGIN           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CLASS           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MODULE          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DEF             reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    PUTS            reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    SYMBOL          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    STRING          reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    SUPER           reduce using rule 122 (primary -> DEF singleton DOT fname argdecl compstmt END .)


state 537

    (123) primary -> DEF singleton UNARY_OP fname argdecl compstmt END .

    LBRACKET        reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DOT             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    PLUS            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MINUS           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    TIMES           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DIVIDE          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MOD             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    POW             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    EQUAL           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    AND             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OR              reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    IF              reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    WHILE           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNLESS          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNTIL           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    TERM            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NUMBER          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LPAREN          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    $end            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMMA           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RBRACKET        reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    THEN            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DO              reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RESCUE          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RKEY            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RPAREN          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    WHEN            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LKEY            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    END             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ELSIF           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ELSE            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ENSURE          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RETURN          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    YIELD           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CASE            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    FOR             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BEGIN           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CLASS           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MODULE          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DEF             reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    PUTS            reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    SYMBOL          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    STRING          reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    SUPER           reduce using rule 123 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)


state 538

    (106) primary -> IF expr then compstmt elsif ELSE compstmt END .

    LBRACKET        reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DOT             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNARY_OP        reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    PLUS            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MINUS           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    TIMES           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DIVIDE          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MOD             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    POW             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    GREATERTHAN     reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LESSERTHAN      reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    EQUAL           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NOTEQUAL        reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    AND             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OR              reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    IF              reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    WHILE           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNLESS          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNTIL           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    TERM            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NUMBER          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LPAREN          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    $end            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMMA           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RBRACKET        reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    THEN            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DO              reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RESCUE          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RKEY            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RPAREN          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    WHEN            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LKEY            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    END             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ELSIF           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ELSE            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ENSURE          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DEFINED_OP      reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RETURN          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    YIELD           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CASE            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    FOR             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BEGIN           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CLASS           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MODULE          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DEF             reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    PUTS            reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_CLASS       reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    SYMBOL          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    STRING          reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    IDENTIFIER      reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    SUPER           reduce using rule 106 (primary -> IF expr then compstmt elsif ELSE compstmt END .)


state 539

    (125) elsif -> ELSIF expr then compstmt .
    (126) elsif -> ELSIF expr then compstmt . elsif
    (125) elsif -> . ELSIF expr then compstmt
    (126) elsif -> . ELSIF expr then compstmt elsif

    END             reduce using rule 125 (elsif -> ELSIF expr then compstmt .)
    ELSE            reduce using rule 125 (elsif -> ELSIF expr then compstmt .)
    ELSIF           shift and go to state 448

    elsif                          shift and go to state 546

state 540

    (117) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .

    LBRACKET        reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DOT             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNARY_OP        reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    PLUS            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MINUS           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    TIMES           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DIVIDE          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MOD             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    POW             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OR_SYMBOL       reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_XOR_OP   reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_AND_OP   reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    GREATERTHAN     reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    GREATERTHANEQUAL reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LESSERTHAN      reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LESSERTHANEQUAL reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    EQUAL           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CASE_EQUALITY   reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NOTEQUAL        reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    AND             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OR              reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    IF              reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    WHILE           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNLESS          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNTIL           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    TERM            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NUMBER          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LPAREN          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    $end            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMMA           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RBRACKET        reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    THEN            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DO              reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RESCUE          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    HASH_ROCKET     reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RKEY            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RPAREN          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    WHEN            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LKEY            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    END             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ELSIF           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ELSE            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ENSURE          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NOT_SYMBOL      reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMPLEMENT_OP   reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DEFINED_OP      reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RETURN          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    YIELD           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CASE            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    FOR             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BEGIN           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CLASS           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MODULE          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DEF             reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    PUTS            reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_GLOBAL      reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_LOCAL       reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_INSTANCE    reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_CLASS       reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    SYMBOL          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    STRING          reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    IDENTIFIER      reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    SUPER           reduce using rule 117 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)


state 541

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var . OR_SYMBOL RBRACKET compstmt END RBRACKET

    OR_SYMBOL       shift and go to state 547


state 542

    (181) call_args -> args COMMA assocs COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 548


state 543

    (180) call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 180 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 544

    (185) call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 185 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 545

    (34) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .

    LKEY            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DO              reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    TERM            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NUMBER          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LPAREN          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LBRACKET        reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DOT             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNARY_OP        reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    PLUS            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MINUS           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    TIMES           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DIVIDE          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MOD             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    POW             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OR_SYMBOL       reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_XOR_OP   reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_AND_OP   reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    GREATERTHAN     reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    GREATERTHANEQUAL reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LESSERTHAN      reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LESSERTHANEQUAL reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    EQUAL           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CASE_EQUALITY   reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NOTEQUAL        reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    AND             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OR              reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    IF              reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    WHILE           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNLESS          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNTIL           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    $end            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMMA           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RBRACKET        reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    THEN            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RESCUE          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    HASH_ROCKET     reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RKEY            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RPAREN          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    WHEN            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    END             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ELSIF           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ELSE            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ENSURE          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NOT_SYMBOL      reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMPLEMENT_OP   reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DEFINED_OP      reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RETURN          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    YIELD           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CASE            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    FOR             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BEGIN           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CLASS           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MODULE          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DEF             reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    PUTS            reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_GLOBAL      reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_LOCAL       reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_INSTANCE    reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_CLASS       reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    SYMBOL          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    STRING          reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    IDENTIFIER      reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    SUPER           reduce using rule 34 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)


state 546

    (126) elsif -> ELSIF expr then compstmt elsif .

    END             reduce using rule 126 (elsif -> ELSIF expr then compstmt elsif .)
    ELSE            reduce using rule 126 (elsif -> ELSIF expr then compstmt elsif .)


state 547

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL . RBRACKET compstmt END RBRACKET

    RBRACKET        shift and go to state 549


state 548

    (181) call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT_SYMBOL      shift and go to state 76
    COMPLEMENT_OP   shift and go to state 48
    DEFINED_OP      shift and go to state 77
    LPAREN          shift and go to state 132
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 66
    LKEY            shift and go to state 15
    RETURN          shift and go to state 78
    YIELD           shift and go to state 79
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 81
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51
    IDENTIFIER      shift and go to state 75
    SUPER           shift and go to state 83

    arg                            shift and go to state 550
    lhs                            shift and go to state 130
    primary                        shift and go to state 131
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 80
    operation                      shift and go to state 82

state 549

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET . compstmt END RBRACKET
    (3) compstmt -> . stmt
    (4) compstmt -> . stmt term
    (5) compstmt -> . stmt term expr term
    (6) stmt -> . call do LBRACKET RBRACKET
    (7) stmt -> . LBRACKET block_var RBRACKET
    (8) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (9) stmt -> . UNDEF fname
    (10) stmt -> . ALIAS fname fname
    (11) stmt -> . stmt IF expr
    (12) stmt -> . stmt WHILE expr
    (13) stmt -> . stmt UNLESS expr
    (14) stmt -> . stmt UNTIL expr
    (15) stmt -> . BEGIN LKEY compstmt RKEY
    (16) stmt -> . END LKEY compstmt RKEY
    (17) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (18) stmt -> . expr
    (28) call -> . function
    (29) call -> . command
    (148) lhs -> . variable
    (149) lhs -> . primary LBRACKET RBRACKET
    (150) lhs -> . primary LBRACKET args RBRACKET
    (151) lhs -> . primary DOT IDENTIFIER
    (19) expr -> . mlhs = mrhs
    (20) expr -> . RETURN call_args
    (21) expr -> . YIELD call_args
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . NOT expr
    (25) expr -> . command
    (26) expr -> . NOT_SYMBOL command
    (27) expr -> . arg
    (34) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (35) function -> . primary DOT operation LPAREN call_args RPAREN
    (36) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (37) function -> . primary DOT operation
    (38) function -> . primary UNARY_OP operation
    (39) function -> . SUPER LPAREN call_args RPAREN
    (40) function -> . SUPER
    (30) command -> . operation call_args
    (31) command -> . primary DOT operation call_args
    (32) command -> . primary UNARY_OP operation call_args
    (33) command -> . SUPER call_args
    (74) variable -> . VAR_GLOBAL
    (75) variable -> . VAR_LOCAL
    (76) variable -> . VAR_INSTANCE
    (77) variable -> . VAR_CLASS
    (78) primary -> . LPAREN compstmt RPAREN
    (79) primary -> . literal
    (80) primary -> . variable
    (81) primary -> . primary UNARY_OP IDENTIFIER
    (82) primary -> . UNARY_OP IDENTIFIER
    (83) primary -> . primary LBRACKET RBRACKET
    (84) primary -> . primary LBRACKET args RBRACKET
    (85) primary -> . LBRACKET RBRACKET
    (86) primary -> . LBRACKET args RBRACKET
    (87) primary -> . LBRACKET args COMMA RBRACKET
    (88) primary -> . LKEY RKEY
    (89) primary -> . LKEY args RKEY
    (90) primary -> . LKEY assocs RKEY
    (91) primary -> . LKEY args COMMA RKEY
    (92) primary -> . LKEY assocs COMMA RKEY
    (93) primary -> . RETURN
    (94) primary -> . RETURN LPAREN RPAREN
    (95) primary -> . RETURN LPAREN call_args RPAREN
    (96) primary -> . YIELD
    (97) primary -> . YIELD LPAREN RPAREN
    (98) primary -> . YIELD LPAREN call_args RPAREN
    (99) primary -> . DEFINED_OP LPAREN arg LPAREN
    (100) primary -> . function
    (101) primary -> . function LKEY compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (103) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (104) primary -> . IF expr then compstmt END
    (105) primary -> . IF expr then compstmt elsif END
    (106) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (107) primary -> . UNLESS expr then compstmt END
    (108) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (109) primary -> . WHILE expr do compstmt END
    (110) primary -> . UNTIL expr do compstmt END
    (111) primary -> . CASE compstmt when END
    (112) primary -> . CASE compstmt when ELSE compstmt END
    (113) primary -> . FOR block_var IN expr do compstmt END
    (114) primary -> . BEGIN compstmt rescue END
    (115) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (116) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (117) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (118) primary -> . CLASS IDENTIFIER compstmt END
    (119) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (120) primary -> . MODULE IDENTIFIER compstmt END
    (121) primary -> . DEF fname argdecl compstmt END
    (122) primary -> . DEF singleton DOT fname argdecl compstmt END
    (123) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (124) primary -> . PUTS compstmt
    (154) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (156) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (157) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (158) mlhs -> . TIMES lhs
    (41) arg -> . lhs = arg
    (42) arg -> . lhs op_asgn arg
    (43) arg -> . arg RANGE_INCLUSIVE arg
    (44) arg -> . arg RANGE_EXCLUSIVE arg
    (45) arg -> . arg PLUS arg
    (46) arg -> . arg MINUS arg
    (47) arg -> . arg TIMES arg
    (48) arg -> . arg DIVIDE arg
    (49) arg -> . arg MOD arg
    (50) arg -> . arg POW arg
    (51) arg -> . PLUS arg
    (52) arg -> . MINUS arg
    (53) arg -> . arg OR_SYMBOL arg
    (54) arg -> . arg BINARY_XOR_OP arg
    (55) arg -> . arg BINARY_AND_OP arg
    (56) arg -> . arg COMBINED_COMPARISON_OP arg
    (57) arg -> . arg GREATERTHAN arg
    (58) arg -> . arg GREATERTHANEQUAL arg
    (59) arg -> . arg LESSERTHAN arg
    (60) arg -> . arg LESSERTHANEQUAL arg
    (61) arg -> . arg EQUAL arg
    (62) arg -> . arg CASE_EQUALITY arg
    (63) arg -> . arg NOTEQUAL arg
    (64) arg -> . arg MATCHED_STRINGS_OP arg
    (65) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (66) arg -> . NOT_SYMBOL arg
    (67) arg -> . COMPLEMENT_OP arg
    (68) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (69) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> . arg AND arg
    (71) arg -> . arg OR arg
    (72) arg -> . DEFINED_OP arg
    (73) arg -> . primary
    (220) operation -> . IDENTIFIER
    (221) operation -> . IDENTIFIER NOT_SYMBOL
    (222) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (190) literal -> . NUMBER
    (191) literal -> . SYMBOL
    (192) literal -> . STRING
    (193) literal -> . IDENTIFIER
    (160) mlhs_item -> . lhs
    (161) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PUTS            shift and go to state 43
    TIMES           shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    COMPLEMENT_OP   shift and go to state 48
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 49
    SYMBOL          shift and go to state 50
    STRING          shift and go to state 51

    lhs                            shift and go to state 16
    command                        shift and go to state 17
    compstmt                       shift and go to state 551
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 44

state 550

    (181) call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (43) arg -> arg . RANGE_INCLUSIVE arg
    (44) arg -> arg . RANGE_EXCLUSIVE arg
    (45) arg -> arg . PLUS arg
    (46) arg -> arg . MINUS arg
    (47) arg -> arg . TIMES arg
    (48) arg -> arg . DIVIDE arg
    (49) arg -> arg . MOD arg
    (50) arg -> arg . POW arg
    (53) arg -> arg . OR_SYMBOL arg
    (54) arg -> arg . BINARY_XOR_OP arg
    (55) arg -> arg . BINARY_AND_OP arg
    (56) arg -> arg . COMBINED_COMPARISON_OP arg
    (57) arg -> arg . GREATERTHAN arg
    (58) arg -> arg . GREATERTHANEQUAL arg
    (59) arg -> arg . LESSERTHAN arg
    (60) arg -> arg . LESSERTHANEQUAL arg
    (61) arg -> arg . EQUAL arg
    (62) arg -> arg . CASE_EQUALITY arg
    (63) arg -> arg . NOTEQUAL arg
    (64) arg -> arg . MATCHED_STRINGS_OP arg
    (65) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (68) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (69) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (70) arg -> arg . AND arg
    (71) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LBRACKET        reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DOT             reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IF              reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMMA           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RETURN          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    YIELD           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CASE            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    FOR             reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    BEGIN           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    CLASS           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    MODULE          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DEF             reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    PUTS            reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    STRING          reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    SUPER           reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 167
    RANGE_EXCLUSIVE shift and go to state 168
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170
    TIMES           shift and go to state 171
    DIVIDE          shift and go to state 172
    MOD             shift and go to state 173
    POW             shift and go to state 174
    OR_SYMBOL       shift and go to state 175
    BINARY_XOR_OP   shift and go to state 176
    BINARY_AND_OP   shift and go to state 177
    COMBINED_COMPARISON_OP shift and go to state 178
    GREATERTHAN     shift and go to state 179
    GREATERTHANEQUAL shift and go to state 180
    LESSERTHAN      shift and go to state 181
    LESSERTHANEQUAL shift and go to state 182
    EQUAL           shift and go to state 183
    CASE_EQUALITY   shift and go to state 184
    NOTEQUAL        shift and go to state 185
    MATCHED_STRINGS_OP shift and go to state 186
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 187
    BINARY_LEFT_SHIFT_OP shift and go to state 188
    BINARY_RIGHT_SHIFT_OP shift and go to state 189
    AND             shift and go to state 190
    OR              shift and go to state 191

  ! RANGE_INCLUSIVE [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 181 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 551

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt . END RBRACKET

    END             shift and go to state 552


state 552

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END . RBRACKET

    RBRACKET        shift and go to state 553


state 553

    (17) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .

    IF              reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    WHILE           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    UNLESS          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    UNTIL           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    TERM            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    NUMBER          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LPAREN          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    $end            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RESCUE          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RPAREN          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    WHEN            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LBRACKET        reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    DOT             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    UNARY_OP        reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    PLUS            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    MINUS           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    TIMES           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    DIVIDE          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    MOD             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    POW             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    OR_SYMBOL       reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    BINARY_XOR_OP   reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    BINARY_AND_OP   reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    GREATERTHAN     reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    GREATERTHANEQUAL reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LESSERTHAN      reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LESSERTHANEQUAL reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    EQUAL           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    CASE_EQUALITY   reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    NOTEQUAL        reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    AND             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    OR              reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    COMMA           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RBRACKET        reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    THEN            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    DO              reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    HASH_ROCKET     reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RKEY            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LKEY            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    END             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ELSIF           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ELSE            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ENSURE          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    NOT_SYMBOL      reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    COMPLEMENT_OP   reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    DEFINED_OP      reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RETURN          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    YIELD           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    CASE            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    FOR             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    BEGIN           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    CLASS           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    MODULE          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    DEF             reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    PUTS            reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    VAR_GLOBAL      reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    VAR_LOCAL       reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    VAR_INSTANCE    reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    VAR_CLASS       reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    SYMBOL          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    STRING          reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    IDENTIFIER      reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    SUPER           reduce using rule 17 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 3 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 3 resolved as shift
WARNING: shift/reduce conflict for TERM in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for AND in state 4 resolved as shift
WARNING: shift/reduce conflict for OR in state 4 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 18 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 20 resolved as shift
WARNING: shift/reduce conflict for DOT in state 20 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 20 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 21 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 21 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 23 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 23 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 23 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 23 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 23 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 23 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 23 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 23 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 23 resolved as shift
WARNING: shift/reduce conflict for CASE in state 23 resolved as shift
WARNING: shift/reduce conflict for FOR in state 23 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 23 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 23 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 23 resolved as shift
WARNING: shift/reduce conflict for DEF in state 23 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 23 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 23 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 23 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 23 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 23 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 24 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 24 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 24 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 24 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 24 resolved as shift
WARNING: shift/reduce conflict for CASE in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 24 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 24 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 24 resolved as shift
WARNING: shift/reduce conflict for DEF in state 24 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 24 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 24 resolved as shift
WARNING: shift/reduce conflict for STRING in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 24 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 27 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 27 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 27 resolved as shift
WARNING: shift/reduce conflict for MOD in state 27 resolved as shift
WARNING: shift/reduce conflict for POW in state 27 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 27 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 27 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 27 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 27 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 27 resolved as shift
WARNING: shift/reduce conflict for OR in state 27 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 31 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 31 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 31 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 31 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 31 resolved as shift
WARNING: shift/reduce conflict for CASE in state 31 resolved as shift
WARNING: shift/reduce conflict for FOR in state 31 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 31 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 31 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 31 resolved as shift
WARNING: shift/reduce conflict for DEF in state 31 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 31 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 31 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 31 resolved as shift
WARNING: shift/reduce conflict for STRING in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 52 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 52 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 52 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 52 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 52 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 52 resolved as shift
WARNING: shift/reduce conflict for CASE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 52 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 52 resolved as shift
WARNING: shift/reduce conflict for DEF in state 52 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 52 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 52 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 52 resolved as shift
WARNING: shift/reduce conflict for STRING in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 73 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for POW in state 73 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 73 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 73 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 75 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 78 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 79 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 80 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for DOT in state 116 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 117 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 117 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 117 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 117 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 117 resolved as shift
WARNING: shift/reduce conflict for CASE in state 117 resolved as shift
WARNING: shift/reduce conflict for FOR in state 117 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 117 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 117 resolved as shift
WARNING: shift/reduce conflict for DEF in state 117 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 117 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 117 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 117 resolved as shift
WARNING: shift/reduce conflict for STRING in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 128 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD in state 128 resolved as shift
WARNING: shift/reduce conflict for POW in state 128 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 128 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 128 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 128 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for HASH_ROCKET in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 131 resolved as shift
WARNING: shift/reduce conflict for DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 158 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 166 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 166 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 166 resolved as shift
WARNING: shift/reduce conflict for MOD in state 166 resolved as shift
WARNING: shift/reduce conflict for POW in state 166 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 166 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 166 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 166 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 166 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 201 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 201 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 201 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 201 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 201 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 201 resolved as shift
WARNING: shift/reduce conflict for MOD in state 201 resolved as shift
WARNING: shift/reduce conflict for POW in state 201 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 201 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 201 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 201 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 201 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 216 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 216 resolved as shift
WARNING: shift/reduce conflict for MOD in state 216 resolved as shift
WARNING: shift/reduce conflict for POW in state 216 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 216 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 216 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 216 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for AND in state 216 resolved as shift
WARNING: shift/reduce conflict for OR in state 216 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 217 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 217 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 217 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 217 resolved as shift
WARNING: shift/reduce conflict for MOD in state 217 resolved as shift
WARNING: shift/reduce conflict for POW in state 217 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 217 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 217 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 217 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 217 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 217 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 217 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 217 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 217 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 217 resolved as shift
WARNING: shift/reduce conflict for AND in state 217 resolved as shift
WARNING: shift/reduce conflict for OR in state 217 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 218 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 218 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 218 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 218 resolved as shift
WARNING: shift/reduce conflict for MOD in state 218 resolved as shift
WARNING: shift/reduce conflict for POW in state 218 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 218 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 218 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 218 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 218 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 218 resolved as shift
WARNING: shift/reduce conflict for AND in state 218 resolved as shift
WARNING: shift/reduce conflict for OR in state 218 resolved as shift
WARNING: shift/reduce conflict for AND in state 222 resolved as shift
WARNING: shift/reduce conflict for OR in state 222 resolved as shift
WARNING: shift/reduce conflict for AND in state 223 resolved as shift
WARNING: shift/reduce conflict for OR in state 223 resolved as shift
WARNING: shift/reduce conflict for AND in state 224 resolved as shift
WARNING: shift/reduce conflict for OR in state 224 resolved as shift
WARNING: shift/reduce conflict for AND in state 225 resolved as shift
WARNING: shift/reduce conflict for OR in state 225 resolved as shift
WARNING: shift/reduce conflict for AND in state 228 resolved as shift
WARNING: shift/reduce conflict for OR in state 228 resolved as shift
WARNING: shift/reduce conflict for AND in state 229 resolved as shift
WARNING: shift/reduce conflict for OR in state 229 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 260 resolved as shift
WARNING: shift/reduce conflict for AND in state 260 resolved as shift
WARNING: shift/reduce conflict for OR in state 260 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 272 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 272 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 272 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 272 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 272 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 272 resolved as shift
WARNING: shift/reduce conflict for MOD in state 272 resolved as shift
WARNING: shift/reduce conflict for POW in state 272 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 272 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 272 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 272 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 272 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 272 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 272 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 272 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 272 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 272 resolved as shift
WARNING: shift/reduce conflict for AND in state 272 resolved as shift
WARNING: shift/reduce conflict for OR in state 272 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 273 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 273 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 273 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 273 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 273 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 273 resolved as shift
WARNING: shift/reduce conflict for MOD in state 273 resolved as shift
WARNING: shift/reduce conflict for POW in state 273 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 273 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 273 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 273 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 273 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 273 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 273 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 273 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 273 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 273 resolved as shift
WARNING: shift/reduce conflict for AND in state 273 resolved as shift
WARNING: shift/reduce conflict for OR in state 273 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 278 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 279 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 279 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 279 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 279 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 279 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 279 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 279 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 279 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 279 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 279 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 279 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 279 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 279 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 279 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 279 resolved as shift
WARNING: shift/reduce conflict for IF in state 279 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 279 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 279 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 279 resolved as shift
WARNING: shift/reduce conflict for CASE in state 279 resolved as shift
WARNING: shift/reduce conflict for FOR in state 279 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 279 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 279 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 279 resolved as shift
WARNING: shift/reduce conflict for DEF in state 279 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 279 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 279 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 279 resolved as shift
WARNING: shift/reduce conflict for STRING in state 279 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 279 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 279 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 279 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 279 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 280 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 280 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 280 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 280 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 280 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 280 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 280 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 280 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 280 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 280 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 280 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 280 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 280 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 280 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 280 resolved as shift
WARNING: shift/reduce conflict for IF in state 280 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 280 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 280 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 280 resolved as shift
WARNING: shift/reduce conflict for CASE in state 280 resolved as shift
WARNING: shift/reduce conflict for FOR in state 280 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 280 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 280 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 280 resolved as shift
WARNING: shift/reduce conflict for DEF in state 280 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 280 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 280 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 280 resolved as shift
WARNING: shift/reduce conflict for STRING in state 280 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 280 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 280 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 280 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 280 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 281 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 283 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 283 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 283 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 283 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 283 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 283 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 283 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 283 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 283 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 283 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 283 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 283 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 283 resolved as shift
WARNING: shift/reduce conflict for CASE in state 283 resolved as shift
WARNING: shift/reduce conflict for FOR in state 283 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 283 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 283 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 283 resolved as shift
WARNING: shift/reduce conflict for DEF in state 283 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 283 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 283 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 283 resolved as shift
WARNING: shift/reduce conflict for STRING in state 283 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 283 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 283 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 285 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 285 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 285 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 285 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 285 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 285 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 285 resolved as shift
WARNING: shift/reduce conflict for IF in state 285 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 285 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 285 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 285 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 285 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 290 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 290 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 290 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 290 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 290 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 290 resolved as shift
WARNING: shift/reduce conflict for IF in state 290 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 290 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 290 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 290 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 290 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 294 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 294 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 294 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 294 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 294 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 294 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 294 resolved as shift
WARNING: shift/reduce conflict for MOD in state 294 resolved as shift
WARNING: shift/reduce conflict for POW in state 294 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 294 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 294 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 294 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 294 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 294 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 294 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 294 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 294 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 294 resolved as shift
WARNING: shift/reduce conflict for AND in state 294 resolved as shift
WARNING: shift/reduce conflict for OR in state 294 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 295 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 295 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 295 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 295 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 295 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 295 resolved as shift
WARNING: shift/reduce conflict for MOD in state 295 resolved as shift
WARNING: shift/reduce conflict for POW in state 295 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 295 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 295 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 295 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 295 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 295 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 295 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 295 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 295 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for AND in state 295 resolved as shift
WARNING: shift/reduce conflict for OR in state 295 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 298 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 298 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 298 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 298 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 298 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 298 resolved as shift
WARNING: shift/reduce conflict for MOD in state 298 resolved as shift
WARNING: shift/reduce conflict for POW in state 298 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 298 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 298 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 298 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for AND in state 298 resolved as shift
WARNING: shift/reduce conflict for OR in state 298 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 299 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 299 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 299 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 299 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 299 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 299 resolved as shift
WARNING: shift/reduce conflict for MOD in state 299 resolved as shift
WARNING: shift/reduce conflict for POW in state 299 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 299 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 299 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 299 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for AND in state 299 resolved as shift
WARNING: shift/reduce conflict for OR in state 299 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 300 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 300 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 300 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 300 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 300 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 300 resolved as shift
WARNING: shift/reduce conflict for MOD in state 300 resolved as shift
WARNING: shift/reduce conflict for POW in state 300 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 300 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 300 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 300 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for AND in state 300 resolved as shift
WARNING: shift/reduce conflict for OR in state 300 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 301 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 301 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 301 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 301 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 301 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 301 resolved as shift
WARNING: shift/reduce conflict for MOD in state 301 resolved as shift
WARNING: shift/reduce conflict for POW in state 301 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 301 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 301 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 301 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for AND in state 301 resolved as shift
WARNING: shift/reduce conflict for OR in state 301 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 302 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 302 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 302 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 302 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 302 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 302 resolved as shift
WARNING: shift/reduce conflict for MOD in state 302 resolved as shift
WARNING: shift/reduce conflict for POW in state 302 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 302 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 302 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 302 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for AND in state 302 resolved as shift
WARNING: shift/reduce conflict for OR in state 302 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 303 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 303 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 303 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 303 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 303 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 303 resolved as shift
WARNING: shift/reduce conflict for MOD in state 303 resolved as shift
WARNING: shift/reduce conflict for POW in state 303 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 303 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 303 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 303 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for AND in state 303 resolved as shift
WARNING: shift/reduce conflict for OR in state 303 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 304 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 304 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 304 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 304 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 304 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 304 resolved as shift
WARNING: shift/reduce conflict for MOD in state 304 resolved as shift
WARNING: shift/reduce conflict for POW in state 304 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 304 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 304 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 304 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for AND in state 304 resolved as shift
WARNING: shift/reduce conflict for OR in state 304 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 305 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 305 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 305 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 305 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 305 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 305 resolved as shift
WARNING: shift/reduce conflict for MOD in state 305 resolved as shift
WARNING: shift/reduce conflict for POW in state 305 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 305 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 305 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 305 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for AND in state 305 resolved as shift
WARNING: shift/reduce conflict for OR in state 305 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 306 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 306 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 306 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 306 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 306 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 306 resolved as shift
WARNING: shift/reduce conflict for MOD in state 306 resolved as shift
WARNING: shift/reduce conflict for POW in state 306 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 306 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 306 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 306 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for AND in state 306 resolved as shift
WARNING: shift/reduce conflict for OR in state 306 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 307 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 307 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 307 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 307 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 307 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 307 resolved as shift
WARNING: shift/reduce conflict for MOD in state 307 resolved as shift
WARNING: shift/reduce conflict for POW in state 307 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 307 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 307 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 307 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for AND in state 307 resolved as shift
WARNING: shift/reduce conflict for OR in state 307 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 308 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 308 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 308 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 308 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 308 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 308 resolved as shift
WARNING: shift/reduce conflict for MOD in state 308 resolved as shift
WARNING: shift/reduce conflict for POW in state 308 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 308 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 308 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 308 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for AND in state 308 resolved as shift
WARNING: shift/reduce conflict for OR in state 308 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 309 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 309 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 309 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 309 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 309 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 309 resolved as shift
WARNING: shift/reduce conflict for MOD in state 309 resolved as shift
WARNING: shift/reduce conflict for POW in state 309 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 309 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 309 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 309 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for AND in state 309 resolved as shift
WARNING: shift/reduce conflict for OR in state 309 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 310 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 310 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 310 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 310 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 310 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 310 resolved as shift
WARNING: shift/reduce conflict for MOD in state 310 resolved as shift
WARNING: shift/reduce conflict for POW in state 310 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 310 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 310 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 310 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for AND in state 310 resolved as shift
WARNING: shift/reduce conflict for OR in state 310 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 311 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 311 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 311 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 311 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 311 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 311 resolved as shift
WARNING: shift/reduce conflict for MOD in state 311 resolved as shift
WARNING: shift/reduce conflict for POW in state 311 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 311 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 311 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 311 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for AND in state 311 resolved as shift
WARNING: shift/reduce conflict for OR in state 311 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 312 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 312 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 312 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 312 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 312 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 312 resolved as shift
WARNING: shift/reduce conflict for MOD in state 312 resolved as shift
WARNING: shift/reduce conflict for POW in state 312 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 312 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 312 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 312 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for AND in state 312 resolved as shift
WARNING: shift/reduce conflict for OR in state 312 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 313 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 313 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 313 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 313 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 313 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 313 resolved as shift
WARNING: shift/reduce conflict for MOD in state 313 resolved as shift
WARNING: shift/reduce conflict for POW in state 313 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 313 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 313 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 313 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for AND in state 313 resolved as shift
WARNING: shift/reduce conflict for OR in state 313 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 314 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 314 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 314 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 314 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 314 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 314 resolved as shift
WARNING: shift/reduce conflict for MOD in state 314 resolved as shift
WARNING: shift/reduce conflict for POW in state 314 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 314 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 314 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 314 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for AND in state 314 resolved as shift
WARNING: shift/reduce conflict for OR in state 314 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 315 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 315 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 315 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 315 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 315 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 315 resolved as shift
WARNING: shift/reduce conflict for MOD in state 315 resolved as shift
WARNING: shift/reduce conflict for POW in state 315 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 315 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 315 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 315 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for AND in state 315 resolved as shift
WARNING: shift/reduce conflict for OR in state 315 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 316 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 316 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 316 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 316 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 316 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 316 resolved as shift
WARNING: shift/reduce conflict for MOD in state 316 resolved as shift
WARNING: shift/reduce conflict for POW in state 316 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 316 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 316 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 316 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for AND in state 316 resolved as shift
WARNING: shift/reduce conflict for OR in state 316 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 317 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 317 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 317 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 317 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 317 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 317 resolved as shift
WARNING: shift/reduce conflict for MOD in state 317 resolved as shift
WARNING: shift/reduce conflict for POW in state 317 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 317 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 317 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 317 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for AND in state 317 resolved as shift
WARNING: shift/reduce conflict for OR in state 317 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 318 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 318 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 318 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 318 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 318 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 318 resolved as shift
WARNING: shift/reduce conflict for MOD in state 318 resolved as shift
WARNING: shift/reduce conflict for POW in state 318 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 318 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 318 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 318 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for AND in state 318 resolved as shift
WARNING: shift/reduce conflict for OR in state 318 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 319 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 319 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 319 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 319 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 319 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 319 resolved as shift
WARNING: shift/reduce conflict for MOD in state 319 resolved as shift
WARNING: shift/reduce conflict for POW in state 319 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 319 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 319 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 319 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for AND in state 319 resolved as shift
WARNING: shift/reduce conflict for OR in state 319 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 320 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 320 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 320 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 320 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 320 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 320 resolved as shift
WARNING: shift/reduce conflict for MOD in state 320 resolved as shift
WARNING: shift/reduce conflict for POW in state 320 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 320 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 320 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 320 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for AND in state 320 resolved as shift
WARNING: shift/reduce conflict for OR in state 320 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 321 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 321 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 321 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 321 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 321 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 321 resolved as shift
WARNING: shift/reduce conflict for MOD in state 321 resolved as shift
WARNING: shift/reduce conflict for POW in state 321 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 321 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 321 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 321 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 321 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 321 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 321 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 321 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 321 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for AND in state 321 resolved as shift
WARNING: shift/reduce conflict for OR in state 321 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 322 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 322 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 322 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 322 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 322 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 322 resolved as shift
WARNING: shift/reduce conflict for MOD in state 322 resolved as shift
WARNING: shift/reduce conflict for POW in state 322 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 322 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 322 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 322 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 322 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 322 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 322 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 322 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 322 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 322 resolved as shift
WARNING: shift/reduce conflict for AND in state 322 resolved as shift
WARNING: shift/reduce conflict for OR in state 322 resolved as shift
WARNING: shift/reduce conflict for AND in state 327 resolved as shift
WARNING: shift/reduce conflict for OR in state 327 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 327 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 349 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 349 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 360 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 360 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 360 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 360 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 360 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 360 resolved as shift
WARNING: shift/reduce conflict for MOD in state 360 resolved as shift
WARNING: shift/reduce conflict for POW in state 360 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 360 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 360 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 360 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 360 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 360 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 360 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 360 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 360 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 360 resolved as shift
WARNING: shift/reduce conflict for AND in state 360 resolved as shift
WARNING: shift/reduce conflict for OR in state 360 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 361 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 362 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 368 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 368 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 368 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 368 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 368 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 368 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 368 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 368 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 368 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 368 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 368 resolved as shift
WARNING: shift/reduce conflict for IF in state 368 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 368 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 368 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 368 resolved as shift
WARNING: shift/reduce conflict for CASE in state 368 resolved as shift
WARNING: shift/reduce conflict for FOR in state 368 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 368 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 368 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 368 resolved as shift
WARNING: shift/reduce conflict for DEF in state 368 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 368 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 368 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 368 resolved as shift
WARNING: shift/reduce conflict for STRING in state 368 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 368 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 368 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 368 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 368 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 369 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 369 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 369 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 369 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 369 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 369 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 369 resolved as shift
WARNING: shift/reduce conflict for COMPLEMENT_OP in state 369 resolved as shift
WARNING: shift/reduce conflict for DEFINED_OP in state 369 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 369 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 369 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 369 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 369 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 369 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 369 resolved as shift
WARNING: shift/reduce conflict for IF in state 369 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 369 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 369 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 369 resolved as shift
WARNING: shift/reduce conflict for CASE in state 369 resolved as shift
WARNING: shift/reduce conflict for FOR in state 369 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 369 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 369 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 369 resolved as shift
WARNING: shift/reduce conflict for DEF in state 369 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 369 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 369 resolved as shift
WARNING: shift/reduce conflict for SYMBOL in state 369 resolved as shift
WARNING: shift/reduce conflict for STRING in state 369 resolved as shift
WARNING: shift/reduce conflict for VAR_GLOBAL in state 369 resolved as shift
WARNING: shift/reduce conflict for VAR_LOCAL in state 369 resolved as shift
WARNING: shift/reduce conflict for VAR_INSTANCE in state 369 resolved as shift
WARNING: shift/reduce conflict for VAR_CLASS in state 369 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 387 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 387 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 387 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 387 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 387 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 387 resolved as shift
WARNING: shift/reduce conflict for MOD in state 387 resolved as shift
WARNING: shift/reduce conflict for POW in state 387 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 387 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 387 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 387 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 387 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 387 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 387 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 387 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 387 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 387 resolved as shift
WARNING: shift/reduce conflict for AND in state 387 resolved as shift
WARNING: shift/reduce conflict for OR in state 387 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 401 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 401 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 401 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 401 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 401 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 401 resolved as shift
WARNING: shift/reduce conflict for MOD in state 401 resolved as shift
WARNING: shift/reduce conflict for POW in state 401 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 401 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 401 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 401 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 401 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 401 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 401 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 401 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 401 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 401 resolved as shift
WARNING: shift/reduce conflict for AND in state 401 resolved as shift
WARNING: shift/reduce conflict for OR in state 401 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 402 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 402 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 402 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 402 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 402 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 402 resolved as shift
WARNING: shift/reduce conflict for MOD in state 402 resolved as shift
WARNING: shift/reduce conflict for POW in state 402 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 402 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 402 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 402 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 402 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 402 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 402 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 402 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 402 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 402 resolved as shift
WARNING: shift/reduce conflict for AND in state 402 resolved as shift
WARNING: shift/reduce conflict for OR in state 402 resolved as shift
WARNING: shift/reduce conflict for = in state 404 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 405 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 429 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 466 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 466 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 466 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 466 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 466 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 466 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 466 resolved as shift
WARNING: shift/reduce conflict for MOD in state 466 resolved as shift
WARNING: shift/reduce conflict for POW in state 466 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 466 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 466 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 466 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 466 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 466 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 466 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 466 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 466 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 466 resolved as shift
WARNING: shift/reduce conflict for AND in state 466 resolved as shift
WARNING: shift/reduce conflict for OR in state 466 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 467 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 467 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 467 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 467 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 467 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 467 resolved as shift
WARNING: shift/reduce conflict for MOD in state 467 resolved as shift
WARNING: shift/reduce conflict for POW in state 467 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 467 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 467 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 467 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 467 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 467 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 467 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 467 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 467 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 467 resolved as shift
WARNING: shift/reduce conflict for AND in state 467 resolved as shift
WARNING: shift/reduce conflict for OR in state 467 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 468 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 468 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 468 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 468 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 468 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 468 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 468 resolved as shift
WARNING: shift/reduce conflict for MOD in state 468 resolved as shift
WARNING: shift/reduce conflict for POW in state 468 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 468 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 468 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 468 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 468 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 468 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 468 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 468 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 468 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 468 resolved as shift
WARNING: shift/reduce conflict for AND in state 468 resolved as shift
WARNING: shift/reduce conflict for OR in state 468 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 469 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 469 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 469 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 469 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 469 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 469 resolved as shift
WARNING: shift/reduce conflict for MOD in state 469 resolved as shift
WARNING: shift/reduce conflict for POW in state 469 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 469 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 469 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 469 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 469 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 469 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 469 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 469 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 469 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 469 resolved as shift
WARNING: shift/reduce conflict for AND in state 469 resolved as shift
WARNING: shift/reduce conflict for OR in state 469 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 472 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 508 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 508 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 508 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 508 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 508 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 508 resolved as shift
WARNING: shift/reduce conflict for MOD in state 508 resolved as shift
WARNING: shift/reduce conflict for POW in state 508 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 508 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 508 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 508 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 508 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 508 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 508 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 508 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 508 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 508 resolved as shift
WARNING: shift/reduce conflict for AND in state 508 resolved as shift
WARNING: shift/reduce conflict for OR in state 508 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 528 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 528 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 528 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 528 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 528 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 528 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 528 resolved as shift
WARNING: shift/reduce conflict for MOD in state 528 resolved as shift
WARNING: shift/reduce conflict for POW in state 528 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 528 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 528 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 528 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 528 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 528 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 528 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 528 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 528 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 528 resolved as shift
WARNING: shift/reduce conflict for AND in state 528 resolved as shift
WARNING: shift/reduce conflict for OR in state 528 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 529 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 529 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 529 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 529 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 529 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 529 resolved as shift
WARNING: shift/reduce conflict for MOD in state 529 resolved as shift
WARNING: shift/reduce conflict for POW in state 529 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 529 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 529 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 529 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 529 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 529 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 529 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 529 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 529 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 529 resolved as shift
WARNING: shift/reduce conflict for AND in state 529 resolved as shift
WARNING: shift/reduce conflict for OR in state 529 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 543 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 543 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 543 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 543 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 543 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 543 resolved as shift
WARNING: shift/reduce conflict for MOD in state 543 resolved as shift
WARNING: shift/reduce conflict for POW in state 543 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 543 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 543 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 543 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 543 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 543 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 543 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 543 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 543 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 543 resolved as shift
WARNING: shift/reduce conflict for AND in state 543 resolved as shift
WARNING: shift/reduce conflict for OR in state 543 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 544 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 544 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 544 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 544 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 544 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 544 resolved as shift
WARNING: shift/reduce conflict for MOD in state 544 resolved as shift
WARNING: shift/reduce conflict for POW in state 544 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 544 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 544 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 544 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 544 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 544 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 544 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 544 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 544 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 544 resolved as shift
WARNING: shift/reduce conflict for AND in state 544 resolved as shift
WARNING: shift/reduce conflict for OR in state 544 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 550 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 550 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 550 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 550 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 550 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 550 resolved as shift
WARNING: shift/reduce conflict for MOD in state 550 resolved as shift
WARNING: shift/reduce conflict for POW in state 550 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 550 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 550 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 550 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 550 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 550 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 550 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 550 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 550 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 550 resolved as shift
WARNING: shift/reduce conflict for AND in state 550 resolved as shift
WARNING: shift/reduce conflict for OR in state 550 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (expr -> command)
WARNING: rejected rule (call -> command) in state 17
WARNING: reduce/reduce conflict in state 18 resolved using rule (call -> function)
WARNING: rejected rule (primary -> function) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (primary -> variable)
WARNING: rejected rule (lhs -> variable) in state 19
WARNING: reduce/reduce conflict in state 21 resolved using rule (literal -> IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 21
WARNING: reduce/reduce conflict in state 75 resolved using rule (literal -> IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 75
WARNING: reduce/reduce conflict in state 119 resolved using rule (primary -> variable)
WARNING: rejected rule (lhs -> variable) in state 119
WARNING: reduce/reduce conflict in state 260 resolved using rule (expr -> arg)
WARNING: rejected rule (args -> arg) in state 260
WARNING: reduce/reduce conflict in state 276 resolved using rule (primary -> primary LBRACKET RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET RBRACKET) in state 276
WARNING: reduce/reduce conflict in state 278 resolved using rule (lhs -> primary DOT IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 278
WARNING: reduce/reduce conflict in state 281 resolved using rule (primary -> primary UNARY_OP IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 281
WARNING: reduce/reduce conflict in state 289 resolved using rule (expr -> command)
WARNING: rejected rule (call -> command) in state 289
WARNING: reduce/reduce conflict in state 289 resolved using rule (expr -> command)
WARNING: rejected rule (call_args -> command) in state 289
WARNING: reduce/reduce conflict in state 291 resolved using rule (call -> function)
WARNING: rejected rule (primary -> function) in state 291
WARNING: reduce/reduce conflict in state 351 resolved using rule (literal -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 351
WARNING: reduce/reduce conflict in state 370 resolved using rule (primary -> primary LBRACKET RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET RBRACKET) in state 370
WARNING: reduce/reduce conflict in state 394 resolved using rule (primary -> primary LBRACKET args RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET args RBRACKET) in state 394
WARNING: reduce/reduce conflict in state 449 resolved using rule (primary -> primary LBRACKET args RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET args RBRACKET) in state 449
