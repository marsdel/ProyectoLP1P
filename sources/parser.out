Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    DEFINED
    EXPONENT_AND
    FALSE
    NEXT
    NIL
    PUTS
    REDO
    RETRY
    SELF
    TRUE
    VAR_SYSTEM
    _FILE_
    _LINE_

Grammar

Rule 0     S' -> program
Rule 1     program -> compstmt
Rule 2     compstmt -> stmt
Rule 3     compstmt -> stmt term
Rule 4     compstmt -> stmt term expr term
Rule 5     stmt -> call do LBRACKET RBRACKET
Rule 6     stmt -> LBRACKET block_var RBRACKET
Rule 7     stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
Rule 8     stmt -> UNDEF fname
Rule 9     stmt -> ALIAS fname fname
Rule 10    stmt -> stmt IF expr
Rule 11    stmt -> stmt WHILE expr
Rule 12    stmt -> stmt UNLESS expr
Rule 13    stmt -> stmt UNTIL expr
Rule 14    stmt -> BEGIN LKEY compstmt RKEY
Rule 15    stmt -> END LKEY compstmt RKEY
Rule 16    stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
Rule 17    stmt -> expr
Rule 18    expr -> mlhs = mrhs
Rule 19    expr -> RETURN call_args
Rule 20    expr -> YIELD call_args
Rule 21    expr -> expr AND expr
Rule 22    expr -> expr OR expr
Rule 23    expr -> NOT expr
Rule 24    expr -> command
Rule 25    expr -> NOT_SYMBOL command
Rule 26    expr -> arg
Rule 27    call -> function
Rule 28    call -> command
Rule 29    command -> operation call_args
Rule 30    command -> primary DOT operation call_args
Rule 31    command -> primary UNARY_OP operation call_args
Rule 32    command -> SUPER call_args
Rule 33    function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
Rule 34    function -> primary DOT operation LPAREN call_args RPAREN
Rule 35    function -> primary UNARY_OP operation LPAREN call_args RPAREN
Rule 36    function -> primary DOT operation
Rule 37    function -> primary UNARY_OP operation
Rule 38    function -> SUPER LPAREN call_args RPAREN
Rule 39    function -> SUPER
Rule 40    arg -> lhs = arg
Rule 41    arg -> lhs op_asgn arg
Rule 42    arg -> arg RANGE_INCLUSIVE arg
Rule 43    arg -> arg RANGE_EXCLUSIVE arg
Rule 44    arg -> arg PLUS arg
Rule 45    arg -> arg MINUS arg
Rule 46    arg -> arg TIMES arg
Rule 47    arg -> arg DIVIDE arg
Rule 48    arg -> arg MOD arg
Rule 49    arg -> arg POW arg
Rule 50    arg -> PLUS arg
Rule 51    arg -> MINUS arg
Rule 52    arg -> arg OR_SYMBOL arg
Rule 53    arg -> arg BINARY_XOR_OP arg
Rule 54    arg -> arg BINARY_AND_OP arg
Rule 55    arg -> arg COMBINED_COMPARISON_OP arg
Rule 56    arg -> arg GREATERTHAN arg
Rule 57    arg -> arg GREATERTHANEQUAL arg
Rule 58    arg -> arg LESSERTHAN arg
Rule 59    arg -> arg LESSERTHANEQUAL arg
Rule 60    arg -> arg EQUAL arg
Rule 61    arg -> arg CASE_EQUALITY arg
Rule 62    arg -> arg NOTEQUAL arg
Rule 63    arg -> arg MATCHED_STRINGS_OP arg
Rule 64    arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg
Rule 65    arg -> NOT_SYMBOL arg
Rule 66    arg -> COMPLEMENT_OP arg
Rule 67    arg -> arg BINARY_LEFT_SHIFT_OP arg
Rule 68    arg -> arg BINARY_RIGHT_SHIFT_OP arg
Rule 69    arg -> arg AND arg
Rule 70    arg -> arg OR arg
Rule 71    arg -> DEFINED_OP arg
Rule 72    arg -> primary
Rule 73    variable -> VAR_GLOBAL
Rule 74    variable -> VAR_LOCAL
Rule 75    variable -> VAR_INSTANCE
Rule 76    variable -> VAR_CLASS
Rule 77    primary -> LPAREN compstmt RPAREN
Rule 78    primary -> literal
Rule 79    primary -> variable
Rule 80    primary -> primary UNARY_OP IDENTIFIER
Rule 81    primary -> UNARY_OP IDENTIFIER
Rule 82    primary -> primary LBRACKET RBRACKET
Rule 83    primary -> primary LBRACKET args RBRACKET
Rule 84    primary -> LBRACKET RBRACKET
Rule 85    primary -> LBRACKET args RBRACKET
Rule 86    primary -> LBRACKET args COMMA RBRACKET
Rule 87    primary -> LKEY RKEY
Rule 88    primary -> LKEY args RKEY
Rule 89    primary -> LKEY assocs RKEY
Rule 90    primary -> LKEY args COMMA RKEY
Rule 91    primary -> LKEY assocs COMMA RKEY
Rule 92    primary -> RETURN
Rule 93    primary -> RETURN LPAREN RPAREN
Rule 94    primary -> RETURN LPAREN call_args RPAREN
Rule 95    primary -> YIELD
Rule 96    primary -> YIELD LPAREN RPAREN
Rule 97    primary -> YIELD LPAREN call_args RPAREN
Rule 98    primary -> DEFINED_OP LPAREN arg LPAREN
Rule 99    primary -> function
Rule 100   primary -> function LKEY compstmt LKEY
Rule 101   primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
Rule 102   primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
Rule 103   primary -> IF expr then compstmt END
Rule 104   primary -> IF expr then compstmt elsif END
Rule 105   primary -> IF expr then compstmt elsif ELSE compstmt END
Rule 106   primary -> UNLESS expr then compstmt END
Rule 107   primary -> UNLESS expr then compstmt ELSE compstmt END
Rule 108   primary -> WHILE expr do compstmt END
Rule 109   primary -> UNTIL expr do compstmt END
Rule 110   primary -> CASE compstmt when END
Rule 111   primary -> CASE compstmt when ELSE compstmt END
Rule 112   primary -> FOR block_var IN expr do compstmt END
Rule 113   primary -> BEGIN compstmt rescue END
Rule 114   primary -> BEGIN compstmt rescue ELSE compstmt END
Rule 115   primary -> BEGIN compstmt rescue ENSURE compstmt END
Rule 116   primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
Rule 117   primary -> CLASS IDENTIFIER compstmt END
Rule 118   primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
Rule 119   primary -> MODULE IDENTIFIER compstmt END
Rule 120   primary -> DEF fname argdecl compstmt END
Rule 121   primary -> DEF singleton DOT fname argdecl compstmt END
Rule 122   primary -> DEF singleton UNARY_OP fname argdecl compstmt END
Rule 123   elsif -> ELSIF expr then compstmt
Rule 124   elsif -> ELSIF expr then compstmt elsif
Rule 125   when -> WHEN when_args then compstmt
Rule 126   when -> when WHEN when_args then compstmt
Rule 127   rescue -> RESCUE args do compstmt
Rule 128   rescue -> RESCUE do compstmt
Rule 129   rescue -> rescue RESCUE args do compstmt
Rule 130   rescue -> rescue RESCUE do compstmt
Rule 131   when_args -> args
Rule 132   when_args -> args COMMA TIMES arg
Rule 133   when_args -> TIMES arg
Rule 134   then -> TERM
Rule 135   then -> THEN
Rule 136   then -> TERM THEN
Rule 137   do -> term
Rule 138   do -> DO
Rule 139   do -> term DO
Rule 140   term -> TERM
Rule 141   mrhs -> args
Rule 142   mrhs -> args COMMA
Rule 143   mrhs -> args TIMES
Rule 144   mrhs -> args arg
Rule 145   mrhs -> TIMES arg
Rule 146   lhs -> variable
Rule 147   lhs -> primary LBRACKET RBRACKET
Rule 148   lhs -> primary LBRACKET args RBRACKET
Rule 149   lhs -> primary DOT IDENTIFIER
Rule 150   block_var -> lhs
Rule 151   block_var -> mlhs
Rule 152   mlhs -> mlhs_item COMMA mlhs_item TIMES
Rule 153   mlhs -> mlhs_item COMMA mlhs_item lhs
Rule 154   mlhs -> mlhs_item COMMA mult_mlhs_item TIMES
Rule 155   mlhs -> mlhs_item COMMA mult_mlhs_item lhs
Rule 156   mlhs -> TIMES lhs
Rule 157   mult_mlhs_item -> COMMA mlhs_item
Rule 158   mlhs_item -> lhs
Rule 159   mlhs_item -> LPAREN mlhs RPAREN
Rule 160   args -> arg
Rule 161   args -> arg COMMA arg
Rule 162   argdecl -> LPAREN arglist RPAREN
Rule 163   argdecl -> arglist term
Rule 164   arglist -> IDENTIFIER
Rule 165   arglist -> IDENTIFIER COMMA IDENTIFIER
Rule 166   arglist -> IDENTIFIER COMMA & IDENTIFIER
Rule 167   singleton -> variable
Rule 168   singleton -> LPAREN expr RPAREN
Rule 169   assocs -> assoc
Rule 170   assocs -> assoc COMMA assoc
Rule 171   assoc -> arg HASH_ROCKET arg
Rule 172   call_args -> args
Rule 173   call_args -> args COMMA assocs
Rule 174   call_args -> args COMMA TIMES arg
Rule 175   call_args -> args COMMA BINARY_AND_OP arg
Rule 176   call_args -> args COMMA assocs COMMA TIMES arg
Rule 177   call_args -> args COMMA assocs COMMA BINARY_AND_OP arg
Rule 178   call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 179   call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 180   call_args -> assocs
Rule 181   call_args -> assocs COMMA TIMES arg
Rule 182   call_args -> assocs COMMA BINARY_AND_OP arg
Rule 183   call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
Rule 184   call_args -> TIMES arg
Rule 185   call_args -> TIMES arg COMMA BINARY_AND_OP arg
Rule 186   call_args -> BINARY_AND_OP arg
Rule 187   call_args -> command
Rule 188   literal -> NUMBER
Rule 189   literal -> SYMBOL
Rule 190   literal -> STRING
Rule 191   literal -> IDENTIFIER
Rule 192   fname -> IDENTIFIER
Rule 193   fname -> RANGE_INCLUSIVE
Rule 194   fname -> OR_SYMBOL
Rule 195   fname -> BINARY_XOR_OP
Rule 196   fname -> BINARY_AND_OP
Rule 197   fname -> COMBINED_COMPARISON_OP
Rule 198   fname -> EQUAL
Rule 199   fname -> CASE_EQUALITY
Rule 200   fname -> MATCHED_STRINGS_OP
Rule 201   fname -> GREATERTHAN
Rule 202   fname -> GREATERTHANEQUAL
Rule 203   fname -> LESSERTHAN
Rule 204   fname -> LESSERTHANEQUAL
Rule 205   fname -> PLUS
Rule 206   fname -> MINUS
Rule 207   fname -> TIMES
Rule 208   fname -> DIVIDE
Rule 209   fname -> MOD
Rule 210   fname -> POW
Rule 211   fname -> BINARY_LEFT_SHIFT_OP
Rule 212   fname -> BINARY_RIGHT_SHIFT_OP
Rule 213   fname -> COMPLEMENT_OP
Rule 214   fname -> OVERLOAD_PLUS
Rule 215   fname -> OVERLOAD_MINUS
Rule 216   fname -> LBRACKET RBRACKET
Rule 217   fname -> LBRACKET RBRACKET EQUAL_SYMBOL
Rule 218   operation -> IDENTIFIER
Rule 219   operation -> IDENTIFIER NOT_SYMBOL
Rule 220   operation -> IDENTIFIER OPTIONAL_SYMBOL
Rule 221   op_asgn -> PLUS_EQUAL
Rule 222   op_asgn -> MINUS_EQUAL
Rule 223   op_asgn -> TIMES_EQUAL
Rule 224   op_asgn -> DIVIDE_EQUAL
Rule 225   op_asgn -> MOD_EQUAL
Rule 226   op_asgn -> POW_EQUAL
Rule 227   op_asgn -> SINGLE_AND_EQUAL
Rule 228   op_asgn -> SINGLE_OR_EQUAL
Rule 229   op_asgn -> XOR_EQUAL
Rule 230   op_asgn -> BINARY_LEFT_EQUAL
Rule 231   op_asgn -> BINARY_RIGHT_EQUAL
Rule 232   op_asgn -> AND_EQUAL
Rule 233   op_asgn -> OR_EQUAL
Rule 234   expression -> expression PLUS term
Rule 235   expression -> expression MINUS term
Rule 236   expression -> term
Rule 237   term -> term TIMES factor
Rule 238   term -> term DIVIDE factor
Rule 239   term -> factor
Rule 240   factor -> NUMBER
Rule 241   factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

&                    : 166
=                    : 16 18 40
ALIAS                : 9
AND                  : 21 69
AND_EQUAL            : 232
BEGIN                : 14 113 114 115 116
BINARY_AND_OP        : 54 175 177 178 179 182 183 185 186 196
BINARY_LEFT_EQUAL    : 230
BINARY_LEFT_SHIFT_OP : 67 211
BINARY_RIGHT_EQUAL   : 231
BINARY_RIGHT_SHIFT_OP : 68 212
BINARY_XOR_OP        : 53 195
BREAK                : 
CASE                 : 110 111
CASE_EQUALITY        : 61 199
CLASS                : 117 118
COMBINED_COMPARISON_OP : 55 197
COMMA                : 86 90 91 132 142 152 153 154 155 157 161 165 166 170 173 174 175 176 176 177 177 178 178 179 179 179 181 182 183 183 185
COMPLEMENT_OP        : 66 213
DEF                  : 120 121 122
DEFINED              : 
DEFINED_OP           : 71 98
DIVIDE               : 47 208 238
DIVIDE_EQUAL         : 224
DO                   : 138 139
DOT                  : 30 34 36 121 149
ELSE                 : 105 107 111 114 116
ELSIF                : 123 124
END                  : 7 15 16 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122
ENSURE               : 115 116
EQUAL                : 60 198
EQUAL_SYMBOL         : 217
EXPONENT_AND         : 
FALSE                : 
FOR                  : 112
GREATERTHAN          : 56 201
GREATERTHANEQUAL     : 57 202
HASH_ROCKET          : 171
IDENTIFIER           : 80 81 117 118 118 119 149 164 165 165 166 166 191 192 218 219 220
IF                   : 10 103 104 105
IN                   : 112
LBRACKET             : 5 6 7 16 16 33 33 82 83 84 85 86 147 148 216 217
LESSERTHAN           : 58 118 203
LESSERTHANEQUAL      : 59 204
LKEY                 : 14 15 87 88 89 90 91 100 100 101 101 102 102
LPAREN               : 33 34 35 38 77 93 94 96 97 98 98 159 162 168 241
MATCHED_STRINGS_OP   : 63 200
MINUS                : 45 51 206 235
MINUS_EQUAL          : 222
MOD                  : 48 209
MODULE               : 119
MOD_EQUAL            : 225
NEXT                 : 
NIL                  : 
NOT                  : 23
NOTEQUAL             : 62
NOT_SYMBOL           : 25 65 219
NUMBER               : 188 240
OPPOSITE_MATCHED_STRINGS_OP : 64
OPTIONAL_SYMBOL      : 220
OR                   : 22 70
OR_EQUAL             : 233
OR_SYMBOL            : 7 7 16 16 52 101 101 102 102 194
OVERLOAD_MINUS       : 215
OVERLOAD_PLUS        : 214
PLUS                 : 44 50 205 234
PLUS_EQUAL           : 221
POW                  : 49 210
POW_EQUAL            : 226
PUTS                 : 
RANGE_EXCLUSIVE      : 43
RANGE_INCLUSIVE      : 42 193
RBRACKET             : 5 6 7 16 16 33 33 82 83 84 85 86 147 148 216 217
REDO                 : 
RESCUE               : 127 128 129 130
RETRY                : 
RETURN               : 19 92 93 94
RKEY                 : 14 15 87 88 89 90 91
RPAREN               : 33 34 35 38 77 93 94 96 97 159 162 168 241
SELF                 : 
SINGLE_AND_EQUAL     : 227
SINGLE_OR_EQUAL      : 228
STRING               : 190
SUPER                : 32 38 39
SYMBOL               : 189
TERM                 : 134 136 140
THEN                 : 135 136
TIMES                : 46 132 133 143 145 152 154 156 174 176 178 179 181 183 184 185 207 237
TIMES_EQUAL          : 223
TRUE                 : 
UNARY_OP             : 31 35 37 80 81 122
UNDEF                : 8
UNLESS               : 12 106 107
UNTIL                : 13 109
VAR_CLASS            : 76
VAR_GLOBAL           : 73
VAR_INSTANCE         : 75
VAR_LOCAL            : 74
VAR_SYSTEM           : 
WHEN                 : 125 126
WHILE                : 11 108
XOR_EQUAL            : 229
YIELD                : 20 95 96 97
_FILE_               : 
_LINE_               : 
error                : 

Nonterminals, with rules where they appear

arg                  : 26 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 66 67 67 68 68 69 69 70 70 71 98 132 133 144 145 160 161 161 171 171 174 175 176 177 178 178 179 179 181 182 183 183 184 185 185 186
argdecl              : 120 121 122
arglist              : 162 163
args                 : 83 85 86 88 90 127 129 131 132 141 142 143 144 148 172 173 174 175 176 177 178 179
assoc                : 169 170 170
assocs               : 89 91 173 176 177 179 180 181 182 183
block_var            : 6 7 16 102 112
call                 : 5
call_args            : 19 20 29 30 31 32 33 34 35 38 94 97
command              : 16 24 25 28 187
compstmt             : 1 7 14 15 16 77 100 101 102 103 104 105 105 106 107 107 108 109 110 111 111 112 113 114 114 115 115 116 116 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130
do                   : 5 16 108 109 112 127 128 129 130
elsif                : 104 105 124
expr                 : 4 10 11 12 13 17 21 21 22 22 23 103 104 105 106 107 108 109 112 123 124 168
expression           : 234 235 241
factor               : 237 238 239
fname                : 8 9 9 120 121 122
function             : 27 99 100 101 102
lhs                  : 16 40 41 150 153 155 156 158
literal              : 78
mlhs                 : 18 151 159
mlhs_item            : 152 152 153 153 154 155 157
mrhs                 : 18
mult_mlhs_item       : 154 155
op_asgn              : 41
operation            : 29 30 31 33 34 35 36 37
primary              : 30 31 34 35 36 37 72 80 82 83 147 148 149
program              : 0
rescue               : 113 114 115 116 129 130
singleton            : 121 122
stmt                 : 2 3 4 10 11 12 13
term                 : 3 4 4 137 139 163 234 235 236 237 238
then                 : 103 104 105 106 107 123 124 125 126
variable             : 79 146 167
when                 : 110 111 126
when_args            : 125 126

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    program                        shift and go to state 1
    compstmt                       shift and go to state 2
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 1

    (0) S' -> program .



state 2

    (1) program -> compstmt .

    $end            reduce using rule 1 (program -> compstmt .)


state 3

    (2) compstmt -> stmt .
    (3) compstmt -> stmt . term
    (4) compstmt -> stmt . term expr term
    (10) stmt -> stmt . IF expr
    (11) stmt -> stmt . WHILE expr
    (12) stmt -> stmt . UNLESS expr
    (13) stmt -> stmt . UNTIL expr
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    $end            reduce using rule 2 (compstmt -> stmt .)
    RESCUE          reduce using rule 2 (compstmt -> stmt .)
    RPAREN          reduce using rule 2 (compstmt -> stmt .)
    WHEN            reduce using rule 2 (compstmt -> stmt .)
    RKEY            reduce using rule 2 (compstmt -> stmt .)
    LKEY            reduce using rule 2 (compstmt -> stmt .)
    END             reduce using rule 2 (compstmt -> stmt .)
    ELSIF           reduce using rule 2 (compstmt -> stmt .)
    ELSE            reduce using rule 2 (compstmt -> stmt .)
    ENSURE          reduce using rule 2 (compstmt -> stmt .)
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    UNLESS          shift and go to state 54
    UNTIL           shift and go to state 55
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    term                           shift and go to state 51
    factor                         shift and go to state 57

state 4

    (17) stmt -> expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    IF              reduce using rule 17 (stmt -> expr .)
    WHILE           reduce using rule 17 (stmt -> expr .)
    UNLESS          reduce using rule 17 (stmt -> expr .)
    UNTIL           reduce using rule 17 (stmt -> expr .)
    TERM            reduce using rule 17 (stmt -> expr .)
    NUMBER          reduce using rule 17 (stmt -> expr .)
    LPAREN          reduce using rule 17 (stmt -> expr .)
    $end            reduce using rule 17 (stmt -> expr .)
    RESCUE          reduce using rule 17 (stmt -> expr .)
    RPAREN          reduce using rule 17 (stmt -> expr .)
    WHEN            reduce using rule 17 (stmt -> expr .)
    RKEY            reduce using rule 17 (stmt -> expr .)
    LKEY            reduce using rule 17 (stmt -> expr .)
    END             reduce using rule 17 (stmt -> expr .)
    ELSIF           reduce using rule 17 (stmt -> expr .)
    ELSE            reduce using rule 17 (stmt -> expr .)
    ENSURE          reduce using rule 17 (stmt -> expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 5

    (5) stmt -> call . do LBRACKET RBRACKET
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 62
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 6

    (6) stmt -> LBRACKET . block_var RBRACKET
    (7) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (84) primary -> LBRACKET . RBRACKET
    (85) primary -> LBRACKET . args RBRACKET
    (86) primary -> LBRACKET . args COMMA RBRACKET
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    OR_SYMBOL       shift and go to state 68
    RBRACKET        shift and go to state 67
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    block_var                      shift and go to state 66
    args                           shift and go to state 69
    lhs                            shift and go to state 70
    mlhs                           shift and go to state 71
    arg                            shift and go to state 72
    variable                       shift and go to state 19
    primary                        shift and go to state 73
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 7

    (15) stmt -> END . LKEY compstmt RKEY

    LKEY            shift and go to state 83


state 8

    (8) stmt -> UNDEF . fname
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109

    fname                          shift and go to state 84

state 9

    (9) stmt -> ALIAS . fname fname
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109

    fname                          shift and go to state 110

state 10

    (103) primary -> IF . expr then compstmt END
    (104) primary -> IF . expr then compstmt elsif END
    (105) primary -> IF . expr then compstmt elsif ELSE compstmt END
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 111
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 11

    (108) primary -> WHILE . expr do compstmt END
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 119
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 12

    (106) primary -> UNLESS . expr then compstmt END
    (107) primary -> UNLESS . expr then compstmt ELSE compstmt END
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 120
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 13

    (109) primary -> UNTIL . expr do compstmt END
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 121
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 14

    (14) stmt -> BEGIN . LKEY compstmt RKEY
    (113) primary -> BEGIN . compstmt rescue END
    (114) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (115) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (116) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LKEY            shift and go to state 122
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 123
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 15

    (87) primary -> LKEY . RKEY
    (88) primary -> LKEY . args RKEY
    (89) primary -> LKEY . assocs RKEY
    (90) primary -> LKEY . args COMMA RKEY
    (91) primary -> LKEY . assocs COMMA RKEY
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RKEY            shift and go to state 124
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    args                           shift and go to state 125
    assocs                         shift and go to state 126
    arg                            shift and go to state 127
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 16

    (16) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (158) mlhs_item -> lhs .
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    =               shift and go to state 132
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 17

    (28) call -> command .
    (24) expr -> command .

  ! reduce/reduce conflict for TERM resolved using rule 24 (expr -> command .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (expr -> command .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (expr -> command .)
    DO              reduce using rule 28 (call -> command .)
    AND             reduce using rule 24 (expr -> command .)
    OR              reduce using rule 24 (expr -> command .)
    IF              reduce using rule 24 (expr -> command .)
    WHILE           reduce using rule 24 (expr -> command .)
    UNLESS          reduce using rule 24 (expr -> command .)
    UNTIL           reduce using rule 24 (expr -> command .)
    TERM            reduce using rule 24 (expr -> command .)
    NUMBER          reduce using rule 24 (expr -> command .)
    LPAREN          reduce using rule 24 (expr -> command .)
    $end            reduce using rule 24 (expr -> command .)
    RESCUE          reduce using rule 24 (expr -> command .)
    RPAREN          reduce using rule 24 (expr -> command .)
    WHEN            reduce using rule 24 (expr -> command .)
    RKEY            reduce using rule 24 (expr -> command .)
    LKEY            reduce using rule 24 (expr -> command .)
    END             reduce using rule 24 (expr -> command .)
    ELSIF           reduce using rule 24 (expr -> command .)
    ELSE            reduce using rule 24 (expr -> command .)
    ENSURE          reduce using rule 24 (expr -> command .)

  ! TERM            [ reduce using rule 28 (call -> command .) ]
  ! NUMBER          [ reduce using rule 28 (call -> command .) ]
  ! LPAREN          [ reduce using rule 28 (call -> command .) ]


state 18

    (27) call -> function .
    (99) primary -> function .
    (100) primary -> function . LKEY compstmt LKEY
    (101) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY

  ! reduce/reduce conflict for TERM resolved using rule 27 (call -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 27 (call -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 27 (call -> function .)
  ! shift/reduce conflict for LKEY resolved as shift
    DO              reduce using rule 27 (call -> function .)
    TERM            reduce using rule 27 (call -> function .)
    NUMBER          reduce using rule 27 (call -> function .)
    LPAREN          reduce using rule 27 (call -> function .)
    LBRACKET        reduce using rule 99 (primary -> function .)
    DOT             reduce using rule 99 (primary -> function .)
    UNARY_OP        reduce using rule 99 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 99 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 99 (primary -> function .)
    PLUS            reduce using rule 99 (primary -> function .)
    MINUS           reduce using rule 99 (primary -> function .)
    TIMES           reduce using rule 99 (primary -> function .)
    DIVIDE          reduce using rule 99 (primary -> function .)
    MOD             reduce using rule 99 (primary -> function .)
    POW             reduce using rule 99 (primary -> function .)
    OR_SYMBOL       reduce using rule 99 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 99 (primary -> function .)
    BINARY_AND_OP   reduce using rule 99 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 99 (primary -> function .)
    GREATERTHAN     reduce using rule 99 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 99 (primary -> function .)
    LESSERTHAN      reduce using rule 99 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 99 (primary -> function .)
    EQUAL           reduce using rule 99 (primary -> function .)
    CASE_EQUALITY   reduce using rule 99 (primary -> function .)
    NOTEQUAL        reduce using rule 99 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 99 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 99 (primary -> function .)
    AND             reduce using rule 99 (primary -> function .)
    OR              reduce using rule 99 (primary -> function .)
    IF              reduce using rule 99 (primary -> function .)
    WHILE           reduce using rule 99 (primary -> function .)
    UNLESS          reduce using rule 99 (primary -> function .)
    UNTIL           reduce using rule 99 (primary -> function .)
    $end            reduce using rule 99 (primary -> function .)
    RESCUE          reduce using rule 99 (primary -> function .)
    RPAREN          reduce using rule 99 (primary -> function .)
    WHEN            reduce using rule 99 (primary -> function .)
    RKEY            reduce using rule 99 (primary -> function .)
    COMMA           reduce using rule 99 (primary -> function .)
    HASH_ROCKET     reduce using rule 99 (primary -> function .)
    END             reduce using rule 99 (primary -> function .)
    ELSIF           reduce using rule 99 (primary -> function .)
    ELSE            reduce using rule 99 (primary -> function .)
    ENSURE          reduce using rule 99 (primary -> function .)
    LKEY            shift and go to state 147

  ! TERM            [ reduce using rule 99 (primary -> function .) ]
  ! NUMBER          [ reduce using rule 99 (primary -> function .) ]
  ! LPAREN          [ reduce using rule 99 (primary -> function .) ]
  ! LKEY            [ reduce using rule 99 (primary -> function .) ]


state 19

    (146) lhs -> variable .
    (79) primary -> variable .

  ! reduce/reduce conflict for LBRACKET resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for IF resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for WHILE resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for UNLESS resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for UNTIL resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for NUMBER resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for LPAREN resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for LKEY resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for RETURN resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for YIELD resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for CASE resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for FOR resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for BEGIN resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for CLASS resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for MODULE resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for DEF resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for STRING resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 79 (primary -> variable .)
  ! reduce/reduce conflict for SUPER resolved using rule 79 (primary -> variable .)
    =               reduce using rule 146 (lhs -> variable .)
    PLUS_EQUAL      reduce using rule 146 (lhs -> variable .)
    MINUS_EQUAL     reduce using rule 146 (lhs -> variable .)
    TIMES_EQUAL     reduce using rule 146 (lhs -> variable .)
    DIVIDE_EQUAL    reduce using rule 146 (lhs -> variable .)
    MOD_EQUAL       reduce using rule 146 (lhs -> variable .)
    POW_EQUAL       reduce using rule 146 (lhs -> variable .)
    SINGLE_AND_EQUAL reduce using rule 146 (lhs -> variable .)
    SINGLE_OR_EQUAL reduce using rule 146 (lhs -> variable .)
    XOR_EQUAL       reduce using rule 146 (lhs -> variable .)
    BINARY_LEFT_EQUAL reduce using rule 146 (lhs -> variable .)
    BINARY_RIGHT_EQUAL reduce using rule 146 (lhs -> variable .)
    AND_EQUAL       reduce using rule 146 (lhs -> variable .)
    OR_EQUAL        reduce using rule 146 (lhs -> variable .)
    IN              reduce using rule 146 (lhs -> variable .)
    LBRACKET        reduce using rule 79 (primary -> variable .)
    DOT             reduce using rule 79 (primary -> variable .)
    UNARY_OP        reduce using rule 79 (primary -> variable .)
    RANGE_INCLUSIVE reduce using rule 79 (primary -> variable .)
    RANGE_EXCLUSIVE reduce using rule 79 (primary -> variable .)
    PLUS            reduce using rule 79 (primary -> variable .)
    MINUS           reduce using rule 79 (primary -> variable .)
    TIMES           reduce using rule 79 (primary -> variable .)
    DIVIDE          reduce using rule 79 (primary -> variable .)
    MOD             reduce using rule 79 (primary -> variable .)
    POW             reduce using rule 79 (primary -> variable .)
    OR_SYMBOL       reduce using rule 79 (primary -> variable .)
    BINARY_XOR_OP   reduce using rule 79 (primary -> variable .)
    BINARY_AND_OP   reduce using rule 79 (primary -> variable .)
    COMBINED_COMPARISON_OP reduce using rule 79 (primary -> variable .)
    GREATERTHAN     reduce using rule 79 (primary -> variable .)
    GREATERTHANEQUAL reduce using rule 79 (primary -> variable .)
    LESSERTHAN      reduce using rule 79 (primary -> variable .)
    LESSERTHANEQUAL reduce using rule 79 (primary -> variable .)
    EQUAL           reduce using rule 79 (primary -> variable .)
    CASE_EQUALITY   reduce using rule 79 (primary -> variable .)
    NOTEQUAL        reduce using rule 79 (primary -> variable .)
    MATCHED_STRINGS_OP reduce using rule 79 (primary -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 79 (primary -> variable .)
    BINARY_LEFT_SHIFT_OP reduce using rule 79 (primary -> variable .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 79 (primary -> variable .)
    AND             reduce using rule 79 (primary -> variable .)
    OR              reduce using rule 79 (primary -> variable .)
    IF              reduce using rule 79 (primary -> variable .)
    WHILE           reduce using rule 79 (primary -> variable .)
    UNLESS          reduce using rule 79 (primary -> variable .)
    UNTIL           reduce using rule 79 (primary -> variable .)
    TERM            reduce using rule 79 (primary -> variable .)
    NUMBER          reduce using rule 79 (primary -> variable .)
    LPAREN          reduce using rule 79 (primary -> variable .)
    $end            reduce using rule 79 (primary -> variable .)
    COMMA           reduce using rule 79 (primary -> variable .)
    RBRACKET        reduce using rule 79 (primary -> variable .)
    RESCUE          reduce using rule 79 (primary -> variable .)
    HASH_ROCKET     reduce using rule 79 (primary -> variable .)
    RKEY            reduce using rule 79 (primary -> variable .)
    RPAREN          reduce using rule 79 (primary -> variable .)
    WHEN            reduce using rule 79 (primary -> variable .)
    LKEY            reduce using rule 79 (primary -> variable .)
    END             reduce using rule 79 (primary -> variable .)
    ELSIF           reduce using rule 79 (primary -> variable .)
    ELSE            reduce using rule 79 (primary -> variable .)
    ENSURE          reduce using rule 79 (primary -> variable .)
    THEN            reduce using rule 79 (primary -> variable .)
    DO              reduce using rule 79 (primary -> variable .)
    NOT_SYMBOL      reduce using rule 79 (primary -> variable .)
    COMPLEMENT_OP   reduce using rule 79 (primary -> variable .)
    DEFINED_OP      reduce using rule 79 (primary -> variable .)
    RETURN          reduce using rule 79 (primary -> variable .)
    YIELD           reduce using rule 79 (primary -> variable .)
    CASE            reduce using rule 79 (primary -> variable .)
    FOR             reduce using rule 79 (primary -> variable .)
    BEGIN           reduce using rule 79 (primary -> variable .)
    CLASS           reduce using rule 79 (primary -> variable .)
    MODULE          reduce using rule 79 (primary -> variable .)
    DEF             reduce using rule 79 (primary -> variable .)
    VAR_GLOBAL      reduce using rule 79 (primary -> variable .)
    VAR_LOCAL       reduce using rule 79 (primary -> variable .)
    VAR_INSTANCE    reduce using rule 79 (primary -> variable .)
    VAR_CLASS       reduce using rule 79 (primary -> variable .)
    SYMBOL          reduce using rule 79 (primary -> variable .)
    STRING          reduce using rule 79 (primary -> variable .)
    IDENTIFIER      reduce using rule 79 (primary -> variable .)
    SUPER           reduce using rule 79 (primary -> variable .)

  ! COMMA           [ reduce using rule 146 (lhs -> variable .) ]
  ! RBRACKET        [ reduce using rule 146 (lhs -> variable .) ]
  ! RPAREN          [ reduce using rule 146 (lhs -> variable .) ]
  ! OR_SYMBOL       [ reduce using rule 146 (lhs -> variable .) ]
  ! TIMES           [ reduce using rule 146 (lhs -> variable .) ]
  ! VAR_GLOBAL      [ reduce using rule 146 (lhs -> variable .) ]
  ! VAR_LOCAL       [ reduce using rule 146 (lhs -> variable .) ]
  ! VAR_INSTANCE    [ reduce using rule 146 (lhs -> variable .) ]
  ! VAR_CLASS       [ reduce using rule 146 (lhs -> variable .) ]
  ! LPAREN          [ reduce using rule 146 (lhs -> variable .) ]
  ! UNARY_OP        [ reduce using rule 146 (lhs -> variable .) ]
  ! LBRACKET        [ reduce using rule 146 (lhs -> variable .) ]
  ! LKEY            [ reduce using rule 146 (lhs -> variable .) ]
  ! RETURN          [ reduce using rule 146 (lhs -> variable .) ]
  ! YIELD           [ reduce using rule 146 (lhs -> variable .) ]
  ! DEFINED_OP      [ reduce using rule 146 (lhs -> variable .) ]
  ! IF              [ reduce using rule 146 (lhs -> variable .) ]
  ! UNLESS          [ reduce using rule 146 (lhs -> variable .) ]
  ! WHILE           [ reduce using rule 146 (lhs -> variable .) ]
  ! UNTIL           [ reduce using rule 146 (lhs -> variable .) ]
  ! CASE            [ reduce using rule 146 (lhs -> variable .) ]
  ! FOR             [ reduce using rule 146 (lhs -> variable .) ]
  ! BEGIN           [ reduce using rule 146 (lhs -> variable .) ]
  ! CLASS           [ reduce using rule 146 (lhs -> variable .) ]
  ! MODULE          [ reduce using rule 146 (lhs -> variable .) ]
  ! DEF             [ reduce using rule 146 (lhs -> variable .) ]
  ! NUMBER          [ reduce using rule 146 (lhs -> variable .) ]
  ! SYMBOL          [ reduce using rule 146 (lhs -> variable .) ]
  ! STRING          [ reduce using rule 146 (lhs -> variable .) ]
  ! IDENTIFIER      [ reduce using rule 146 (lhs -> variable .) ]
  ! SUPER           [ reduce using rule 146 (lhs -> variable .) ]


state 20

    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation
    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (72) arg -> primary .

    LBRACKET        shift and go to state 148
    DOT             shift and go to state 149
    UNARY_OP        shift and go to state 150
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    $end            reduce using rule 72 (arg -> primary .)
    RESCUE          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)
    WHEN            reduce using rule 72 (arg -> primary .)
    RKEY            reduce using rule 72 (arg -> primary .)
    LKEY            reduce using rule 72 (arg -> primary .)
    END             reduce using rule 72 (arg -> primary .)
    ELSIF           reduce using rule 72 (arg -> primary .)
    ELSE            reduce using rule 72 (arg -> primary .)
    ENSURE          reduce using rule 72 (arg -> primary .)


state 21

    (218) operation -> IDENTIFIER .
    (219) operation -> IDENTIFIER . NOT_SYMBOL
    (220) operation -> IDENTIFIER . OPTIONAL_SYMBOL
    (191) literal -> IDENTIFIER .

  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
  ! reduce/reduce conflict for LBRACKET resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 191 (literal -> IDENTIFIER .)
    SUPER           reduce using rule 218 (operation -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 218 (operation -> IDENTIFIER .)
    DEFINED_OP      reduce using rule 218 (operation -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 218 (operation -> IDENTIFIER .)
    RETURN          reduce using rule 218 (operation -> IDENTIFIER .)
    YIELD           reduce using rule 218 (operation -> IDENTIFIER .)
    CASE            reduce using rule 218 (operation -> IDENTIFIER .)
    FOR             reduce using rule 218 (operation -> IDENTIFIER .)
    BEGIN           reduce using rule 218 (operation -> IDENTIFIER .)
    CLASS           reduce using rule 218 (operation -> IDENTIFIER .)
    MODULE          reduce using rule 218 (operation -> IDENTIFIER .)
    DEF             reduce using rule 218 (operation -> IDENTIFIER .)
    SYMBOL          reduce using rule 218 (operation -> IDENTIFIER .)
    STRING          reduce using rule 218 (operation -> IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 218 (operation -> IDENTIFIER .)
    VAR_LOCAL       reduce using rule 218 (operation -> IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 218 (operation -> IDENTIFIER .)
    VAR_CLASS       reduce using rule 218 (operation -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 151
    OPTIONAL_SYMBOL shift and go to state 152
    LBRACKET        reduce using rule 191 (literal -> IDENTIFIER .)
    DOT             reduce using rule 191 (literal -> IDENTIFIER .)
    UNARY_OP        reduce using rule 191 (literal -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 191 (literal -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 191 (literal -> IDENTIFIER .)
    PLUS            reduce using rule 191 (literal -> IDENTIFIER .)
    MINUS           reduce using rule 191 (literal -> IDENTIFIER .)
    TIMES           reduce using rule 191 (literal -> IDENTIFIER .)
    DIVIDE          reduce using rule 191 (literal -> IDENTIFIER .)
    MOD             reduce using rule 191 (literal -> IDENTIFIER .)
    POW             reduce using rule 191 (literal -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 191 (literal -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 191 (literal -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 191 (literal -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 191 (literal -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 191 (literal -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 191 (literal -> IDENTIFIER .)
    EQUAL           reduce using rule 191 (literal -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 191 (literal -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 191 (literal -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 191 (literal -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 191 (literal -> IDENTIFIER .)
    AND             reduce using rule 191 (literal -> IDENTIFIER .)
    OR              reduce using rule 191 (literal -> IDENTIFIER .)
    IF              reduce using rule 191 (literal -> IDENTIFIER .)
    WHILE           reduce using rule 191 (literal -> IDENTIFIER .)
    UNLESS          reduce using rule 191 (literal -> IDENTIFIER .)
    UNTIL           reduce using rule 191 (literal -> IDENTIFIER .)
    TERM            reduce using rule 191 (literal -> IDENTIFIER .)
    NUMBER          reduce using rule 191 (literal -> IDENTIFIER .)
    LPAREN          reduce using rule 191 (literal -> IDENTIFIER .)
    $end            reduce using rule 191 (literal -> IDENTIFIER .)
    THEN            reduce using rule 191 (literal -> IDENTIFIER .)
    DO              reduce using rule 191 (literal -> IDENTIFIER .)
    RESCUE          reduce using rule 191 (literal -> IDENTIFIER .)
    COMMA           reduce using rule 191 (literal -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 191 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 191 (literal -> IDENTIFIER .)
    WHEN            reduce using rule 191 (literal -> IDENTIFIER .)
    RKEY            reduce using rule 191 (literal -> IDENTIFIER .)
    LKEY            reduce using rule 191 (literal -> IDENTIFIER .)
    END             reduce using rule 191 (literal -> IDENTIFIER .)
    ELSIF           reduce using rule 191 (literal -> IDENTIFIER .)
    ELSE            reduce using rule 191 (literal -> IDENTIFIER .)
    ENSURE          reduce using rule 191 (literal -> IDENTIFIER .)
    RBRACKET        reduce using rule 191 (literal -> IDENTIFIER .)

  ! LBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 218 (operation -> IDENTIFIER .) ]


state 22

    (18) expr -> mlhs . = mrhs

    =               shift and go to state 153


state 23

    (19) expr -> RETURN . call_args
    (92) primary -> RETURN .
    (93) primary -> RETURN . LPAREN RPAREN
    (94) primary -> RETURN . LPAREN call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 92 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 92 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 92 (primary -> RETURN .)
    DIVIDE          reduce using rule 92 (primary -> RETURN .)
    MOD             reduce using rule 92 (primary -> RETURN .)
    POW             reduce using rule 92 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 92 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 92 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 92 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 92 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 92 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    EQUAL           reduce using rule 92 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 92 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 92 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    AND             reduce using rule 92 (primary -> RETURN .)
    OR              reduce using rule 92 (primary -> RETURN .)
    TERM            reduce using rule 92 (primary -> RETURN .)
    $end            reduce using rule 92 (primary -> RETURN .)
    THEN            reduce using rule 92 (primary -> RETURN .)
    DO              reduce using rule 92 (primary -> RETURN .)
    RESCUE          reduce using rule 92 (primary -> RETURN .)
    RPAREN          reduce using rule 92 (primary -> RETURN .)
    WHEN            reduce using rule 92 (primary -> RETURN .)
    RKEY            reduce using rule 92 (primary -> RETURN .)
    END             reduce using rule 92 (primary -> RETURN .)
    ELSIF           reduce using rule 92 (primary -> RETURN .)
    ELSE            reduce using rule 92 (primary -> RETURN .)
    ENSURE          reduce using rule 92 (primary -> RETURN .)
    COMMA           reduce using rule 92 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 92 (primary -> RETURN .)
    LPAREN          shift and go to state 155
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LBRACKET        [ reduce using rule 92 (primary -> RETURN .) ]
  ! UNARY_OP        [ reduce using rule 92 (primary -> RETURN .) ]
  ! PLUS            [ reduce using rule 92 (primary -> RETURN .) ]
  ! MINUS           [ reduce using rule 92 (primary -> RETURN .) ]
  ! TIMES           [ reduce using rule 92 (primary -> RETURN .) ]
  ! BINARY_AND_OP   [ reduce using rule 92 (primary -> RETURN .) ]
  ! IF              [ reduce using rule 92 (primary -> RETURN .) ]
  ! WHILE           [ reduce using rule 92 (primary -> RETURN .) ]
  ! UNLESS          [ reduce using rule 92 (primary -> RETURN .) ]
  ! UNTIL           [ reduce using rule 92 (primary -> RETURN .) ]
  ! NUMBER          [ reduce using rule 92 (primary -> RETURN .) ]
  ! LPAREN          [ reduce using rule 92 (primary -> RETURN .) ]
  ! LKEY            [ reduce using rule 92 (primary -> RETURN .) ]

    call_args                      shift and go to state 154
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 24

    (20) expr -> YIELD . call_args
    (95) primary -> YIELD .
    (96) primary -> YIELD . LPAREN RPAREN
    (97) primary -> YIELD . LPAREN call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 95 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 95 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 95 (primary -> YIELD .)
    DIVIDE          reduce using rule 95 (primary -> YIELD .)
    MOD             reduce using rule 95 (primary -> YIELD .)
    POW             reduce using rule 95 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 95 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 95 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 95 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 95 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 95 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    EQUAL           reduce using rule 95 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 95 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 95 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    AND             reduce using rule 95 (primary -> YIELD .)
    OR              reduce using rule 95 (primary -> YIELD .)
    TERM            reduce using rule 95 (primary -> YIELD .)
    $end            reduce using rule 95 (primary -> YIELD .)
    THEN            reduce using rule 95 (primary -> YIELD .)
    DO              reduce using rule 95 (primary -> YIELD .)
    RESCUE          reduce using rule 95 (primary -> YIELD .)
    RPAREN          reduce using rule 95 (primary -> YIELD .)
    WHEN            reduce using rule 95 (primary -> YIELD .)
    RKEY            reduce using rule 95 (primary -> YIELD .)
    END             reduce using rule 95 (primary -> YIELD .)
    ELSIF           reduce using rule 95 (primary -> YIELD .)
    ELSE            reduce using rule 95 (primary -> YIELD .)
    ENSURE          reduce using rule 95 (primary -> YIELD .)
    COMMA           reduce using rule 95 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 95 (primary -> YIELD .)
    LPAREN          shift and go to state 162
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LBRACKET        [ reduce using rule 95 (primary -> YIELD .) ]
  ! UNARY_OP        [ reduce using rule 95 (primary -> YIELD .) ]
  ! PLUS            [ reduce using rule 95 (primary -> YIELD .) ]
  ! MINUS           [ reduce using rule 95 (primary -> YIELD .) ]
  ! TIMES           [ reduce using rule 95 (primary -> YIELD .) ]
  ! BINARY_AND_OP   [ reduce using rule 95 (primary -> YIELD .) ]
  ! IF              [ reduce using rule 95 (primary -> YIELD .) ]
  ! WHILE           [ reduce using rule 95 (primary -> YIELD .) ]
  ! UNLESS          [ reduce using rule 95 (primary -> YIELD .) ]
  ! UNTIL           [ reduce using rule 95 (primary -> YIELD .) ]
  ! NUMBER          [ reduce using rule 95 (primary -> YIELD .) ]
  ! LPAREN          [ reduce using rule 95 (primary -> YIELD .) ]
  ! LKEY            [ reduce using rule 95 (primary -> YIELD .) ]

    call_args                      shift and go to state 161
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 25

    (23) expr -> NOT . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 163
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 26

    (25) expr -> NOT_SYMBOL . command
    (65) arg -> NOT_SYMBOL . arg
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    command                        shift and go to state 164
    arg                            shift and go to state 165
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 27

    (26) expr -> arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 26 (expr -> arg .)
    WHILE           reduce using rule 26 (expr -> arg .)
    UNLESS          reduce using rule 26 (expr -> arg .)
    UNTIL           reduce using rule 26 (expr -> arg .)
    TERM            reduce using rule 26 (expr -> arg .)
    NUMBER          reduce using rule 26 (expr -> arg .)
    LPAREN          reduce using rule 26 (expr -> arg .)
    $end            reduce using rule 26 (expr -> arg .)
    THEN            reduce using rule 26 (expr -> arg .)
    DO              reduce using rule 26 (expr -> arg .)
    RESCUE          reduce using rule 26 (expr -> arg .)
    RPAREN          reduce using rule 26 (expr -> arg .)
    WHEN            reduce using rule 26 (expr -> arg .)
    RKEY            reduce using rule 26 (expr -> arg .)
    LKEY            reduce using rule 26 (expr -> arg .)
    END             reduce using rule 26 (expr -> arg .)
    ELSIF           reduce using rule 26 (expr -> arg .)
    ELSE            reduce using rule 26 (expr -> arg .)
    ENSURE          reduce using rule 26 (expr -> arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 26 (expr -> arg .) ]
  ! OR              [ reduce using rule 26 (expr -> arg .) ]


state 28

    (33) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (29) command -> operation . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    LBRACKET        shift and go to state 191
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 114
    call_args                      shift and go to state 192
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 29

    (77) primary -> LPAREN . compstmt RPAREN
    (159) mlhs_item -> LPAREN . mlhs RPAREN
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER

    TIMES           shift and go to state 44
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    LPAREN          shift and go to state 117
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 193
    mlhs                           shift and go to state 194
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 195
    call                           shift and go to state 5
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36

state 30

    (81) primary -> UNARY_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 196


state 31

    (38) function -> SUPER . LPAREN call_args RPAREN
    (39) function -> SUPER .
    (32) command -> SUPER . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 197
    DO              reduce using rule 39 (function -> SUPER .)
    TERM            reduce using rule 39 (function -> SUPER .)
    DOT             reduce using rule 39 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 39 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 39 (function -> SUPER .)
    DIVIDE          reduce using rule 39 (function -> SUPER .)
    MOD             reduce using rule 39 (function -> SUPER .)
    POW             reduce using rule 39 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 39 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 39 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 39 (function -> SUPER .)
    GREATERTHAN     reduce using rule 39 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    LESSERTHAN      reduce using rule 39 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    EQUAL           reduce using rule 39 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 39 (function -> SUPER .)
    NOTEQUAL        reduce using rule 39 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    AND             reduce using rule 39 (function -> SUPER .)
    OR              reduce using rule 39 (function -> SUPER .)
    $end            reduce using rule 39 (function -> SUPER .)
    RESCUE          reduce using rule 39 (function -> SUPER .)
    RPAREN          reduce using rule 39 (function -> SUPER .)
    WHEN            reduce using rule 39 (function -> SUPER .)
    RKEY            reduce using rule 39 (function -> SUPER .)
    COMMA           reduce using rule 39 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 39 (function -> SUPER .)
    END             reduce using rule 39 (function -> SUPER .)
    ELSIF           reduce using rule 39 (function -> SUPER .)
    ELSE            reduce using rule 39 (function -> SUPER .)
    ENSURE          reduce using rule 39 (function -> SUPER .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 39 (function -> SUPER .) ]
  ! NUMBER          [ reduce using rule 39 (function -> SUPER .) ]
  ! LPAREN          [ reduce using rule 39 (function -> SUPER .) ]
  ! LBRACKET        [ reduce using rule 39 (function -> SUPER .) ]
  ! UNARY_OP        [ reduce using rule 39 (function -> SUPER .) ]
  ! PLUS            [ reduce using rule 39 (function -> SUPER .) ]
  ! MINUS           [ reduce using rule 39 (function -> SUPER .) ]
  ! TIMES           [ reduce using rule 39 (function -> SUPER .) ]
  ! BINARY_AND_OP   [ reduce using rule 39 (function -> SUPER .) ]
  ! IF              [ reduce using rule 39 (function -> SUPER .) ]
  ! WHILE           [ reduce using rule 39 (function -> SUPER .) ]
  ! UNLESS          [ reduce using rule 39 (function -> SUPER .) ]
  ! UNTIL           [ reduce using rule 39 (function -> SUPER .) ]

    call_args                      shift and go to state 198
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 32

    (73) variable -> VAR_GLOBAL .

    =               reduce using rule 73 (variable -> VAR_GLOBAL .)
    PLUS_EQUAL      reduce using rule 73 (variable -> VAR_GLOBAL .)
    MINUS_EQUAL     reduce using rule 73 (variable -> VAR_GLOBAL .)
    TIMES_EQUAL     reduce using rule 73 (variable -> VAR_GLOBAL .)
    DIVIDE_EQUAL    reduce using rule 73 (variable -> VAR_GLOBAL .)
    MOD_EQUAL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    POW_EQUAL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    SINGLE_AND_EQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    SINGLE_OR_EQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    XOR_EQUAL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_LEFT_EQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_RIGHT_EQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    AND_EQUAL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    OR_EQUAL        reduce using rule 73 (variable -> VAR_GLOBAL .)
    COMMA           reduce using rule 73 (variable -> VAR_GLOBAL .)
    LBRACKET        reduce using rule 73 (variable -> VAR_GLOBAL .)
    DOT             reduce using rule 73 (variable -> VAR_GLOBAL .)
    UNARY_OP        reduce using rule 73 (variable -> VAR_GLOBAL .)
    RANGE_INCLUSIVE reduce using rule 73 (variable -> VAR_GLOBAL .)
    RANGE_EXCLUSIVE reduce using rule 73 (variable -> VAR_GLOBAL .)
    PLUS            reduce using rule 73 (variable -> VAR_GLOBAL .)
    MINUS           reduce using rule 73 (variable -> VAR_GLOBAL .)
    TIMES           reduce using rule 73 (variable -> VAR_GLOBAL .)
    DIVIDE          reduce using rule 73 (variable -> VAR_GLOBAL .)
    MOD             reduce using rule 73 (variable -> VAR_GLOBAL .)
    POW             reduce using rule 73 (variable -> VAR_GLOBAL .)
    OR_SYMBOL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_XOR_OP   reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_AND_OP   reduce using rule 73 (variable -> VAR_GLOBAL .)
    COMBINED_COMPARISON_OP reduce using rule 73 (variable -> VAR_GLOBAL .)
    GREATERTHAN     reduce using rule 73 (variable -> VAR_GLOBAL .)
    GREATERTHANEQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    LESSERTHAN      reduce using rule 73 (variable -> VAR_GLOBAL .)
    LESSERTHANEQUAL reduce using rule 73 (variable -> VAR_GLOBAL .)
    EQUAL           reduce using rule 73 (variable -> VAR_GLOBAL .)
    CASE_EQUALITY   reduce using rule 73 (variable -> VAR_GLOBAL .)
    NOTEQUAL        reduce using rule 73 (variable -> VAR_GLOBAL .)
    MATCHED_STRINGS_OP reduce using rule 73 (variable -> VAR_GLOBAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 73 (variable -> VAR_GLOBAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 73 (variable -> VAR_GLOBAL .)
    AND             reduce using rule 73 (variable -> VAR_GLOBAL .)
    OR              reduce using rule 73 (variable -> VAR_GLOBAL .)
    IF              reduce using rule 73 (variable -> VAR_GLOBAL .)
    WHILE           reduce using rule 73 (variable -> VAR_GLOBAL .)
    UNLESS          reduce using rule 73 (variable -> VAR_GLOBAL .)
    UNTIL           reduce using rule 73 (variable -> VAR_GLOBAL .)
    TERM            reduce using rule 73 (variable -> VAR_GLOBAL .)
    NUMBER          reduce using rule 73 (variable -> VAR_GLOBAL .)
    LPAREN          reduce using rule 73 (variable -> VAR_GLOBAL .)
    $end            reduce using rule 73 (variable -> VAR_GLOBAL .)
    RBRACKET        reduce using rule 73 (variable -> VAR_GLOBAL .)
    THEN            reduce using rule 73 (variable -> VAR_GLOBAL .)
    DO              reduce using rule 73 (variable -> VAR_GLOBAL .)
    RESCUE          reduce using rule 73 (variable -> VAR_GLOBAL .)
    HASH_ROCKET     reduce using rule 73 (variable -> VAR_GLOBAL .)
    RKEY            reduce using rule 73 (variable -> VAR_GLOBAL .)
    RPAREN          reduce using rule 73 (variable -> VAR_GLOBAL .)
    WHEN            reduce using rule 73 (variable -> VAR_GLOBAL .)
    LKEY            reduce using rule 73 (variable -> VAR_GLOBAL .)
    END             reduce using rule 73 (variable -> VAR_GLOBAL .)
    ELSIF           reduce using rule 73 (variable -> VAR_GLOBAL .)
    ELSE            reduce using rule 73 (variable -> VAR_GLOBAL .)
    ENSURE          reduce using rule 73 (variable -> VAR_GLOBAL .)
    IN              reduce using rule 73 (variable -> VAR_GLOBAL .)
    NOT_SYMBOL      reduce using rule 73 (variable -> VAR_GLOBAL .)
    COMPLEMENT_OP   reduce using rule 73 (variable -> VAR_GLOBAL .)
    DEFINED_OP      reduce using rule 73 (variable -> VAR_GLOBAL .)
    RETURN          reduce using rule 73 (variable -> VAR_GLOBAL .)
    YIELD           reduce using rule 73 (variable -> VAR_GLOBAL .)
    CASE            reduce using rule 73 (variable -> VAR_GLOBAL .)
    FOR             reduce using rule 73 (variable -> VAR_GLOBAL .)
    BEGIN           reduce using rule 73 (variable -> VAR_GLOBAL .)
    CLASS           reduce using rule 73 (variable -> VAR_GLOBAL .)
    MODULE          reduce using rule 73 (variable -> VAR_GLOBAL .)
    DEF             reduce using rule 73 (variable -> VAR_GLOBAL .)
    VAR_GLOBAL      reduce using rule 73 (variable -> VAR_GLOBAL .)
    VAR_LOCAL       reduce using rule 73 (variable -> VAR_GLOBAL .)
    VAR_INSTANCE    reduce using rule 73 (variable -> VAR_GLOBAL .)
    VAR_CLASS       reduce using rule 73 (variable -> VAR_GLOBAL .)
    SYMBOL          reduce using rule 73 (variable -> VAR_GLOBAL .)
    STRING          reduce using rule 73 (variable -> VAR_GLOBAL .)
    IDENTIFIER      reduce using rule 73 (variable -> VAR_GLOBAL .)
    SUPER           reduce using rule 73 (variable -> VAR_GLOBAL .)


state 33

    (74) variable -> VAR_LOCAL .

    =               reduce using rule 74 (variable -> VAR_LOCAL .)
    PLUS_EQUAL      reduce using rule 74 (variable -> VAR_LOCAL .)
    MINUS_EQUAL     reduce using rule 74 (variable -> VAR_LOCAL .)
    TIMES_EQUAL     reduce using rule 74 (variable -> VAR_LOCAL .)
    DIVIDE_EQUAL    reduce using rule 74 (variable -> VAR_LOCAL .)
    MOD_EQUAL       reduce using rule 74 (variable -> VAR_LOCAL .)
    POW_EQUAL       reduce using rule 74 (variable -> VAR_LOCAL .)
    SINGLE_AND_EQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    SINGLE_OR_EQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    XOR_EQUAL       reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_LEFT_EQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_RIGHT_EQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    AND_EQUAL       reduce using rule 74 (variable -> VAR_LOCAL .)
    OR_EQUAL        reduce using rule 74 (variable -> VAR_LOCAL .)
    COMMA           reduce using rule 74 (variable -> VAR_LOCAL .)
    LBRACKET        reduce using rule 74 (variable -> VAR_LOCAL .)
    DOT             reduce using rule 74 (variable -> VAR_LOCAL .)
    UNARY_OP        reduce using rule 74 (variable -> VAR_LOCAL .)
    RANGE_INCLUSIVE reduce using rule 74 (variable -> VAR_LOCAL .)
    RANGE_EXCLUSIVE reduce using rule 74 (variable -> VAR_LOCAL .)
    PLUS            reduce using rule 74 (variable -> VAR_LOCAL .)
    MINUS           reduce using rule 74 (variable -> VAR_LOCAL .)
    TIMES           reduce using rule 74 (variable -> VAR_LOCAL .)
    DIVIDE          reduce using rule 74 (variable -> VAR_LOCAL .)
    MOD             reduce using rule 74 (variable -> VAR_LOCAL .)
    POW             reduce using rule 74 (variable -> VAR_LOCAL .)
    OR_SYMBOL       reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_XOR_OP   reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_AND_OP   reduce using rule 74 (variable -> VAR_LOCAL .)
    COMBINED_COMPARISON_OP reduce using rule 74 (variable -> VAR_LOCAL .)
    GREATERTHAN     reduce using rule 74 (variable -> VAR_LOCAL .)
    GREATERTHANEQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    LESSERTHAN      reduce using rule 74 (variable -> VAR_LOCAL .)
    LESSERTHANEQUAL reduce using rule 74 (variable -> VAR_LOCAL .)
    EQUAL           reduce using rule 74 (variable -> VAR_LOCAL .)
    CASE_EQUALITY   reduce using rule 74 (variable -> VAR_LOCAL .)
    NOTEQUAL        reduce using rule 74 (variable -> VAR_LOCAL .)
    MATCHED_STRINGS_OP reduce using rule 74 (variable -> VAR_LOCAL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 74 (variable -> VAR_LOCAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 74 (variable -> VAR_LOCAL .)
    AND             reduce using rule 74 (variable -> VAR_LOCAL .)
    OR              reduce using rule 74 (variable -> VAR_LOCAL .)
    IF              reduce using rule 74 (variable -> VAR_LOCAL .)
    WHILE           reduce using rule 74 (variable -> VAR_LOCAL .)
    UNLESS          reduce using rule 74 (variable -> VAR_LOCAL .)
    UNTIL           reduce using rule 74 (variable -> VAR_LOCAL .)
    TERM            reduce using rule 74 (variable -> VAR_LOCAL .)
    NUMBER          reduce using rule 74 (variable -> VAR_LOCAL .)
    LPAREN          reduce using rule 74 (variable -> VAR_LOCAL .)
    $end            reduce using rule 74 (variable -> VAR_LOCAL .)
    RBRACKET        reduce using rule 74 (variable -> VAR_LOCAL .)
    THEN            reduce using rule 74 (variable -> VAR_LOCAL .)
    DO              reduce using rule 74 (variable -> VAR_LOCAL .)
    RESCUE          reduce using rule 74 (variable -> VAR_LOCAL .)
    HASH_ROCKET     reduce using rule 74 (variable -> VAR_LOCAL .)
    RKEY            reduce using rule 74 (variable -> VAR_LOCAL .)
    RPAREN          reduce using rule 74 (variable -> VAR_LOCAL .)
    WHEN            reduce using rule 74 (variable -> VAR_LOCAL .)
    LKEY            reduce using rule 74 (variable -> VAR_LOCAL .)
    END             reduce using rule 74 (variable -> VAR_LOCAL .)
    ELSIF           reduce using rule 74 (variable -> VAR_LOCAL .)
    ELSE            reduce using rule 74 (variable -> VAR_LOCAL .)
    ENSURE          reduce using rule 74 (variable -> VAR_LOCAL .)
    IN              reduce using rule 74 (variable -> VAR_LOCAL .)
    NOT_SYMBOL      reduce using rule 74 (variable -> VAR_LOCAL .)
    COMPLEMENT_OP   reduce using rule 74 (variable -> VAR_LOCAL .)
    DEFINED_OP      reduce using rule 74 (variable -> VAR_LOCAL .)
    RETURN          reduce using rule 74 (variable -> VAR_LOCAL .)
    YIELD           reduce using rule 74 (variable -> VAR_LOCAL .)
    CASE            reduce using rule 74 (variable -> VAR_LOCAL .)
    FOR             reduce using rule 74 (variable -> VAR_LOCAL .)
    BEGIN           reduce using rule 74 (variable -> VAR_LOCAL .)
    CLASS           reduce using rule 74 (variable -> VAR_LOCAL .)
    MODULE          reduce using rule 74 (variable -> VAR_LOCAL .)
    DEF             reduce using rule 74 (variable -> VAR_LOCAL .)
    VAR_GLOBAL      reduce using rule 74 (variable -> VAR_LOCAL .)
    VAR_LOCAL       reduce using rule 74 (variable -> VAR_LOCAL .)
    VAR_INSTANCE    reduce using rule 74 (variable -> VAR_LOCAL .)
    VAR_CLASS       reduce using rule 74 (variable -> VAR_LOCAL .)
    SYMBOL          reduce using rule 74 (variable -> VAR_LOCAL .)
    STRING          reduce using rule 74 (variable -> VAR_LOCAL .)
    IDENTIFIER      reduce using rule 74 (variable -> VAR_LOCAL .)
    SUPER           reduce using rule 74 (variable -> VAR_LOCAL .)


state 34

    (75) variable -> VAR_INSTANCE .

    =               reduce using rule 75 (variable -> VAR_INSTANCE .)
    PLUS_EQUAL      reduce using rule 75 (variable -> VAR_INSTANCE .)
    MINUS_EQUAL     reduce using rule 75 (variable -> VAR_INSTANCE .)
    TIMES_EQUAL     reduce using rule 75 (variable -> VAR_INSTANCE .)
    DIVIDE_EQUAL    reduce using rule 75 (variable -> VAR_INSTANCE .)
    MOD_EQUAL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    POW_EQUAL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    SINGLE_AND_EQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    SINGLE_OR_EQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    XOR_EQUAL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_LEFT_EQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_RIGHT_EQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    AND_EQUAL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    OR_EQUAL        reduce using rule 75 (variable -> VAR_INSTANCE .)
    COMMA           reduce using rule 75 (variable -> VAR_INSTANCE .)
    LBRACKET        reduce using rule 75 (variable -> VAR_INSTANCE .)
    DOT             reduce using rule 75 (variable -> VAR_INSTANCE .)
    UNARY_OP        reduce using rule 75 (variable -> VAR_INSTANCE .)
    RANGE_INCLUSIVE reduce using rule 75 (variable -> VAR_INSTANCE .)
    RANGE_EXCLUSIVE reduce using rule 75 (variable -> VAR_INSTANCE .)
    PLUS            reduce using rule 75 (variable -> VAR_INSTANCE .)
    MINUS           reduce using rule 75 (variable -> VAR_INSTANCE .)
    TIMES           reduce using rule 75 (variable -> VAR_INSTANCE .)
    DIVIDE          reduce using rule 75 (variable -> VAR_INSTANCE .)
    MOD             reduce using rule 75 (variable -> VAR_INSTANCE .)
    POW             reduce using rule 75 (variable -> VAR_INSTANCE .)
    OR_SYMBOL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_XOR_OP   reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_AND_OP   reduce using rule 75 (variable -> VAR_INSTANCE .)
    COMBINED_COMPARISON_OP reduce using rule 75 (variable -> VAR_INSTANCE .)
    GREATERTHAN     reduce using rule 75 (variable -> VAR_INSTANCE .)
    GREATERTHANEQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    LESSERTHAN      reduce using rule 75 (variable -> VAR_INSTANCE .)
    LESSERTHANEQUAL reduce using rule 75 (variable -> VAR_INSTANCE .)
    EQUAL           reduce using rule 75 (variable -> VAR_INSTANCE .)
    CASE_EQUALITY   reduce using rule 75 (variable -> VAR_INSTANCE .)
    NOTEQUAL        reduce using rule 75 (variable -> VAR_INSTANCE .)
    MATCHED_STRINGS_OP reduce using rule 75 (variable -> VAR_INSTANCE .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 75 (variable -> VAR_INSTANCE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 75 (variable -> VAR_INSTANCE .)
    AND             reduce using rule 75 (variable -> VAR_INSTANCE .)
    OR              reduce using rule 75 (variable -> VAR_INSTANCE .)
    IF              reduce using rule 75 (variable -> VAR_INSTANCE .)
    WHILE           reduce using rule 75 (variable -> VAR_INSTANCE .)
    UNLESS          reduce using rule 75 (variable -> VAR_INSTANCE .)
    UNTIL           reduce using rule 75 (variable -> VAR_INSTANCE .)
    TERM            reduce using rule 75 (variable -> VAR_INSTANCE .)
    NUMBER          reduce using rule 75 (variable -> VAR_INSTANCE .)
    LPAREN          reduce using rule 75 (variable -> VAR_INSTANCE .)
    $end            reduce using rule 75 (variable -> VAR_INSTANCE .)
    RBRACKET        reduce using rule 75 (variable -> VAR_INSTANCE .)
    THEN            reduce using rule 75 (variable -> VAR_INSTANCE .)
    DO              reduce using rule 75 (variable -> VAR_INSTANCE .)
    RESCUE          reduce using rule 75 (variable -> VAR_INSTANCE .)
    HASH_ROCKET     reduce using rule 75 (variable -> VAR_INSTANCE .)
    RKEY            reduce using rule 75 (variable -> VAR_INSTANCE .)
    RPAREN          reduce using rule 75 (variable -> VAR_INSTANCE .)
    WHEN            reduce using rule 75 (variable -> VAR_INSTANCE .)
    LKEY            reduce using rule 75 (variable -> VAR_INSTANCE .)
    END             reduce using rule 75 (variable -> VAR_INSTANCE .)
    ELSIF           reduce using rule 75 (variable -> VAR_INSTANCE .)
    ELSE            reduce using rule 75 (variable -> VAR_INSTANCE .)
    ENSURE          reduce using rule 75 (variable -> VAR_INSTANCE .)
    IN              reduce using rule 75 (variable -> VAR_INSTANCE .)
    NOT_SYMBOL      reduce using rule 75 (variable -> VAR_INSTANCE .)
    COMPLEMENT_OP   reduce using rule 75 (variable -> VAR_INSTANCE .)
    DEFINED_OP      reduce using rule 75 (variable -> VAR_INSTANCE .)
    RETURN          reduce using rule 75 (variable -> VAR_INSTANCE .)
    YIELD           reduce using rule 75 (variable -> VAR_INSTANCE .)
    CASE            reduce using rule 75 (variable -> VAR_INSTANCE .)
    FOR             reduce using rule 75 (variable -> VAR_INSTANCE .)
    BEGIN           reduce using rule 75 (variable -> VAR_INSTANCE .)
    CLASS           reduce using rule 75 (variable -> VAR_INSTANCE .)
    MODULE          reduce using rule 75 (variable -> VAR_INSTANCE .)
    DEF             reduce using rule 75 (variable -> VAR_INSTANCE .)
    VAR_GLOBAL      reduce using rule 75 (variable -> VAR_INSTANCE .)
    VAR_LOCAL       reduce using rule 75 (variable -> VAR_INSTANCE .)
    VAR_INSTANCE    reduce using rule 75 (variable -> VAR_INSTANCE .)
    VAR_CLASS       reduce using rule 75 (variable -> VAR_INSTANCE .)
    SYMBOL          reduce using rule 75 (variable -> VAR_INSTANCE .)
    STRING          reduce using rule 75 (variable -> VAR_INSTANCE .)
    IDENTIFIER      reduce using rule 75 (variable -> VAR_INSTANCE .)
    SUPER           reduce using rule 75 (variable -> VAR_INSTANCE .)


state 35

    (76) variable -> VAR_CLASS .

    =               reduce using rule 76 (variable -> VAR_CLASS .)
    PLUS_EQUAL      reduce using rule 76 (variable -> VAR_CLASS .)
    MINUS_EQUAL     reduce using rule 76 (variable -> VAR_CLASS .)
    TIMES_EQUAL     reduce using rule 76 (variable -> VAR_CLASS .)
    DIVIDE_EQUAL    reduce using rule 76 (variable -> VAR_CLASS .)
    MOD_EQUAL       reduce using rule 76 (variable -> VAR_CLASS .)
    POW_EQUAL       reduce using rule 76 (variable -> VAR_CLASS .)
    SINGLE_AND_EQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    SINGLE_OR_EQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    XOR_EQUAL       reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_LEFT_EQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_RIGHT_EQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    AND_EQUAL       reduce using rule 76 (variable -> VAR_CLASS .)
    OR_EQUAL        reduce using rule 76 (variable -> VAR_CLASS .)
    COMMA           reduce using rule 76 (variable -> VAR_CLASS .)
    LBRACKET        reduce using rule 76 (variable -> VAR_CLASS .)
    DOT             reduce using rule 76 (variable -> VAR_CLASS .)
    UNARY_OP        reduce using rule 76 (variable -> VAR_CLASS .)
    RANGE_INCLUSIVE reduce using rule 76 (variable -> VAR_CLASS .)
    RANGE_EXCLUSIVE reduce using rule 76 (variable -> VAR_CLASS .)
    PLUS            reduce using rule 76 (variable -> VAR_CLASS .)
    MINUS           reduce using rule 76 (variable -> VAR_CLASS .)
    TIMES           reduce using rule 76 (variable -> VAR_CLASS .)
    DIVIDE          reduce using rule 76 (variable -> VAR_CLASS .)
    MOD             reduce using rule 76 (variable -> VAR_CLASS .)
    POW             reduce using rule 76 (variable -> VAR_CLASS .)
    OR_SYMBOL       reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_XOR_OP   reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_AND_OP   reduce using rule 76 (variable -> VAR_CLASS .)
    COMBINED_COMPARISON_OP reduce using rule 76 (variable -> VAR_CLASS .)
    GREATERTHAN     reduce using rule 76 (variable -> VAR_CLASS .)
    GREATERTHANEQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    LESSERTHAN      reduce using rule 76 (variable -> VAR_CLASS .)
    LESSERTHANEQUAL reduce using rule 76 (variable -> VAR_CLASS .)
    EQUAL           reduce using rule 76 (variable -> VAR_CLASS .)
    CASE_EQUALITY   reduce using rule 76 (variable -> VAR_CLASS .)
    NOTEQUAL        reduce using rule 76 (variable -> VAR_CLASS .)
    MATCHED_STRINGS_OP reduce using rule 76 (variable -> VAR_CLASS .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 76 (variable -> VAR_CLASS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 76 (variable -> VAR_CLASS .)
    AND             reduce using rule 76 (variable -> VAR_CLASS .)
    OR              reduce using rule 76 (variable -> VAR_CLASS .)
    IF              reduce using rule 76 (variable -> VAR_CLASS .)
    WHILE           reduce using rule 76 (variable -> VAR_CLASS .)
    UNLESS          reduce using rule 76 (variable -> VAR_CLASS .)
    UNTIL           reduce using rule 76 (variable -> VAR_CLASS .)
    TERM            reduce using rule 76 (variable -> VAR_CLASS .)
    NUMBER          reduce using rule 76 (variable -> VAR_CLASS .)
    LPAREN          reduce using rule 76 (variable -> VAR_CLASS .)
    $end            reduce using rule 76 (variable -> VAR_CLASS .)
    RBRACKET        reduce using rule 76 (variable -> VAR_CLASS .)
    THEN            reduce using rule 76 (variable -> VAR_CLASS .)
    DO              reduce using rule 76 (variable -> VAR_CLASS .)
    RESCUE          reduce using rule 76 (variable -> VAR_CLASS .)
    HASH_ROCKET     reduce using rule 76 (variable -> VAR_CLASS .)
    RKEY            reduce using rule 76 (variable -> VAR_CLASS .)
    RPAREN          reduce using rule 76 (variable -> VAR_CLASS .)
    WHEN            reduce using rule 76 (variable -> VAR_CLASS .)
    LKEY            reduce using rule 76 (variable -> VAR_CLASS .)
    END             reduce using rule 76 (variable -> VAR_CLASS .)
    ELSIF           reduce using rule 76 (variable -> VAR_CLASS .)
    ELSE            reduce using rule 76 (variable -> VAR_CLASS .)
    ENSURE          reduce using rule 76 (variable -> VAR_CLASS .)
    IN              reduce using rule 76 (variable -> VAR_CLASS .)
    NOT_SYMBOL      reduce using rule 76 (variable -> VAR_CLASS .)
    COMPLEMENT_OP   reduce using rule 76 (variable -> VAR_CLASS .)
    DEFINED_OP      reduce using rule 76 (variable -> VAR_CLASS .)
    RETURN          reduce using rule 76 (variable -> VAR_CLASS .)
    YIELD           reduce using rule 76 (variable -> VAR_CLASS .)
    CASE            reduce using rule 76 (variable -> VAR_CLASS .)
    FOR             reduce using rule 76 (variable -> VAR_CLASS .)
    BEGIN           reduce using rule 76 (variable -> VAR_CLASS .)
    CLASS           reduce using rule 76 (variable -> VAR_CLASS .)
    MODULE          reduce using rule 76 (variable -> VAR_CLASS .)
    DEF             reduce using rule 76 (variable -> VAR_CLASS .)
    VAR_GLOBAL      reduce using rule 76 (variable -> VAR_CLASS .)
    VAR_LOCAL       reduce using rule 76 (variable -> VAR_CLASS .)
    VAR_INSTANCE    reduce using rule 76 (variable -> VAR_CLASS .)
    VAR_CLASS       reduce using rule 76 (variable -> VAR_CLASS .)
    SYMBOL          reduce using rule 76 (variable -> VAR_CLASS .)
    STRING          reduce using rule 76 (variable -> VAR_CLASS .)
    IDENTIFIER      reduce using rule 76 (variable -> VAR_CLASS .)
    SUPER           reduce using rule 76 (variable -> VAR_CLASS .)


state 36

    (78) primary -> literal .

    LBRACKET        reduce using rule 78 (primary -> literal .)
    DOT             reduce using rule 78 (primary -> literal .)
    UNARY_OP        reduce using rule 78 (primary -> literal .)
    RANGE_INCLUSIVE reduce using rule 78 (primary -> literal .)
    RANGE_EXCLUSIVE reduce using rule 78 (primary -> literal .)
    PLUS            reduce using rule 78 (primary -> literal .)
    MINUS           reduce using rule 78 (primary -> literal .)
    TIMES           reduce using rule 78 (primary -> literal .)
    DIVIDE          reduce using rule 78 (primary -> literal .)
    MOD             reduce using rule 78 (primary -> literal .)
    POW             reduce using rule 78 (primary -> literal .)
    OR_SYMBOL       reduce using rule 78 (primary -> literal .)
    BINARY_XOR_OP   reduce using rule 78 (primary -> literal .)
    BINARY_AND_OP   reduce using rule 78 (primary -> literal .)
    COMBINED_COMPARISON_OP reduce using rule 78 (primary -> literal .)
    GREATERTHAN     reduce using rule 78 (primary -> literal .)
    GREATERTHANEQUAL reduce using rule 78 (primary -> literal .)
    LESSERTHAN      reduce using rule 78 (primary -> literal .)
    LESSERTHANEQUAL reduce using rule 78 (primary -> literal .)
    EQUAL           reduce using rule 78 (primary -> literal .)
    CASE_EQUALITY   reduce using rule 78 (primary -> literal .)
    NOTEQUAL        reduce using rule 78 (primary -> literal .)
    MATCHED_STRINGS_OP reduce using rule 78 (primary -> literal .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 78 (primary -> literal .)
    BINARY_LEFT_SHIFT_OP reduce using rule 78 (primary -> literal .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 78 (primary -> literal .)
    AND             reduce using rule 78 (primary -> literal .)
    OR              reduce using rule 78 (primary -> literal .)
    IF              reduce using rule 78 (primary -> literal .)
    WHILE           reduce using rule 78 (primary -> literal .)
    UNLESS          reduce using rule 78 (primary -> literal .)
    UNTIL           reduce using rule 78 (primary -> literal .)
    TERM            reduce using rule 78 (primary -> literal .)
    NUMBER          reduce using rule 78 (primary -> literal .)
    LPAREN          reduce using rule 78 (primary -> literal .)
    $end            reduce using rule 78 (primary -> literal .)
    COMMA           reduce using rule 78 (primary -> literal .)
    RBRACKET        reduce using rule 78 (primary -> literal .)
    THEN            reduce using rule 78 (primary -> literal .)
    DO              reduce using rule 78 (primary -> literal .)
    RESCUE          reduce using rule 78 (primary -> literal .)
    HASH_ROCKET     reduce using rule 78 (primary -> literal .)
    RKEY            reduce using rule 78 (primary -> literal .)
    RPAREN          reduce using rule 78 (primary -> literal .)
    WHEN            reduce using rule 78 (primary -> literal .)
    LKEY            reduce using rule 78 (primary -> literal .)
    END             reduce using rule 78 (primary -> literal .)
    ELSIF           reduce using rule 78 (primary -> literal .)
    ELSE            reduce using rule 78 (primary -> literal .)
    ENSURE          reduce using rule 78 (primary -> literal .)
    NOT_SYMBOL      reduce using rule 78 (primary -> literal .)
    COMPLEMENT_OP   reduce using rule 78 (primary -> literal .)
    DEFINED_OP      reduce using rule 78 (primary -> literal .)
    RETURN          reduce using rule 78 (primary -> literal .)
    YIELD           reduce using rule 78 (primary -> literal .)
    CASE            reduce using rule 78 (primary -> literal .)
    FOR             reduce using rule 78 (primary -> literal .)
    BEGIN           reduce using rule 78 (primary -> literal .)
    CLASS           reduce using rule 78 (primary -> literal .)
    MODULE          reduce using rule 78 (primary -> literal .)
    DEF             reduce using rule 78 (primary -> literal .)
    VAR_GLOBAL      reduce using rule 78 (primary -> literal .)
    VAR_LOCAL       reduce using rule 78 (primary -> literal .)
    VAR_INSTANCE    reduce using rule 78 (primary -> literal .)
    VAR_CLASS       reduce using rule 78 (primary -> literal .)
    SYMBOL          reduce using rule 78 (primary -> literal .)
    STRING          reduce using rule 78 (primary -> literal .)
    IDENTIFIER      reduce using rule 78 (primary -> literal .)
    SUPER           reduce using rule 78 (primary -> literal .)


state 37

    (98) primary -> DEFINED_OP . LPAREN arg LPAREN
    (71) arg -> DEFINED_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 199
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 200
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 38

    (110) primary -> CASE . compstmt when END
    (111) primary -> CASE . compstmt when ELSE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 201
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 39

    (112) primary -> FOR . block_var IN expr do compstmt END
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 44
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    block_var                      shift and go to state 202
    lhs                            shift and go to state 203
    mlhs                           shift and go to state 71
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 40

    (117) primary -> CLASS . IDENTIFIER compstmt END
    (118) primary -> CLASS . IDENTIFIER LESSERTHAN IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 206


state 41

    (119) primary -> MODULE . IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 207


state 42

    (120) primary -> DEF . fname argdecl compstmt END
    (121) primary -> DEF . singleton DOT fname argdecl compstmt END
    (122) primary -> DEF . singleton UNARY_OP fname argdecl compstmt END
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL
    (167) singleton -> . variable
    (168) singleton -> . LPAREN expr RPAREN
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 211
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    fname                          shift and go to state 208
    singleton                      shift and go to state 209
    variable                       shift and go to state 210

state 43

    (152) mlhs -> mlhs_item . COMMA mlhs_item TIMES
    (153) mlhs -> mlhs_item . COMMA mlhs_item lhs
    (154) mlhs -> mlhs_item . COMMA mult_mlhs_item TIMES
    (155) mlhs -> mlhs_item . COMMA mult_mlhs_item lhs

    COMMA           shift and go to state 212


state 44

    (156) mlhs -> TIMES . lhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 213
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 45

    (50) arg -> PLUS . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 214
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 46

    (51) arg -> MINUS . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 215
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 47

    (66) arg -> COMPLEMENT_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 216
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 48

    (188) literal -> NUMBER .

    LBRACKET        reduce using rule 188 (literal -> NUMBER .)
    DOT             reduce using rule 188 (literal -> NUMBER .)
    UNARY_OP        reduce using rule 188 (literal -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 188 (literal -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 188 (literal -> NUMBER .)
    PLUS            reduce using rule 188 (literal -> NUMBER .)
    MINUS           reduce using rule 188 (literal -> NUMBER .)
    TIMES           reduce using rule 188 (literal -> NUMBER .)
    DIVIDE          reduce using rule 188 (literal -> NUMBER .)
    MOD             reduce using rule 188 (literal -> NUMBER .)
    POW             reduce using rule 188 (literal -> NUMBER .)
    OR_SYMBOL       reduce using rule 188 (literal -> NUMBER .)
    BINARY_XOR_OP   reduce using rule 188 (literal -> NUMBER .)
    BINARY_AND_OP   reduce using rule 188 (literal -> NUMBER .)
    COMBINED_COMPARISON_OP reduce using rule 188 (literal -> NUMBER .)
    GREATERTHAN     reduce using rule 188 (literal -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 188 (literal -> NUMBER .)
    LESSERTHAN      reduce using rule 188 (literal -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 188 (literal -> NUMBER .)
    EQUAL           reduce using rule 188 (literal -> NUMBER .)
    CASE_EQUALITY   reduce using rule 188 (literal -> NUMBER .)
    NOTEQUAL        reduce using rule 188 (literal -> NUMBER .)
    MATCHED_STRINGS_OP reduce using rule 188 (literal -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 188 (literal -> NUMBER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 188 (literal -> NUMBER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 188 (literal -> NUMBER .)
    AND             reduce using rule 188 (literal -> NUMBER .)
    OR              reduce using rule 188 (literal -> NUMBER .)
    IF              reduce using rule 188 (literal -> NUMBER .)
    WHILE           reduce using rule 188 (literal -> NUMBER .)
    UNLESS          reduce using rule 188 (literal -> NUMBER .)
    UNTIL           reduce using rule 188 (literal -> NUMBER .)
    TERM            reduce using rule 188 (literal -> NUMBER .)
    NUMBER          reduce using rule 188 (literal -> NUMBER .)
    LPAREN          reduce using rule 188 (literal -> NUMBER .)
    $end            reduce using rule 188 (literal -> NUMBER .)
    COMMA           reduce using rule 188 (literal -> NUMBER .)
    RBRACKET        reduce using rule 188 (literal -> NUMBER .)
    THEN            reduce using rule 188 (literal -> NUMBER .)
    DO              reduce using rule 188 (literal -> NUMBER .)
    RESCUE          reduce using rule 188 (literal -> NUMBER .)
    HASH_ROCKET     reduce using rule 188 (literal -> NUMBER .)
    RKEY            reduce using rule 188 (literal -> NUMBER .)
    RPAREN          reduce using rule 188 (literal -> NUMBER .)
    WHEN            reduce using rule 188 (literal -> NUMBER .)
    LKEY            reduce using rule 188 (literal -> NUMBER .)
    END             reduce using rule 188 (literal -> NUMBER .)
    ELSIF           reduce using rule 188 (literal -> NUMBER .)
    ELSE            reduce using rule 188 (literal -> NUMBER .)
    ENSURE          reduce using rule 188 (literal -> NUMBER .)
    NOT_SYMBOL      reduce using rule 188 (literal -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 188 (literal -> NUMBER .)
    DEFINED_OP      reduce using rule 188 (literal -> NUMBER .)
    RETURN          reduce using rule 188 (literal -> NUMBER .)
    YIELD           reduce using rule 188 (literal -> NUMBER .)
    CASE            reduce using rule 188 (literal -> NUMBER .)
    FOR             reduce using rule 188 (literal -> NUMBER .)
    BEGIN           reduce using rule 188 (literal -> NUMBER .)
    CLASS           reduce using rule 188 (literal -> NUMBER .)
    MODULE          reduce using rule 188 (literal -> NUMBER .)
    DEF             reduce using rule 188 (literal -> NUMBER .)
    VAR_GLOBAL      reduce using rule 188 (literal -> NUMBER .)
    VAR_LOCAL       reduce using rule 188 (literal -> NUMBER .)
    VAR_INSTANCE    reduce using rule 188 (literal -> NUMBER .)
    VAR_CLASS       reduce using rule 188 (literal -> NUMBER .)
    SYMBOL          reduce using rule 188 (literal -> NUMBER .)
    STRING          reduce using rule 188 (literal -> NUMBER .)
    IDENTIFIER      reduce using rule 188 (literal -> NUMBER .)
    SUPER           reduce using rule 188 (literal -> NUMBER .)


state 49

    (189) literal -> SYMBOL .

    LBRACKET        reduce using rule 189 (literal -> SYMBOL .)
    DOT             reduce using rule 189 (literal -> SYMBOL .)
    UNARY_OP        reduce using rule 189 (literal -> SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 189 (literal -> SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 189 (literal -> SYMBOL .)
    PLUS            reduce using rule 189 (literal -> SYMBOL .)
    MINUS           reduce using rule 189 (literal -> SYMBOL .)
    TIMES           reduce using rule 189 (literal -> SYMBOL .)
    DIVIDE          reduce using rule 189 (literal -> SYMBOL .)
    MOD             reduce using rule 189 (literal -> SYMBOL .)
    POW             reduce using rule 189 (literal -> SYMBOL .)
    OR_SYMBOL       reduce using rule 189 (literal -> SYMBOL .)
    BINARY_XOR_OP   reduce using rule 189 (literal -> SYMBOL .)
    BINARY_AND_OP   reduce using rule 189 (literal -> SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 189 (literal -> SYMBOL .)
    GREATERTHAN     reduce using rule 189 (literal -> SYMBOL .)
    GREATERTHANEQUAL reduce using rule 189 (literal -> SYMBOL .)
    LESSERTHAN      reduce using rule 189 (literal -> SYMBOL .)
    LESSERTHANEQUAL reduce using rule 189 (literal -> SYMBOL .)
    EQUAL           reduce using rule 189 (literal -> SYMBOL .)
    CASE_EQUALITY   reduce using rule 189 (literal -> SYMBOL .)
    NOTEQUAL        reduce using rule 189 (literal -> SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 189 (literal -> SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 189 (literal -> SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 189 (literal -> SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 189 (literal -> SYMBOL .)
    AND             reduce using rule 189 (literal -> SYMBOL .)
    OR              reduce using rule 189 (literal -> SYMBOL .)
    IF              reduce using rule 189 (literal -> SYMBOL .)
    WHILE           reduce using rule 189 (literal -> SYMBOL .)
    UNLESS          reduce using rule 189 (literal -> SYMBOL .)
    UNTIL           reduce using rule 189 (literal -> SYMBOL .)
    TERM            reduce using rule 189 (literal -> SYMBOL .)
    NUMBER          reduce using rule 189 (literal -> SYMBOL .)
    LPAREN          reduce using rule 189 (literal -> SYMBOL .)
    $end            reduce using rule 189 (literal -> SYMBOL .)
    COMMA           reduce using rule 189 (literal -> SYMBOL .)
    RBRACKET        reduce using rule 189 (literal -> SYMBOL .)
    THEN            reduce using rule 189 (literal -> SYMBOL .)
    DO              reduce using rule 189 (literal -> SYMBOL .)
    RESCUE          reduce using rule 189 (literal -> SYMBOL .)
    HASH_ROCKET     reduce using rule 189 (literal -> SYMBOL .)
    RKEY            reduce using rule 189 (literal -> SYMBOL .)
    RPAREN          reduce using rule 189 (literal -> SYMBOL .)
    WHEN            reduce using rule 189 (literal -> SYMBOL .)
    LKEY            reduce using rule 189 (literal -> SYMBOL .)
    END             reduce using rule 189 (literal -> SYMBOL .)
    ELSIF           reduce using rule 189 (literal -> SYMBOL .)
    ELSE            reduce using rule 189 (literal -> SYMBOL .)
    ENSURE          reduce using rule 189 (literal -> SYMBOL .)
    NOT_SYMBOL      reduce using rule 189 (literal -> SYMBOL .)
    COMPLEMENT_OP   reduce using rule 189 (literal -> SYMBOL .)
    DEFINED_OP      reduce using rule 189 (literal -> SYMBOL .)
    RETURN          reduce using rule 189 (literal -> SYMBOL .)
    YIELD           reduce using rule 189 (literal -> SYMBOL .)
    CASE            reduce using rule 189 (literal -> SYMBOL .)
    FOR             reduce using rule 189 (literal -> SYMBOL .)
    BEGIN           reduce using rule 189 (literal -> SYMBOL .)
    CLASS           reduce using rule 189 (literal -> SYMBOL .)
    MODULE          reduce using rule 189 (literal -> SYMBOL .)
    DEF             reduce using rule 189 (literal -> SYMBOL .)
    VAR_GLOBAL      reduce using rule 189 (literal -> SYMBOL .)
    VAR_LOCAL       reduce using rule 189 (literal -> SYMBOL .)
    VAR_INSTANCE    reduce using rule 189 (literal -> SYMBOL .)
    VAR_CLASS       reduce using rule 189 (literal -> SYMBOL .)
    SYMBOL          reduce using rule 189 (literal -> SYMBOL .)
    STRING          reduce using rule 189 (literal -> SYMBOL .)
    IDENTIFIER      reduce using rule 189 (literal -> SYMBOL .)
    SUPER           reduce using rule 189 (literal -> SYMBOL .)


state 50

    (190) literal -> STRING .

    LBRACKET        reduce using rule 190 (literal -> STRING .)
    DOT             reduce using rule 190 (literal -> STRING .)
    UNARY_OP        reduce using rule 190 (literal -> STRING .)
    RANGE_INCLUSIVE reduce using rule 190 (literal -> STRING .)
    RANGE_EXCLUSIVE reduce using rule 190 (literal -> STRING .)
    PLUS            reduce using rule 190 (literal -> STRING .)
    MINUS           reduce using rule 190 (literal -> STRING .)
    TIMES           reduce using rule 190 (literal -> STRING .)
    DIVIDE          reduce using rule 190 (literal -> STRING .)
    MOD             reduce using rule 190 (literal -> STRING .)
    POW             reduce using rule 190 (literal -> STRING .)
    OR_SYMBOL       reduce using rule 190 (literal -> STRING .)
    BINARY_XOR_OP   reduce using rule 190 (literal -> STRING .)
    BINARY_AND_OP   reduce using rule 190 (literal -> STRING .)
    COMBINED_COMPARISON_OP reduce using rule 190 (literal -> STRING .)
    GREATERTHAN     reduce using rule 190 (literal -> STRING .)
    GREATERTHANEQUAL reduce using rule 190 (literal -> STRING .)
    LESSERTHAN      reduce using rule 190 (literal -> STRING .)
    LESSERTHANEQUAL reduce using rule 190 (literal -> STRING .)
    EQUAL           reduce using rule 190 (literal -> STRING .)
    CASE_EQUALITY   reduce using rule 190 (literal -> STRING .)
    NOTEQUAL        reduce using rule 190 (literal -> STRING .)
    MATCHED_STRINGS_OP reduce using rule 190 (literal -> STRING .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 190 (literal -> STRING .)
    BINARY_LEFT_SHIFT_OP reduce using rule 190 (literal -> STRING .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 190 (literal -> STRING .)
    AND             reduce using rule 190 (literal -> STRING .)
    OR              reduce using rule 190 (literal -> STRING .)
    IF              reduce using rule 190 (literal -> STRING .)
    WHILE           reduce using rule 190 (literal -> STRING .)
    UNLESS          reduce using rule 190 (literal -> STRING .)
    UNTIL           reduce using rule 190 (literal -> STRING .)
    TERM            reduce using rule 190 (literal -> STRING .)
    NUMBER          reduce using rule 190 (literal -> STRING .)
    LPAREN          reduce using rule 190 (literal -> STRING .)
    $end            reduce using rule 190 (literal -> STRING .)
    COMMA           reduce using rule 190 (literal -> STRING .)
    RBRACKET        reduce using rule 190 (literal -> STRING .)
    THEN            reduce using rule 190 (literal -> STRING .)
    DO              reduce using rule 190 (literal -> STRING .)
    RESCUE          reduce using rule 190 (literal -> STRING .)
    HASH_ROCKET     reduce using rule 190 (literal -> STRING .)
    RKEY            reduce using rule 190 (literal -> STRING .)
    RPAREN          reduce using rule 190 (literal -> STRING .)
    WHEN            reduce using rule 190 (literal -> STRING .)
    LKEY            reduce using rule 190 (literal -> STRING .)
    END             reduce using rule 190 (literal -> STRING .)
    ELSIF           reduce using rule 190 (literal -> STRING .)
    ELSE            reduce using rule 190 (literal -> STRING .)
    ENSURE          reduce using rule 190 (literal -> STRING .)
    NOT_SYMBOL      reduce using rule 190 (literal -> STRING .)
    COMPLEMENT_OP   reduce using rule 190 (literal -> STRING .)
    DEFINED_OP      reduce using rule 190 (literal -> STRING .)
    RETURN          reduce using rule 190 (literal -> STRING .)
    YIELD           reduce using rule 190 (literal -> STRING .)
    CASE            reduce using rule 190 (literal -> STRING .)
    FOR             reduce using rule 190 (literal -> STRING .)
    BEGIN           reduce using rule 190 (literal -> STRING .)
    CLASS           reduce using rule 190 (literal -> STRING .)
    MODULE          reduce using rule 190 (literal -> STRING .)
    DEF             reduce using rule 190 (literal -> STRING .)
    VAR_GLOBAL      reduce using rule 190 (literal -> STRING .)
    VAR_LOCAL       reduce using rule 190 (literal -> STRING .)
    VAR_INSTANCE    reduce using rule 190 (literal -> STRING .)
    VAR_CLASS       reduce using rule 190 (literal -> STRING .)
    SYMBOL          reduce using rule 190 (literal -> STRING .)
    STRING          reduce using rule 190 (literal -> STRING .)
    IDENTIFIER      reduce using rule 190 (literal -> STRING .)
    SUPER           reduce using rule 190 (literal -> STRING .)


state 51

    (3) compstmt -> stmt term .
    (4) compstmt -> stmt term . expr term
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LKEY resolved as shift
    $end            reduce using rule 3 (compstmt -> stmt term .)
    RESCUE          reduce using rule 3 (compstmt -> stmt term .)
    RPAREN          reduce using rule 3 (compstmt -> stmt term .)
    WHEN            reduce using rule 3 (compstmt -> stmt term .)
    RKEY            reduce using rule 3 (compstmt -> stmt term .)
    END             reduce using rule 3 (compstmt -> stmt term .)
    ELSIF           reduce using rule 3 (compstmt -> stmt term .)
    ELSE            reduce using rule 3 (compstmt -> stmt term .)
    ENSURE          reduce using rule 3 (compstmt -> stmt term .)
    TIMES           shift and go to state 218
    DIVIDE          shift and go to state 219
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 3 (compstmt -> stmt term .) ]

    expr                           shift and go to state 217
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 52

    (10) stmt -> stmt IF . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 220
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 53

    (11) stmt -> stmt WHILE . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 221
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 54

    (12) stmt -> stmt UNLESS . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 222
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 55

    (13) stmt -> stmt UNTIL . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 223
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 56

    (140) term -> TERM .

    TIMES           reduce using rule 140 (term -> TERM .)
    DIVIDE          reduce using rule 140 (term -> TERM .)
    RETURN          reduce using rule 140 (term -> TERM .)
    YIELD           reduce using rule 140 (term -> TERM .)
    NOT             reduce using rule 140 (term -> TERM .)
    NOT_SYMBOL      reduce using rule 140 (term -> TERM .)
    SUPER           reduce using rule 140 (term -> TERM .)
    PLUS            reduce using rule 140 (term -> TERM .)
    MINUS           reduce using rule 140 (term -> TERM .)
    COMPLEMENT_OP   reduce using rule 140 (term -> TERM .)
    DEFINED_OP      reduce using rule 140 (term -> TERM .)
    LPAREN          reduce using rule 140 (term -> TERM .)
    IDENTIFIER      reduce using rule 140 (term -> TERM .)
    UNARY_OP        reduce using rule 140 (term -> TERM .)
    LBRACKET        reduce using rule 140 (term -> TERM .)
    LKEY            reduce using rule 140 (term -> TERM .)
    IF              reduce using rule 140 (term -> TERM .)
    UNLESS          reduce using rule 140 (term -> TERM .)
    WHILE           reduce using rule 140 (term -> TERM .)
    UNTIL           reduce using rule 140 (term -> TERM .)
    CASE            reduce using rule 140 (term -> TERM .)
    FOR             reduce using rule 140 (term -> TERM .)
    BEGIN           reduce using rule 140 (term -> TERM .)
    CLASS           reduce using rule 140 (term -> TERM .)
    MODULE          reduce using rule 140 (term -> TERM .)
    DEF             reduce using rule 140 (term -> TERM .)
    NUMBER          reduce using rule 140 (term -> TERM .)
    SYMBOL          reduce using rule 140 (term -> TERM .)
    STRING          reduce using rule 140 (term -> TERM .)
    VAR_GLOBAL      reduce using rule 140 (term -> TERM .)
    VAR_LOCAL       reduce using rule 140 (term -> TERM .)
    VAR_INSTANCE    reduce using rule 140 (term -> TERM .)
    VAR_CLASS       reduce using rule 140 (term -> TERM .)
    $end            reduce using rule 140 (term -> TERM .)
    RESCUE          reduce using rule 140 (term -> TERM .)
    RPAREN          reduce using rule 140 (term -> TERM .)
    WHEN            reduce using rule 140 (term -> TERM .)
    RKEY            reduce using rule 140 (term -> TERM .)
    END             reduce using rule 140 (term -> TERM .)
    ELSIF           reduce using rule 140 (term -> TERM .)
    ELSE            reduce using rule 140 (term -> TERM .)
    ENSURE          reduce using rule 140 (term -> TERM .)
    DO              reduce using rule 140 (term -> TERM .)
    UNDEF           reduce using rule 140 (term -> TERM .)
    ALIAS           reduce using rule 140 (term -> TERM .)


state 57

    (239) term -> factor .

    TIMES           reduce using rule 239 (term -> factor .)
    DIVIDE          reduce using rule 239 (term -> factor .)
    RETURN          reduce using rule 239 (term -> factor .)
    YIELD           reduce using rule 239 (term -> factor .)
    NOT             reduce using rule 239 (term -> factor .)
    NOT_SYMBOL      reduce using rule 239 (term -> factor .)
    SUPER           reduce using rule 239 (term -> factor .)
    PLUS            reduce using rule 239 (term -> factor .)
    MINUS           reduce using rule 239 (term -> factor .)
    COMPLEMENT_OP   reduce using rule 239 (term -> factor .)
    DEFINED_OP      reduce using rule 239 (term -> factor .)
    LPAREN          reduce using rule 239 (term -> factor .)
    IDENTIFIER      reduce using rule 239 (term -> factor .)
    UNARY_OP        reduce using rule 239 (term -> factor .)
    LBRACKET        reduce using rule 239 (term -> factor .)
    LKEY            reduce using rule 239 (term -> factor .)
    IF              reduce using rule 239 (term -> factor .)
    UNLESS          reduce using rule 239 (term -> factor .)
    WHILE           reduce using rule 239 (term -> factor .)
    UNTIL           reduce using rule 239 (term -> factor .)
    CASE            reduce using rule 239 (term -> factor .)
    FOR             reduce using rule 239 (term -> factor .)
    BEGIN           reduce using rule 239 (term -> factor .)
    CLASS           reduce using rule 239 (term -> factor .)
    MODULE          reduce using rule 239 (term -> factor .)
    DEF             reduce using rule 239 (term -> factor .)
    NUMBER          reduce using rule 239 (term -> factor .)
    SYMBOL          reduce using rule 239 (term -> factor .)
    STRING          reduce using rule 239 (term -> factor .)
    VAR_GLOBAL      reduce using rule 239 (term -> factor .)
    VAR_LOCAL       reduce using rule 239 (term -> factor .)
    VAR_INSTANCE    reduce using rule 239 (term -> factor .)
    VAR_CLASS       reduce using rule 239 (term -> factor .)
    $end            reduce using rule 239 (term -> factor .)
    RESCUE          reduce using rule 239 (term -> factor .)
    RPAREN          reduce using rule 239 (term -> factor .)
    WHEN            reduce using rule 239 (term -> factor .)
    RKEY            reduce using rule 239 (term -> factor .)
    END             reduce using rule 239 (term -> factor .)
    ELSIF           reduce using rule 239 (term -> factor .)
    ELSE            reduce using rule 239 (term -> factor .)
    ENSURE          reduce using rule 239 (term -> factor .)
    DO              reduce using rule 239 (term -> factor .)
    UNDEF           reduce using rule 239 (term -> factor .)
    ALIAS           reduce using rule 239 (term -> factor .)


state 58

    (240) factor -> NUMBER .

    TIMES           reduce using rule 240 (factor -> NUMBER .)
    DIVIDE          reduce using rule 240 (factor -> NUMBER .)
    RETURN          reduce using rule 240 (factor -> NUMBER .)
    YIELD           reduce using rule 240 (factor -> NUMBER .)
    NOT             reduce using rule 240 (factor -> NUMBER .)
    NOT_SYMBOL      reduce using rule 240 (factor -> NUMBER .)
    SUPER           reduce using rule 240 (factor -> NUMBER .)
    PLUS            reduce using rule 240 (factor -> NUMBER .)
    MINUS           reduce using rule 240 (factor -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 240 (factor -> NUMBER .)
    DEFINED_OP      reduce using rule 240 (factor -> NUMBER .)
    LPAREN          reduce using rule 240 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 240 (factor -> NUMBER .)
    UNARY_OP        reduce using rule 240 (factor -> NUMBER .)
    LBRACKET        reduce using rule 240 (factor -> NUMBER .)
    LKEY            reduce using rule 240 (factor -> NUMBER .)
    IF              reduce using rule 240 (factor -> NUMBER .)
    UNLESS          reduce using rule 240 (factor -> NUMBER .)
    WHILE           reduce using rule 240 (factor -> NUMBER .)
    UNTIL           reduce using rule 240 (factor -> NUMBER .)
    CASE            reduce using rule 240 (factor -> NUMBER .)
    FOR             reduce using rule 240 (factor -> NUMBER .)
    BEGIN           reduce using rule 240 (factor -> NUMBER .)
    CLASS           reduce using rule 240 (factor -> NUMBER .)
    MODULE          reduce using rule 240 (factor -> NUMBER .)
    DEF             reduce using rule 240 (factor -> NUMBER .)
    NUMBER          reduce using rule 240 (factor -> NUMBER .)
    SYMBOL          reduce using rule 240 (factor -> NUMBER .)
    STRING          reduce using rule 240 (factor -> NUMBER .)
    VAR_GLOBAL      reduce using rule 240 (factor -> NUMBER .)
    VAR_LOCAL       reduce using rule 240 (factor -> NUMBER .)
    VAR_INSTANCE    reduce using rule 240 (factor -> NUMBER .)
    VAR_CLASS       reduce using rule 240 (factor -> NUMBER .)
    $end            reduce using rule 240 (factor -> NUMBER .)
    RESCUE          reduce using rule 240 (factor -> NUMBER .)
    RPAREN          reduce using rule 240 (factor -> NUMBER .)
    WHEN            reduce using rule 240 (factor -> NUMBER .)
    RKEY            reduce using rule 240 (factor -> NUMBER .)
    END             reduce using rule 240 (factor -> NUMBER .)
    ELSIF           reduce using rule 240 (factor -> NUMBER .)
    ELSE            reduce using rule 240 (factor -> NUMBER .)
    ENSURE          reduce using rule 240 (factor -> NUMBER .)
    DO              reduce using rule 240 (factor -> NUMBER .)
    UNDEF           reduce using rule 240 (factor -> NUMBER .)
    ALIAS           reduce using rule 240 (factor -> NUMBER .)


state 59

    (241) factor -> LPAREN . expression RPAREN
    (234) expression -> . expression PLUS term
    (235) expression -> . expression MINUS term
    (236) expression -> . term
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    expression                     shift and go to state 224
    term                           shift and go to state 225
    factor                         shift and go to state 57

state 60

    (21) expr -> expr AND . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 226
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 61

    (22) expr -> expr OR . expr
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 227
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 62

    (5) stmt -> call do . LBRACKET RBRACKET

    LBRACKET        shift and go to state 228


state 63

    (137) do -> term .
    (139) do -> term . DO
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
    LBRACKET        reduce using rule 137 (do -> term .)
    UNDEF           reduce using rule 137 (do -> term .)
    ALIAS           reduce using rule 137 (do -> term .)
    BEGIN           reduce using rule 137 (do -> term .)
    END             reduce using rule 137 (do -> term .)
    RETURN          reduce using rule 137 (do -> term .)
    YIELD           reduce using rule 137 (do -> term .)
    NOT             reduce using rule 137 (do -> term .)
    NOT_SYMBOL      reduce using rule 137 (do -> term .)
    SUPER           reduce using rule 137 (do -> term .)
    VAR_GLOBAL      reduce using rule 137 (do -> term .)
    VAR_LOCAL       reduce using rule 137 (do -> term .)
    VAR_INSTANCE    reduce using rule 137 (do -> term .)
    VAR_CLASS       reduce using rule 137 (do -> term .)
    LPAREN          reduce using rule 137 (do -> term .)
    UNARY_OP        reduce using rule 137 (do -> term .)
    LKEY            reduce using rule 137 (do -> term .)
    DEFINED_OP      reduce using rule 137 (do -> term .)
    IF              reduce using rule 137 (do -> term .)
    UNLESS          reduce using rule 137 (do -> term .)
    WHILE           reduce using rule 137 (do -> term .)
    UNTIL           reduce using rule 137 (do -> term .)
    CASE            reduce using rule 137 (do -> term .)
    FOR             reduce using rule 137 (do -> term .)
    CLASS           reduce using rule 137 (do -> term .)
    MODULE          reduce using rule 137 (do -> term .)
    DEF             reduce using rule 137 (do -> term .)
    PLUS            reduce using rule 137 (do -> term .)
    MINUS           reduce using rule 137 (do -> term .)
    COMPLEMENT_OP   reduce using rule 137 (do -> term .)
    IDENTIFIER      reduce using rule 137 (do -> term .)
    NUMBER          reduce using rule 137 (do -> term .)
    SYMBOL          reduce using rule 137 (do -> term .)
    STRING          reduce using rule 137 (do -> term .)
    DO              shift and go to state 229
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219

  ! TIMES           [ reduce using rule 137 (do -> term .) ]


state 64

    (138) do -> DO .

    LBRACKET        reduce using rule 138 (do -> DO .)
    UNDEF           reduce using rule 138 (do -> DO .)
    ALIAS           reduce using rule 138 (do -> DO .)
    BEGIN           reduce using rule 138 (do -> DO .)
    END             reduce using rule 138 (do -> DO .)
    RETURN          reduce using rule 138 (do -> DO .)
    YIELD           reduce using rule 138 (do -> DO .)
    NOT             reduce using rule 138 (do -> DO .)
    NOT_SYMBOL      reduce using rule 138 (do -> DO .)
    SUPER           reduce using rule 138 (do -> DO .)
    VAR_GLOBAL      reduce using rule 138 (do -> DO .)
    VAR_LOCAL       reduce using rule 138 (do -> DO .)
    VAR_INSTANCE    reduce using rule 138 (do -> DO .)
    VAR_CLASS       reduce using rule 138 (do -> DO .)
    LPAREN          reduce using rule 138 (do -> DO .)
    UNARY_OP        reduce using rule 138 (do -> DO .)
    LKEY            reduce using rule 138 (do -> DO .)
    DEFINED_OP      reduce using rule 138 (do -> DO .)
    IF              reduce using rule 138 (do -> DO .)
    UNLESS          reduce using rule 138 (do -> DO .)
    WHILE           reduce using rule 138 (do -> DO .)
    UNTIL           reduce using rule 138 (do -> DO .)
    CASE            reduce using rule 138 (do -> DO .)
    FOR             reduce using rule 138 (do -> DO .)
    CLASS           reduce using rule 138 (do -> DO .)
    MODULE          reduce using rule 138 (do -> DO .)
    DEF             reduce using rule 138 (do -> DO .)
    TIMES           reduce using rule 138 (do -> DO .)
    PLUS            reduce using rule 138 (do -> DO .)
    MINUS           reduce using rule 138 (do -> DO .)
    COMPLEMENT_OP   reduce using rule 138 (do -> DO .)
    IDENTIFIER      reduce using rule 138 (do -> DO .)
    NUMBER          reduce using rule 138 (do -> DO .)
    SYMBOL          reduce using rule 138 (do -> DO .)
    STRING          reduce using rule 138 (do -> DO .)


state 65

    (84) primary -> LBRACKET . RBRACKET
    (85) primary -> LBRACKET . args RBRACKET
    (86) primary -> LBRACKET . args COMMA RBRACKET
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 67
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    args                           shift and go to state 69
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 66

    (6) stmt -> LBRACKET block_var . RBRACKET

    RBRACKET        shift and go to state 231


state 67

    (84) primary -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    DOT             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    MOD             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    POW             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    AND             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    OR              reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    IF              reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    UNLESS          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    UNTIL           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    TERM            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    $end            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    THEN            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    DO              reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RESCUE          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    LKEY            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    END             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    ENSURE          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    YIELD           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    CASE            reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    FOR             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    BEGIN           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    CLASS           reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    DEF             reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    STRING          reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 84 (primary -> LBRACKET RBRACKET .)
    SUPER           reduce using rule 84 (primary -> LBRACKET RBRACKET .)


state 68

    (7) stmt -> LBRACKET OR_SYMBOL . block_var OR_SYMBOL RBRACKET compstmt END
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 44
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    block_var                      shift and go to state 232
    lhs                            shift and go to state 203
    mlhs                           shift and go to state 71
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 69

    (85) primary -> LBRACKET args . RBRACKET
    (86) primary -> LBRACKET args . COMMA RBRACKET

    RBRACKET        shift and go to state 233
    COMMA           shift and go to state 234


state 70

    (150) block_var -> lhs .
    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (158) mlhs_item -> lhs .
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    RBRACKET        reduce using rule 150 (block_var -> lhs .)
    =               shift and go to state 235
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 71

    (151) block_var -> mlhs .

    RBRACKET        reduce using rule 151 (block_var -> mlhs .)
    IN              reduce using rule 151 (block_var -> mlhs .)
    OR_SYMBOL       reduce using rule 151 (block_var -> mlhs .)


state 72

    (160) args -> arg .
    (161) args -> arg . COMMA arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 160 (args -> arg .)
    NOT_SYMBOL      reduce using rule 160 (args -> arg .)
    COMPLEMENT_OP   reduce using rule 160 (args -> arg .)
    DEFINED_OP      reduce using rule 160 (args -> arg .)
    LPAREN          reduce using rule 160 (args -> arg .)
    UNARY_OP        reduce using rule 160 (args -> arg .)
    LBRACKET        reduce using rule 160 (args -> arg .)
    LKEY            reduce using rule 160 (args -> arg .)
    RETURN          reduce using rule 160 (args -> arg .)
    YIELD           reduce using rule 160 (args -> arg .)
    IF              reduce using rule 160 (args -> arg .)
    UNLESS          reduce using rule 160 (args -> arg .)
    WHILE           reduce using rule 160 (args -> arg .)
    UNTIL           reduce using rule 160 (args -> arg .)
    CASE            reduce using rule 160 (args -> arg .)
    FOR             reduce using rule 160 (args -> arg .)
    BEGIN           reduce using rule 160 (args -> arg .)
    CLASS           reduce using rule 160 (args -> arg .)
    MODULE          reduce using rule 160 (args -> arg .)
    DEF             reduce using rule 160 (args -> arg .)
    VAR_GLOBAL      reduce using rule 160 (args -> arg .)
    VAR_LOCAL       reduce using rule 160 (args -> arg .)
    VAR_INSTANCE    reduce using rule 160 (args -> arg .)
    VAR_CLASS       reduce using rule 160 (args -> arg .)
    NUMBER          reduce using rule 160 (args -> arg .)
    SYMBOL          reduce using rule 160 (args -> arg .)
    STRING          reduce using rule 160 (args -> arg .)
    IDENTIFIER      reduce using rule 160 (args -> arg .)
    SUPER           reduce using rule 160 (args -> arg .)
    TERM            reduce using rule 160 (args -> arg .)
    $end            reduce using rule 160 (args -> arg .)
    THEN            reduce using rule 160 (args -> arg .)
    DO              reduce using rule 160 (args -> arg .)
    RESCUE          reduce using rule 160 (args -> arg .)
    RPAREN          reduce using rule 160 (args -> arg .)
    WHEN            reduce using rule 160 (args -> arg .)
    RKEY            reduce using rule 160 (args -> arg .)
    END             reduce using rule 160 (args -> arg .)
    ELSIF           reduce using rule 160 (args -> arg .)
    ELSE            reduce using rule 160 (args -> arg .)
    ENSURE          reduce using rule 160 (args -> arg .)
    COMMA           shift and go to state 236
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! COMMA           [ reduce using rule 160 (args -> arg .) ]
  ! TIMES           [ reduce using rule 160 (args -> arg .) ]
  ! PLUS            [ reduce using rule 160 (args -> arg .) ]
  ! MINUS           [ reduce using rule 160 (args -> arg .) ]
  ! AND             [ reduce using rule 160 (args -> arg .) ]
  ! OR              [ reduce using rule 160 (args -> arg .) ]


state 73

    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (72) arg -> primary .
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

    LBRACKET        shift and go to state 148
    DOT             shift and go to state 237
    COMMA           reduce using rule 72 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    RBRACKET        reduce using rule 72 (arg -> primary .)
    UNARY_OP        shift and go to state 238


state 74

    (191) literal -> IDENTIFIER .
    (218) operation -> IDENTIFIER .
    (219) operation -> IDENTIFIER . NOT_SYMBOL
    (220) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LBRACKET resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for COMPLEMENT_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 191 (literal -> IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 191 (literal -> IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    LBRACKET        reduce using rule 191 (literal -> IDENTIFIER .)
    DOT             reduce using rule 191 (literal -> IDENTIFIER .)
    UNARY_OP        reduce using rule 191 (literal -> IDENTIFIER .)
    COMMA           reduce using rule 191 (literal -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 191 (literal -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 191 (literal -> IDENTIFIER .)
    PLUS            reduce using rule 191 (literal -> IDENTIFIER .)
    MINUS           reduce using rule 191 (literal -> IDENTIFIER .)
    TIMES           reduce using rule 191 (literal -> IDENTIFIER .)
    DIVIDE          reduce using rule 191 (literal -> IDENTIFIER .)
    MOD             reduce using rule 191 (literal -> IDENTIFIER .)
    POW             reduce using rule 191 (literal -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 191 (literal -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 191 (literal -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 191 (literal -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 191 (literal -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 191 (literal -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 191 (literal -> IDENTIFIER .)
    EQUAL           reduce using rule 191 (literal -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 191 (literal -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 191 (literal -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 191 (literal -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 191 (literal -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 191 (literal -> IDENTIFIER .)
    AND             reduce using rule 191 (literal -> IDENTIFIER .)
    OR              reduce using rule 191 (literal -> IDENTIFIER .)
    RBRACKET        reduce using rule 191 (literal -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 191 (literal -> IDENTIFIER .)
    RKEY            reduce using rule 191 (literal -> IDENTIFIER .)
    IF              reduce using rule 191 (literal -> IDENTIFIER .)
    WHILE           reduce using rule 191 (literal -> IDENTIFIER .)
    UNLESS          reduce using rule 191 (literal -> IDENTIFIER .)
    UNTIL           reduce using rule 191 (literal -> IDENTIFIER .)
    TERM            reduce using rule 191 (literal -> IDENTIFIER .)
    NUMBER          reduce using rule 191 (literal -> IDENTIFIER .)
    LPAREN          reduce using rule 191 (literal -> IDENTIFIER .)
    $end            reduce using rule 191 (literal -> IDENTIFIER .)
    RESCUE          reduce using rule 191 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 191 (literal -> IDENTIFIER .)
    WHEN            reduce using rule 191 (literal -> IDENTIFIER .)
    LKEY            reduce using rule 191 (literal -> IDENTIFIER .)
    END             reduce using rule 191 (literal -> IDENTIFIER .)
    ELSIF           reduce using rule 191 (literal -> IDENTIFIER .)
    ELSE            reduce using rule 191 (literal -> IDENTIFIER .)
    ENSURE          reduce using rule 191 (literal -> IDENTIFIER .)
    THEN            reduce using rule 191 (literal -> IDENTIFIER .)
    DO              reduce using rule 191 (literal -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 191 (literal -> IDENTIFIER .)
    DEFINED_OP      reduce using rule 191 (literal -> IDENTIFIER .)
    RETURN          reduce using rule 191 (literal -> IDENTIFIER .)
    YIELD           reduce using rule 191 (literal -> IDENTIFIER .)
    CASE            reduce using rule 191 (literal -> IDENTIFIER .)
    FOR             reduce using rule 191 (literal -> IDENTIFIER .)
    BEGIN           reduce using rule 191 (literal -> IDENTIFIER .)
    CLASS           reduce using rule 191 (literal -> IDENTIFIER .)
    MODULE          reduce using rule 191 (literal -> IDENTIFIER .)
    DEF             reduce using rule 191 (literal -> IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 191 (literal -> IDENTIFIER .)
    VAR_LOCAL       reduce using rule 191 (literal -> IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 191 (literal -> IDENTIFIER .)
    VAR_CLASS       reduce using rule 191 (literal -> IDENTIFIER .)
    SYMBOL          reduce using rule 191 (literal -> IDENTIFIER .)
    STRING          reduce using rule 191 (literal -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 191 (literal -> IDENTIFIER .)
    SUPER           reduce using rule 191 (literal -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 151
    OPTIONAL_SYMBOL shift and go to state 152

  ! NOT_SYMBOL      [ reduce using rule 191 (literal -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 218 (operation -> IDENTIFIER .) ]


state 75

    (65) arg -> NOT_SYMBOL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 165
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 76

    (71) arg -> DEFINED_OP . arg
    (98) primary -> DEFINED_OP . LPAREN arg LPAREN
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 199
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 200
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 77

    (92) primary -> RETURN .
    (93) primary -> RETURN . LPAREN RPAREN
    (94) primary -> RETURN . LPAREN call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 92 (primary -> RETURN .)
    DOT             reduce using rule 92 (primary -> RETURN .)
    UNARY_OP        reduce using rule 92 (primary -> RETURN .)
    COMMA           reduce using rule 92 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 92 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 92 (primary -> RETURN .)
    PLUS            reduce using rule 92 (primary -> RETURN .)
    MINUS           reduce using rule 92 (primary -> RETURN .)
    TIMES           reduce using rule 92 (primary -> RETURN .)
    DIVIDE          reduce using rule 92 (primary -> RETURN .)
    MOD             reduce using rule 92 (primary -> RETURN .)
    POW             reduce using rule 92 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 92 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 92 (primary -> RETURN .)
    BINARY_AND_OP   reduce using rule 92 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 92 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 92 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 92 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    EQUAL           reduce using rule 92 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 92 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 92 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    AND             reduce using rule 92 (primary -> RETURN .)
    OR              reduce using rule 92 (primary -> RETURN .)
    RBRACKET        reduce using rule 92 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 92 (primary -> RETURN .)
    RKEY            reduce using rule 92 (primary -> RETURN .)
    IF              reduce using rule 92 (primary -> RETURN .)
    WHILE           reduce using rule 92 (primary -> RETURN .)
    UNLESS          reduce using rule 92 (primary -> RETURN .)
    UNTIL           reduce using rule 92 (primary -> RETURN .)
    TERM            reduce using rule 92 (primary -> RETURN .)
    NUMBER          reduce using rule 92 (primary -> RETURN .)
    $end            reduce using rule 92 (primary -> RETURN .)
    THEN            reduce using rule 92 (primary -> RETURN .)
    DO              reduce using rule 92 (primary -> RETURN .)
    RESCUE          reduce using rule 92 (primary -> RETURN .)
    RPAREN          reduce using rule 92 (primary -> RETURN .)
    WHEN            reduce using rule 92 (primary -> RETURN .)
    LKEY            reduce using rule 92 (primary -> RETURN .)
    END             reduce using rule 92 (primary -> RETURN .)
    ELSIF           reduce using rule 92 (primary -> RETURN .)
    ELSE            reduce using rule 92 (primary -> RETURN .)
    ENSURE          reduce using rule 92 (primary -> RETURN .)
    NOT_SYMBOL      reduce using rule 92 (primary -> RETURN .)
    COMPLEMENT_OP   reduce using rule 92 (primary -> RETURN .)
    DEFINED_OP      reduce using rule 92 (primary -> RETURN .)
    RETURN          reduce using rule 92 (primary -> RETURN .)
    YIELD           reduce using rule 92 (primary -> RETURN .)
    CASE            reduce using rule 92 (primary -> RETURN .)
    FOR             reduce using rule 92 (primary -> RETURN .)
    BEGIN           reduce using rule 92 (primary -> RETURN .)
    CLASS           reduce using rule 92 (primary -> RETURN .)
    MODULE          reduce using rule 92 (primary -> RETURN .)
    DEF             reduce using rule 92 (primary -> RETURN .)
    VAR_GLOBAL      reduce using rule 92 (primary -> RETURN .)
    VAR_LOCAL       reduce using rule 92 (primary -> RETURN .)
    VAR_INSTANCE    reduce using rule 92 (primary -> RETURN .)
    VAR_CLASS       reduce using rule 92 (primary -> RETURN .)
    SYMBOL          reduce using rule 92 (primary -> RETURN .)
    STRING          reduce using rule 92 (primary -> RETURN .)
    IDENTIFIER      reduce using rule 92 (primary -> RETURN .)
    SUPER           reduce using rule 92 (primary -> RETURN .)
    LPAREN          shift and go to state 239

  ! LPAREN          [ reduce using rule 92 (primary -> RETURN .) ]


state 78

    (95) primary -> YIELD .
    (96) primary -> YIELD . LPAREN RPAREN
    (97) primary -> YIELD . LPAREN call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 95 (primary -> YIELD .)
    DOT             reduce using rule 95 (primary -> YIELD .)
    UNARY_OP        reduce using rule 95 (primary -> YIELD .)
    COMMA           reduce using rule 95 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 95 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 95 (primary -> YIELD .)
    PLUS            reduce using rule 95 (primary -> YIELD .)
    MINUS           reduce using rule 95 (primary -> YIELD .)
    TIMES           reduce using rule 95 (primary -> YIELD .)
    DIVIDE          reduce using rule 95 (primary -> YIELD .)
    MOD             reduce using rule 95 (primary -> YIELD .)
    POW             reduce using rule 95 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 95 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 95 (primary -> YIELD .)
    BINARY_AND_OP   reduce using rule 95 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 95 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 95 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 95 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    EQUAL           reduce using rule 95 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 95 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 95 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    AND             reduce using rule 95 (primary -> YIELD .)
    OR              reduce using rule 95 (primary -> YIELD .)
    RBRACKET        reduce using rule 95 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 95 (primary -> YIELD .)
    RKEY            reduce using rule 95 (primary -> YIELD .)
    IF              reduce using rule 95 (primary -> YIELD .)
    WHILE           reduce using rule 95 (primary -> YIELD .)
    UNLESS          reduce using rule 95 (primary -> YIELD .)
    UNTIL           reduce using rule 95 (primary -> YIELD .)
    TERM            reduce using rule 95 (primary -> YIELD .)
    NUMBER          reduce using rule 95 (primary -> YIELD .)
    $end            reduce using rule 95 (primary -> YIELD .)
    THEN            reduce using rule 95 (primary -> YIELD .)
    DO              reduce using rule 95 (primary -> YIELD .)
    RESCUE          reduce using rule 95 (primary -> YIELD .)
    RPAREN          reduce using rule 95 (primary -> YIELD .)
    WHEN            reduce using rule 95 (primary -> YIELD .)
    LKEY            reduce using rule 95 (primary -> YIELD .)
    END             reduce using rule 95 (primary -> YIELD .)
    ELSIF           reduce using rule 95 (primary -> YIELD .)
    ELSE            reduce using rule 95 (primary -> YIELD .)
    ENSURE          reduce using rule 95 (primary -> YIELD .)
    NOT_SYMBOL      reduce using rule 95 (primary -> YIELD .)
    COMPLEMENT_OP   reduce using rule 95 (primary -> YIELD .)
    DEFINED_OP      reduce using rule 95 (primary -> YIELD .)
    RETURN          reduce using rule 95 (primary -> YIELD .)
    YIELD           reduce using rule 95 (primary -> YIELD .)
    CASE            reduce using rule 95 (primary -> YIELD .)
    FOR             reduce using rule 95 (primary -> YIELD .)
    BEGIN           reduce using rule 95 (primary -> YIELD .)
    CLASS           reduce using rule 95 (primary -> YIELD .)
    MODULE          reduce using rule 95 (primary -> YIELD .)
    DEF             reduce using rule 95 (primary -> YIELD .)
    VAR_GLOBAL      reduce using rule 95 (primary -> YIELD .)
    VAR_LOCAL       reduce using rule 95 (primary -> YIELD .)
    VAR_INSTANCE    reduce using rule 95 (primary -> YIELD .)
    VAR_CLASS       reduce using rule 95 (primary -> YIELD .)
    SYMBOL          reduce using rule 95 (primary -> YIELD .)
    STRING          reduce using rule 95 (primary -> YIELD .)
    IDENTIFIER      reduce using rule 95 (primary -> YIELD .)
    SUPER           reduce using rule 95 (primary -> YIELD .)
    LPAREN          shift and go to state 240

  ! LPAREN          [ reduce using rule 95 (primary -> YIELD .) ]


state 79

    (99) primary -> function .
    (100) primary -> function . LKEY compstmt LKEY
    (101) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY

  ! shift/reduce conflict for LKEY resolved as shift
    LBRACKET        reduce using rule 99 (primary -> function .)
    DOT             reduce using rule 99 (primary -> function .)
    UNARY_OP        reduce using rule 99 (primary -> function .)
    COMMA           reduce using rule 99 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 99 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 99 (primary -> function .)
    PLUS            reduce using rule 99 (primary -> function .)
    MINUS           reduce using rule 99 (primary -> function .)
    TIMES           reduce using rule 99 (primary -> function .)
    DIVIDE          reduce using rule 99 (primary -> function .)
    MOD             reduce using rule 99 (primary -> function .)
    POW             reduce using rule 99 (primary -> function .)
    OR_SYMBOL       reduce using rule 99 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 99 (primary -> function .)
    BINARY_AND_OP   reduce using rule 99 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 99 (primary -> function .)
    GREATERTHAN     reduce using rule 99 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 99 (primary -> function .)
    LESSERTHAN      reduce using rule 99 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 99 (primary -> function .)
    EQUAL           reduce using rule 99 (primary -> function .)
    CASE_EQUALITY   reduce using rule 99 (primary -> function .)
    NOTEQUAL        reduce using rule 99 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 99 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 99 (primary -> function .)
    AND             reduce using rule 99 (primary -> function .)
    OR              reduce using rule 99 (primary -> function .)
    RBRACKET        reduce using rule 99 (primary -> function .)
    TERM            reduce using rule 99 (primary -> function .)
    THEN            reduce using rule 99 (primary -> function .)
    DO              reduce using rule 99 (primary -> function .)
    NUMBER          reduce using rule 99 (primary -> function .)
    LPAREN          reduce using rule 99 (primary -> function .)
    HASH_ROCKET     reduce using rule 99 (primary -> function .)
    RKEY            reduce using rule 99 (primary -> function .)
    IF              reduce using rule 99 (primary -> function .)
    WHILE           reduce using rule 99 (primary -> function .)
    UNLESS          reduce using rule 99 (primary -> function .)
    UNTIL           reduce using rule 99 (primary -> function .)
    $end            reduce using rule 99 (primary -> function .)
    RESCUE          reduce using rule 99 (primary -> function .)
    RPAREN          reduce using rule 99 (primary -> function .)
    WHEN            reduce using rule 99 (primary -> function .)
    END             reduce using rule 99 (primary -> function .)
    ELSIF           reduce using rule 99 (primary -> function .)
    ELSE            reduce using rule 99 (primary -> function .)
    ENSURE          reduce using rule 99 (primary -> function .)
    NOT_SYMBOL      reduce using rule 99 (primary -> function .)
    COMPLEMENT_OP   reduce using rule 99 (primary -> function .)
    DEFINED_OP      reduce using rule 99 (primary -> function .)
    RETURN          reduce using rule 99 (primary -> function .)
    YIELD           reduce using rule 99 (primary -> function .)
    CASE            reduce using rule 99 (primary -> function .)
    FOR             reduce using rule 99 (primary -> function .)
    BEGIN           reduce using rule 99 (primary -> function .)
    CLASS           reduce using rule 99 (primary -> function .)
    MODULE          reduce using rule 99 (primary -> function .)
    DEF             reduce using rule 99 (primary -> function .)
    VAR_GLOBAL      reduce using rule 99 (primary -> function .)
    VAR_LOCAL       reduce using rule 99 (primary -> function .)
    VAR_INSTANCE    reduce using rule 99 (primary -> function .)
    VAR_CLASS       reduce using rule 99 (primary -> function .)
    SYMBOL          reduce using rule 99 (primary -> function .)
    STRING          reduce using rule 99 (primary -> function .)
    IDENTIFIER      reduce using rule 99 (primary -> function .)
    SUPER           reduce using rule 99 (primary -> function .)
    LKEY            shift and go to state 147

  ! LKEY            [ reduce using rule 99 (primary -> function .) ]


state 80

    (113) primary -> BEGIN . compstmt rescue END
    (114) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (115) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (116) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 123
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 81

    (33) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET

    LBRACKET        shift and go to state 241


state 82

    (38) function -> SUPER . LPAREN call_args RPAREN
    (39) function -> SUPER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 242
    LKEY            reduce using rule 39 (function -> SUPER .)
    LBRACKET        reduce using rule 39 (function -> SUPER .)
    DOT             reduce using rule 39 (function -> SUPER .)
    UNARY_OP        reduce using rule 39 (function -> SUPER .)
    COMMA           reduce using rule 39 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 39 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 39 (function -> SUPER .)
    PLUS            reduce using rule 39 (function -> SUPER .)
    MINUS           reduce using rule 39 (function -> SUPER .)
    TIMES           reduce using rule 39 (function -> SUPER .)
    DIVIDE          reduce using rule 39 (function -> SUPER .)
    MOD             reduce using rule 39 (function -> SUPER .)
    POW             reduce using rule 39 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 39 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 39 (function -> SUPER .)
    BINARY_AND_OP   reduce using rule 39 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 39 (function -> SUPER .)
    GREATERTHAN     reduce using rule 39 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    LESSERTHAN      reduce using rule 39 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    EQUAL           reduce using rule 39 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 39 (function -> SUPER .)
    NOTEQUAL        reduce using rule 39 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    AND             reduce using rule 39 (function -> SUPER .)
    OR              reduce using rule 39 (function -> SUPER .)
    RBRACKET        reduce using rule 39 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 39 (function -> SUPER .)
    RKEY            reduce using rule 39 (function -> SUPER .)
    IF              reduce using rule 39 (function -> SUPER .)
    WHILE           reduce using rule 39 (function -> SUPER .)
    UNLESS          reduce using rule 39 (function -> SUPER .)
    UNTIL           reduce using rule 39 (function -> SUPER .)
    TERM            reduce using rule 39 (function -> SUPER .)
    NUMBER          reduce using rule 39 (function -> SUPER .)
    $end            reduce using rule 39 (function -> SUPER .)
    RESCUE          reduce using rule 39 (function -> SUPER .)
    RPAREN          reduce using rule 39 (function -> SUPER .)
    WHEN            reduce using rule 39 (function -> SUPER .)
    END             reduce using rule 39 (function -> SUPER .)
    ELSIF           reduce using rule 39 (function -> SUPER .)
    ELSE            reduce using rule 39 (function -> SUPER .)
    ENSURE          reduce using rule 39 (function -> SUPER .)
    THEN            reduce using rule 39 (function -> SUPER .)
    DO              reduce using rule 39 (function -> SUPER .)
    NOT_SYMBOL      reduce using rule 39 (function -> SUPER .)
    COMPLEMENT_OP   reduce using rule 39 (function -> SUPER .)
    DEFINED_OP      reduce using rule 39 (function -> SUPER .)
    RETURN          reduce using rule 39 (function -> SUPER .)
    YIELD           reduce using rule 39 (function -> SUPER .)
    CASE            reduce using rule 39 (function -> SUPER .)
    FOR             reduce using rule 39 (function -> SUPER .)
    BEGIN           reduce using rule 39 (function -> SUPER .)
    CLASS           reduce using rule 39 (function -> SUPER .)
    MODULE          reduce using rule 39 (function -> SUPER .)
    DEF             reduce using rule 39 (function -> SUPER .)
    VAR_GLOBAL      reduce using rule 39 (function -> SUPER .)
    VAR_LOCAL       reduce using rule 39 (function -> SUPER .)
    VAR_INSTANCE    reduce using rule 39 (function -> SUPER .)
    VAR_CLASS       reduce using rule 39 (function -> SUPER .)
    SYMBOL          reduce using rule 39 (function -> SUPER .)
    STRING          reduce using rule 39 (function -> SUPER .)
    IDENTIFIER      reduce using rule 39 (function -> SUPER .)
    SUPER           reduce using rule 39 (function -> SUPER .)

  ! LPAREN          [ reduce using rule 39 (function -> SUPER .) ]


state 83

    (15) stmt -> END LKEY . compstmt RKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 243
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 84

    (8) stmt -> UNDEF fname .

    IF              reduce using rule 8 (stmt -> UNDEF fname .)
    WHILE           reduce using rule 8 (stmt -> UNDEF fname .)
    UNLESS          reduce using rule 8 (stmt -> UNDEF fname .)
    UNTIL           reduce using rule 8 (stmt -> UNDEF fname .)
    TERM            reduce using rule 8 (stmt -> UNDEF fname .)
    NUMBER          reduce using rule 8 (stmt -> UNDEF fname .)
    LPAREN          reduce using rule 8 (stmt -> UNDEF fname .)
    $end            reduce using rule 8 (stmt -> UNDEF fname .)
    RESCUE          reduce using rule 8 (stmt -> UNDEF fname .)
    RPAREN          reduce using rule 8 (stmt -> UNDEF fname .)
    WHEN            reduce using rule 8 (stmt -> UNDEF fname .)
    RKEY            reduce using rule 8 (stmt -> UNDEF fname .)
    LKEY            reduce using rule 8 (stmt -> UNDEF fname .)
    END             reduce using rule 8 (stmt -> UNDEF fname .)
    ELSIF           reduce using rule 8 (stmt -> UNDEF fname .)
    ELSE            reduce using rule 8 (stmt -> UNDEF fname .)
    ENSURE          reduce using rule 8 (stmt -> UNDEF fname .)


state 85

    (192) fname -> IDENTIFIER .

    IF              reduce using rule 192 (fname -> IDENTIFIER .)
    WHILE           reduce using rule 192 (fname -> IDENTIFIER .)
    UNLESS          reduce using rule 192 (fname -> IDENTIFIER .)
    UNTIL           reduce using rule 192 (fname -> IDENTIFIER .)
    TERM            reduce using rule 192 (fname -> IDENTIFIER .)
    NUMBER          reduce using rule 192 (fname -> IDENTIFIER .)
    LPAREN          reduce using rule 192 (fname -> IDENTIFIER .)
    $end            reduce using rule 192 (fname -> IDENTIFIER .)
    RESCUE          reduce using rule 192 (fname -> IDENTIFIER .)
    RPAREN          reduce using rule 192 (fname -> IDENTIFIER .)
    WHEN            reduce using rule 192 (fname -> IDENTIFIER .)
    RKEY            reduce using rule 192 (fname -> IDENTIFIER .)
    LKEY            reduce using rule 192 (fname -> IDENTIFIER .)
    END             reduce using rule 192 (fname -> IDENTIFIER .)
    ELSIF           reduce using rule 192 (fname -> IDENTIFIER .)
    ELSE            reduce using rule 192 (fname -> IDENTIFIER .)
    ENSURE          reduce using rule 192 (fname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 192 (fname -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 192 (fname -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 192 (fname -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 192 (fname -> IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 192 (fname -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 192 (fname -> IDENTIFIER .)
    EQUAL           reduce using rule 192 (fname -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 192 (fname -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 192 (fname -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 192 (fname -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 192 (fname -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 192 (fname -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 192 (fname -> IDENTIFIER .)
    PLUS            reduce using rule 192 (fname -> IDENTIFIER .)
    MINUS           reduce using rule 192 (fname -> IDENTIFIER .)
    TIMES           reduce using rule 192 (fname -> IDENTIFIER .)
    DIVIDE          reduce using rule 192 (fname -> IDENTIFIER .)
    MOD             reduce using rule 192 (fname -> IDENTIFIER .)
    POW             reduce using rule 192 (fname -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 192 (fname -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 192 (fname -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 192 (fname -> IDENTIFIER .)
    OVERLOAD_PLUS   reduce using rule 192 (fname -> IDENTIFIER .)
    OVERLOAD_MINUS  reduce using rule 192 (fname -> IDENTIFIER .)
    LBRACKET        reduce using rule 192 (fname -> IDENTIFIER .)


state 86

    (193) fname -> RANGE_INCLUSIVE .

    IF              reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    WHILE           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    UNLESS          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    UNTIL           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    TERM            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    NUMBER          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    LPAREN          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    $end            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    RESCUE          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    RPAREN          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    WHEN            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    RKEY            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    LKEY            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    END             reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    ELSIF           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    ELSE            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    ENSURE          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    IDENTIFIER      reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    RANGE_INCLUSIVE reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    OR_SYMBOL       reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    BINARY_XOR_OP   reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    BINARY_AND_OP   reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    COMBINED_COMPARISON_OP reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    EQUAL           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    CASE_EQUALITY   reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    MATCHED_STRINGS_OP reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    GREATERTHAN     reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    GREATERTHANEQUAL reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    LESSERTHAN      reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    LESSERTHANEQUAL reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    PLUS            reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    MINUS           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    TIMES           reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    DIVIDE          reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    MOD             reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    POW             reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    COMPLEMENT_OP   reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    OVERLOAD_PLUS   reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    OVERLOAD_MINUS  reduce using rule 193 (fname -> RANGE_INCLUSIVE .)
    LBRACKET        reduce using rule 193 (fname -> RANGE_INCLUSIVE .)


state 87

    (194) fname -> OR_SYMBOL .

    IF              reduce using rule 194 (fname -> OR_SYMBOL .)
    WHILE           reduce using rule 194 (fname -> OR_SYMBOL .)
    UNLESS          reduce using rule 194 (fname -> OR_SYMBOL .)
    UNTIL           reduce using rule 194 (fname -> OR_SYMBOL .)
    TERM            reduce using rule 194 (fname -> OR_SYMBOL .)
    NUMBER          reduce using rule 194 (fname -> OR_SYMBOL .)
    LPAREN          reduce using rule 194 (fname -> OR_SYMBOL .)
    $end            reduce using rule 194 (fname -> OR_SYMBOL .)
    RESCUE          reduce using rule 194 (fname -> OR_SYMBOL .)
    RPAREN          reduce using rule 194 (fname -> OR_SYMBOL .)
    WHEN            reduce using rule 194 (fname -> OR_SYMBOL .)
    RKEY            reduce using rule 194 (fname -> OR_SYMBOL .)
    LKEY            reduce using rule 194 (fname -> OR_SYMBOL .)
    END             reduce using rule 194 (fname -> OR_SYMBOL .)
    ELSIF           reduce using rule 194 (fname -> OR_SYMBOL .)
    ELSE            reduce using rule 194 (fname -> OR_SYMBOL .)
    ENSURE          reduce using rule 194 (fname -> OR_SYMBOL .)
    IDENTIFIER      reduce using rule 194 (fname -> OR_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 194 (fname -> OR_SYMBOL .)
    OR_SYMBOL       reduce using rule 194 (fname -> OR_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 194 (fname -> OR_SYMBOL .)
    BINARY_AND_OP   reduce using rule 194 (fname -> OR_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 194 (fname -> OR_SYMBOL .)
    EQUAL           reduce using rule 194 (fname -> OR_SYMBOL .)
    CASE_EQUALITY   reduce using rule 194 (fname -> OR_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 194 (fname -> OR_SYMBOL .)
    GREATERTHAN     reduce using rule 194 (fname -> OR_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 194 (fname -> OR_SYMBOL .)
    LESSERTHAN      reduce using rule 194 (fname -> OR_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 194 (fname -> OR_SYMBOL .)
    PLUS            reduce using rule 194 (fname -> OR_SYMBOL .)
    MINUS           reduce using rule 194 (fname -> OR_SYMBOL .)
    TIMES           reduce using rule 194 (fname -> OR_SYMBOL .)
    DIVIDE          reduce using rule 194 (fname -> OR_SYMBOL .)
    MOD             reduce using rule 194 (fname -> OR_SYMBOL .)
    POW             reduce using rule 194 (fname -> OR_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 194 (fname -> OR_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 194 (fname -> OR_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 194 (fname -> OR_SYMBOL .)
    OVERLOAD_PLUS   reduce using rule 194 (fname -> OR_SYMBOL .)
    OVERLOAD_MINUS  reduce using rule 194 (fname -> OR_SYMBOL .)
    LBRACKET        reduce using rule 194 (fname -> OR_SYMBOL .)


state 88

    (195) fname -> BINARY_XOR_OP .

    IF              reduce using rule 195 (fname -> BINARY_XOR_OP .)
    WHILE           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    UNLESS          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    UNTIL           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    TERM            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    NUMBER          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    LPAREN          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    $end            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    RESCUE          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    RPAREN          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    WHEN            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    RKEY            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    LKEY            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    END             reduce using rule 195 (fname -> BINARY_XOR_OP .)
    ELSIF           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    ELSE            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    ENSURE          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    IDENTIFIER      reduce using rule 195 (fname -> BINARY_XOR_OP .)
    RANGE_INCLUSIVE reduce using rule 195 (fname -> BINARY_XOR_OP .)
    OR_SYMBOL       reduce using rule 195 (fname -> BINARY_XOR_OP .)
    BINARY_XOR_OP   reduce using rule 195 (fname -> BINARY_XOR_OP .)
    BINARY_AND_OP   reduce using rule 195 (fname -> BINARY_XOR_OP .)
    COMBINED_COMPARISON_OP reduce using rule 195 (fname -> BINARY_XOR_OP .)
    EQUAL           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    CASE_EQUALITY   reduce using rule 195 (fname -> BINARY_XOR_OP .)
    MATCHED_STRINGS_OP reduce using rule 195 (fname -> BINARY_XOR_OP .)
    GREATERTHAN     reduce using rule 195 (fname -> BINARY_XOR_OP .)
    GREATERTHANEQUAL reduce using rule 195 (fname -> BINARY_XOR_OP .)
    LESSERTHAN      reduce using rule 195 (fname -> BINARY_XOR_OP .)
    LESSERTHANEQUAL reduce using rule 195 (fname -> BINARY_XOR_OP .)
    PLUS            reduce using rule 195 (fname -> BINARY_XOR_OP .)
    MINUS           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    TIMES           reduce using rule 195 (fname -> BINARY_XOR_OP .)
    DIVIDE          reduce using rule 195 (fname -> BINARY_XOR_OP .)
    MOD             reduce using rule 195 (fname -> BINARY_XOR_OP .)
    POW             reduce using rule 195 (fname -> BINARY_XOR_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 195 (fname -> BINARY_XOR_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 195 (fname -> BINARY_XOR_OP .)
    COMPLEMENT_OP   reduce using rule 195 (fname -> BINARY_XOR_OP .)
    OVERLOAD_PLUS   reduce using rule 195 (fname -> BINARY_XOR_OP .)
    OVERLOAD_MINUS  reduce using rule 195 (fname -> BINARY_XOR_OP .)
    LBRACKET        reduce using rule 195 (fname -> BINARY_XOR_OP .)


state 89

    (196) fname -> BINARY_AND_OP .

    IF              reduce using rule 196 (fname -> BINARY_AND_OP .)
    WHILE           reduce using rule 196 (fname -> BINARY_AND_OP .)
    UNLESS          reduce using rule 196 (fname -> BINARY_AND_OP .)
    UNTIL           reduce using rule 196 (fname -> BINARY_AND_OP .)
    TERM            reduce using rule 196 (fname -> BINARY_AND_OP .)
    NUMBER          reduce using rule 196 (fname -> BINARY_AND_OP .)
    LPAREN          reduce using rule 196 (fname -> BINARY_AND_OP .)
    $end            reduce using rule 196 (fname -> BINARY_AND_OP .)
    RESCUE          reduce using rule 196 (fname -> BINARY_AND_OP .)
    RPAREN          reduce using rule 196 (fname -> BINARY_AND_OP .)
    WHEN            reduce using rule 196 (fname -> BINARY_AND_OP .)
    RKEY            reduce using rule 196 (fname -> BINARY_AND_OP .)
    LKEY            reduce using rule 196 (fname -> BINARY_AND_OP .)
    END             reduce using rule 196 (fname -> BINARY_AND_OP .)
    ELSIF           reduce using rule 196 (fname -> BINARY_AND_OP .)
    ELSE            reduce using rule 196 (fname -> BINARY_AND_OP .)
    ENSURE          reduce using rule 196 (fname -> BINARY_AND_OP .)
    IDENTIFIER      reduce using rule 196 (fname -> BINARY_AND_OP .)
    RANGE_INCLUSIVE reduce using rule 196 (fname -> BINARY_AND_OP .)
    OR_SYMBOL       reduce using rule 196 (fname -> BINARY_AND_OP .)
    BINARY_XOR_OP   reduce using rule 196 (fname -> BINARY_AND_OP .)
    BINARY_AND_OP   reduce using rule 196 (fname -> BINARY_AND_OP .)
    COMBINED_COMPARISON_OP reduce using rule 196 (fname -> BINARY_AND_OP .)
    EQUAL           reduce using rule 196 (fname -> BINARY_AND_OP .)
    CASE_EQUALITY   reduce using rule 196 (fname -> BINARY_AND_OP .)
    MATCHED_STRINGS_OP reduce using rule 196 (fname -> BINARY_AND_OP .)
    GREATERTHAN     reduce using rule 196 (fname -> BINARY_AND_OP .)
    GREATERTHANEQUAL reduce using rule 196 (fname -> BINARY_AND_OP .)
    LESSERTHAN      reduce using rule 196 (fname -> BINARY_AND_OP .)
    LESSERTHANEQUAL reduce using rule 196 (fname -> BINARY_AND_OP .)
    PLUS            reduce using rule 196 (fname -> BINARY_AND_OP .)
    MINUS           reduce using rule 196 (fname -> BINARY_AND_OP .)
    TIMES           reduce using rule 196 (fname -> BINARY_AND_OP .)
    DIVIDE          reduce using rule 196 (fname -> BINARY_AND_OP .)
    MOD             reduce using rule 196 (fname -> BINARY_AND_OP .)
    POW             reduce using rule 196 (fname -> BINARY_AND_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 196 (fname -> BINARY_AND_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 196 (fname -> BINARY_AND_OP .)
    COMPLEMENT_OP   reduce using rule 196 (fname -> BINARY_AND_OP .)
    OVERLOAD_PLUS   reduce using rule 196 (fname -> BINARY_AND_OP .)
    OVERLOAD_MINUS  reduce using rule 196 (fname -> BINARY_AND_OP .)
    LBRACKET        reduce using rule 196 (fname -> BINARY_AND_OP .)


state 90

    (197) fname -> COMBINED_COMPARISON_OP .

    IF              reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    WHILE           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    UNLESS          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    UNTIL           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    TERM            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    NUMBER          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    LPAREN          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    $end            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    RESCUE          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    RPAREN          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    WHEN            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    RKEY            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    LKEY            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    END             reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    ELSIF           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    ELSE            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    ENSURE          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    IDENTIFIER      reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    RANGE_INCLUSIVE reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    OR_SYMBOL       reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_XOR_OP   reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_AND_OP   reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    COMBINED_COMPARISON_OP reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    EQUAL           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    CASE_EQUALITY   reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    MATCHED_STRINGS_OP reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    GREATERTHAN     reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    GREATERTHANEQUAL reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    LESSERTHAN      reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    LESSERTHANEQUAL reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    PLUS            reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    MINUS           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    TIMES           reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    DIVIDE          reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    MOD             reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    POW             reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    COMPLEMENT_OP   reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    OVERLOAD_PLUS   reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    OVERLOAD_MINUS  reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)
    LBRACKET        reduce using rule 197 (fname -> COMBINED_COMPARISON_OP .)


state 91

    (198) fname -> EQUAL .

    IF              reduce using rule 198 (fname -> EQUAL .)
    WHILE           reduce using rule 198 (fname -> EQUAL .)
    UNLESS          reduce using rule 198 (fname -> EQUAL .)
    UNTIL           reduce using rule 198 (fname -> EQUAL .)
    TERM            reduce using rule 198 (fname -> EQUAL .)
    NUMBER          reduce using rule 198 (fname -> EQUAL .)
    LPAREN          reduce using rule 198 (fname -> EQUAL .)
    $end            reduce using rule 198 (fname -> EQUAL .)
    RESCUE          reduce using rule 198 (fname -> EQUAL .)
    RPAREN          reduce using rule 198 (fname -> EQUAL .)
    WHEN            reduce using rule 198 (fname -> EQUAL .)
    RKEY            reduce using rule 198 (fname -> EQUAL .)
    LKEY            reduce using rule 198 (fname -> EQUAL .)
    END             reduce using rule 198 (fname -> EQUAL .)
    ELSIF           reduce using rule 198 (fname -> EQUAL .)
    ELSE            reduce using rule 198 (fname -> EQUAL .)
    ENSURE          reduce using rule 198 (fname -> EQUAL .)
    IDENTIFIER      reduce using rule 198 (fname -> EQUAL .)
    RANGE_INCLUSIVE reduce using rule 198 (fname -> EQUAL .)
    OR_SYMBOL       reduce using rule 198 (fname -> EQUAL .)
    BINARY_XOR_OP   reduce using rule 198 (fname -> EQUAL .)
    BINARY_AND_OP   reduce using rule 198 (fname -> EQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 198 (fname -> EQUAL .)
    EQUAL           reduce using rule 198 (fname -> EQUAL .)
    CASE_EQUALITY   reduce using rule 198 (fname -> EQUAL .)
    MATCHED_STRINGS_OP reduce using rule 198 (fname -> EQUAL .)
    GREATERTHAN     reduce using rule 198 (fname -> EQUAL .)
    GREATERTHANEQUAL reduce using rule 198 (fname -> EQUAL .)
    LESSERTHAN      reduce using rule 198 (fname -> EQUAL .)
    LESSERTHANEQUAL reduce using rule 198 (fname -> EQUAL .)
    PLUS            reduce using rule 198 (fname -> EQUAL .)
    MINUS           reduce using rule 198 (fname -> EQUAL .)
    TIMES           reduce using rule 198 (fname -> EQUAL .)
    DIVIDE          reduce using rule 198 (fname -> EQUAL .)
    MOD             reduce using rule 198 (fname -> EQUAL .)
    POW             reduce using rule 198 (fname -> EQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 198 (fname -> EQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 198 (fname -> EQUAL .)
    COMPLEMENT_OP   reduce using rule 198 (fname -> EQUAL .)
    OVERLOAD_PLUS   reduce using rule 198 (fname -> EQUAL .)
    OVERLOAD_MINUS  reduce using rule 198 (fname -> EQUAL .)
    LBRACKET        reduce using rule 198 (fname -> EQUAL .)


state 92

    (199) fname -> CASE_EQUALITY .

    IF              reduce using rule 199 (fname -> CASE_EQUALITY .)
    WHILE           reduce using rule 199 (fname -> CASE_EQUALITY .)
    UNLESS          reduce using rule 199 (fname -> CASE_EQUALITY .)
    UNTIL           reduce using rule 199 (fname -> CASE_EQUALITY .)
    TERM            reduce using rule 199 (fname -> CASE_EQUALITY .)
    NUMBER          reduce using rule 199 (fname -> CASE_EQUALITY .)
    LPAREN          reduce using rule 199 (fname -> CASE_EQUALITY .)
    $end            reduce using rule 199 (fname -> CASE_EQUALITY .)
    RESCUE          reduce using rule 199 (fname -> CASE_EQUALITY .)
    RPAREN          reduce using rule 199 (fname -> CASE_EQUALITY .)
    WHEN            reduce using rule 199 (fname -> CASE_EQUALITY .)
    RKEY            reduce using rule 199 (fname -> CASE_EQUALITY .)
    LKEY            reduce using rule 199 (fname -> CASE_EQUALITY .)
    END             reduce using rule 199 (fname -> CASE_EQUALITY .)
    ELSIF           reduce using rule 199 (fname -> CASE_EQUALITY .)
    ELSE            reduce using rule 199 (fname -> CASE_EQUALITY .)
    ENSURE          reduce using rule 199 (fname -> CASE_EQUALITY .)
    IDENTIFIER      reduce using rule 199 (fname -> CASE_EQUALITY .)
    RANGE_INCLUSIVE reduce using rule 199 (fname -> CASE_EQUALITY .)
    OR_SYMBOL       reduce using rule 199 (fname -> CASE_EQUALITY .)
    BINARY_XOR_OP   reduce using rule 199 (fname -> CASE_EQUALITY .)
    BINARY_AND_OP   reduce using rule 199 (fname -> CASE_EQUALITY .)
    COMBINED_COMPARISON_OP reduce using rule 199 (fname -> CASE_EQUALITY .)
    EQUAL           reduce using rule 199 (fname -> CASE_EQUALITY .)
    CASE_EQUALITY   reduce using rule 199 (fname -> CASE_EQUALITY .)
    MATCHED_STRINGS_OP reduce using rule 199 (fname -> CASE_EQUALITY .)
    GREATERTHAN     reduce using rule 199 (fname -> CASE_EQUALITY .)
    GREATERTHANEQUAL reduce using rule 199 (fname -> CASE_EQUALITY .)
    LESSERTHAN      reduce using rule 199 (fname -> CASE_EQUALITY .)
    LESSERTHANEQUAL reduce using rule 199 (fname -> CASE_EQUALITY .)
    PLUS            reduce using rule 199 (fname -> CASE_EQUALITY .)
    MINUS           reduce using rule 199 (fname -> CASE_EQUALITY .)
    TIMES           reduce using rule 199 (fname -> CASE_EQUALITY .)
    DIVIDE          reduce using rule 199 (fname -> CASE_EQUALITY .)
    MOD             reduce using rule 199 (fname -> CASE_EQUALITY .)
    POW             reduce using rule 199 (fname -> CASE_EQUALITY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 199 (fname -> CASE_EQUALITY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 199 (fname -> CASE_EQUALITY .)
    COMPLEMENT_OP   reduce using rule 199 (fname -> CASE_EQUALITY .)
    OVERLOAD_PLUS   reduce using rule 199 (fname -> CASE_EQUALITY .)
    OVERLOAD_MINUS  reduce using rule 199 (fname -> CASE_EQUALITY .)
    LBRACKET        reduce using rule 199 (fname -> CASE_EQUALITY .)


state 93

    (200) fname -> MATCHED_STRINGS_OP .

    IF              reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    WHILE           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    UNLESS          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    UNTIL           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    TERM            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    NUMBER          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    LPAREN          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    $end            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    RESCUE          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    RPAREN          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    WHEN            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    RKEY            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    LKEY            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    END             reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    ELSIF           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    ELSE            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    ENSURE          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    IDENTIFIER      reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    RANGE_INCLUSIVE reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    OR_SYMBOL       reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    BINARY_XOR_OP   reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    BINARY_AND_OP   reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    COMBINED_COMPARISON_OP reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    EQUAL           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    CASE_EQUALITY   reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    MATCHED_STRINGS_OP reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    GREATERTHAN     reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    GREATERTHANEQUAL reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    LESSERTHAN      reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    LESSERTHANEQUAL reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    PLUS            reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    MINUS           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    TIMES           reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    DIVIDE          reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    MOD             reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    POW             reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    COMPLEMENT_OP   reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    OVERLOAD_PLUS   reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    OVERLOAD_MINUS  reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)
    LBRACKET        reduce using rule 200 (fname -> MATCHED_STRINGS_OP .)


state 94

    (201) fname -> GREATERTHAN .

    IF              reduce using rule 201 (fname -> GREATERTHAN .)
    WHILE           reduce using rule 201 (fname -> GREATERTHAN .)
    UNLESS          reduce using rule 201 (fname -> GREATERTHAN .)
    UNTIL           reduce using rule 201 (fname -> GREATERTHAN .)
    TERM            reduce using rule 201 (fname -> GREATERTHAN .)
    NUMBER          reduce using rule 201 (fname -> GREATERTHAN .)
    LPAREN          reduce using rule 201 (fname -> GREATERTHAN .)
    $end            reduce using rule 201 (fname -> GREATERTHAN .)
    RESCUE          reduce using rule 201 (fname -> GREATERTHAN .)
    RPAREN          reduce using rule 201 (fname -> GREATERTHAN .)
    WHEN            reduce using rule 201 (fname -> GREATERTHAN .)
    RKEY            reduce using rule 201 (fname -> GREATERTHAN .)
    LKEY            reduce using rule 201 (fname -> GREATERTHAN .)
    END             reduce using rule 201 (fname -> GREATERTHAN .)
    ELSIF           reduce using rule 201 (fname -> GREATERTHAN .)
    ELSE            reduce using rule 201 (fname -> GREATERTHAN .)
    ENSURE          reduce using rule 201 (fname -> GREATERTHAN .)
    IDENTIFIER      reduce using rule 201 (fname -> GREATERTHAN .)
    RANGE_INCLUSIVE reduce using rule 201 (fname -> GREATERTHAN .)
    OR_SYMBOL       reduce using rule 201 (fname -> GREATERTHAN .)
    BINARY_XOR_OP   reduce using rule 201 (fname -> GREATERTHAN .)
    BINARY_AND_OP   reduce using rule 201 (fname -> GREATERTHAN .)
    COMBINED_COMPARISON_OP reduce using rule 201 (fname -> GREATERTHAN .)
    EQUAL           reduce using rule 201 (fname -> GREATERTHAN .)
    CASE_EQUALITY   reduce using rule 201 (fname -> GREATERTHAN .)
    MATCHED_STRINGS_OP reduce using rule 201 (fname -> GREATERTHAN .)
    GREATERTHAN     reduce using rule 201 (fname -> GREATERTHAN .)
    GREATERTHANEQUAL reduce using rule 201 (fname -> GREATERTHAN .)
    LESSERTHAN      reduce using rule 201 (fname -> GREATERTHAN .)
    LESSERTHANEQUAL reduce using rule 201 (fname -> GREATERTHAN .)
    PLUS            reduce using rule 201 (fname -> GREATERTHAN .)
    MINUS           reduce using rule 201 (fname -> GREATERTHAN .)
    TIMES           reduce using rule 201 (fname -> GREATERTHAN .)
    DIVIDE          reduce using rule 201 (fname -> GREATERTHAN .)
    MOD             reduce using rule 201 (fname -> GREATERTHAN .)
    POW             reduce using rule 201 (fname -> GREATERTHAN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 201 (fname -> GREATERTHAN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 201 (fname -> GREATERTHAN .)
    COMPLEMENT_OP   reduce using rule 201 (fname -> GREATERTHAN .)
    OVERLOAD_PLUS   reduce using rule 201 (fname -> GREATERTHAN .)
    OVERLOAD_MINUS  reduce using rule 201 (fname -> GREATERTHAN .)
    LBRACKET        reduce using rule 201 (fname -> GREATERTHAN .)


state 95

    (202) fname -> GREATERTHANEQUAL .

    IF              reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    WHILE           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    UNLESS          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    UNTIL           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    TERM            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    NUMBER          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    LPAREN          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    $end            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    RESCUE          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    RPAREN          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    WHEN            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    RKEY            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    LKEY            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    END             reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    ELSIF           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    ELSE            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    ENSURE          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    IDENTIFIER      reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    RANGE_INCLUSIVE reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    OR_SYMBOL       reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    BINARY_XOR_OP   reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    BINARY_AND_OP   reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    EQUAL           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    CASE_EQUALITY   reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    MATCHED_STRINGS_OP reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    GREATERTHAN     reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    GREATERTHANEQUAL reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    LESSERTHAN      reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    LESSERTHANEQUAL reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    PLUS            reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    MINUS           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    TIMES           reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    DIVIDE          reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    MOD             reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    POW             reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    COMPLEMENT_OP   reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    OVERLOAD_PLUS   reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    OVERLOAD_MINUS  reduce using rule 202 (fname -> GREATERTHANEQUAL .)
    LBRACKET        reduce using rule 202 (fname -> GREATERTHANEQUAL .)


state 96

    (203) fname -> LESSERTHAN .

    IF              reduce using rule 203 (fname -> LESSERTHAN .)
    WHILE           reduce using rule 203 (fname -> LESSERTHAN .)
    UNLESS          reduce using rule 203 (fname -> LESSERTHAN .)
    UNTIL           reduce using rule 203 (fname -> LESSERTHAN .)
    TERM            reduce using rule 203 (fname -> LESSERTHAN .)
    NUMBER          reduce using rule 203 (fname -> LESSERTHAN .)
    LPAREN          reduce using rule 203 (fname -> LESSERTHAN .)
    $end            reduce using rule 203 (fname -> LESSERTHAN .)
    RESCUE          reduce using rule 203 (fname -> LESSERTHAN .)
    RPAREN          reduce using rule 203 (fname -> LESSERTHAN .)
    WHEN            reduce using rule 203 (fname -> LESSERTHAN .)
    RKEY            reduce using rule 203 (fname -> LESSERTHAN .)
    LKEY            reduce using rule 203 (fname -> LESSERTHAN .)
    END             reduce using rule 203 (fname -> LESSERTHAN .)
    ELSIF           reduce using rule 203 (fname -> LESSERTHAN .)
    ELSE            reduce using rule 203 (fname -> LESSERTHAN .)
    ENSURE          reduce using rule 203 (fname -> LESSERTHAN .)
    IDENTIFIER      reduce using rule 203 (fname -> LESSERTHAN .)
    RANGE_INCLUSIVE reduce using rule 203 (fname -> LESSERTHAN .)
    OR_SYMBOL       reduce using rule 203 (fname -> LESSERTHAN .)
    BINARY_XOR_OP   reduce using rule 203 (fname -> LESSERTHAN .)
    BINARY_AND_OP   reduce using rule 203 (fname -> LESSERTHAN .)
    COMBINED_COMPARISON_OP reduce using rule 203 (fname -> LESSERTHAN .)
    EQUAL           reduce using rule 203 (fname -> LESSERTHAN .)
    CASE_EQUALITY   reduce using rule 203 (fname -> LESSERTHAN .)
    MATCHED_STRINGS_OP reduce using rule 203 (fname -> LESSERTHAN .)
    GREATERTHAN     reduce using rule 203 (fname -> LESSERTHAN .)
    GREATERTHANEQUAL reduce using rule 203 (fname -> LESSERTHAN .)
    LESSERTHAN      reduce using rule 203 (fname -> LESSERTHAN .)
    LESSERTHANEQUAL reduce using rule 203 (fname -> LESSERTHAN .)
    PLUS            reduce using rule 203 (fname -> LESSERTHAN .)
    MINUS           reduce using rule 203 (fname -> LESSERTHAN .)
    TIMES           reduce using rule 203 (fname -> LESSERTHAN .)
    DIVIDE          reduce using rule 203 (fname -> LESSERTHAN .)
    MOD             reduce using rule 203 (fname -> LESSERTHAN .)
    POW             reduce using rule 203 (fname -> LESSERTHAN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 203 (fname -> LESSERTHAN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 203 (fname -> LESSERTHAN .)
    COMPLEMENT_OP   reduce using rule 203 (fname -> LESSERTHAN .)
    OVERLOAD_PLUS   reduce using rule 203 (fname -> LESSERTHAN .)
    OVERLOAD_MINUS  reduce using rule 203 (fname -> LESSERTHAN .)
    LBRACKET        reduce using rule 203 (fname -> LESSERTHAN .)


state 97

    (204) fname -> LESSERTHANEQUAL .

    IF              reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    WHILE           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    UNLESS          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    UNTIL           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    TERM            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    NUMBER          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    LPAREN          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    $end            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    RESCUE          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    RPAREN          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    WHEN            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    RKEY            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    LKEY            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    END             reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    ELSIF           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    ELSE            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    ENSURE          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    IDENTIFIER      reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    RANGE_INCLUSIVE reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    OR_SYMBOL       reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    BINARY_XOR_OP   reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    BINARY_AND_OP   reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    COMBINED_COMPARISON_OP reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    EQUAL           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    CASE_EQUALITY   reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    MATCHED_STRINGS_OP reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    GREATERTHAN     reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    GREATERTHANEQUAL reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    LESSERTHAN      reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    LESSERTHANEQUAL reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    PLUS            reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    MINUS           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    TIMES           reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    DIVIDE          reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    MOD             reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    POW             reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    COMPLEMENT_OP   reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    OVERLOAD_PLUS   reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    OVERLOAD_MINUS  reduce using rule 204 (fname -> LESSERTHANEQUAL .)
    LBRACKET        reduce using rule 204 (fname -> LESSERTHANEQUAL .)


state 98

    (205) fname -> PLUS .

    IF              reduce using rule 205 (fname -> PLUS .)
    WHILE           reduce using rule 205 (fname -> PLUS .)
    UNLESS          reduce using rule 205 (fname -> PLUS .)
    UNTIL           reduce using rule 205 (fname -> PLUS .)
    TERM            reduce using rule 205 (fname -> PLUS .)
    NUMBER          reduce using rule 205 (fname -> PLUS .)
    LPAREN          reduce using rule 205 (fname -> PLUS .)
    $end            reduce using rule 205 (fname -> PLUS .)
    RESCUE          reduce using rule 205 (fname -> PLUS .)
    RPAREN          reduce using rule 205 (fname -> PLUS .)
    WHEN            reduce using rule 205 (fname -> PLUS .)
    RKEY            reduce using rule 205 (fname -> PLUS .)
    LKEY            reduce using rule 205 (fname -> PLUS .)
    END             reduce using rule 205 (fname -> PLUS .)
    ELSIF           reduce using rule 205 (fname -> PLUS .)
    ELSE            reduce using rule 205 (fname -> PLUS .)
    ENSURE          reduce using rule 205 (fname -> PLUS .)
    IDENTIFIER      reduce using rule 205 (fname -> PLUS .)
    RANGE_INCLUSIVE reduce using rule 205 (fname -> PLUS .)
    OR_SYMBOL       reduce using rule 205 (fname -> PLUS .)
    BINARY_XOR_OP   reduce using rule 205 (fname -> PLUS .)
    BINARY_AND_OP   reduce using rule 205 (fname -> PLUS .)
    COMBINED_COMPARISON_OP reduce using rule 205 (fname -> PLUS .)
    EQUAL           reduce using rule 205 (fname -> PLUS .)
    CASE_EQUALITY   reduce using rule 205 (fname -> PLUS .)
    MATCHED_STRINGS_OP reduce using rule 205 (fname -> PLUS .)
    GREATERTHAN     reduce using rule 205 (fname -> PLUS .)
    GREATERTHANEQUAL reduce using rule 205 (fname -> PLUS .)
    LESSERTHAN      reduce using rule 205 (fname -> PLUS .)
    LESSERTHANEQUAL reduce using rule 205 (fname -> PLUS .)
    PLUS            reduce using rule 205 (fname -> PLUS .)
    MINUS           reduce using rule 205 (fname -> PLUS .)
    TIMES           reduce using rule 205 (fname -> PLUS .)
    DIVIDE          reduce using rule 205 (fname -> PLUS .)
    MOD             reduce using rule 205 (fname -> PLUS .)
    POW             reduce using rule 205 (fname -> PLUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 205 (fname -> PLUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 205 (fname -> PLUS .)
    COMPLEMENT_OP   reduce using rule 205 (fname -> PLUS .)
    OVERLOAD_PLUS   reduce using rule 205 (fname -> PLUS .)
    OVERLOAD_MINUS  reduce using rule 205 (fname -> PLUS .)
    LBRACKET        reduce using rule 205 (fname -> PLUS .)


state 99

    (206) fname -> MINUS .

    IF              reduce using rule 206 (fname -> MINUS .)
    WHILE           reduce using rule 206 (fname -> MINUS .)
    UNLESS          reduce using rule 206 (fname -> MINUS .)
    UNTIL           reduce using rule 206 (fname -> MINUS .)
    TERM            reduce using rule 206 (fname -> MINUS .)
    NUMBER          reduce using rule 206 (fname -> MINUS .)
    LPAREN          reduce using rule 206 (fname -> MINUS .)
    $end            reduce using rule 206 (fname -> MINUS .)
    RESCUE          reduce using rule 206 (fname -> MINUS .)
    RPAREN          reduce using rule 206 (fname -> MINUS .)
    WHEN            reduce using rule 206 (fname -> MINUS .)
    RKEY            reduce using rule 206 (fname -> MINUS .)
    LKEY            reduce using rule 206 (fname -> MINUS .)
    END             reduce using rule 206 (fname -> MINUS .)
    ELSIF           reduce using rule 206 (fname -> MINUS .)
    ELSE            reduce using rule 206 (fname -> MINUS .)
    ENSURE          reduce using rule 206 (fname -> MINUS .)
    IDENTIFIER      reduce using rule 206 (fname -> MINUS .)
    RANGE_INCLUSIVE reduce using rule 206 (fname -> MINUS .)
    OR_SYMBOL       reduce using rule 206 (fname -> MINUS .)
    BINARY_XOR_OP   reduce using rule 206 (fname -> MINUS .)
    BINARY_AND_OP   reduce using rule 206 (fname -> MINUS .)
    COMBINED_COMPARISON_OP reduce using rule 206 (fname -> MINUS .)
    EQUAL           reduce using rule 206 (fname -> MINUS .)
    CASE_EQUALITY   reduce using rule 206 (fname -> MINUS .)
    MATCHED_STRINGS_OP reduce using rule 206 (fname -> MINUS .)
    GREATERTHAN     reduce using rule 206 (fname -> MINUS .)
    GREATERTHANEQUAL reduce using rule 206 (fname -> MINUS .)
    LESSERTHAN      reduce using rule 206 (fname -> MINUS .)
    LESSERTHANEQUAL reduce using rule 206 (fname -> MINUS .)
    PLUS            reduce using rule 206 (fname -> MINUS .)
    MINUS           reduce using rule 206 (fname -> MINUS .)
    TIMES           reduce using rule 206 (fname -> MINUS .)
    DIVIDE          reduce using rule 206 (fname -> MINUS .)
    MOD             reduce using rule 206 (fname -> MINUS .)
    POW             reduce using rule 206 (fname -> MINUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 206 (fname -> MINUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 206 (fname -> MINUS .)
    COMPLEMENT_OP   reduce using rule 206 (fname -> MINUS .)
    OVERLOAD_PLUS   reduce using rule 206 (fname -> MINUS .)
    OVERLOAD_MINUS  reduce using rule 206 (fname -> MINUS .)
    LBRACKET        reduce using rule 206 (fname -> MINUS .)


state 100

    (207) fname -> TIMES .

    IF              reduce using rule 207 (fname -> TIMES .)
    WHILE           reduce using rule 207 (fname -> TIMES .)
    UNLESS          reduce using rule 207 (fname -> TIMES .)
    UNTIL           reduce using rule 207 (fname -> TIMES .)
    TERM            reduce using rule 207 (fname -> TIMES .)
    NUMBER          reduce using rule 207 (fname -> TIMES .)
    LPAREN          reduce using rule 207 (fname -> TIMES .)
    $end            reduce using rule 207 (fname -> TIMES .)
    RESCUE          reduce using rule 207 (fname -> TIMES .)
    RPAREN          reduce using rule 207 (fname -> TIMES .)
    WHEN            reduce using rule 207 (fname -> TIMES .)
    RKEY            reduce using rule 207 (fname -> TIMES .)
    LKEY            reduce using rule 207 (fname -> TIMES .)
    END             reduce using rule 207 (fname -> TIMES .)
    ELSIF           reduce using rule 207 (fname -> TIMES .)
    ELSE            reduce using rule 207 (fname -> TIMES .)
    ENSURE          reduce using rule 207 (fname -> TIMES .)
    IDENTIFIER      reduce using rule 207 (fname -> TIMES .)
    RANGE_INCLUSIVE reduce using rule 207 (fname -> TIMES .)
    OR_SYMBOL       reduce using rule 207 (fname -> TIMES .)
    BINARY_XOR_OP   reduce using rule 207 (fname -> TIMES .)
    BINARY_AND_OP   reduce using rule 207 (fname -> TIMES .)
    COMBINED_COMPARISON_OP reduce using rule 207 (fname -> TIMES .)
    EQUAL           reduce using rule 207 (fname -> TIMES .)
    CASE_EQUALITY   reduce using rule 207 (fname -> TIMES .)
    MATCHED_STRINGS_OP reduce using rule 207 (fname -> TIMES .)
    GREATERTHAN     reduce using rule 207 (fname -> TIMES .)
    GREATERTHANEQUAL reduce using rule 207 (fname -> TIMES .)
    LESSERTHAN      reduce using rule 207 (fname -> TIMES .)
    LESSERTHANEQUAL reduce using rule 207 (fname -> TIMES .)
    PLUS            reduce using rule 207 (fname -> TIMES .)
    MINUS           reduce using rule 207 (fname -> TIMES .)
    TIMES           reduce using rule 207 (fname -> TIMES .)
    DIVIDE          reduce using rule 207 (fname -> TIMES .)
    MOD             reduce using rule 207 (fname -> TIMES .)
    POW             reduce using rule 207 (fname -> TIMES .)
    BINARY_LEFT_SHIFT_OP reduce using rule 207 (fname -> TIMES .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 207 (fname -> TIMES .)
    COMPLEMENT_OP   reduce using rule 207 (fname -> TIMES .)
    OVERLOAD_PLUS   reduce using rule 207 (fname -> TIMES .)
    OVERLOAD_MINUS  reduce using rule 207 (fname -> TIMES .)
    LBRACKET        reduce using rule 207 (fname -> TIMES .)


state 101

    (208) fname -> DIVIDE .

    IF              reduce using rule 208 (fname -> DIVIDE .)
    WHILE           reduce using rule 208 (fname -> DIVIDE .)
    UNLESS          reduce using rule 208 (fname -> DIVIDE .)
    UNTIL           reduce using rule 208 (fname -> DIVIDE .)
    TERM            reduce using rule 208 (fname -> DIVIDE .)
    NUMBER          reduce using rule 208 (fname -> DIVIDE .)
    LPAREN          reduce using rule 208 (fname -> DIVIDE .)
    $end            reduce using rule 208 (fname -> DIVIDE .)
    RESCUE          reduce using rule 208 (fname -> DIVIDE .)
    RPAREN          reduce using rule 208 (fname -> DIVIDE .)
    WHEN            reduce using rule 208 (fname -> DIVIDE .)
    RKEY            reduce using rule 208 (fname -> DIVIDE .)
    LKEY            reduce using rule 208 (fname -> DIVIDE .)
    END             reduce using rule 208 (fname -> DIVIDE .)
    ELSIF           reduce using rule 208 (fname -> DIVIDE .)
    ELSE            reduce using rule 208 (fname -> DIVIDE .)
    ENSURE          reduce using rule 208 (fname -> DIVIDE .)
    IDENTIFIER      reduce using rule 208 (fname -> DIVIDE .)
    RANGE_INCLUSIVE reduce using rule 208 (fname -> DIVIDE .)
    OR_SYMBOL       reduce using rule 208 (fname -> DIVIDE .)
    BINARY_XOR_OP   reduce using rule 208 (fname -> DIVIDE .)
    BINARY_AND_OP   reduce using rule 208 (fname -> DIVIDE .)
    COMBINED_COMPARISON_OP reduce using rule 208 (fname -> DIVIDE .)
    EQUAL           reduce using rule 208 (fname -> DIVIDE .)
    CASE_EQUALITY   reduce using rule 208 (fname -> DIVIDE .)
    MATCHED_STRINGS_OP reduce using rule 208 (fname -> DIVIDE .)
    GREATERTHAN     reduce using rule 208 (fname -> DIVIDE .)
    GREATERTHANEQUAL reduce using rule 208 (fname -> DIVIDE .)
    LESSERTHAN      reduce using rule 208 (fname -> DIVIDE .)
    LESSERTHANEQUAL reduce using rule 208 (fname -> DIVIDE .)
    PLUS            reduce using rule 208 (fname -> DIVIDE .)
    MINUS           reduce using rule 208 (fname -> DIVIDE .)
    TIMES           reduce using rule 208 (fname -> DIVIDE .)
    DIVIDE          reduce using rule 208 (fname -> DIVIDE .)
    MOD             reduce using rule 208 (fname -> DIVIDE .)
    POW             reduce using rule 208 (fname -> DIVIDE .)
    BINARY_LEFT_SHIFT_OP reduce using rule 208 (fname -> DIVIDE .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 208 (fname -> DIVIDE .)
    COMPLEMENT_OP   reduce using rule 208 (fname -> DIVIDE .)
    OVERLOAD_PLUS   reduce using rule 208 (fname -> DIVIDE .)
    OVERLOAD_MINUS  reduce using rule 208 (fname -> DIVIDE .)
    LBRACKET        reduce using rule 208 (fname -> DIVIDE .)


state 102

    (209) fname -> MOD .

    IF              reduce using rule 209 (fname -> MOD .)
    WHILE           reduce using rule 209 (fname -> MOD .)
    UNLESS          reduce using rule 209 (fname -> MOD .)
    UNTIL           reduce using rule 209 (fname -> MOD .)
    TERM            reduce using rule 209 (fname -> MOD .)
    NUMBER          reduce using rule 209 (fname -> MOD .)
    LPAREN          reduce using rule 209 (fname -> MOD .)
    $end            reduce using rule 209 (fname -> MOD .)
    RESCUE          reduce using rule 209 (fname -> MOD .)
    RPAREN          reduce using rule 209 (fname -> MOD .)
    WHEN            reduce using rule 209 (fname -> MOD .)
    RKEY            reduce using rule 209 (fname -> MOD .)
    LKEY            reduce using rule 209 (fname -> MOD .)
    END             reduce using rule 209 (fname -> MOD .)
    ELSIF           reduce using rule 209 (fname -> MOD .)
    ELSE            reduce using rule 209 (fname -> MOD .)
    ENSURE          reduce using rule 209 (fname -> MOD .)
    IDENTIFIER      reduce using rule 209 (fname -> MOD .)
    RANGE_INCLUSIVE reduce using rule 209 (fname -> MOD .)
    OR_SYMBOL       reduce using rule 209 (fname -> MOD .)
    BINARY_XOR_OP   reduce using rule 209 (fname -> MOD .)
    BINARY_AND_OP   reduce using rule 209 (fname -> MOD .)
    COMBINED_COMPARISON_OP reduce using rule 209 (fname -> MOD .)
    EQUAL           reduce using rule 209 (fname -> MOD .)
    CASE_EQUALITY   reduce using rule 209 (fname -> MOD .)
    MATCHED_STRINGS_OP reduce using rule 209 (fname -> MOD .)
    GREATERTHAN     reduce using rule 209 (fname -> MOD .)
    GREATERTHANEQUAL reduce using rule 209 (fname -> MOD .)
    LESSERTHAN      reduce using rule 209 (fname -> MOD .)
    LESSERTHANEQUAL reduce using rule 209 (fname -> MOD .)
    PLUS            reduce using rule 209 (fname -> MOD .)
    MINUS           reduce using rule 209 (fname -> MOD .)
    TIMES           reduce using rule 209 (fname -> MOD .)
    DIVIDE          reduce using rule 209 (fname -> MOD .)
    MOD             reduce using rule 209 (fname -> MOD .)
    POW             reduce using rule 209 (fname -> MOD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 209 (fname -> MOD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 209 (fname -> MOD .)
    COMPLEMENT_OP   reduce using rule 209 (fname -> MOD .)
    OVERLOAD_PLUS   reduce using rule 209 (fname -> MOD .)
    OVERLOAD_MINUS  reduce using rule 209 (fname -> MOD .)
    LBRACKET        reduce using rule 209 (fname -> MOD .)


state 103

    (210) fname -> POW .

    IF              reduce using rule 210 (fname -> POW .)
    WHILE           reduce using rule 210 (fname -> POW .)
    UNLESS          reduce using rule 210 (fname -> POW .)
    UNTIL           reduce using rule 210 (fname -> POW .)
    TERM            reduce using rule 210 (fname -> POW .)
    NUMBER          reduce using rule 210 (fname -> POW .)
    LPAREN          reduce using rule 210 (fname -> POW .)
    $end            reduce using rule 210 (fname -> POW .)
    RESCUE          reduce using rule 210 (fname -> POW .)
    RPAREN          reduce using rule 210 (fname -> POW .)
    WHEN            reduce using rule 210 (fname -> POW .)
    RKEY            reduce using rule 210 (fname -> POW .)
    LKEY            reduce using rule 210 (fname -> POW .)
    END             reduce using rule 210 (fname -> POW .)
    ELSIF           reduce using rule 210 (fname -> POW .)
    ELSE            reduce using rule 210 (fname -> POW .)
    ENSURE          reduce using rule 210 (fname -> POW .)
    IDENTIFIER      reduce using rule 210 (fname -> POW .)
    RANGE_INCLUSIVE reduce using rule 210 (fname -> POW .)
    OR_SYMBOL       reduce using rule 210 (fname -> POW .)
    BINARY_XOR_OP   reduce using rule 210 (fname -> POW .)
    BINARY_AND_OP   reduce using rule 210 (fname -> POW .)
    COMBINED_COMPARISON_OP reduce using rule 210 (fname -> POW .)
    EQUAL           reduce using rule 210 (fname -> POW .)
    CASE_EQUALITY   reduce using rule 210 (fname -> POW .)
    MATCHED_STRINGS_OP reduce using rule 210 (fname -> POW .)
    GREATERTHAN     reduce using rule 210 (fname -> POW .)
    GREATERTHANEQUAL reduce using rule 210 (fname -> POW .)
    LESSERTHAN      reduce using rule 210 (fname -> POW .)
    LESSERTHANEQUAL reduce using rule 210 (fname -> POW .)
    PLUS            reduce using rule 210 (fname -> POW .)
    MINUS           reduce using rule 210 (fname -> POW .)
    TIMES           reduce using rule 210 (fname -> POW .)
    DIVIDE          reduce using rule 210 (fname -> POW .)
    MOD             reduce using rule 210 (fname -> POW .)
    POW             reduce using rule 210 (fname -> POW .)
    BINARY_LEFT_SHIFT_OP reduce using rule 210 (fname -> POW .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 210 (fname -> POW .)
    COMPLEMENT_OP   reduce using rule 210 (fname -> POW .)
    OVERLOAD_PLUS   reduce using rule 210 (fname -> POW .)
    OVERLOAD_MINUS  reduce using rule 210 (fname -> POW .)
    LBRACKET        reduce using rule 210 (fname -> POW .)


state 104

    (211) fname -> BINARY_LEFT_SHIFT_OP .

    IF              reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    WHILE           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    UNLESS          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    UNTIL           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    TERM            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    NUMBER          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    LPAREN          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    $end            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    RESCUE          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    RPAREN          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    WHEN            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    RKEY            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    LKEY            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    END             reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    ELSIF           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    ELSE            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    ENSURE          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    IDENTIFIER      reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    RANGE_INCLUSIVE reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    OR_SYMBOL       reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_XOR_OP   reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_AND_OP   reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    EQUAL           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    CASE_EQUALITY   reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    MATCHED_STRINGS_OP reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    GREATERTHAN     reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    GREATERTHANEQUAL reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    LESSERTHAN      reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    LESSERTHANEQUAL reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    PLUS            reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    MINUS           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    TIMES           reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    DIVIDE          reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    MOD             reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    POW             reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    COMPLEMENT_OP   reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    OVERLOAD_PLUS   reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    OVERLOAD_MINUS  reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)
    LBRACKET        reduce using rule 211 (fname -> BINARY_LEFT_SHIFT_OP .)


state 105

    (212) fname -> BINARY_RIGHT_SHIFT_OP .

    IF              reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    WHILE           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    UNLESS          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    UNTIL           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    TERM            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    NUMBER          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LPAREN          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    $end            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RESCUE          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RPAREN          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    WHEN            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RKEY            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LKEY            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    END             reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ELSIF           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ELSE            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    ENSURE          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    IDENTIFIER      reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    RANGE_INCLUSIVE reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OR_SYMBOL       reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_XOR_OP   reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_AND_OP   reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    EQUAL           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    CASE_EQUALITY   reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MATCHED_STRINGS_OP reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    GREATERTHAN     reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    GREATERTHANEQUAL reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LESSERTHAN      reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LESSERTHANEQUAL reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    PLUS            reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MINUS           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    TIMES           reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    DIVIDE          reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    MOD             reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    POW             reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    COMPLEMENT_OP   reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OVERLOAD_PLUS   reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    OVERLOAD_MINUS  reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)
    LBRACKET        reduce using rule 212 (fname -> BINARY_RIGHT_SHIFT_OP .)


state 106

    (213) fname -> COMPLEMENT_OP .

    IF              reduce using rule 213 (fname -> COMPLEMENT_OP .)
    WHILE           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    UNLESS          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    UNTIL           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    TERM            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    NUMBER          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    LPAREN          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    $end            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    RESCUE          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    RPAREN          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    WHEN            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    RKEY            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    LKEY            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    END             reduce using rule 213 (fname -> COMPLEMENT_OP .)
    ELSIF           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    ELSE            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    ENSURE          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    IDENTIFIER      reduce using rule 213 (fname -> COMPLEMENT_OP .)
    RANGE_INCLUSIVE reduce using rule 213 (fname -> COMPLEMENT_OP .)
    OR_SYMBOL       reduce using rule 213 (fname -> COMPLEMENT_OP .)
    BINARY_XOR_OP   reduce using rule 213 (fname -> COMPLEMENT_OP .)
    BINARY_AND_OP   reduce using rule 213 (fname -> COMPLEMENT_OP .)
    COMBINED_COMPARISON_OP reduce using rule 213 (fname -> COMPLEMENT_OP .)
    EQUAL           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    CASE_EQUALITY   reduce using rule 213 (fname -> COMPLEMENT_OP .)
    MATCHED_STRINGS_OP reduce using rule 213 (fname -> COMPLEMENT_OP .)
    GREATERTHAN     reduce using rule 213 (fname -> COMPLEMENT_OP .)
    GREATERTHANEQUAL reduce using rule 213 (fname -> COMPLEMENT_OP .)
    LESSERTHAN      reduce using rule 213 (fname -> COMPLEMENT_OP .)
    LESSERTHANEQUAL reduce using rule 213 (fname -> COMPLEMENT_OP .)
    PLUS            reduce using rule 213 (fname -> COMPLEMENT_OP .)
    MINUS           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    TIMES           reduce using rule 213 (fname -> COMPLEMENT_OP .)
    DIVIDE          reduce using rule 213 (fname -> COMPLEMENT_OP .)
    MOD             reduce using rule 213 (fname -> COMPLEMENT_OP .)
    POW             reduce using rule 213 (fname -> COMPLEMENT_OP .)
    BINARY_LEFT_SHIFT_OP reduce using rule 213 (fname -> COMPLEMENT_OP .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 213 (fname -> COMPLEMENT_OP .)
    COMPLEMENT_OP   reduce using rule 213 (fname -> COMPLEMENT_OP .)
    OVERLOAD_PLUS   reduce using rule 213 (fname -> COMPLEMENT_OP .)
    OVERLOAD_MINUS  reduce using rule 213 (fname -> COMPLEMENT_OP .)
    LBRACKET        reduce using rule 213 (fname -> COMPLEMENT_OP .)


state 107

    (214) fname -> OVERLOAD_PLUS .

    IF              reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    WHILE           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    UNLESS          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    UNTIL           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    TERM            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    NUMBER          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    LPAREN          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    $end            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    RESCUE          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    RPAREN          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    WHEN            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    RKEY            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    LKEY            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    END             reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    ELSIF           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    ELSE            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    ENSURE          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    IDENTIFIER      reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    RANGE_INCLUSIVE reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    OR_SYMBOL       reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    BINARY_XOR_OP   reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    BINARY_AND_OP   reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    COMBINED_COMPARISON_OP reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    EQUAL           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    CASE_EQUALITY   reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    MATCHED_STRINGS_OP reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    GREATERTHAN     reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    GREATERTHANEQUAL reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    LESSERTHAN      reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    LESSERTHANEQUAL reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    PLUS            reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    MINUS           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    TIMES           reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    DIVIDE          reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    MOD             reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    POW             reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    COMPLEMENT_OP   reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    OVERLOAD_PLUS   reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    OVERLOAD_MINUS  reduce using rule 214 (fname -> OVERLOAD_PLUS .)
    LBRACKET        reduce using rule 214 (fname -> OVERLOAD_PLUS .)


state 108

    (215) fname -> OVERLOAD_MINUS .

    IF              reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    WHILE           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    UNLESS          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    UNTIL           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    TERM            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    NUMBER          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    LPAREN          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    $end            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    RESCUE          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    RPAREN          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    WHEN            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    RKEY            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    LKEY            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    END             reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    ELSIF           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    ELSE            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    ENSURE          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    IDENTIFIER      reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    RANGE_INCLUSIVE reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    OR_SYMBOL       reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    BINARY_XOR_OP   reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    BINARY_AND_OP   reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    COMBINED_COMPARISON_OP reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    EQUAL           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    CASE_EQUALITY   reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    MATCHED_STRINGS_OP reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    GREATERTHAN     reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    GREATERTHANEQUAL reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    LESSERTHAN      reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    LESSERTHANEQUAL reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    PLUS            reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    MINUS           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    TIMES           reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    DIVIDE          reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    MOD             reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    POW             reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    BINARY_LEFT_SHIFT_OP reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    COMPLEMENT_OP   reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    OVERLOAD_PLUS   reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    OVERLOAD_MINUS  reduce using rule 215 (fname -> OVERLOAD_MINUS .)
    LBRACKET        reduce using rule 215 (fname -> OVERLOAD_MINUS .)


state 109

    (216) fname -> LBRACKET . RBRACKET
    (217) fname -> LBRACKET . RBRACKET EQUAL_SYMBOL

    RBRACKET        shift and go to state 244


state 110

    (9) stmt -> ALIAS fname . fname
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109

    fname                          shift and go to state 245

state 111

    (103) primary -> IF expr . then compstmt END
    (104) primary -> IF expr . then compstmt elsif END
    (105) primary -> IF expr . then compstmt elsif ELSE compstmt END
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (134) then -> . TERM
    (135) then -> . THEN
    (136) then -> . TERM THEN

    AND             shift and go to state 60
    OR              shift and go to state 61
    TERM            shift and go to state 247
    THEN            shift and go to state 248

    then                           shift and go to state 246

state 112

    (24) expr -> command .

    AND             reduce using rule 24 (expr -> command .)
    OR              reduce using rule 24 (expr -> command .)
    TERM            reduce using rule 24 (expr -> command .)
    THEN            reduce using rule 24 (expr -> command .)
    DO              reduce using rule 24 (expr -> command .)
    NUMBER          reduce using rule 24 (expr -> command .)
    LPAREN          reduce using rule 24 (expr -> command .)
    IF              reduce using rule 24 (expr -> command .)
    WHILE           reduce using rule 24 (expr -> command .)
    UNLESS          reduce using rule 24 (expr -> command .)
    UNTIL           reduce using rule 24 (expr -> command .)
    $end            reduce using rule 24 (expr -> command .)
    RESCUE          reduce using rule 24 (expr -> command .)
    RPAREN          reduce using rule 24 (expr -> command .)
    WHEN            reduce using rule 24 (expr -> command .)
    RKEY            reduce using rule 24 (expr -> command .)
    LKEY            reduce using rule 24 (expr -> command .)
    END             reduce using rule 24 (expr -> command .)
    ELSIF           reduce using rule 24 (expr -> command .)
    ELSE            reduce using rule 24 (expr -> command .)
    ENSURE          reduce using rule 24 (expr -> command .)


state 113

    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (158) mlhs_item -> lhs .
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    =               shift and go to state 235
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 114

    (29) command -> operation . call_args
    (33) function -> operation . LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    LBRACKET        shift and go to state 191
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 114
    call_args                      shift and go to state 192
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 115

    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args
    (72) arg -> primary .
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

  ! shift/reduce conflict for LBRACKET resolved as shift
    DOT             shift and go to state 249
    UNARY_OP        shift and go to state 250
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    THEN            reduce using rule 72 (arg -> primary .)
    DO              reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    COMMA           reduce using rule 72 (arg -> primary .)
    HASH_ROCKET     reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    $end            reduce using rule 72 (arg -> primary .)
    RESCUE          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)
    WHEN            reduce using rule 72 (arg -> primary .)
    RKEY            reduce using rule 72 (arg -> primary .)
    LKEY            reduce using rule 72 (arg -> primary .)
    END             reduce using rule 72 (arg -> primary .)
    ELSIF           reduce using rule 72 (arg -> primary .)
    ELSE            reduce using rule 72 (arg -> primary .)
    ENSURE          reduce using rule 72 (arg -> primary .)
    RBRACKET        reduce using rule 72 (arg -> primary .)
    LBRACKET        shift and go to state 251

  ! LBRACKET        [ reduce using rule 72 (arg -> primary .) ]


state 116

    (32) command -> SUPER . call_args
    (38) function -> SUPER . LPAREN call_args RPAREN
    (39) function -> SUPER .
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 197
    DOT             reduce using rule 39 (function -> SUPER .)
    RANGE_INCLUSIVE reduce using rule 39 (function -> SUPER .)
    RANGE_EXCLUSIVE reduce using rule 39 (function -> SUPER .)
    DIVIDE          reduce using rule 39 (function -> SUPER .)
    MOD             reduce using rule 39 (function -> SUPER .)
    POW             reduce using rule 39 (function -> SUPER .)
    OR_SYMBOL       reduce using rule 39 (function -> SUPER .)
    BINARY_XOR_OP   reduce using rule 39 (function -> SUPER .)
    COMBINED_COMPARISON_OP reduce using rule 39 (function -> SUPER .)
    GREATERTHAN     reduce using rule 39 (function -> SUPER .)
    GREATERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    LESSERTHAN      reduce using rule 39 (function -> SUPER .)
    LESSERTHANEQUAL reduce using rule 39 (function -> SUPER .)
    EQUAL           reduce using rule 39 (function -> SUPER .)
    CASE_EQUALITY   reduce using rule 39 (function -> SUPER .)
    NOTEQUAL        reduce using rule 39 (function -> SUPER .)
    MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 39 (function -> SUPER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 39 (function -> SUPER .)
    AND             reduce using rule 39 (function -> SUPER .)
    OR              reduce using rule 39 (function -> SUPER .)
    TERM            reduce using rule 39 (function -> SUPER .)
    THEN            reduce using rule 39 (function -> SUPER .)
    DO              reduce using rule 39 (function -> SUPER .)
    COMMA           reduce using rule 39 (function -> SUPER .)
    HASH_ROCKET     reduce using rule 39 (function -> SUPER .)
    $end            reduce using rule 39 (function -> SUPER .)
    RESCUE          reduce using rule 39 (function -> SUPER .)
    RPAREN          reduce using rule 39 (function -> SUPER .)
    WHEN            reduce using rule 39 (function -> SUPER .)
    RKEY            reduce using rule 39 (function -> SUPER .)
    END             reduce using rule 39 (function -> SUPER .)
    ELSIF           reduce using rule 39 (function -> SUPER .)
    ELSE            reduce using rule 39 (function -> SUPER .)
    ENSURE          reduce using rule 39 (function -> SUPER .)
    RBRACKET        reduce using rule 39 (function -> SUPER .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 39 (function -> SUPER .) ]
  ! UNARY_OP        [ reduce using rule 39 (function -> SUPER .) ]
  ! LBRACKET        [ reduce using rule 39 (function -> SUPER .) ]
  ! PLUS            [ reduce using rule 39 (function -> SUPER .) ]
  ! MINUS           [ reduce using rule 39 (function -> SUPER .) ]
  ! TIMES           [ reduce using rule 39 (function -> SUPER .) ]
  ! BINARY_AND_OP   [ reduce using rule 39 (function -> SUPER .) ]
  ! NUMBER          [ reduce using rule 39 (function -> SUPER .) ]
  ! LPAREN          [ reduce using rule 39 (function -> SUPER .) ]
  ! IF              [ reduce using rule 39 (function -> SUPER .) ]
  ! WHILE           [ reduce using rule 39 (function -> SUPER .) ]
  ! UNLESS          [ reduce using rule 39 (function -> SUPER .) ]
  ! UNTIL           [ reduce using rule 39 (function -> SUPER .) ]

    call_args                      shift and go to state 198
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 117

    (159) mlhs_item -> LPAREN . mlhs RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (27) call -> . function
    (28) call -> . command
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 44
    LPAREN          shift and go to state 117
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    SUPER           shift and go to state 31
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74

    mlhs                           shift and go to state 194
    compstmt                       shift and go to state 193
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 252
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 253
    function                       shift and go to state 18
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    operation                      shift and go to state 28

state 118

    (79) primary -> variable .
    (146) lhs -> variable .

  ! reduce/reduce conflict for COMMA resolved using rule 79 (primary -> variable .)
    DOT             reduce using rule 79 (primary -> variable .)
    UNARY_OP        reduce using rule 79 (primary -> variable .)
    LBRACKET        reduce using rule 79 (primary -> variable .)
    RANGE_INCLUSIVE reduce using rule 79 (primary -> variable .)
    RANGE_EXCLUSIVE reduce using rule 79 (primary -> variable .)
    PLUS            reduce using rule 79 (primary -> variable .)
    MINUS           reduce using rule 79 (primary -> variable .)
    TIMES           reduce using rule 79 (primary -> variable .)
    DIVIDE          reduce using rule 79 (primary -> variable .)
    MOD             reduce using rule 79 (primary -> variable .)
    POW             reduce using rule 79 (primary -> variable .)
    OR_SYMBOL       reduce using rule 79 (primary -> variable .)
    BINARY_XOR_OP   reduce using rule 79 (primary -> variable .)
    BINARY_AND_OP   reduce using rule 79 (primary -> variable .)
    COMBINED_COMPARISON_OP reduce using rule 79 (primary -> variable .)
    GREATERTHAN     reduce using rule 79 (primary -> variable .)
    GREATERTHANEQUAL reduce using rule 79 (primary -> variable .)
    LESSERTHAN      reduce using rule 79 (primary -> variable .)
    LESSERTHANEQUAL reduce using rule 79 (primary -> variable .)
    EQUAL           reduce using rule 79 (primary -> variable .)
    CASE_EQUALITY   reduce using rule 79 (primary -> variable .)
    NOTEQUAL        reduce using rule 79 (primary -> variable .)
    MATCHED_STRINGS_OP reduce using rule 79 (primary -> variable .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 79 (primary -> variable .)
    BINARY_LEFT_SHIFT_OP reduce using rule 79 (primary -> variable .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 79 (primary -> variable .)
    AND             reduce using rule 79 (primary -> variable .)
    OR              reduce using rule 79 (primary -> variable .)
    TERM            reduce using rule 79 (primary -> variable .)
    THEN            reduce using rule 79 (primary -> variable .)
    DO              reduce using rule 79 (primary -> variable .)
    NUMBER          reduce using rule 79 (primary -> variable .)
    LPAREN          reduce using rule 79 (primary -> variable .)
    COMMA           reduce using rule 79 (primary -> variable .)
    HASH_ROCKET     reduce using rule 79 (primary -> variable .)
    IF              reduce using rule 79 (primary -> variable .)
    WHILE           reduce using rule 79 (primary -> variable .)
    UNLESS          reduce using rule 79 (primary -> variable .)
    UNTIL           reduce using rule 79 (primary -> variable .)
    $end            reduce using rule 79 (primary -> variable .)
    RESCUE          reduce using rule 79 (primary -> variable .)
    RPAREN          reduce using rule 79 (primary -> variable .)
    WHEN            reduce using rule 79 (primary -> variable .)
    RKEY            reduce using rule 79 (primary -> variable .)
    LKEY            reduce using rule 79 (primary -> variable .)
    END             reduce using rule 79 (primary -> variable .)
    ELSIF           reduce using rule 79 (primary -> variable .)
    ELSE            reduce using rule 79 (primary -> variable .)
    ENSURE          reduce using rule 79 (primary -> variable .)
    RBRACKET        reduce using rule 79 (primary -> variable .)
    =               reduce using rule 146 (lhs -> variable .)
    PLUS_EQUAL      reduce using rule 146 (lhs -> variable .)
    MINUS_EQUAL     reduce using rule 146 (lhs -> variable .)
    TIMES_EQUAL     reduce using rule 146 (lhs -> variable .)
    DIVIDE_EQUAL    reduce using rule 146 (lhs -> variable .)
    MOD_EQUAL       reduce using rule 146 (lhs -> variable .)
    POW_EQUAL       reduce using rule 146 (lhs -> variable .)
    SINGLE_AND_EQUAL reduce using rule 146 (lhs -> variable .)
    SINGLE_OR_EQUAL reduce using rule 146 (lhs -> variable .)
    XOR_EQUAL       reduce using rule 146 (lhs -> variable .)
    BINARY_LEFT_EQUAL reduce using rule 146 (lhs -> variable .)
    BINARY_RIGHT_EQUAL reduce using rule 146 (lhs -> variable .)
    AND_EQUAL       reduce using rule 146 (lhs -> variable .)
    OR_EQUAL        reduce using rule 146 (lhs -> variable .)

  ! COMMA           [ reduce using rule 146 (lhs -> variable .) ]


state 119

    (108) primary -> WHILE expr . do compstmt END
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 60
    OR              shift and go to state 61
    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 254
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 120

    (106) primary -> UNLESS expr . then compstmt END
    (107) primary -> UNLESS expr . then compstmt ELSE compstmt END
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (134) then -> . TERM
    (135) then -> . THEN
    (136) then -> . TERM THEN

    AND             shift and go to state 60
    OR              shift and go to state 61
    TERM            shift and go to state 247
    THEN            shift and go to state 248

    then                           shift and go to state 255

state 121

    (109) primary -> UNTIL expr . do compstmt END
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 60
    OR              shift and go to state 61
    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 256
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 122

    (14) stmt -> BEGIN LKEY . compstmt RKEY
    (87) primary -> LKEY . RKEY
    (88) primary -> LKEY . args RKEY
    (89) primary -> LKEY . assocs RKEY
    (90) primary -> LKEY . args COMMA RKEY
    (91) primary -> LKEY . assocs COMMA RKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    RKEY            shift and go to state 124
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    TIMES           shift and go to state 44
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74

    compstmt                       shift and go to state 257
    args                           shift and go to state 125
    assocs                         shift and go to state 126
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    arg                            shift and go to state 258
    assoc                          shift and go to state 128
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    primary                        shift and go to state 260
    function                       shift and go to state 18
    variable                       shift and go to state 19
    mlhs                           shift and go to state 22
    literal                        shift and go to state 36
    operation                      shift and go to state 28
    mlhs_item                      shift and go to state 43

state 123

    (113) primary -> BEGIN compstmt . rescue END
    (114) primary -> BEGIN compstmt . rescue ELSE compstmt END
    (115) primary -> BEGIN compstmt . rescue ENSURE compstmt END
    (116) primary -> BEGIN compstmt . rescue ELSE compstmt ENSURE compstmt END
    (127) rescue -> . RESCUE args do compstmt
    (128) rescue -> . RESCUE do compstmt
    (129) rescue -> . rescue RESCUE args do compstmt
    (130) rescue -> . rescue RESCUE do compstmt

    RESCUE          shift and go to state 262

    rescue                         shift and go to state 261

state 124

    (87) primary -> LKEY RKEY .

    LBRACKET        reduce using rule 87 (primary -> LKEY RKEY .)
    DOT             reduce using rule 87 (primary -> LKEY RKEY .)
    UNARY_OP        reduce using rule 87 (primary -> LKEY RKEY .)
    RANGE_INCLUSIVE reduce using rule 87 (primary -> LKEY RKEY .)
    RANGE_EXCLUSIVE reduce using rule 87 (primary -> LKEY RKEY .)
    PLUS            reduce using rule 87 (primary -> LKEY RKEY .)
    MINUS           reduce using rule 87 (primary -> LKEY RKEY .)
    TIMES           reduce using rule 87 (primary -> LKEY RKEY .)
    DIVIDE          reduce using rule 87 (primary -> LKEY RKEY .)
    MOD             reduce using rule 87 (primary -> LKEY RKEY .)
    POW             reduce using rule 87 (primary -> LKEY RKEY .)
    OR_SYMBOL       reduce using rule 87 (primary -> LKEY RKEY .)
    BINARY_XOR_OP   reduce using rule 87 (primary -> LKEY RKEY .)
    BINARY_AND_OP   reduce using rule 87 (primary -> LKEY RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 87 (primary -> LKEY RKEY .)
    GREATERTHAN     reduce using rule 87 (primary -> LKEY RKEY .)
    GREATERTHANEQUAL reduce using rule 87 (primary -> LKEY RKEY .)
    LESSERTHAN      reduce using rule 87 (primary -> LKEY RKEY .)
    LESSERTHANEQUAL reduce using rule 87 (primary -> LKEY RKEY .)
    EQUAL           reduce using rule 87 (primary -> LKEY RKEY .)
    CASE_EQUALITY   reduce using rule 87 (primary -> LKEY RKEY .)
    NOTEQUAL        reduce using rule 87 (primary -> LKEY RKEY .)
    MATCHED_STRINGS_OP reduce using rule 87 (primary -> LKEY RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 87 (primary -> LKEY RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 87 (primary -> LKEY RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 87 (primary -> LKEY RKEY .)
    AND             reduce using rule 87 (primary -> LKEY RKEY .)
    OR              reduce using rule 87 (primary -> LKEY RKEY .)
    IF              reduce using rule 87 (primary -> LKEY RKEY .)
    WHILE           reduce using rule 87 (primary -> LKEY RKEY .)
    UNLESS          reduce using rule 87 (primary -> LKEY RKEY .)
    UNTIL           reduce using rule 87 (primary -> LKEY RKEY .)
    TERM            reduce using rule 87 (primary -> LKEY RKEY .)
    NUMBER          reduce using rule 87 (primary -> LKEY RKEY .)
    LPAREN          reduce using rule 87 (primary -> LKEY RKEY .)
    $end            reduce using rule 87 (primary -> LKEY RKEY .)
    COMMA           reduce using rule 87 (primary -> LKEY RKEY .)
    RBRACKET        reduce using rule 87 (primary -> LKEY RKEY .)
    THEN            reduce using rule 87 (primary -> LKEY RKEY .)
    DO              reduce using rule 87 (primary -> LKEY RKEY .)
    RESCUE          reduce using rule 87 (primary -> LKEY RKEY .)
    HASH_ROCKET     reduce using rule 87 (primary -> LKEY RKEY .)
    RKEY            reduce using rule 87 (primary -> LKEY RKEY .)
    RPAREN          reduce using rule 87 (primary -> LKEY RKEY .)
    WHEN            reduce using rule 87 (primary -> LKEY RKEY .)
    LKEY            reduce using rule 87 (primary -> LKEY RKEY .)
    END             reduce using rule 87 (primary -> LKEY RKEY .)
    ELSIF           reduce using rule 87 (primary -> LKEY RKEY .)
    ELSE            reduce using rule 87 (primary -> LKEY RKEY .)
    ENSURE          reduce using rule 87 (primary -> LKEY RKEY .)
    NOT_SYMBOL      reduce using rule 87 (primary -> LKEY RKEY .)
    COMPLEMENT_OP   reduce using rule 87 (primary -> LKEY RKEY .)
    DEFINED_OP      reduce using rule 87 (primary -> LKEY RKEY .)
    RETURN          reduce using rule 87 (primary -> LKEY RKEY .)
    YIELD           reduce using rule 87 (primary -> LKEY RKEY .)
    CASE            reduce using rule 87 (primary -> LKEY RKEY .)
    FOR             reduce using rule 87 (primary -> LKEY RKEY .)
    BEGIN           reduce using rule 87 (primary -> LKEY RKEY .)
    CLASS           reduce using rule 87 (primary -> LKEY RKEY .)
    MODULE          reduce using rule 87 (primary -> LKEY RKEY .)
    DEF             reduce using rule 87 (primary -> LKEY RKEY .)
    VAR_GLOBAL      reduce using rule 87 (primary -> LKEY RKEY .)
    VAR_LOCAL       reduce using rule 87 (primary -> LKEY RKEY .)
    VAR_INSTANCE    reduce using rule 87 (primary -> LKEY RKEY .)
    VAR_CLASS       reduce using rule 87 (primary -> LKEY RKEY .)
    SYMBOL          reduce using rule 87 (primary -> LKEY RKEY .)
    STRING          reduce using rule 87 (primary -> LKEY RKEY .)
    IDENTIFIER      reduce using rule 87 (primary -> LKEY RKEY .)
    SUPER           reduce using rule 87 (primary -> LKEY RKEY .)


state 125

    (88) primary -> LKEY args . RKEY
    (90) primary -> LKEY args . COMMA RKEY

    RKEY            shift and go to state 263
    COMMA           shift and go to state 264


state 126

    (89) primary -> LKEY assocs . RKEY
    (91) primary -> LKEY assocs . COMMA RKEY

    RKEY            shift and go to state 265
    COMMA           shift and go to state 266


state 127

    (160) args -> arg .
    (161) args -> arg . COMMA arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg
    (171) assoc -> arg . HASH_ROCKET arg

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RKEY            reduce using rule 160 (args -> arg .)
    IF              reduce using rule 160 (args -> arg .)
    WHILE           reduce using rule 160 (args -> arg .)
    UNLESS          reduce using rule 160 (args -> arg .)
    UNTIL           reduce using rule 160 (args -> arg .)
    TERM            reduce using rule 160 (args -> arg .)
    NUMBER          reduce using rule 160 (args -> arg .)
    LPAREN          reduce using rule 160 (args -> arg .)
    $end            reduce using rule 160 (args -> arg .)
    THEN            reduce using rule 160 (args -> arg .)
    DO              reduce using rule 160 (args -> arg .)
    RESCUE          reduce using rule 160 (args -> arg .)
    RPAREN          reduce using rule 160 (args -> arg .)
    WHEN            reduce using rule 160 (args -> arg .)
    LKEY            reduce using rule 160 (args -> arg .)
    END             reduce using rule 160 (args -> arg .)
    ELSIF           reduce using rule 160 (args -> arg .)
    ELSE            reduce using rule 160 (args -> arg .)
    ENSURE          reduce using rule 160 (args -> arg .)
    LBRACKET        reduce using rule 160 (args -> arg .)
    RBRACKET        reduce using rule 160 (args -> arg .)
    COMMA           shift and go to state 236
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190
    HASH_ROCKET     shift and go to state 267

  ! COMMA           [ reduce using rule 160 (args -> arg .) ]
  ! AND             [ reduce using rule 160 (args -> arg .) ]
  ! OR              [ reduce using rule 160 (args -> arg .) ]


state 128

    (169) assocs -> assoc .
    (170) assocs -> assoc . COMMA assoc

  ! shift/reduce conflict for COMMA resolved as shift
    RKEY            reduce using rule 169 (assocs -> assoc .)
    AND             reduce using rule 169 (assocs -> assoc .)
    OR              reduce using rule 169 (assocs -> assoc .)
    IF              reduce using rule 169 (assocs -> assoc .)
    WHILE           reduce using rule 169 (assocs -> assoc .)
    UNLESS          reduce using rule 169 (assocs -> assoc .)
    UNTIL           reduce using rule 169 (assocs -> assoc .)
    TERM            reduce using rule 169 (assocs -> assoc .)
    NUMBER          reduce using rule 169 (assocs -> assoc .)
    LPAREN          reduce using rule 169 (assocs -> assoc .)
    $end            reduce using rule 169 (assocs -> assoc .)
    THEN            reduce using rule 169 (assocs -> assoc .)
    DO              reduce using rule 169 (assocs -> assoc .)
    RESCUE          reduce using rule 169 (assocs -> assoc .)
    RPAREN          reduce using rule 169 (assocs -> assoc .)
    WHEN            reduce using rule 169 (assocs -> assoc .)
    LKEY            reduce using rule 169 (assocs -> assoc .)
    END             reduce using rule 169 (assocs -> assoc .)
    ELSIF           reduce using rule 169 (assocs -> assoc .)
    ELSE            reduce using rule 169 (assocs -> assoc .)
    ENSURE          reduce using rule 169 (assocs -> assoc .)
    LBRACKET        reduce using rule 169 (assocs -> assoc .)
    RBRACKET        reduce using rule 169 (assocs -> assoc .)
    COMMA           shift and go to state 268

  ! COMMA           [ reduce using rule 169 (assocs -> assoc .) ]


state 129

    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    =               shift and go to state 235
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 130

    (72) arg -> primary .
    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
    COMMA           reduce using rule 72 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    HASH_ROCKET     reduce using rule 72 (arg -> primary .)
    RKEY            reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    $end            reduce using rule 72 (arg -> primary .)
    RESCUE          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)
    WHEN            reduce using rule 72 (arg -> primary .)
    LKEY            reduce using rule 72 (arg -> primary .)
    END             reduce using rule 72 (arg -> primary .)
    ELSIF           reduce using rule 72 (arg -> primary .)
    ELSE            reduce using rule 72 (arg -> primary .)
    ENSURE          reduce using rule 72 (arg -> primary .)
    RBRACKET        reduce using rule 72 (arg -> primary .)
    THEN            reduce using rule 72 (arg -> primary .)
    DO              reduce using rule 72 (arg -> primary .)
    NOT_SYMBOL      reduce using rule 72 (arg -> primary .)
    COMPLEMENT_OP   reduce using rule 72 (arg -> primary .)
    DEFINED_OP      reduce using rule 72 (arg -> primary .)
    RETURN          reduce using rule 72 (arg -> primary .)
    YIELD           reduce using rule 72 (arg -> primary .)
    CASE            reduce using rule 72 (arg -> primary .)
    FOR             reduce using rule 72 (arg -> primary .)
    BEGIN           reduce using rule 72 (arg -> primary .)
    CLASS           reduce using rule 72 (arg -> primary .)
    MODULE          reduce using rule 72 (arg -> primary .)
    DEF             reduce using rule 72 (arg -> primary .)
    VAR_GLOBAL      reduce using rule 72 (arg -> primary .)
    VAR_LOCAL       reduce using rule 72 (arg -> primary .)
    VAR_INSTANCE    reduce using rule 72 (arg -> primary .)
    VAR_CLASS       reduce using rule 72 (arg -> primary .)
    SYMBOL          reduce using rule 72 (arg -> primary .)
    STRING          reduce using rule 72 (arg -> primary .)
    IDENTIFIER      reduce using rule 72 (arg -> primary .)
    SUPER           reduce using rule 72 (arg -> primary .)
    LBRACKET        shift and go to state 148
    DOT             shift and go to state 237
    UNARY_OP        shift and go to state 238

  ! LBRACKET        [ reduce using rule 72 (arg -> primary .) ]
  ! UNARY_OP        [ reduce using rule 72 (arg -> primary .) ]


state 131

    (77) primary -> LPAREN . compstmt RPAREN
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 193
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 132

    (16) stmt -> lhs = . command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (40) arg -> lhs = . arg
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    lhs                            shift and go to state 129
    command                        shift and go to state 269
    arg                            shift and go to state 270
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 133

    (41) arg -> lhs op_asgn . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 129
    arg                            shift and go to state 271
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 134

    (221) op_asgn -> PLUS_EQUAL .

    PLUS            reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    MINUS           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    NOT_SYMBOL      reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    COMPLEMENT_OP   reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    DEFINED_OP      reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    LPAREN          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    UNARY_OP        reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    LBRACKET        reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    LKEY            reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    RETURN          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    YIELD           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    IF              reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    UNLESS          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    WHILE           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    UNTIL           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    CASE            reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    FOR             reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    BEGIN           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    CLASS           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    MODULE          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    DEF             reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    VAR_LOCAL       reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    VAR_CLASS       reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    NUMBER          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    SYMBOL          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    STRING          reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    IDENTIFIER      reduce using rule 221 (op_asgn -> PLUS_EQUAL .)
    SUPER           reduce using rule 221 (op_asgn -> PLUS_EQUAL .)


state 135

    (222) op_asgn -> MINUS_EQUAL .

    PLUS            reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    MINUS           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    NOT_SYMBOL      reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    COMPLEMENT_OP   reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    DEFINED_OP      reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    LPAREN          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    UNARY_OP        reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    LBRACKET        reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    LKEY            reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    RETURN          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    YIELD           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    IF              reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    UNLESS          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    WHILE           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    UNTIL           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    CASE            reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    FOR             reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    BEGIN           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    CLASS           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    MODULE          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    DEF             reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    VAR_GLOBAL      reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    VAR_LOCAL       reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    VAR_INSTANCE    reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    VAR_CLASS       reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    NUMBER          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    SYMBOL          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    STRING          reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    IDENTIFIER      reduce using rule 222 (op_asgn -> MINUS_EQUAL .)
    SUPER           reduce using rule 222 (op_asgn -> MINUS_EQUAL .)


state 136

    (223) op_asgn -> TIMES_EQUAL .

    PLUS            reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    MINUS           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    NOT_SYMBOL      reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    COMPLEMENT_OP   reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    DEFINED_OP      reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    LPAREN          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    UNARY_OP        reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    LBRACKET        reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    LKEY            reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    RETURN          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    YIELD           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    IF              reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    UNLESS          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    WHILE           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    UNTIL           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    CASE            reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    FOR             reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    BEGIN           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    CLASS           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    MODULE          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    DEF             reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    VAR_GLOBAL      reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    VAR_LOCAL       reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    VAR_INSTANCE    reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    VAR_CLASS       reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    NUMBER          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    SYMBOL          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    STRING          reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    IDENTIFIER      reduce using rule 223 (op_asgn -> TIMES_EQUAL .)
    SUPER           reduce using rule 223 (op_asgn -> TIMES_EQUAL .)


state 137

    (224) op_asgn -> DIVIDE_EQUAL .

    PLUS            reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    MINUS           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    NOT_SYMBOL      reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    COMPLEMENT_OP   reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    DEFINED_OP      reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    LPAREN          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    UNARY_OP        reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    LBRACKET        reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    LKEY            reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    RETURN          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    YIELD           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    IF              reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    UNLESS          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    WHILE           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    UNTIL           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    CASE            reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    FOR             reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    BEGIN           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    CLASS           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    MODULE          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    DEF             reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    VAR_GLOBAL      reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    VAR_LOCAL       reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    VAR_INSTANCE    reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    VAR_CLASS       reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    NUMBER          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    SYMBOL          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    STRING          reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    IDENTIFIER      reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)
    SUPER           reduce using rule 224 (op_asgn -> DIVIDE_EQUAL .)


state 138

    (225) op_asgn -> MOD_EQUAL .

    PLUS            reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    MINUS           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    NOT_SYMBOL      reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    COMPLEMENT_OP   reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    DEFINED_OP      reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    LPAREN          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    UNARY_OP        reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    LBRACKET        reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    LKEY            reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    RETURN          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    YIELD           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    IF              reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    UNLESS          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    WHILE           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    UNTIL           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    CASE            reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    FOR             reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    BEGIN           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    CLASS           reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    MODULE          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    DEF             reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    VAR_GLOBAL      reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    VAR_LOCAL       reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    VAR_INSTANCE    reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    VAR_CLASS       reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    NUMBER          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    SYMBOL          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    STRING          reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    IDENTIFIER      reduce using rule 225 (op_asgn -> MOD_EQUAL .)
    SUPER           reduce using rule 225 (op_asgn -> MOD_EQUAL .)


state 139

    (226) op_asgn -> POW_EQUAL .

    PLUS            reduce using rule 226 (op_asgn -> POW_EQUAL .)
    MINUS           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    NOT_SYMBOL      reduce using rule 226 (op_asgn -> POW_EQUAL .)
    COMPLEMENT_OP   reduce using rule 226 (op_asgn -> POW_EQUAL .)
    DEFINED_OP      reduce using rule 226 (op_asgn -> POW_EQUAL .)
    LPAREN          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    UNARY_OP        reduce using rule 226 (op_asgn -> POW_EQUAL .)
    LBRACKET        reduce using rule 226 (op_asgn -> POW_EQUAL .)
    LKEY            reduce using rule 226 (op_asgn -> POW_EQUAL .)
    RETURN          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    YIELD           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    IF              reduce using rule 226 (op_asgn -> POW_EQUAL .)
    UNLESS          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    WHILE           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    UNTIL           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    CASE            reduce using rule 226 (op_asgn -> POW_EQUAL .)
    FOR             reduce using rule 226 (op_asgn -> POW_EQUAL .)
    BEGIN           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    CLASS           reduce using rule 226 (op_asgn -> POW_EQUAL .)
    MODULE          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    DEF             reduce using rule 226 (op_asgn -> POW_EQUAL .)
    VAR_GLOBAL      reduce using rule 226 (op_asgn -> POW_EQUAL .)
    VAR_LOCAL       reduce using rule 226 (op_asgn -> POW_EQUAL .)
    VAR_INSTANCE    reduce using rule 226 (op_asgn -> POW_EQUAL .)
    VAR_CLASS       reduce using rule 226 (op_asgn -> POW_EQUAL .)
    NUMBER          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    SYMBOL          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    STRING          reduce using rule 226 (op_asgn -> POW_EQUAL .)
    IDENTIFIER      reduce using rule 226 (op_asgn -> POW_EQUAL .)
    SUPER           reduce using rule 226 (op_asgn -> POW_EQUAL .)


state 140

    (227) op_asgn -> SINGLE_AND_EQUAL .

    PLUS            reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    MINUS           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    NOT_SYMBOL      reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    COMPLEMENT_OP   reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    DEFINED_OP      reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    LPAREN          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    UNARY_OP        reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    LBRACKET        reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    LKEY            reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    RETURN          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    YIELD           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    IF              reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    UNLESS          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    WHILE           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    UNTIL           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    CASE            reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    FOR             reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    BEGIN           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    CLASS           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    MODULE          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    DEF             reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_GLOBAL      reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_LOCAL       reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_INSTANCE    reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    VAR_CLASS       reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    NUMBER          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    SYMBOL          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    STRING          reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    IDENTIFIER      reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)
    SUPER           reduce using rule 227 (op_asgn -> SINGLE_AND_EQUAL .)


state 141

    (228) op_asgn -> SINGLE_OR_EQUAL .

    PLUS            reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    MINUS           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    NOT_SYMBOL      reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    DEFINED_OP      reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    LPAREN          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    UNARY_OP        reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    LBRACKET        reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    LKEY            reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    RETURN          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    YIELD           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    IF              reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    UNLESS          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    WHILE           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    UNTIL           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    CASE            reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    FOR             reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    BEGIN           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    CLASS           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    MODULE          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    DEF             reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_GLOBAL      reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_LOCAL       reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_INSTANCE    reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    VAR_CLASS       reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    NUMBER          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    SYMBOL          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    STRING          reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    IDENTIFIER      reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)
    SUPER           reduce using rule 228 (op_asgn -> SINGLE_OR_EQUAL .)


state 142

    (229) op_asgn -> XOR_EQUAL .

    PLUS            reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    MINUS           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    NOT_SYMBOL      reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    DEFINED_OP      reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    LPAREN          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    UNARY_OP        reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    LBRACKET        reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    LKEY            reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    RETURN          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    YIELD           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    IF              reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    UNLESS          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    WHILE           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    UNTIL           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    CASE            reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    FOR             reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    BEGIN           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    CLASS           reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    MODULE          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    DEF             reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    VAR_GLOBAL      reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    VAR_LOCAL       reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    VAR_INSTANCE    reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    VAR_CLASS       reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    NUMBER          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    SYMBOL          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    STRING          reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    IDENTIFIER      reduce using rule 229 (op_asgn -> XOR_EQUAL .)
    SUPER           reduce using rule 229 (op_asgn -> XOR_EQUAL .)


state 143

    (230) op_asgn -> BINARY_LEFT_EQUAL .

    PLUS            reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    MINUS           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    NOT_SYMBOL      reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    COMPLEMENT_OP   reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    DEFINED_OP      reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    LPAREN          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNARY_OP        reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    LBRACKET        reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    LKEY            reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    RETURN          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    YIELD           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    IF              reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNLESS          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    WHILE           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    UNTIL           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    CASE            reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    FOR             reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    BEGIN           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    CLASS           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    MODULE          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    DEF             reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_GLOBAL      reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_LOCAL       reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_INSTANCE    reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    VAR_CLASS       reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    NUMBER          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    SYMBOL          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    STRING          reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    IDENTIFIER      reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)
    SUPER           reduce using rule 230 (op_asgn -> BINARY_LEFT_EQUAL .)


state 144

    (231) op_asgn -> BINARY_RIGHT_EQUAL .

    PLUS            reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    MINUS           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    NOT_SYMBOL      reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    COMPLEMENT_OP   reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    DEFINED_OP      reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LPAREN          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNARY_OP        reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LBRACKET        reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    LKEY            reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    RETURN          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    YIELD           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    IF              reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNLESS          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    WHILE           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    UNTIL           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    CASE            reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    FOR             reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    BEGIN           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    CLASS           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    MODULE          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    DEF             reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_GLOBAL      reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_LOCAL       reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_INSTANCE    reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    VAR_CLASS       reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    NUMBER          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    SYMBOL          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    STRING          reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    IDENTIFIER      reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)
    SUPER           reduce using rule 231 (op_asgn -> BINARY_RIGHT_EQUAL .)


state 145

    (232) op_asgn -> AND_EQUAL .

    PLUS            reduce using rule 232 (op_asgn -> AND_EQUAL .)
    MINUS           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    NOT_SYMBOL      reduce using rule 232 (op_asgn -> AND_EQUAL .)
    COMPLEMENT_OP   reduce using rule 232 (op_asgn -> AND_EQUAL .)
    DEFINED_OP      reduce using rule 232 (op_asgn -> AND_EQUAL .)
    LPAREN          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    UNARY_OP        reduce using rule 232 (op_asgn -> AND_EQUAL .)
    LBRACKET        reduce using rule 232 (op_asgn -> AND_EQUAL .)
    LKEY            reduce using rule 232 (op_asgn -> AND_EQUAL .)
    RETURN          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    YIELD           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    IF              reduce using rule 232 (op_asgn -> AND_EQUAL .)
    UNLESS          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    WHILE           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    UNTIL           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    CASE            reduce using rule 232 (op_asgn -> AND_EQUAL .)
    FOR             reduce using rule 232 (op_asgn -> AND_EQUAL .)
    BEGIN           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    CLASS           reduce using rule 232 (op_asgn -> AND_EQUAL .)
    MODULE          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    DEF             reduce using rule 232 (op_asgn -> AND_EQUAL .)
    VAR_GLOBAL      reduce using rule 232 (op_asgn -> AND_EQUAL .)
    VAR_LOCAL       reduce using rule 232 (op_asgn -> AND_EQUAL .)
    VAR_INSTANCE    reduce using rule 232 (op_asgn -> AND_EQUAL .)
    VAR_CLASS       reduce using rule 232 (op_asgn -> AND_EQUAL .)
    NUMBER          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    SYMBOL          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    STRING          reduce using rule 232 (op_asgn -> AND_EQUAL .)
    IDENTIFIER      reduce using rule 232 (op_asgn -> AND_EQUAL .)
    SUPER           reduce using rule 232 (op_asgn -> AND_EQUAL .)


state 146

    (233) op_asgn -> OR_EQUAL .

    PLUS            reduce using rule 233 (op_asgn -> OR_EQUAL .)
    MINUS           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    NOT_SYMBOL      reduce using rule 233 (op_asgn -> OR_EQUAL .)
    COMPLEMENT_OP   reduce using rule 233 (op_asgn -> OR_EQUAL .)
    DEFINED_OP      reduce using rule 233 (op_asgn -> OR_EQUAL .)
    LPAREN          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    UNARY_OP        reduce using rule 233 (op_asgn -> OR_EQUAL .)
    LBRACKET        reduce using rule 233 (op_asgn -> OR_EQUAL .)
    LKEY            reduce using rule 233 (op_asgn -> OR_EQUAL .)
    RETURN          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    YIELD           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    IF              reduce using rule 233 (op_asgn -> OR_EQUAL .)
    UNLESS          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    WHILE           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    UNTIL           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    CASE            reduce using rule 233 (op_asgn -> OR_EQUAL .)
    FOR             reduce using rule 233 (op_asgn -> OR_EQUAL .)
    BEGIN           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    CLASS           reduce using rule 233 (op_asgn -> OR_EQUAL .)
    MODULE          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    DEF             reduce using rule 233 (op_asgn -> OR_EQUAL .)
    VAR_GLOBAL      reduce using rule 233 (op_asgn -> OR_EQUAL .)
    VAR_LOCAL       reduce using rule 233 (op_asgn -> OR_EQUAL .)
    VAR_INSTANCE    reduce using rule 233 (op_asgn -> OR_EQUAL .)
    VAR_CLASS       reduce using rule 233 (op_asgn -> OR_EQUAL .)
    NUMBER          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    SYMBOL          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    STRING          reduce using rule 233 (op_asgn -> OR_EQUAL .)
    IDENTIFIER      reduce using rule 233 (op_asgn -> OR_EQUAL .)
    SUPER           reduce using rule 233 (op_asgn -> OR_EQUAL .)


state 147

    (100) primary -> function LKEY . compstmt LKEY
    (101) primary -> function LKEY . OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> function LKEY . OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    OR_SYMBOL       shift and go to state 273
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    function                       shift and go to state 18
    compstmt                       shift and go to state 272
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 148

    (147) lhs -> primary LBRACKET . RBRACKET
    (148) lhs -> primary LBRACKET . args RBRACKET
    (82) primary -> primary LBRACKET . RBRACKET
    (83) primary -> primary LBRACKET . args RBRACKET
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 274
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    primary                        shift and go to state 130
    args                           shift and go to state 275
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 149

    (149) lhs -> primary DOT . IDENTIFIER
    (34) function -> primary DOT . operation LPAREN call_args RPAREN
    (36) function -> primary DOT . operation
    (30) command -> primary DOT . operation call_args
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 276

    operation                      shift and go to state 277

state 150

    (35) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP . operation
    (31) command -> primary UNARY_OP . operation call_args
    (80) primary -> primary UNARY_OP . IDENTIFIER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 279

    operation                      shift and go to state 278

state 151

    (219) operation -> IDENTIFIER NOT_SYMBOL .

    LBRACKET        reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    TIMES           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_AND_OP   reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    SUPER           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    PLUS            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    MINUS           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    NOT_SYMBOL      reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    DEFINED_OP      reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    IDENTIFIER      reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    LPAREN          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNARY_OP        reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    LKEY            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RETURN          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    YIELD           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    IF              reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNLESS          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    WHILE           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    UNTIL           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    CASE            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    FOR             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    BEGIN           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    CLASS           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    MODULE          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    DEF             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    NUMBER          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    SYMBOL          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    STRING          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_GLOBAL      reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_LOCAL       reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_INSTANCE    reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    VAR_CLASS       reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    DO              reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    TERM            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    DOT             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    DIVIDE          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    MOD             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    POW             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    OR_SYMBOL       reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    GREATERTHAN     reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    LESSERTHAN      reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    EQUAL           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    CASE_EQUALITY   reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    NOTEQUAL        reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    AND             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    OR              reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    $end            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RESCUE          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RPAREN          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    WHEN            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RKEY            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    COMMA           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    HASH_ROCKET     reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    END             reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    ELSIF           reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    ELSE            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    ENSURE          reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    RBRACKET        reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)
    THEN            reduce using rule 219 (operation -> IDENTIFIER NOT_SYMBOL .)


state 152

    (220) operation -> IDENTIFIER OPTIONAL_SYMBOL .

    LBRACKET        reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    TIMES           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_AND_OP   reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    SUPER           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    PLUS            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MINUS           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NOT_SYMBOL      reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DEFINED_OP      reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    IDENTIFIER      reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LPAREN          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNARY_OP        reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LKEY            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RETURN          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    YIELD           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    IF              reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNLESS          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    WHILE           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    UNTIL           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CASE            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    FOR             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BEGIN           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CLASS           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MODULE          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DEF             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NUMBER          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    SYMBOL          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    STRING          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_GLOBAL      reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_LOCAL       reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_INSTANCE    reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    VAR_CLASS       reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DO              reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    TERM            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DOT             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RANGE_EXCLUSIVE reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    DIVIDE          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MOD             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    POW             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OR_SYMBOL       reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    GREATERTHAN     reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LESSERTHAN      reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    EQUAL           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    CASE_EQUALITY   reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    NOTEQUAL        reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    AND             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    OR              reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    $end            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RESCUE          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RPAREN          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    WHEN            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RKEY            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    COMMA           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    HASH_ROCKET     reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    END             reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ELSIF           reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ELSE            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    ENSURE          reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    RBRACKET        reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)
    THEN            reduce using rule 220 (operation -> IDENTIFIER OPTIONAL_SYMBOL .)


state 153

    (18) expr -> mlhs = . mrhs
    (141) mrhs -> . args
    (142) mrhs -> . args COMMA
    (143) mrhs -> . args TIMES
    (144) mrhs -> . args arg
    (145) mrhs -> . TIMES arg
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 282
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    mrhs                           shift and go to state 280
    args                           shift and go to state 281
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 154

    (19) expr -> RETURN call_args .

    AND             reduce using rule 19 (expr -> RETURN call_args .)
    OR              reduce using rule 19 (expr -> RETURN call_args .)
    IF              reduce using rule 19 (expr -> RETURN call_args .)
    WHILE           reduce using rule 19 (expr -> RETURN call_args .)
    UNLESS          reduce using rule 19 (expr -> RETURN call_args .)
    UNTIL           reduce using rule 19 (expr -> RETURN call_args .)
    TERM            reduce using rule 19 (expr -> RETURN call_args .)
    NUMBER          reduce using rule 19 (expr -> RETURN call_args .)
    LPAREN          reduce using rule 19 (expr -> RETURN call_args .)
    $end            reduce using rule 19 (expr -> RETURN call_args .)
    THEN            reduce using rule 19 (expr -> RETURN call_args .)
    DO              reduce using rule 19 (expr -> RETURN call_args .)
    RESCUE          reduce using rule 19 (expr -> RETURN call_args .)
    RPAREN          reduce using rule 19 (expr -> RETURN call_args .)
    WHEN            reduce using rule 19 (expr -> RETURN call_args .)
    RKEY            reduce using rule 19 (expr -> RETURN call_args .)
    LKEY            reduce using rule 19 (expr -> RETURN call_args .)
    END             reduce using rule 19 (expr -> RETURN call_args .)
    ELSIF           reduce using rule 19 (expr -> RETURN call_args .)
    ELSE            reduce using rule 19 (expr -> RETURN call_args .)
    ENSURE          reduce using rule 19 (expr -> RETURN call_args .)


state 155

    (93) primary -> RETURN LPAREN . RPAREN
    (94) primary -> RETURN LPAREN . call_args RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    RPAREN          shift and go to state 284
    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NOT             shift and go to state 25
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 285
    compstmt                       shift and go to state 193
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 258
    command                        shift and go to state 287
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 289
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 156

    (172) call_args -> args .
    (173) call_args -> args . COMMA assocs
    (174) call_args -> args . COMMA TIMES arg
    (175) call_args -> args . COMMA BINARY_AND_OP arg
    (176) call_args -> args . COMMA assocs COMMA TIMES arg
    (177) call_args -> args . COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> args . COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> args . COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg

    AND             reduce using rule 172 (call_args -> args .)
    OR              reduce using rule 172 (call_args -> args .)
    IF              reduce using rule 172 (call_args -> args .)
    WHILE           reduce using rule 172 (call_args -> args .)
    UNLESS          reduce using rule 172 (call_args -> args .)
    UNTIL           reduce using rule 172 (call_args -> args .)
    TERM            reduce using rule 172 (call_args -> args .)
    NUMBER          reduce using rule 172 (call_args -> args .)
    LPAREN          reduce using rule 172 (call_args -> args .)
    $end            reduce using rule 172 (call_args -> args .)
    THEN            reduce using rule 172 (call_args -> args .)
    DO              reduce using rule 172 (call_args -> args .)
    RESCUE          reduce using rule 172 (call_args -> args .)
    RPAREN          reduce using rule 172 (call_args -> args .)
    WHEN            reduce using rule 172 (call_args -> args .)
    RKEY            reduce using rule 172 (call_args -> args .)
    LKEY            reduce using rule 172 (call_args -> args .)
    END             reduce using rule 172 (call_args -> args .)
    ELSIF           reduce using rule 172 (call_args -> args .)
    ELSE            reduce using rule 172 (call_args -> args .)
    ENSURE          reduce using rule 172 (call_args -> args .)
    LBRACKET        reduce using rule 172 (call_args -> args .)
    RBRACKET        reduce using rule 172 (call_args -> args .)
    COMMA           shift and go to state 290


state 157

    (180) call_args -> assocs .
    (181) call_args -> assocs . COMMA TIMES arg
    (182) call_args -> assocs . COMMA BINARY_AND_OP arg
    (183) call_args -> assocs . COMMA TIMES arg COMMA BINARY_AND_OP arg

    AND             reduce using rule 180 (call_args -> assocs .)
    OR              reduce using rule 180 (call_args -> assocs .)
    IF              reduce using rule 180 (call_args -> assocs .)
    WHILE           reduce using rule 180 (call_args -> assocs .)
    UNLESS          reduce using rule 180 (call_args -> assocs .)
    UNTIL           reduce using rule 180 (call_args -> assocs .)
    TERM            reduce using rule 180 (call_args -> assocs .)
    NUMBER          reduce using rule 180 (call_args -> assocs .)
    LPAREN          reduce using rule 180 (call_args -> assocs .)
    $end            reduce using rule 180 (call_args -> assocs .)
    THEN            reduce using rule 180 (call_args -> assocs .)
    DO              reduce using rule 180 (call_args -> assocs .)
    RESCUE          reduce using rule 180 (call_args -> assocs .)
    RPAREN          reduce using rule 180 (call_args -> assocs .)
    WHEN            reduce using rule 180 (call_args -> assocs .)
    RKEY            reduce using rule 180 (call_args -> assocs .)
    LKEY            reduce using rule 180 (call_args -> assocs .)
    END             reduce using rule 180 (call_args -> assocs .)
    ELSIF           reduce using rule 180 (call_args -> assocs .)
    ELSE            reduce using rule 180 (call_args -> assocs .)
    ENSURE          reduce using rule 180 (call_args -> assocs .)
    LBRACKET        reduce using rule 180 (call_args -> assocs .)
    RBRACKET        reduce using rule 180 (call_args -> assocs .)
    COMMA           shift and go to state 291


state 158

    (184) call_args -> TIMES . arg
    (185) call_args -> TIMES . arg COMMA BINARY_AND_OP arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 292
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 159

    (186) call_args -> BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 293
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 160

    (187) call_args -> command .

    AND             reduce using rule 187 (call_args -> command .)
    OR              reduce using rule 187 (call_args -> command .)
    IF              reduce using rule 187 (call_args -> command .)
    WHILE           reduce using rule 187 (call_args -> command .)
    UNLESS          reduce using rule 187 (call_args -> command .)
    UNTIL           reduce using rule 187 (call_args -> command .)
    TERM            reduce using rule 187 (call_args -> command .)
    NUMBER          reduce using rule 187 (call_args -> command .)
    LPAREN          reduce using rule 187 (call_args -> command .)
    $end            reduce using rule 187 (call_args -> command .)
    THEN            reduce using rule 187 (call_args -> command .)
    DO              reduce using rule 187 (call_args -> command .)
    RESCUE          reduce using rule 187 (call_args -> command .)
    RPAREN          reduce using rule 187 (call_args -> command .)
    WHEN            reduce using rule 187 (call_args -> command .)
    RKEY            reduce using rule 187 (call_args -> command .)
    LKEY            reduce using rule 187 (call_args -> command .)
    END             reduce using rule 187 (call_args -> command .)
    ELSIF           reduce using rule 187 (call_args -> command .)
    ELSE            reduce using rule 187 (call_args -> command .)
    ENSURE          reduce using rule 187 (call_args -> command .)
    LBRACKET        reduce using rule 187 (call_args -> command .)
    RBRACKET        reduce using rule 187 (call_args -> command .)


state 161

    (20) expr -> YIELD call_args .

    AND             reduce using rule 20 (expr -> YIELD call_args .)
    OR              reduce using rule 20 (expr -> YIELD call_args .)
    IF              reduce using rule 20 (expr -> YIELD call_args .)
    WHILE           reduce using rule 20 (expr -> YIELD call_args .)
    UNLESS          reduce using rule 20 (expr -> YIELD call_args .)
    UNTIL           reduce using rule 20 (expr -> YIELD call_args .)
    TERM            reduce using rule 20 (expr -> YIELD call_args .)
    NUMBER          reduce using rule 20 (expr -> YIELD call_args .)
    LPAREN          reduce using rule 20 (expr -> YIELD call_args .)
    $end            reduce using rule 20 (expr -> YIELD call_args .)
    THEN            reduce using rule 20 (expr -> YIELD call_args .)
    DO              reduce using rule 20 (expr -> YIELD call_args .)
    RESCUE          reduce using rule 20 (expr -> YIELD call_args .)
    RPAREN          reduce using rule 20 (expr -> YIELD call_args .)
    WHEN            reduce using rule 20 (expr -> YIELD call_args .)
    RKEY            reduce using rule 20 (expr -> YIELD call_args .)
    LKEY            reduce using rule 20 (expr -> YIELD call_args .)
    END             reduce using rule 20 (expr -> YIELD call_args .)
    ELSIF           reduce using rule 20 (expr -> YIELD call_args .)
    ELSE            reduce using rule 20 (expr -> YIELD call_args .)
    ENSURE          reduce using rule 20 (expr -> YIELD call_args .)


state 162

    (96) primary -> YIELD LPAREN . RPAREN
    (97) primary -> YIELD LPAREN . call_args RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    RPAREN          shift and go to state 294
    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NOT             shift and go to state 25
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 295
    compstmt                       shift and go to state 193
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 258
    command                        shift and go to state 287
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 289
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 163

    (23) expr -> NOT expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 23 (expr -> NOT expr .)
    WHILE           reduce using rule 23 (expr -> NOT expr .)
    UNLESS          reduce using rule 23 (expr -> NOT expr .)
    UNTIL           reduce using rule 23 (expr -> NOT expr .)
    TERM            reduce using rule 23 (expr -> NOT expr .)
    NUMBER          reduce using rule 23 (expr -> NOT expr .)
    LPAREN          reduce using rule 23 (expr -> NOT expr .)
    $end            reduce using rule 23 (expr -> NOT expr .)
    THEN            reduce using rule 23 (expr -> NOT expr .)
    DO              reduce using rule 23 (expr -> NOT expr .)
    RESCUE          reduce using rule 23 (expr -> NOT expr .)
    RPAREN          reduce using rule 23 (expr -> NOT expr .)
    WHEN            reduce using rule 23 (expr -> NOT expr .)
    RKEY            reduce using rule 23 (expr -> NOT expr .)
    LKEY            reduce using rule 23 (expr -> NOT expr .)
    END             reduce using rule 23 (expr -> NOT expr .)
    ELSIF           reduce using rule 23 (expr -> NOT expr .)
    ELSE            reduce using rule 23 (expr -> NOT expr .)
    ENSURE          reduce using rule 23 (expr -> NOT expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 23 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 23 (expr -> NOT expr .) ]


state 164

    (25) expr -> NOT_SYMBOL command .

    AND             reduce using rule 25 (expr -> NOT_SYMBOL command .)
    OR              reduce using rule 25 (expr -> NOT_SYMBOL command .)
    IF              reduce using rule 25 (expr -> NOT_SYMBOL command .)
    WHILE           reduce using rule 25 (expr -> NOT_SYMBOL command .)
    UNLESS          reduce using rule 25 (expr -> NOT_SYMBOL command .)
    UNTIL           reduce using rule 25 (expr -> NOT_SYMBOL command .)
    TERM            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    NUMBER          reduce using rule 25 (expr -> NOT_SYMBOL command .)
    LPAREN          reduce using rule 25 (expr -> NOT_SYMBOL command .)
    $end            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    THEN            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    DO              reduce using rule 25 (expr -> NOT_SYMBOL command .)
    RESCUE          reduce using rule 25 (expr -> NOT_SYMBOL command .)
    RPAREN          reduce using rule 25 (expr -> NOT_SYMBOL command .)
    WHEN            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    RKEY            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    LKEY            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    END             reduce using rule 25 (expr -> NOT_SYMBOL command .)
    ELSIF           reduce using rule 25 (expr -> NOT_SYMBOL command .)
    ELSE            reduce using rule 25 (expr -> NOT_SYMBOL command .)
    ENSURE          reduce using rule 25 (expr -> NOT_SYMBOL command .)


state 165

    (65) arg -> NOT_SYMBOL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    WHILE           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    UNLESS          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    UNTIL           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    TERM            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    NUMBER          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    LPAREN          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    $end            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    COMMA           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RBRACKET        reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    THEN            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    DO              reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RESCUE          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    HASH_ROCKET     reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RKEY            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RPAREN          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    WHEN            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    LKEY            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    END             reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    ELSIF           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    ELSE            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    ENSURE          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    LBRACKET        reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    NOT_SYMBOL      reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    COMPLEMENT_OP   reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    DEFINED_OP      reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    UNARY_OP        reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RETURN          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    YIELD           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    CASE            reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    FOR             reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    BEGIN           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    CLASS           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    MODULE          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    DEF             reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    VAR_GLOBAL      reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    VAR_LOCAL       reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    VAR_INSTANCE    reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    VAR_CLASS       reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    SYMBOL          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    STRING          reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    IDENTIFIER      reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    SUPER           reduce using rule 65 (arg -> NOT_SYMBOL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! PLUS            [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! MINUS           [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! TIMES           [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! DIVIDE          [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! MOD             [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! POW             [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! GREATERTHAN     [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! LESSERTHAN      [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! EQUAL           [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! NOTEQUAL        [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! AND             [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]
  ! OR              [ reduce using rule 65 (arg -> NOT_SYMBOL arg .) ]


state 166

    (42) arg -> arg RANGE_INCLUSIVE . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 296
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 167

    (43) arg -> arg RANGE_EXCLUSIVE . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 297
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 168

    (44) arg -> arg PLUS . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 298
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 169

    (45) arg -> arg MINUS . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 299
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 170

    (46) arg -> arg TIMES . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 300
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 171

    (47) arg -> arg DIVIDE . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 301
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 172

    (48) arg -> arg MOD . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 302
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 173

    (49) arg -> arg POW . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 303
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 174

    (52) arg -> arg OR_SYMBOL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 304
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 175

    (53) arg -> arg BINARY_XOR_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 305
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 176

    (54) arg -> arg BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 306
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 177

    (55) arg -> arg COMBINED_COMPARISON_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 307
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 178

    (56) arg -> arg GREATERTHAN . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 308
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 179

    (57) arg -> arg GREATERTHANEQUAL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 309
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 180

    (58) arg -> arg LESSERTHAN . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 310
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 181

    (59) arg -> arg LESSERTHANEQUAL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 311
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 182

    (60) arg -> arg EQUAL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 312
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 183

    (61) arg -> arg CASE_EQUALITY . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 313
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 184

    (62) arg -> arg NOTEQUAL . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 314
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 185

    (63) arg -> arg MATCHED_STRINGS_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 315
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 186

    (64) arg -> arg OPPOSITE_MATCHED_STRINGS_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 316
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 187

    (67) arg -> arg BINARY_LEFT_SHIFT_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 317
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 188

    (68) arg -> arg BINARY_RIGHT_SHIFT_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 318
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 189

    (69) arg -> arg AND . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 319
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 190

    (70) arg -> arg OR . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 320
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 191

    (33) function -> operation LBRACKET . LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (84) primary -> LBRACKET . RBRACKET
    (85) primary -> LBRACKET . args RBRACKET
    (86) primary -> LBRACKET . args COMMA RBRACKET
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 321
    RBRACKET        shift and go to state 67
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    operation                      shift and go to state 81
    args                           shift and go to state 69
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79

state 192

    (29) command -> operation call_args .

    DO              reduce using rule 29 (command -> operation call_args .)
    TERM            reduce using rule 29 (command -> operation call_args .)
    NUMBER          reduce using rule 29 (command -> operation call_args .)
    LPAREN          reduce using rule 29 (command -> operation call_args .)
    AND             reduce using rule 29 (command -> operation call_args .)
    OR              reduce using rule 29 (command -> operation call_args .)
    IF              reduce using rule 29 (command -> operation call_args .)
    WHILE           reduce using rule 29 (command -> operation call_args .)
    UNLESS          reduce using rule 29 (command -> operation call_args .)
    UNTIL           reduce using rule 29 (command -> operation call_args .)
    $end            reduce using rule 29 (command -> operation call_args .)
    THEN            reduce using rule 29 (command -> operation call_args .)
    RESCUE          reduce using rule 29 (command -> operation call_args .)
    RPAREN          reduce using rule 29 (command -> operation call_args .)
    WHEN            reduce using rule 29 (command -> operation call_args .)
    RKEY            reduce using rule 29 (command -> operation call_args .)
    LKEY            reduce using rule 29 (command -> operation call_args .)
    END             reduce using rule 29 (command -> operation call_args .)
    ELSIF           reduce using rule 29 (command -> operation call_args .)
    ELSE            reduce using rule 29 (command -> operation call_args .)
    ENSURE          reduce using rule 29 (command -> operation call_args .)
    LBRACKET        reduce using rule 29 (command -> operation call_args .)
    RBRACKET        reduce using rule 29 (command -> operation call_args .)


state 193

    (77) primary -> LPAREN compstmt . RPAREN

    RPAREN          shift and go to state 322


state 194

    (159) mlhs_item -> LPAREN mlhs . RPAREN
    (18) expr -> mlhs . = mrhs

    RPAREN          shift and go to state 323
    =               shift and go to state 153


state 195

    (16) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (158) mlhs_item -> lhs .
    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    =               shift and go to state 132
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 196

    (81) primary -> UNARY_OP IDENTIFIER .

    LBRACKET        reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    DOT             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    UNARY_OP        reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    PLUS            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    MINUS           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    TIMES           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    DIVIDE          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    MOD             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    POW             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    OR_SYMBOL       reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    GREATERTHAN     reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    LESSERTHAN      reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    EQUAL           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    NOTEQUAL        reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    AND             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    OR              reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    IF              reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    WHILE           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    UNLESS          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    UNTIL           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    TERM            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    NUMBER          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    LPAREN          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    $end            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    COMMA           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RBRACKET        reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    THEN            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    DO              reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RESCUE          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    HASH_ROCKET     reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RKEY            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RPAREN          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    WHEN            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    LKEY            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    END             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    ELSIF           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    ELSE            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    ENSURE          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    NOT_SYMBOL      reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    DEFINED_OP      reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    RETURN          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    YIELD           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    CASE            reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    FOR             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    BEGIN           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    CLASS           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    MODULE          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    DEF             reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    VAR_LOCAL       reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    VAR_CLASS       reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    SYMBOL          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    STRING          reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    IDENTIFIER      reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)
    SUPER           reduce using rule 81 (primary -> UNARY_OP IDENTIFIER .)


state 197

    (38) function -> SUPER LPAREN . call_args RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NOT             shift and go to state 25
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 324
    compstmt                       shift and go to state 193
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 258
    command                        shift and go to state 287
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 289
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 198

    (32) command -> SUPER call_args .

    DO              reduce using rule 32 (command -> SUPER call_args .)
    TERM            reduce using rule 32 (command -> SUPER call_args .)
    NUMBER          reduce using rule 32 (command -> SUPER call_args .)
    LPAREN          reduce using rule 32 (command -> SUPER call_args .)
    AND             reduce using rule 32 (command -> SUPER call_args .)
    OR              reduce using rule 32 (command -> SUPER call_args .)
    IF              reduce using rule 32 (command -> SUPER call_args .)
    WHILE           reduce using rule 32 (command -> SUPER call_args .)
    UNLESS          reduce using rule 32 (command -> SUPER call_args .)
    UNTIL           reduce using rule 32 (command -> SUPER call_args .)
    $end            reduce using rule 32 (command -> SUPER call_args .)
    THEN            reduce using rule 32 (command -> SUPER call_args .)
    RESCUE          reduce using rule 32 (command -> SUPER call_args .)
    RPAREN          reduce using rule 32 (command -> SUPER call_args .)
    WHEN            reduce using rule 32 (command -> SUPER call_args .)
    RKEY            reduce using rule 32 (command -> SUPER call_args .)
    LKEY            reduce using rule 32 (command -> SUPER call_args .)
    END             reduce using rule 32 (command -> SUPER call_args .)
    ELSIF           reduce using rule 32 (command -> SUPER call_args .)
    ELSE            reduce using rule 32 (command -> SUPER call_args .)
    ENSURE          reduce using rule 32 (command -> SUPER call_args .)
    LBRACKET        reduce using rule 32 (command -> SUPER call_args .)
    RBRACKET        reduce using rule 32 (command -> SUPER call_args .)


state 199

    (98) primary -> DEFINED_OP LPAREN . arg LPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (27) call -> . function
    (28) call -> . command
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 327
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 328
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    END             shift and go to state 7
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 31
    NOT             shift and go to state 25
    TIMES           shift and go to state 44

    arg                            shift and go to state 325
    compstmt                       shift and go to state 193
    lhs                            shift and go to state 326
    primary                        shift and go to state 260
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 289
    call                           shift and go to state 5
    command                        shift and go to state 17
    operation                      shift and go to state 28
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 200

    (71) arg -> DEFINED_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 71 (arg -> DEFINED_OP arg .)
    WHILE           reduce using rule 71 (arg -> DEFINED_OP arg .)
    UNLESS          reduce using rule 71 (arg -> DEFINED_OP arg .)
    UNTIL           reduce using rule 71 (arg -> DEFINED_OP arg .)
    TERM            reduce using rule 71 (arg -> DEFINED_OP arg .)
    NUMBER          reduce using rule 71 (arg -> DEFINED_OP arg .)
    LPAREN          reduce using rule 71 (arg -> DEFINED_OP arg .)
    $end            reduce using rule 71 (arg -> DEFINED_OP arg .)
    COMMA           reduce using rule 71 (arg -> DEFINED_OP arg .)
    RBRACKET        reduce using rule 71 (arg -> DEFINED_OP arg .)
    THEN            reduce using rule 71 (arg -> DEFINED_OP arg .)
    DO              reduce using rule 71 (arg -> DEFINED_OP arg .)
    RESCUE          reduce using rule 71 (arg -> DEFINED_OP arg .)
    HASH_ROCKET     reduce using rule 71 (arg -> DEFINED_OP arg .)
    RKEY            reduce using rule 71 (arg -> DEFINED_OP arg .)
    RPAREN          reduce using rule 71 (arg -> DEFINED_OP arg .)
    WHEN            reduce using rule 71 (arg -> DEFINED_OP arg .)
    LKEY            reduce using rule 71 (arg -> DEFINED_OP arg .)
    END             reduce using rule 71 (arg -> DEFINED_OP arg .)
    ELSIF           reduce using rule 71 (arg -> DEFINED_OP arg .)
    ELSE            reduce using rule 71 (arg -> DEFINED_OP arg .)
    ENSURE          reduce using rule 71 (arg -> DEFINED_OP arg .)
    LBRACKET        reduce using rule 71 (arg -> DEFINED_OP arg .)
    NOT_SYMBOL      reduce using rule 71 (arg -> DEFINED_OP arg .)
    COMPLEMENT_OP   reduce using rule 71 (arg -> DEFINED_OP arg .)
    DEFINED_OP      reduce using rule 71 (arg -> DEFINED_OP arg .)
    UNARY_OP        reduce using rule 71 (arg -> DEFINED_OP arg .)
    RETURN          reduce using rule 71 (arg -> DEFINED_OP arg .)
    YIELD           reduce using rule 71 (arg -> DEFINED_OP arg .)
    CASE            reduce using rule 71 (arg -> DEFINED_OP arg .)
    FOR             reduce using rule 71 (arg -> DEFINED_OP arg .)
    BEGIN           reduce using rule 71 (arg -> DEFINED_OP arg .)
    CLASS           reduce using rule 71 (arg -> DEFINED_OP arg .)
    MODULE          reduce using rule 71 (arg -> DEFINED_OP arg .)
    DEF             reduce using rule 71 (arg -> DEFINED_OP arg .)
    VAR_GLOBAL      reduce using rule 71 (arg -> DEFINED_OP arg .)
    VAR_LOCAL       reduce using rule 71 (arg -> DEFINED_OP arg .)
    VAR_INSTANCE    reduce using rule 71 (arg -> DEFINED_OP arg .)
    VAR_CLASS       reduce using rule 71 (arg -> DEFINED_OP arg .)
    SYMBOL          reduce using rule 71 (arg -> DEFINED_OP arg .)
    STRING          reduce using rule 71 (arg -> DEFINED_OP arg .)
    IDENTIFIER      reduce using rule 71 (arg -> DEFINED_OP arg .)
    SUPER           reduce using rule 71 (arg -> DEFINED_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! PLUS            [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! MINUS           [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! TIMES           [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! DIVIDE          [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! MOD             [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! POW             [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! EQUAL           [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! AND             [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]
  ! OR              [ reduce using rule 71 (arg -> DEFINED_OP arg .) ]


state 201

    (110) primary -> CASE compstmt . when END
    (111) primary -> CASE compstmt . when ELSE compstmt END
    (125) when -> . WHEN when_args then compstmt
    (126) when -> . when WHEN when_args then compstmt

    WHEN            shift and go to state 330

    when                           shift and go to state 329

state 202

    (112) primary -> FOR block_var . IN expr do compstmt END

    IN              shift and go to state 331


state 203

    (150) block_var -> lhs .
    (158) mlhs_item -> lhs .

    IN              reduce using rule 150 (block_var -> lhs .)
    OR_SYMBOL       reduce using rule 150 (block_var -> lhs .)
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)


state 204

    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

    LBRACKET        shift and go to state 148
    DOT             shift and go to state 237
    UNARY_OP        shift and go to state 238


state 205

    (98) primary -> DEFINED_OP . LPAREN arg LPAREN

    LPAREN          shift and go to state 332


state 206

    (117) primary -> CLASS IDENTIFIER . compstmt END
    (118) primary -> CLASS IDENTIFIER . LESSERTHAN IDENTIFIER compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LESSERTHAN      shift and go to state 334
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 333
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 207

    (119) primary -> MODULE IDENTIFIER . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 335
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 208

    (120) primary -> DEF fname . argdecl compstmt END
    (162) argdecl -> . LPAREN arglist RPAREN
    (163) argdecl -> . arglist term
    (164) arglist -> . IDENTIFIER
    (165) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (166) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 337
    IDENTIFIER      shift and go to state 339

    argdecl                        shift and go to state 336
    arglist                        shift and go to state 338

state 209

    (121) primary -> DEF singleton . DOT fname argdecl compstmt END
    (122) primary -> DEF singleton . UNARY_OP fname argdecl compstmt END

    DOT             shift and go to state 340
    UNARY_OP        shift and go to state 341


state 210

    (167) singleton -> variable .

    DOT             reduce using rule 167 (singleton -> variable .)
    UNARY_OP        reduce using rule 167 (singleton -> variable .)


state 211

    (168) singleton -> LPAREN . expr RPAREN
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 342
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 212

    (152) mlhs -> mlhs_item COMMA . mlhs_item TIMES
    (153) mlhs -> mlhs_item COMMA . mlhs_item lhs
    (154) mlhs -> mlhs_item COMMA . mult_mlhs_item TIMES
    (155) mlhs -> mlhs_item COMMA . mult_mlhs_item lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (157) mult_mlhs_item -> . COMMA mlhs_item
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 117
    COMMA           shift and go to state 344
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    mlhs_item                      shift and go to state 343
    lhs                            shift and go to state 345
    mult_mlhs_item                 shift and go to state 346
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 213

    (156) mlhs -> TIMES lhs .

    =               reduce using rule 156 (mlhs -> TIMES lhs .)
    RBRACKET        reduce using rule 156 (mlhs -> TIMES lhs .)
    RPAREN          reduce using rule 156 (mlhs -> TIMES lhs .)
    IN              reduce using rule 156 (mlhs -> TIMES lhs .)
    OR_SYMBOL       reduce using rule 156 (mlhs -> TIMES lhs .)


state 214

    (50) arg -> PLUS arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 50 (arg -> PLUS arg .)
    WHILE           reduce using rule 50 (arg -> PLUS arg .)
    UNLESS          reduce using rule 50 (arg -> PLUS arg .)
    UNTIL           reduce using rule 50 (arg -> PLUS arg .)
    TERM            reduce using rule 50 (arg -> PLUS arg .)
    NUMBER          reduce using rule 50 (arg -> PLUS arg .)
    LPAREN          reduce using rule 50 (arg -> PLUS arg .)
    $end            reduce using rule 50 (arg -> PLUS arg .)
    COMMA           reduce using rule 50 (arg -> PLUS arg .)
    RBRACKET        reduce using rule 50 (arg -> PLUS arg .)
    THEN            reduce using rule 50 (arg -> PLUS arg .)
    DO              reduce using rule 50 (arg -> PLUS arg .)
    RESCUE          reduce using rule 50 (arg -> PLUS arg .)
    HASH_ROCKET     reduce using rule 50 (arg -> PLUS arg .)
    RKEY            reduce using rule 50 (arg -> PLUS arg .)
    RPAREN          reduce using rule 50 (arg -> PLUS arg .)
    WHEN            reduce using rule 50 (arg -> PLUS arg .)
    LKEY            reduce using rule 50 (arg -> PLUS arg .)
    END             reduce using rule 50 (arg -> PLUS arg .)
    ELSIF           reduce using rule 50 (arg -> PLUS arg .)
    ELSE            reduce using rule 50 (arg -> PLUS arg .)
    ENSURE          reduce using rule 50 (arg -> PLUS arg .)
    LBRACKET        reduce using rule 50 (arg -> PLUS arg .)
    NOT_SYMBOL      reduce using rule 50 (arg -> PLUS arg .)
    COMPLEMENT_OP   reduce using rule 50 (arg -> PLUS arg .)
    DEFINED_OP      reduce using rule 50 (arg -> PLUS arg .)
    UNARY_OP        reduce using rule 50 (arg -> PLUS arg .)
    RETURN          reduce using rule 50 (arg -> PLUS arg .)
    YIELD           reduce using rule 50 (arg -> PLUS arg .)
    CASE            reduce using rule 50 (arg -> PLUS arg .)
    FOR             reduce using rule 50 (arg -> PLUS arg .)
    BEGIN           reduce using rule 50 (arg -> PLUS arg .)
    CLASS           reduce using rule 50 (arg -> PLUS arg .)
    MODULE          reduce using rule 50 (arg -> PLUS arg .)
    DEF             reduce using rule 50 (arg -> PLUS arg .)
    VAR_GLOBAL      reduce using rule 50 (arg -> PLUS arg .)
    VAR_LOCAL       reduce using rule 50 (arg -> PLUS arg .)
    VAR_INSTANCE    reduce using rule 50 (arg -> PLUS arg .)
    VAR_CLASS       reduce using rule 50 (arg -> PLUS arg .)
    SYMBOL          reduce using rule 50 (arg -> PLUS arg .)
    STRING          reduce using rule 50 (arg -> PLUS arg .)
    IDENTIFIER      reduce using rule 50 (arg -> PLUS arg .)
    SUPER           reduce using rule 50 (arg -> PLUS arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! PLUS            [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! MINUS           [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! TIMES           [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! DIVIDE          [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! MOD             [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! POW             [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! EQUAL           [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! AND             [ reduce using rule 50 (arg -> PLUS arg .) ]
  ! OR              [ reduce using rule 50 (arg -> PLUS arg .) ]


state 215

    (51) arg -> MINUS arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 51 (arg -> MINUS arg .)
    WHILE           reduce using rule 51 (arg -> MINUS arg .)
    UNLESS          reduce using rule 51 (arg -> MINUS arg .)
    UNTIL           reduce using rule 51 (arg -> MINUS arg .)
    TERM            reduce using rule 51 (arg -> MINUS arg .)
    NUMBER          reduce using rule 51 (arg -> MINUS arg .)
    LPAREN          reduce using rule 51 (arg -> MINUS arg .)
    $end            reduce using rule 51 (arg -> MINUS arg .)
    COMMA           reduce using rule 51 (arg -> MINUS arg .)
    RBRACKET        reduce using rule 51 (arg -> MINUS arg .)
    THEN            reduce using rule 51 (arg -> MINUS arg .)
    DO              reduce using rule 51 (arg -> MINUS arg .)
    RESCUE          reduce using rule 51 (arg -> MINUS arg .)
    HASH_ROCKET     reduce using rule 51 (arg -> MINUS arg .)
    RKEY            reduce using rule 51 (arg -> MINUS arg .)
    RPAREN          reduce using rule 51 (arg -> MINUS arg .)
    WHEN            reduce using rule 51 (arg -> MINUS arg .)
    LKEY            reduce using rule 51 (arg -> MINUS arg .)
    END             reduce using rule 51 (arg -> MINUS arg .)
    ELSIF           reduce using rule 51 (arg -> MINUS arg .)
    ELSE            reduce using rule 51 (arg -> MINUS arg .)
    ENSURE          reduce using rule 51 (arg -> MINUS arg .)
    LBRACKET        reduce using rule 51 (arg -> MINUS arg .)
    NOT_SYMBOL      reduce using rule 51 (arg -> MINUS arg .)
    COMPLEMENT_OP   reduce using rule 51 (arg -> MINUS arg .)
    DEFINED_OP      reduce using rule 51 (arg -> MINUS arg .)
    UNARY_OP        reduce using rule 51 (arg -> MINUS arg .)
    RETURN          reduce using rule 51 (arg -> MINUS arg .)
    YIELD           reduce using rule 51 (arg -> MINUS arg .)
    CASE            reduce using rule 51 (arg -> MINUS arg .)
    FOR             reduce using rule 51 (arg -> MINUS arg .)
    BEGIN           reduce using rule 51 (arg -> MINUS arg .)
    CLASS           reduce using rule 51 (arg -> MINUS arg .)
    MODULE          reduce using rule 51 (arg -> MINUS arg .)
    DEF             reduce using rule 51 (arg -> MINUS arg .)
    VAR_GLOBAL      reduce using rule 51 (arg -> MINUS arg .)
    VAR_LOCAL       reduce using rule 51 (arg -> MINUS arg .)
    VAR_INSTANCE    reduce using rule 51 (arg -> MINUS arg .)
    VAR_CLASS       reduce using rule 51 (arg -> MINUS arg .)
    SYMBOL          reduce using rule 51 (arg -> MINUS arg .)
    STRING          reduce using rule 51 (arg -> MINUS arg .)
    IDENTIFIER      reduce using rule 51 (arg -> MINUS arg .)
    SUPER           reduce using rule 51 (arg -> MINUS arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! PLUS            [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! MINUS           [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! TIMES           [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! DIVIDE          [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! MOD             [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! POW             [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! EQUAL           [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! AND             [ reduce using rule 51 (arg -> MINUS arg .) ]
  ! OR              [ reduce using rule 51 (arg -> MINUS arg .) ]


state 216

    (66) arg -> COMPLEMENT_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    WHILE           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    UNLESS          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    UNTIL           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    TERM            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    NUMBER          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    LPAREN          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    $end            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    COMMA           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RBRACKET        reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    THEN            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    DO              reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RESCUE          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    HASH_ROCKET     reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RKEY            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RPAREN          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    WHEN            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    LKEY            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    END             reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    ELSIF           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    ELSE            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    ENSURE          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    LBRACKET        reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    NOT_SYMBOL      reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    COMPLEMENT_OP   reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    DEFINED_OP      reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    UNARY_OP        reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RETURN          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    YIELD           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    CASE            reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    FOR             reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    BEGIN           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    CLASS           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    MODULE          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    DEF             reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    VAR_GLOBAL      reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    VAR_LOCAL       reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    VAR_INSTANCE    reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    VAR_CLASS       reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    SYMBOL          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    STRING          reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    IDENTIFIER      reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    SUPER           reduce using rule 66 (arg -> COMPLEMENT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! PLUS            [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! MINUS           [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! TIMES           [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! MOD             [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! POW             [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! EQUAL           [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! AND             [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]
  ! OR              [ reduce using rule 66 (arg -> COMPLEMENT_OP arg .) ]


state 217

    (4) compstmt -> stmt term expr . term
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 60
    OR              shift and go to state 61
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    term                           shift and go to state 347
    factor                         shift and go to state 57

state 218

    (237) term -> term TIMES . factor
    (156) mlhs -> TIMES . lhs
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    NUMBER          shift and go to state 349
    LPAREN          shift and go to state 350
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    factor                         shift and go to state 348
    lhs                            shift and go to state 213
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 219

    (238) term -> term DIVIDE . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    factor                         shift and go to state 351

state 220

    (10) stmt -> stmt IF expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    IF              reduce using rule 10 (stmt -> stmt IF expr .)
    WHILE           reduce using rule 10 (stmt -> stmt IF expr .)
    UNLESS          reduce using rule 10 (stmt -> stmt IF expr .)
    UNTIL           reduce using rule 10 (stmt -> stmt IF expr .)
    TERM            reduce using rule 10 (stmt -> stmt IF expr .)
    NUMBER          reduce using rule 10 (stmt -> stmt IF expr .)
    LPAREN          reduce using rule 10 (stmt -> stmt IF expr .)
    $end            reduce using rule 10 (stmt -> stmt IF expr .)
    RESCUE          reduce using rule 10 (stmt -> stmt IF expr .)
    RPAREN          reduce using rule 10 (stmt -> stmt IF expr .)
    WHEN            reduce using rule 10 (stmt -> stmt IF expr .)
    RKEY            reduce using rule 10 (stmt -> stmt IF expr .)
    LKEY            reduce using rule 10 (stmt -> stmt IF expr .)
    END             reduce using rule 10 (stmt -> stmt IF expr .)
    ELSIF           reduce using rule 10 (stmt -> stmt IF expr .)
    ELSE            reduce using rule 10 (stmt -> stmt IF expr .)
    ENSURE          reduce using rule 10 (stmt -> stmt IF expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 221

    (11) stmt -> stmt WHILE expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    IF              reduce using rule 11 (stmt -> stmt WHILE expr .)
    WHILE           reduce using rule 11 (stmt -> stmt WHILE expr .)
    UNLESS          reduce using rule 11 (stmt -> stmt WHILE expr .)
    UNTIL           reduce using rule 11 (stmt -> stmt WHILE expr .)
    TERM            reduce using rule 11 (stmt -> stmt WHILE expr .)
    NUMBER          reduce using rule 11 (stmt -> stmt WHILE expr .)
    LPAREN          reduce using rule 11 (stmt -> stmt WHILE expr .)
    $end            reduce using rule 11 (stmt -> stmt WHILE expr .)
    RESCUE          reduce using rule 11 (stmt -> stmt WHILE expr .)
    RPAREN          reduce using rule 11 (stmt -> stmt WHILE expr .)
    WHEN            reduce using rule 11 (stmt -> stmt WHILE expr .)
    RKEY            reduce using rule 11 (stmt -> stmt WHILE expr .)
    LKEY            reduce using rule 11 (stmt -> stmt WHILE expr .)
    END             reduce using rule 11 (stmt -> stmt WHILE expr .)
    ELSIF           reduce using rule 11 (stmt -> stmt WHILE expr .)
    ELSE            reduce using rule 11 (stmt -> stmt WHILE expr .)
    ENSURE          reduce using rule 11 (stmt -> stmt WHILE expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 222

    (12) stmt -> stmt UNLESS expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    IF              reduce using rule 12 (stmt -> stmt UNLESS expr .)
    WHILE           reduce using rule 12 (stmt -> stmt UNLESS expr .)
    UNLESS          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    UNTIL           reduce using rule 12 (stmt -> stmt UNLESS expr .)
    TERM            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    NUMBER          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    LPAREN          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    $end            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    RESCUE          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    RPAREN          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    WHEN            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    RKEY            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    LKEY            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    END             reduce using rule 12 (stmt -> stmt UNLESS expr .)
    ELSIF           reduce using rule 12 (stmt -> stmt UNLESS expr .)
    ELSE            reduce using rule 12 (stmt -> stmt UNLESS expr .)
    ENSURE          reduce using rule 12 (stmt -> stmt UNLESS expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 223

    (13) stmt -> stmt UNTIL expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    IF              reduce using rule 13 (stmt -> stmt UNTIL expr .)
    WHILE           reduce using rule 13 (stmt -> stmt UNTIL expr .)
    UNLESS          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    UNTIL           reduce using rule 13 (stmt -> stmt UNTIL expr .)
    TERM            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    NUMBER          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    LPAREN          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    $end            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    RESCUE          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    RPAREN          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    WHEN            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    RKEY            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    LKEY            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    END             reduce using rule 13 (stmt -> stmt UNTIL expr .)
    ELSIF           reduce using rule 13 (stmt -> stmt UNTIL expr .)
    ELSE            reduce using rule 13 (stmt -> stmt UNTIL expr .)
    ENSURE          reduce using rule 13 (stmt -> stmt UNTIL expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 224

    (241) factor -> LPAREN expression . RPAREN
    (234) expression -> expression . PLUS term
    (235) expression -> expression . MINUS term

    RPAREN          shift and go to state 352
    PLUS            shift and go to state 353
    MINUS           shift and go to state 354


state 225

    (236) expression -> term .
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

    RPAREN          reduce using rule 236 (expression -> term .)
    PLUS            reduce using rule 236 (expression -> term .)
    MINUS           reduce using rule 236 (expression -> term .)
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219


state 226

    (21) expr -> expr AND expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 21 (expr -> expr AND expr .)
    WHILE           reduce using rule 21 (expr -> expr AND expr .)
    UNLESS          reduce using rule 21 (expr -> expr AND expr .)
    UNTIL           reduce using rule 21 (expr -> expr AND expr .)
    TERM            reduce using rule 21 (expr -> expr AND expr .)
    NUMBER          reduce using rule 21 (expr -> expr AND expr .)
    LPAREN          reduce using rule 21 (expr -> expr AND expr .)
    $end            reduce using rule 21 (expr -> expr AND expr .)
    THEN            reduce using rule 21 (expr -> expr AND expr .)
    DO              reduce using rule 21 (expr -> expr AND expr .)
    RESCUE          reduce using rule 21 (expr -> expr AND expr .)
    RPAREN          reduce using rule 21 (expr -> expr AND expr .)
    WHEN            reduce using rule 21 (expr -> expr AND expr .)
    RKEY            reduce using rule 21 (expr -> expr AND expr .)
    LKEY            reduce using rule 21 (expr -> expr AND expr .)
    END             reduce using rule 21 (expr -> expr AND expr .)
    ELSIF           reduce using rule 21 (expr -> expr AND expr .)
    ELSE            reduce using rule 21 (expr -> expr AND expr .)
    ENSURE          reduce using rule 21 (expr -> expr AND expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr AND expr .) ]


state 227

    (22) expr -> expr OR expr .
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 22 (expr -> expr OR expr .)
    WHILE           reduce using rule 22 (expr -> expr OR expr .)
    UNLESS          reduce using rule 22 (expr -> expr OR expr .)
    UNTIL           reduce using rule 22 (expr -> expr OR expr .)
    TERM            reduce using rule 22 (expr -> expr OR expr .)
    NUMBER          reduce using rule 22 (expr -> expr OR expr .)
    LPAREN          reduce using rule 22 (expr -> expr OR expr .)
    $end            reduce using rule 22 (expr -> expr OR expr .)
    THEN            reduce using rule 22 (expr -> expr OR expr .)
    DO              reduce using rule 22 (expr -> expr OR expr .)
    RESCUE          reduce using rule 22 (expr -> expr OR expr .)
    RPAREN          reduce using rule 22 (expr -> expr OR expr .)
    WHEN            reduce using rule 22 (expr -> expr OR expr .)
    RKEY            reduce using rule 22 (expr -> expr OR expr .)
    LKEY            reduce using rule 22 (expr -> expr OR expr .)
    END             reduce using rule 22 (expr -> expr OR expr .)
    ELSIF           reduce using rule 22 (expr -> expr OR expr .)
    ELSE            reduce using rule 22 (expr -> expr OR expr .)
    ENSURE          reduce using rule 22 (expr -> expr OR expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr OR expr .) ]


state 228

    (5) stmt -> call do LBRACKET . RBRACKET

    RBRACKET        shift and go to state 355


state 229

    (139) do -> term DO .

    LBRACKET        reduce using rule 139 (do -> term DO .)
    UNDEF           reduce using rule 139 (do -> term DO .)
    ALIAS           reduce using rule 139 (do -> term DO .)
    BEGIN           reduce using rule 139 (do -> term DO .)
    END             reduce using rule 139 (do -> term DO .)
    RETURN          reduce using rule 139 (do -> term DO .)
    YIELD           reduce using rule 139 (do -> term DO .)
    NOT             reduce using rule 139 (do -> term DO .)
    NOT_SYMBOL      reduce using rule 139 (do -> term DO .)
    SUPER           reduce using rule 139 (do -> term DO .)
    VAR_GLOBAL      reduce using rule 139 (do -> term DO .)
    VAR_LOCAL       reduce using rule 139 (do -> term DO .)
    VAR_INSTANCE    reduce using rule 139 (do -> term DO .)
    VAR_CLASS       reduce using rule 139 (do -> term DO .)
    LPAREN          reduce using rule 139 (do -> term DO .)
    UNARY_OP        reduce using rule 139 (do -> term DO .)
    LKEY            reduce using rule 139 (do -> term DO .)
    DEFINED_OP      reduce using rule 139 (do -> term DO .)
    IF              reduce using rule 139 (do -> term DO .)
    UNLESS          reduce using rule 139 (do -> term DO .)
    WHILE           reduce using rule 139 (do -> term DO .)
    UNTIL           reduce using rule 139 (do -> term DO .)
    CASE            reduce using rule 139 (do -> term DO .)
    FOR             reduce using rule 139 (do -> term DO .)
    CLASS           reduce using rule 139 (do -> term DO .)
    MODULE          reduce using rule 139 (do -> term DO .)
    DEF             reduce using rule 139 (do -> term DO .)
    TIMES           reduce using rule 139 (do -> term DO .)
    PLUS            reduce using rule 139 (do -> term DO .)
    MINUS           reduce using rule 139 (do -> term DO .)
    COMPLEMENT_OP   reduce using rule 139 (do -> term DO .)
    IDENTIFIER      reduce using rule 139 (do -> term DO .)
    NUMBER          reduce using rule 139 (do -> term DO .)
    SYMBOL          reduce using rule 139 (do -> term DO .)
    STRING          reduce using rule 139 (do -> term DO .)


state 230

    (237) term -> term TIMES . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    factor                         shift and go to state 348

state 231

    (6) stmt -> LBRACKET block_var RBRACKET .

    IF              reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    WHILE           reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    UNLESS          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    UNTIL           reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    TERM            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    NUMBER          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    LPAREN          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    $end            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    RESCUE          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    RPAREN          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    WHEN            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    RKEY            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    LKEY            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    END             reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    ELSIF           reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    ELSE            reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)
    ENSURE          reduce using rule 6 (stmt -> LBRACKET block_var RBRACKET .)


state 232

    (7) stmt -> LBRACKET OR_SYMBOL block_var . OR_SYMBOL RBRACKET compstmt END

    OR_SYMBOL       shift and go to state 356


state 233

    (85) primary -> LBRACKET args RBRACKET .

    LBRACKET        reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    DOT             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    PLUS            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    MINUS           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    TIMES           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    MOD             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    POW             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    AND             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    OR              reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    IF              reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    WHILE           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    TERM            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    $end            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    COMMA           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    THEN            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    DO              reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RKEY            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    WHEN            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    LKEY            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    END             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    ELSE            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    NOT_SYMBOL      reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    COMPLEMENT_OP   reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    DEFINED_OP      reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    RETURN          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    YIELD           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    CASE            reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    FOR             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    BEGIN           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    CLASS           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    MODULE          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    DEF             reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    VAR_GLOBAL      reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    VAR_LOCAL       reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    VAR_INSTANCE    reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    VAR_CLASS       reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    SYMBOL          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    STRING          reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    IDENTIFIER      reduce using rule 85 (primary -> LBRACKET args RBRACKET .)
    SUPER           reduce using rule 85 (primary -> LBRACKET args RBRACKET .)


state 234

    (86) primary -> LBRACKET args COMMA . RBRACKET

    RBRACKET        shift and go to state 357


state 235

    (40) arg -> lhs = . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 129
    arg                            shift and go to state 270
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 236

    (161) args -> arg COMMA . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 358
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 237

    (149) lhs -> primary DOT . IDENTIFIER
    (34) function -> primary DOT . operation LPAREN call_args RPAREN
    (36) function -> primary DOT . operation
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 276

    operation                      shift and go to state 359

state 238

    (80) primary -> primary UNARY_OP . IDENTIFIER
    (35) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP . operation
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 279

    operation                      shift and go to state 360

state 239

    (93) primary -> RETURN LPAREN . RPAREN
    (94) primary -> RETURN LPAREN . call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RPAREN          shift and go to state 284
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 285
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 240

    (96) primary -> YIELD LPAREN . RPAREN
    (97) primary -> YIELD LPAREN . call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RPAREN          shift and go to state 294
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 295
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 241

    (33) function -> operation LBRACKET . LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET

    LPAREN          shift and go to state 361


state 242

    (38) function -> SUPER LPAREN . call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    call_args                      shift and go to state 324
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 243

    (15) stmt -> END LKEY compstmt . RKEY

    RKEY            shift and go to state 362


state 244

    (216) fname -> LBRACKET RBRACKET .
    (217) fname -> LBRACKET RBRACKET . EQUAL_SYMBOL

    IF              reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    UNLESS          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    UNTIL           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    TERM            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    $end            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    RESCUE          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    LKEY            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    END             reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    ENSURE          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    MOD             reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    POW             reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    OVERLOAD_PLUS   reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    OVERLOAD_MINUS  reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 216 (fname -> LBRACKET RBRACKET .)
    EQUAL_SYMBOL    shift and go to state 363


state 245

    (9) stmt -> ALIAS fname fname .

    IF              reduce using rule 9 (stmt -> ALIAS fname fname .)
    WHILE           reduce using rule 9 (stmt -> ALIAS fname fname .)
    UNLESS          reduce using rule 9 (stmt -> ALIAS fname fname .)
    UNTIL           reduce using rule 9 (stmt -> ALIAS fname fname .)
    TERM            reduce using rule 9 (stmt -> ALIAS fname fname .)
    NUMBER          reduce using rule 9 (stmt -> ALIAS fname fname .)
    LPAREN          reduce using rule 9 (stmt -> ALIAS fname fname .)
    $end            reduce using rule 9 (stmt -> ALIAS fname fname .)
    RESCUE          reduce using rule 9 (stmt -> ALIAS fname fname .)
    RPAREN          reduce using rule 9 (stmt -> ALIAS fname fname .)
    WHEN            reduce using rule 9 (stmt -> ALIAS fname fname .)
    RKEY            reduce using rule 9 (stmt -> ALIAS fname fname .)
    LKEY            reduce using rule 9 (stmt -> ALIAS fname fname .)
    END             reduce using rule 9 (stmt -> ALIAS fname fname .)
    ELSIF           reduce using rule 9 (stmt -> ALIAS fname fname .)
    ELSE            reduce using rule 9 (stmt -> ALIAS fname fname .)
    ENSURE          reduce using rule 9 (stmt -> ALIAS fname fname .)


state 246

    (103) primary -> IF expr then . compstmt END
    (104) primary -> IF expr then . compstmt elsif END
    (105) primary -> IF expr then . compstmt elsif ELSE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 364
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 247

    (134) then -> TERM .
    (136) then -> TERM . THEN

    LBRACKET        reduce using rule 134 (then -> TERM .)
    UNDEF           reduce using rule 134 (then -> TERM .)
    ALIAS           reduce using rule 134 (then -> TERM .)
    BEGIN           reduce using rule 134 (then -> TERM .)
    END             reduce using rule 134 (then -> TERM .)
    RETURN          reduce using rule 134 (then -> TERM .)
    YIELD           reduce using rule 134 (then -> TERM .)
    NOT             reduce using rule 134 (then -> TERM .)
    NOT_SYMBOL      reduce using rule 134 (then -> TERM .)
    SUPER           reduce using rule 134 (then -> TERM .)
    VAR_GLOBAL      reduce using rule 134 (then -> TERM .)
    VAR_LOCAL       reduce using rule 134 (then -> TERM .)
    VAR_INSTANCE    reduce using rule 134 (then -> TERM .)
    VAR_CLASS       reduce using rule 134 (then -> TERM .)
    LPAREN          reduce using rule 134 (then -> TERM .)
    UNARY_OP        reduce using rule 134 (then -> TERM .)
    LKEY            reduce using rule 134 (then -> TERM .)
    DEFINED_OP      reduce using rule 134 (then -> TERM .)
    IF              reduce using rule 134 (then -> TERM .)
    UNLESS          reduce using rule 134 (then -> TERM .)
    WHILE           reduce using rule 134 (then -> TERM .)
    UNTIL           reduce using rule 134 (then -> TERM .)
    CASE            reduce using rule 134 (then -> TERM .)
    FOR             reduce using rule 134 (then -> TERM .)
    CLASS           reduce using rule 134 (then -> TERM .)
    MODULE          reduce using rule 134 (then -> TERM .)
    DEF             reduce using rule 134 (then -> TERM .)
    TIMES           reduce using rule 134 (then -> TERM .)
    PLUS            reduce using rule 134 (then -> TERM .)
    MINUS           reduce using rule 134 (then -> TERM .)
    COMPLEMENT_OP   reduce using rule 134 (then -> TERM .)
    IDENTIFIER      reduce using rule 134 (then -> TERM .)
    NUMBER          reduce using rule 134 (then -> TERM .)
    SYMBOL          reduce using rule 134 (then -> TERM .)
    STRING          reduce using rule 134 (then -> TERM .)
    THEN            shift and go to state 365


state 248

    (135) then -> THEN .

    LBRACKET        reduce using rule 135 (then -> THEN .)
    UNDEF           reduce using rule 135 (then -> THEN .)
    ALIAS           reduce using rule 135 (then -> THEN .)
    BEGIN           reduce using rule 135 (then -> THEN .)
    END             reduce using rule 135 (then -> THEN .)
    RETURN          reduce using rule 135 (then -> THEN .)
    YIELD           reduce using rule 135 (then -> THEN .)
    NOT             reduce using rule 135 (then -> THEN .)
    NOT_SYMBOL      reduce using rule 135 (then -> THEN .)
    SUPER           reduce using rule 135 (then -> THEN .)
    VAR_GLOBAL      reduce using rule 135 (then -> THEN .)
    VAR_LOCAL       reduce using rule 135 (then -> THEN .)
    VAR_INSTANCE    reduce using rule 135 (then -> THEN .)
    VAR_CLASS       reduce using rule 135 (then -> THEN .)
    LPAREN          reduce using rule 135 (then -> THEN .)
    UNARY_OP        reduce using rule 135 (then -> THEN .)
    LKEY            reduce using rule 135 (then -> THEN .)
    DEFINED_OP      reduce using rule 135 (then -> THEN .)
    IF              reduce using rule 135 (then -> THEN .)
    UNLESS          reduce using rule 135 (then -> THEN .)
    WHILE           reduce using rule 135 (then -> THEN .)
    UNTIL           reduce using rule 135 (then -> THEN .)
    CASE            reduce using rule 135 (then -> THEN .)
    FOR             reduce using rule 135 (then -> THEN .)
    CLASS           reduce using rule 135 (then -> THEN .)
    MODULE          reduce using rule 135 (then -> THEN .)
    DEF             reduce using rule 135 (then -> THEN .)
    TIMES           reduce using rule 135 (then -> THEN .)
    PLUS            reduce using rule 135 (then -> THEN .)
    MINUS           reduce using rule 135 (then -> THEN .)
    COMPLEMENT_OP   reduce using rule 135 (then -> THEN .)
    IDENTIFIER      reduce using rule 135 (then -> THEN .)
    NUMBER          reduce using rule 135 (then -> THEN .)
    SYMBOL          reduce using rule 135 (then -> THEN .)
    STRING          reduce using rule 135 (then -> THEN .)


state 249

    (30) command -> primary DOT . operation call_args
    (149) lhs -> primary DOT . IDENTIFIER
    (34) function -> primary DOT . operation LPAREN call_args RPAREN
    (36) function -> primary DOT . operation
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 276

    operation                      shift and go to state 366

state 250

    (31) command -> primary UNARY_OP . operation call_args
    (80) primary -> primary UNARY_OP . IDENTIFIER
    (35) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP . operation
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 279

    operation                      shift and go to state 367

state 251

    (82) primary -> primary LBRACKET . RBRACKET
    (83) primary -> primary LBRACKET . args RBRACKET
    (147) lhs -> primary LBRACKET . RBRACKET
    (148) lhs -> primary LBRACKET . args RBRACKET
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 368
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    primary                        shift and go to state 130
    args                           shift and go to state 369
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 252

    (158) mlhs_item -> lhs .
    (16) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    =               shift and go to state 132
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 253

    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation
    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args
    (72) arg -> primary .

    LBRACKET        shift and go to state 148
    DOT             shift and go to state 149
    UNARY_OP        shift and go to state 370
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)


state 254

    (108) primary -> WHILE expr do . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 371
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 255

    (106) primary -> UNLESS expr then . compstmt END
    (107) primary -> UNLESS expr then . compstmt ELSE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 372
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 256

    (109) primary -> UNTIL expr do . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 373
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 257

    (14) stmt -> BEGIN LKEY compstmt . RKEY

    RKEY            shift and go to state 374


state 258

    (160) args -> arg .
    (161) args -> arg . COMMA arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg
    (171) assoc -> arg . HASH_ROCKET arg
    (26) expr -> arg .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for RKEY resolved using rule 26 (expr -> arg .)
  ! reduce/reduce conflict for RPAREN resolved using rule 26 (expr -> arg .)
    COMMA           shift and go to state 236
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190
    HASH_ROCKET     shift and go to state 267
    IF              reduce using rule 26 (expr -> arg .)
    WHILE           reduce using rule 26 (expr -> arg .)
    UNLESS          reduce using rule 26 (expr -> arg .)
    UNTIL           reduce using rule 26 (expr -> arg .)
    TERM            reduce using rule 26 (expr -> arg .)
    NUMBER          reduce using rule 26 (expr -> arg .)
    LPAREN          reduce using rule 26 (expr -> arg .)
    RKEY            reduce using rule 26 (expr -> arg .)
    RPAREN          reduce using rule 26 (expr -> arg .)

  ! RKEY            [ reduce using rule 160 (args -> arg .) ]
  ! COMMA           [ reduce using rule 160 (args -> arg .) ]
  ! RPAREN          [ reduce using rule 160 (args -> arg .) ]
  ! AND             [ reduce using rule 26 (expr -> arg .) ]
  ! OR              [ reduce using rule 26 (expr -> arg .) ]


state 259

    (65) arg -> NOT_SYMBOL . arg
    (25) expr -> NOT_SYMBOL . command
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    SUPER           shift and go to state 116
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    IDENTIFIER      shift and go to state 21
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    arg                            shift and go to state 165
    command                        shift and go to state 164
    lhs                            shift and go to state 129
    primary                        shift and go to state 375
    operation                      shift and go to state 114
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79

state 260

    (72) arg -> primary .
    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation
    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args

    COMMA           reduce using rule 72 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    HASH_ROCKET     reduce using rule 72 (arg -> primary .)
    RKEY            reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)
    LBRACKET        shift and go to state 148
    DOT             shift and go to state 149
    UNARY_OP        shift and go to state 370


state 261

    (113) primary -> BEGIN compstmt rescue . END
    (114) primary -> BEGIN compstmt rescue . ELSE compstmt END
    (115) primary -> BEGIN compstmt rescue . ENSURE compstmt END
    (116) primary -> BEGIN compstmt rescue . ELSE compstmt ENSURE compstmt END
    (129) rescue -> rescue . RESCUE args do compstmt
    (130) rescue -> rescue . RESCUE do compstmt

    END             shift and go to state 376
    ELSE            shift and go to state 377
    ENSURE          shift and go to state 378
    RESCUE          shift and go to state 379


state 262

    (127) rescue -> RESCUE . args do compstmt
    (128) rescue -> RESCUE . do compstmt
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    DO              shift and go to state 64
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    TERM            shift and go to state 56
    LPAREN          shift and go to state 382
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 349
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    args                           shift and go to state 380
    do                             shift and go to state 381
    arg                            shift and go to state 72
    term                           shift and go to state 63
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    factor                         shift and go to state 57
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 263

    (88) primary -> LKEY args RKEY .

    LBRACKET        reduce using rule 88 (primary -> LKEY args RKEY .)
    DOT             reduce using rule 88 (primary -> LKEY args RKEY .)
    UNARY_OP        reduce using rule 88 (primary -> LKEY args RKEY .)
    RANGE_INCLUSIVE reduce using rule 88 (primary -> LKEY args RKEY .)
    RANGE_EXCLUSIVE reduce using rule 88 (primary -> LKEY args RKEY .)
    PLUS            reduce using rule 88 (primary -> LKEY args RKEY .)
    MINUS           reduce using rule 88 (primary -> LKEY args RKEY .)
    TIMES           reduce using rule 88 (primary -> LKEY args RKEY .)
    DIVIDE          reduce using rule 88 (primary -> LKEY args RKEY .)
    MOD             reduce using rule 88 (primary -> LKEY args RKEY .)
    POW             reduce using rule 88 (primary -> LKEY args RKEY .)
    OR_SYMBOL       reduce using rule 88 (primary -> LKEY args RKEY .)
    BINARY_XOR_OP   reduce using rule 88 (primary -> LKEY args RKEY .)
    BINARY_AND_OP   reduce using rule 88 (primary -> LKEY args RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 88 (primary -> LKEY args RKEY .)
    GREATERTHAN     reduce using rule 88 (primary -> LKEY args RKEY .)
    GREATERTHANEQUAL reduce using rule 88 (primary -> LKEY args RKEY .)
    LESSERTHAN      reduce using rule 88 (primary -> LKEY args RKEY .)
    LESSERTHANEQUAL reduce using rule 88 (primary -> LKEY args RKEY .)
    EQUAL           reduce using rule 88 (primary -> LKEY args RKEY .)
    CASE_EQUALITY   reduce using rule 88 (primary -> LKEY args RKEY .)
    NOTEQUAL        reduce using rule 88 (primary -> LKEY args RKEY .)
    MATCHED_STRINGS_OP reduce using rule 88 (primary -> LKEY args RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 88 (primary -> LKEY args RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 88 (primary -> LKEY args RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 88 (primary -> LKEY args RKEY .)
    AND             reduce using rule 88 (primary -> LKEY args RKEY .)
    OR              reduce using rule 88 (primary -> LKEY args RKEY .)
    IF              reduce using rule 88 (primary -> LKEY args RKEY .)
    WHILE           reduce using rule 88 (primary -> LKEY args RKEY .)
    UNLESS          reduce using rule 88 (primary -> LKEY args RKEY .)
    UNTIL           reduce using rule 88 (primary -> LKEY args RKEY .)
    TERM            reduce using rule 88 (primary -> LKEY args RKEY .)
    NUMBER          reduce using rule 88 (primary -> LKEY args RKEY .)
    LPAREN          reduce using rule 88 (primary -> LKEY args RKEY .)
    $end            reduce using rule 88 (primary -> LKEY args RKEY .)
    COMMA           reduce using rule 88 (primary -> LKEY args RKEY .)
    RBRACKET        reduce using rule 88 (primary -> LKEY args RKEY .)
    THEN            reduce using rule 88 (primary -> LKEY args RKEY .)
    DO              reduce using rule 88 (primary -> LKEY args RKEY .)
    RESCUE          reduce using rule 88 (primary -> LKEY args RKEY .)
    HASH_ROCKET     reduce using rule 88 (primary -> LKEY args RKEY .)
    RKEY            reduce using rule 88 (primary -> LKEY args RKEY .)
    RPAREN          reduce using rule 88 (primary -> LKEY args RKEY .)
    WHEN            reduce using rule 88 (primary -> LKEY args RKEY .)
    LKEY            reduce using rule 88 (primary -> LKEY args RKEY .)
    END             reduce using rule 88 (primary -> LKEY args RKEY .)
    ELSIF           reduce using rule 88 (primary -> LKEY args RKEY .)
    ELSE            reduce using rule 88 (primary -> LKEY args RKEY .)
    ENSURE          reduce using rule 88 (primary -> LKEY args RKEY .)
    NOT_SYMBOL      reduce using rule 88 (primary -> LKEY args RKEY .)
    COMPLEMENT_OP   reduce using rule 88 (primary -> LKEY args RKEY .)
    DEFINED_OP      reduce using rule 88 (primary -> LKEY args RKEY .)
    RETURN          reduce using rule 88 (primary -> LKEY args RKEY .)
    YIELD           reduce using rule 88 (primary -> LKEY args RKEY .)
    CASE            reduce using rule 88 (primary -> LKEY args RKEY .)
    FOR             reduce using rule 88 (primary -> LKEY args RKEY .)
    BEGIN           reduce using rule 88 (primary -> LKEY args RKEY .)
    CLASS           reduce using rule 88 (primary -> LKEY args RKEY .)
    MODULE          reduce using rule 88 (primary -> LKEY args RKEY .)
    DEF             reduce using rule 88 (primary -> LKEY args RKEY .)
    VAR_GLOBAL      reduce using rule 88 (primary -> LKEY args RKEY .)
    VAR_LOCAL       reduce using rule 88 (primary -> LKEY args RKEY .)
    VAR_INSTANCE    reduce using rule 88 (primary -> LKEY args RKEY .)
    VAR_CLASS       reduce using rule 88 (primary -> LKEY args RKEY .)
    SYMBOL          reduce using rule 88 (primary -> LKEY args RKEY .)
    STRING          reduce using rule 88 (primary -> LKEY args RKEY .)
    IDENTIFIER      reduce using rule 88 (primary -> LKEY args RKEY .)
    SUPER           reduce using rule 88 (primary -> LKEY args RKEY .)


state 264

    (90) primary -> LKEY args COMMA . RKEY

    RKEY            shift and go to state 383


state 265

    (89) primary -> LKEY assocs RKEY .

    LBRACKET        reduce using rule 89 (primary -> LKEY assocs RKEY .)
    DOT             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    UNARY_OP        reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RANGE_INCLUSIVE reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RANGE_EXCLUSIVE reduce using rule 89 (primary -> LKEY assocs RKEY .)
    PLUS            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    MINUS           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    TIMES           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    DIVIDE          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    MOD             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    POW             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    OR_SYMBOL       reduce using rule 89 (primary -> LKEY assocs RKEY .)
    BINARY_XOR_OP   reduce using rule 89 (primary -> LKEY assocs RKEY .)
    BINARY_AND_OP   reduce using rule 89 (primary -> LKEY assocs RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 89 (primary -> LKEY assocs RKEY .)
    GREATERTHAN     reduce using rule 89 (primary -> LKEY assocs RKEY .)
    GREATERTHANEQUAL reduce using rule 89 (primary -> LKEY assocs RKEY .)
    LESSERTHAN      reduce using rule 89 (primary -> LKEY assocs RKEY .)
    LESSERTHANEQUAL reduce using rule 89 (primary -> LKEY assocs RKEY .)
    EQUAL           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    CASE_EQUALITY   reduce using rule 89 (primary -> LKEY assocs RKEY .)
    NOTEQUAL        reduce using rule 89 (primary -> LKEY assocs RKEY .)
    MATCHED_STRINGS_OP reduce using rule 89 (primary -> LKEY assocs RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 89 (primary -> LKEY assocs RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 89 (primary -> LKEY assocs RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 89 (primary -> LKEY assocs RKEY .)
    AND             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    OR              reduce using rule 89 (primary -> LKEY assocs RKEY .)
    IF              reduce using rule 89 (primary -> LKEY assocs RKEY .)
    WHILE           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    UNLESS          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    UNTIL           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    TERM            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    NUMBER          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    LPAREN          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    $end            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    COMMA           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RBRACKET        reduce using rule 89 (primary -> LKEY assocs RKEY .)
    THEN            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    DO              reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RESCUE          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    HASH_ROCKET     reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RKEY            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RPAREN          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    WHEN            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    LKEY            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    END             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    ELSIF           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    ELSE            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    ENSURE          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    NOT_SYMBOL      reduce using rule 89 (primary -> LKEY assocs RKEY .)
    COMPLEMENT_OP   reduce using rule 89 (primary -> LKEY assocs RKEY .)
    DEFINED_OP      reduce using rule 89 (primary -> LKEY assocs RKEY .)
    RETURN          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    YIELD           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    CASE            reduce using rule 89 (primary -> LKEY assocs RKEY .)
    FOR             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    BEGIN           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    CLASS           reduce using rule 89 (primary -> LKEY assocs RKEY .)
    MODULE          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    DEF             reduce using rule 89 (primary -> LKEY assocs RKEY .)
    VAR_GLOBAL      reduce using rule 89 (primary -> LKEY assocs RKEY .)
    VAR_LOCAL       reduce using rule 89 (primary -> LKEY assocs RKEY .)
    VAR_INSTANCE    reduce using rule 89 (primary -> LKEY assocs RKEY .)
    VAR_CLASS       reduce using rule 89 (primary -> LKEY assocs RKEY .)
    SYMBOL          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    STRING          reduce using rule 89 (primary -> LKEY assocs RKEY .)
    IDENTIFIER      reduce using rule 89 (primary -> LKEY assocs RKEY .)
    SUPER           reduce using rule 89 (primary -> LKEY assocs RKEY .)


state 266

    (91) primary -> LKEY assocs COMMA . RKEY

    RKEY            shift and go to state 384


state 267

    (171) assoc -> arg HASH_ROCKET . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 385
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 268

    (170) assocs -> assoc COMMA . assoc
    (171) assoc -> . arg HASH_ROCKET arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    assoc                          shift and go to state 386
    arg                            shift and go to state 387
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 269

    (16) stmt -> lhs = command . LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    LBRACKET        shift and go to state 388


state 270

    (40) arg -> lhs = arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 40 (arg -> lhs = arg .)
    WHILE           reduce using rule 40 (arg -> lhs = arg .)
    UNLESS          reduce using rule 40 (arg -> lhs = arg .)
    UNTIL           reduce using rule 40 (arg -> lhs = arg .)
    TERM            reduce using rule 40 (arg -> lhs = arg .)
    NUMBER          reduce using rule 40 (arg -> lhs = arg .)
    LPAREN          reduce using rule 40 (arg -> lhs = arg .)
    $end            reduce using rule 40 (arg -> lhs = arg .)
    COMMA           reduce using rule 40 (arg -> lhs = arg .)
    RBRACKET        reduce using rule 40 (arg -> lhs = arg .)
    THEN            reduce using rule 40 (arg -> lhs = arg .)
    DO              reduce using rule 40 (arg -> lhs = arg .)
    RESCUE          reduce using rule 40 (arg -> lhs = arg .)
    HASH_ROCKET     reduce using rule 40 (arg -> lhs = arg .)
    RKEY            reduce using rule 40 (arg -> lhs = arg .)
    RPAREN          reduce using rule 40 (arg -> lhs = arg .)
    WHEN            reduce using rule 40 (arg -> lhs = arg .)
    LKEY            reduce using rule 40 (arg -> lhs = arg .)
    END             reduce using rule 40 (arg -> lhs = arg .)
    ELSIF           reduce using rule 40 (arg -> lhs = arg .)
    ELSE            reduce using rule 40 (arg -> lhs = arg .)
    ENSURE          reduce using rule 40 (arg -> lhs = arg .)
    LBRACKET        reduce using rule 40 (arg -> lhs = arg .)
    NOT_SYMBOL      reduce using rule 40 (arg -> lhs = arg .)
    COMPLEMENT_OP   reduce using rule 40 (arg -> lhs = arg .)
    DEFINED_OP      reduce using rule 40 (arg -> lhs = arg .)
    UNARY_OP        reduce using rule 40 (arg -> lhs = arg .)
    RETURN          reduce using rule 40 (arg -> lhs = arg .)
    YIELD           reduce using rule 40 (arg -> lhs = arg .)
    CASE            reduce using rule 40 (arg -> lhs = arg .)
    FOR             reduce using rule 40 (arg -> lhs = arg .)
    BEGIN           reduce using rule 40 (arg -> lhs = arg .)
    CLASS           reduce using rule 40 (arg -> lhs = arg .)
    MODULE          reduce using rule 40 (arg -> lhs = arg .)
    DEF             reduce using rule 40 (arg -> lhs = arg .)
    VAR_GLOBAL      reduce using rule 40 (arg -> lhs = arg .)
    VAR_LOCAL       reduce using rule 40 (arg -> lhs = arg .)
    VAR_INSTANCE    reduce using rule 40 (arg -> lhs = arg .)
    VAR_CLASS       reduce using rule 40 (arg -> lhs = arg .)
    SYMBOL          reduce using rule 40 (arg -> lhs = arg .)
    STRING          reduce using rule 40 (arg -> lhs = arg .)
    IDENTIFIER      reduce using rule 40 (arg -> lhs = arg .)
    SUPER           reduce using rule 40 (arg -> lhs = arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! PLUS            [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! MINUS           [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! TIMES           [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! DIVIDE          [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! MOD             [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! POW             [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! OR_SYMBOL       [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! GREATERTHAN     [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! LESSERTHAN      [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! EQUAL           [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! NOTEQUAL        [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! AND             [ reduce using rule 40 (arg -> lhs = arg .) ]
  ! OR              [ reduce using rule 40 (arg -> lhs = arg .) ]


state 271

    (41) arg -> lhs op_asgn arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 41 (arg -> lhs op_asgn arg .)
    WHILE           reduce using rule 41 (arg -> lhs op_asgn arg .)
    UNLESS          reduce using rule 41 (arg -> lhs op_asgn arg .)
    UNTIL           reduce using rule 41 (arg -> lhs op_asgn arg .)
    TERM            reduce using rule 41 (arg -> lhs op_asgn arg .)
    NUMBER          reduce using rule 41 (arg -> lhs op_asgn arg .)
    LPAREN          reduce using rule 41 (arg -> lhs op_asgn arg .)
    $end            reduce using rule 41 (arg -> lhs op_asgn arg .)
    COMMA           reduce using rule 41 (arg -> lhs op_asgn arg .)
    RBRACKET        reduce using rule 41 (arg -> lhs op_asgn arg .)
    THEN            reduce using rule 41 (arg -> lhs op_asgn arg .)
    DO              reduce using rule 41 (arg -> lhs op_asgn arg .)
    RESCUE          reduce using rule 41 (arg -> lhs op_asgn arg .)
    HASH_ROCKET     reduce using rule 41 (arg -> lhs op_asgn arg .)
    RKEY            reduce using rule 41 (arg -> lhs op_asgn arg .)
    RPAREN          reduce using rule 41 (arg -> lhs op_asgn arg .)
    WHEN            reduce using rule 41 (arg -> lhs op_asgn arg .)
    LKEY            reduce using rule 41 (arg -> lhs op_asgn arg .)
    END             reduce using rule 41 (arg -> lhs op_asgn arg .)
    ELSIF           reduce using rule 41 (arg -> lhs op_asgn arg .)
    ELSE            reduce using rule 41 (arg -> lhs op_asgn arg .)
    ENSURE          reduce using rule 41 (arg -> lhs op_asgn arg .)
    LBRACKET        reduce using rule 41 (arg -> lhs op_asgn arg .)
    NOT_SYMBOL      reduce using rule 41 (arg -> lhs op_asgn arg .)
    COMPLEMENT_OP   reduce using rule 41 (arg -> lhs op_asgn arg .)
    DEFINED_OP      reduce using rule 41 (arg -> lhs op_asgn arg .)
    UNARY_OP        reduce using rule 41 (arg -> lhs op_asgn arg .)
    RETURN          reduce using rule 41 (arg -> lhs op_asgn arg .)
    YIELD           reduce using rule 41 (arg -> lhs op_asgn arg .)
    CASE            reduce using rule 41 (arg -> lhs op_asgn arg .)
    FOR             reduce using rule 41 (arg -> lhs op_asgn arg .)
    BEGIN           reduce using rule 41 (arg -> lhs op_asgn arg .)
    CLASS           reduce using rule 41 (arg -> lhs op_asgn arg .)
    MODULE          reduce using rule 41 (arg -> lhs op_asgn arg .)
    DEF             reduce using rule 41 (arg -> lhs op_asgn arg .)
    VAR_GLOBAL      reduce using rule 41 (arg -> lhs op_asgn arg .)
    VAR_LOCAL       reduce using rule 41 (arg -> lhs op_asgn arg .)
    VAR_INSTANCE    reduce using rule 41 (arg -> lhs op_asgn arg .)
    VAR_CLASS       reduce using rule 41 (arg -> lhs op_asgn arg .)
    SYMBOL          reduce using rule 41 (arg -> lhs op_asgn arg .)
    STRING          reduce using rule 41 (arg -> lhs op_asgn arg .)
    IDENTIFIER      reduce using rule 41 (arg -> lhs op_asgn arg .)
    SUPER           reduce using rule 41 (arg -> lhs op_asgn arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! PLUS            [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! MINUS           [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! TIMES           [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! DIVIDE          [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! MOD             [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! POW             [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! OR_SYMBOL       [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! GREATERTHAN     [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! LESSERTHAN      [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! EQUAL           [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! NOTEQUAL        [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! AND             [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]
  ! OR              [ reduce using rule 41 (arg -> lhs op_asgn arg .) ]


state 272

    (100) primary -> function LKEY compstmt . LKEY

    LKEY            shift and go to state 389


state 273

    (101) primary -> function LKEY OR_SYMBOL . OR_SYMBOL compstmt LKEY
    (102) primary -> function LKEY OR_SYMBOL . block_var OR_SYMBOL compstmt LKEY
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    OR_SYMBOL       shift and go to state 390
    TIMES           shift and go to state 44
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    function                       shift and go to state 79
    block_var                      shift and go to state 391
    lhs                            shift and go to state 203
    mlhs                           shift and go to state 71
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    operation                      shift and go to state 81

state 274

    (147) lhs -> primary LBRACKET RBRACKET .
    (82) primary -> primary LBRACKET RBRACKET .

  ! reduce/reduce conflict for LBRACKET resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNLESS resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for UNTIL resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for LKEY resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for YIELD resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for BEGIN resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for CLASS resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for MODULE resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for STRING resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
  ! reduce/reduce conflict for SUPER resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
    =               reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    PLUS_EQUAL      reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    MINUS_EQUAL     reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    TIMES_EQUAL     reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    MOD_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    POW_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    XOR_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    AND_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    OR_EQUAL        reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    IN              reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DOT             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    PLUS            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MINUS           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    TIMES           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MOD             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    POW             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    EQUAL           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    AND             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OR              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    IF              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    WHILE           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNLESS          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNTIL           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    TERM            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    NUMBER          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LPAREN          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    $end            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    COMMA           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RESCUE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RKEY            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RPAREN          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    WHEN            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LKEY            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    END             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ELSIF           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ELSE            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ENSURE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    THEN            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DO              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    NOT_SYMBOL      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    COMPLEMENT_OP   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DEFINED_OP      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RETURN          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    YIELD           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    CASE            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    FOR             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BEGIN           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    CLASS           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MODULE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DEF             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    VAR_GLOBAL      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    VAR_LOCAL       reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    VAR_INSTANCE    reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    VAR_CLASS       reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    SYMBOL          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    STRING          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    SUPER           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)

  ! COMMA           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RPAREN          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! OR_SYMBOL       [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! TIMES           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_GLOBAL      [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_LOCAL       [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_INSTANCE    [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! VAR_CLASS       [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LPAREN          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNARY_OP        [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! LKEY            [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! RETURN          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! YIELD           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! DEFINED_OP      [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! IF              [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNLESS          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! WHILE           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! UNTIL           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! CASE            [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! FOR             [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! BEGIN           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! CLASS           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! MODULE          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! DEF             [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! NUMBER          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! SYMBOL          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! STRING          [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! IDENTIFIER      [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]
  ! SUPER           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]


state 275

    (148) lhs -> primary LBRACKET args . RBRACKET
    (83) primary -> primary LBRACKET args . RBRACKET

    RBRACKET        shift and go to state 392


state 276

    (149) lhs -> primary DOT IDENTIFIER .
    (218) operation -> IDENTIFIER .
    (219) operation -> IDENTIFIER . NOT_SYMBOL
    (220) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LPAREN resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 149 (lhs -> primary DOT IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    =               reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    PLUS_EQUAL      reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    MINUS_EQUAL     reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    TIMES_EQUAL     reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    DIVIDE_EQUAL    reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    MOD_EQUAL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    POW_EQUAL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    SINGLE_AND_EQUAL reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    SINGLE_OR_EQUAL reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    XOR_EQUAL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    BINARY_LEFT_EQUAL reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    BINARY_RIGHT_EQUAL reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    AND_EQUAL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    OR_EQUAL        reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    COMMA           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    RBRACKET        reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    IN              reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    RPAREN          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    OR_SYMBOL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    TIMES           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    VAR_LOCAL       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    VAR_CLASS       reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    LPAREN          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    UNARY_OP        reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    LBRACKET        reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    LKEY            reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    RETURN          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    YIELD           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    DEFINED_OP      reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    IF              reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    UNLESS          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    WHILE           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    UNTIL           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    CASE            reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    FOR             reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    BEGIN           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    CLASS           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    MODULE          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    DEF             reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    NUMBER          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    SYMBOL          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    STRING          reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    SUPER           reduce using rule 149 (lhs -> primary DOT IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 218 (operation -> IDENTIFIER .)
    PLUS            reduce using rule 218 (operation -> IDENTIFIER .)
    MINUS           reduce using rule 218 (operation -> IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 218 (operation -> IDENTIFIER .)
    DO              reduce using rule 218 (operation -> IDENTIFIER .)
    TERM            reduce using rule 218 (operation -> IDENTIFIER .)
    DOT             reduce using rule 218 (operation -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 218 (operation -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 218 (operation -> IDENTIFIER .)
    DIVIDE          reduce using rule 218 (operation -> IDENTIFIER .)
    MOD             reduce using rule 218 (operation -> IDENTIFIER .)
    POW             reduce using rule 218 (operation -> IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 218 (operation -> IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 218 (operation -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 218 (operation -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 218 (operation -> IDENTIFIER .)
    LESSERTHAN      reduce using rule 218 (operation -> IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 218 (operation -> IDENTIFIER .)
    EQUAL           reduce using rule 218 (operation -> IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 218 (operation -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 218 (operation -> IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 218 (operation -> IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 218 (operation -> IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 218 (operation -> IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 218 (operation -> IDENTIFIER .)
    AND             reduce using rule 218 (operation -> IDENTIFIER .)
    OR              reduce using rule 218 (operation -> IDENTIFIER .)
    $end            reduce using rule 218 (operation -> IDENTIFIER .)
    RESCUE          reduce using rule 218 (operation -> IDENTIFIER .)
    WHEN            reduce using rule 218 (operation -> IDENTIFIER .)
    RKEY            reduce using rule 218 (operation -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 218 (operation -> IDENTIFIER .)
    END             reduce using rule 218 (operation -> IDENTIFIER .)
    ELSIF           reduce using rule 218 (operation -> IDENTIFIER .)
    ELSE            reduce using rule 218 (operation -> IDENTIFIER .)
    ENSURE          reduce using rule 218 (operation -> IDENTIFIER .)
    THEN            reduce using rule 218 (operation -> IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 151
    OPTIONAL_SYMBOL shift and go to state 152

  ! LPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! OR_SYMBOL       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]


state 277

    (34) function -> primary DOT operation . LPAREN call_args RPAREN
    (36) function -> primary DOT operation .
    (30) command -> primary DOT operation . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 393
    DO              reduce using rule 36 (function -> primary DOT operation .)
    TERM            reduce using rule 36 (function -> primary DOT operation .)
    DOT             reduce using rule 36 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 36 (function -> primary DOT operation .)
    MOD             reduce using rule 36 (function -> primary DOT operation .)
    POW             reduce using rule 36 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 36 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 36 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    EQUAL           reduce using rule 36 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 36 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 36 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    AND             reduce using rule 36 (function -> primary DOT operation .)
    OR              reduce using rule 36 (function -> primary DOT operation .)
    $end            reduce using rule 36 (function -> primary DOT operation .)
    RESCUE          reduce using rule 36 (function -> primary DOT operation .)
    RPAREN          reduce using rule 36 (function -> primary DOT operation .)
    WHEN            reduce using rule 36 (function -> primary DOT operation .)
    RKEY            reduce using rule 36 (function -> primary DOT operation .)
    COMMA           reduce using rule 36 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 36 (function -> primary DOT operation .)
    END             reduce using rule 36 (function -> primary DOT operation .)
    ELSIF           reduce using rule 36 (function -> primary DOT operation .)
    ELSE            reduce using rule 36 (function -> primary DOT operation .)
    ENSURE          reduce using rule 36 (function -> primary DOT operation .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! NUMBER          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! LPAREN          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! LBRACKET        [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNARY_OP        [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! PLUS            [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! MINUS           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! TIMES           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! IF              [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! WHILE           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNLESS          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNTIL           [ reduce using rule 36 (function -> primary DOT operation .) ]

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 394
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 278

    (35) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP operation .
    (31) command -> primary UNARY_OP operation . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 395
    DO              reduce using rule 37 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 37 (function -> primary UNARY_OP operation .)
    DOT             reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 37 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 37 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 37 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 37 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 37 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 37 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 37 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary UNARY_OP operation .)
    END             reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 37 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! NUMBER          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! LPAREN          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! LBRACKET        [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNARY_OP        [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! PLUS            [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! MINUS           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! TIMES           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! IF              [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! WHILE           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNLESS          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNTIL           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 396
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 279

    (80) primary -> primary UNARY_OP IDENTIFIER .
    (218) operation -> IDENTIFIER .
    (219) operation -> IDENTIFIER . NOT_SYMBOL
    (220) operation -> IDENTIFIER . OPTIONAL_SYMBOL

  ! reduce/reduce conflict for LPAREN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_AND_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for SUPER resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NOT_SYMBOL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMPLEMENT_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LKEY resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for YIELD resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CASE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for TERM resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MOD resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for POW resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_XOR_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMBINED_COMPARISON_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for GREATERTHANEQUAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LESSERTHAN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for LESSERTHANEQUAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for CASE_EQUALITY resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for MATCHED_STRINGS_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_LEFT_SHIFT_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RESCUE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for WHEN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RKEY resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ELSIF resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for ENSURE resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for HASH_ROCKET resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! reduce/reduce conflict for THEN resolved using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
  ! shift/reduce conflict for NOT_SYMBOL resolved as shift
    LBRACKET        reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    DOT             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    UNARY_OP        reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    PLUS            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    MINUS           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    TIMES           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    DIVIDE          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    MOD             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    POW             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    OR_SYMBOL       reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_XOR_OP   reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_AND_OP   reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    COMBINED_COMPARISON_OP reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    GREATERTHAN     reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    LESSERTHAN      reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    LESSERTHANEQUAL reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    EQUAL           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    CASE_EQUALITY   reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    NOTEQUAL        reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    MATCHED_STRINGS_OP reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    AND             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    OR              reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    IF              reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    WHILE           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    UNLESS          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    UNTIL           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    TERM            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    NUMBER          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    LPAREN          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    $end            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    COMMA           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RBRACKET        reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    THEN            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    DO              reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RESCUE          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    HASH_ROCKET     reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RKEY            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RPAREN          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    WHEN            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    LKEY            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    END             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    ELSIF           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    ELSE            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    ENSURE          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    COMPLEMENT_OP   reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    DEFINED_OP      reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    RETURN          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    YIELD           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    CASE            reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    FOR             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    BEGIN           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    CLASS           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    MODULE          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    DEF             reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_GLOBAL      reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_LOCAL       reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_INSTANCE    reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    VAR_CLASS       reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    SYMBOL          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    STRING          reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    IDENTIFIER      reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    SUPER           reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .)
    NOT_SYMBOL      shift and go to state 151
    OPTIONAL_SYMBOL shift and go to state 152

  ! NOT_SYMBOL      [ reduce using rule 80 (primary -> primary UNARY_OP IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_AND_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SUPER           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NOT_SYMBOL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! COMPLEMENT_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEFINED_OP      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNARY_OP        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LKEY            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! YIELD           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNLESS          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! UNTIL           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! SYMBOL          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_GLOBAL      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_LOCAL       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_INSTANCE    [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! VAR_CLASS       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! TERM            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MOD             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! POW             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! OR_SYMBOL       [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_XOR_OP   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! GREATERTHAN     [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! GREATERTHANEQUAL [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LESSERTHAN      [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! LESSERTHANEQUAL [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! CASE_EQUALITY   [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! NOTEQUAL        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RESCUE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! WHEN            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RKEY            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! END             [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! ELSIF           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! ENSURE          [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! HASH_ROCKET     [ reduce using rule 218 (operation -> IDENTIFIER .) ]
  ! THEN            [ reduce using rule 218 (operation -> IDENTIFIER .) ]


state 280

    (18) expr -> mlhs = mrhs .

    AND             reduce using rule 18 (expr -> mlhs = mrhs .)
    OR              reduce using rule 18 (expr -> mlhs = mrhs .)
    IF              reduce using rule 18 (expr -> mlhs = mrhs .)
    WHILE           reduce using rule 18 (expr -> mlhs = mrhs .)
    UNLESS          reduce using rule 18 (expr -> mlhs = mrhs .)
    UNTIL           reduce using rule 18 (expr -> mlhs = mrhs .)
    TERM            reduce using rule 18 (expr -> mlhs = mrhs .)
    NUMBER          reduce using rule 18 (expr -> mlhs = mrhs .)
    LPAREN          reduce using rule 18 (expr -> mlhs = mrhs .)
    $end            reduce using rule 18 (expr -> mlhs = mrhs .)
    THEN            reduce using rule 18 (expr -> mlhs = mrhs .)
    DO              reduce using rule 18 (expr -> mlhs = mrhs .)
    RESCUE          reduce using rule 18 (expr -> mlhs = mrhs .)
    RPAREN          reduce using rule 18 (expr -> mlhs = mrhs .)
    WHEN            reduce using rule 18 (expr -> mlhs = mrhs .)
    RKEY            reduce using rule 18 (expr -> mlhs = mrhs .)
    LKEY            reduce using rule 18 (expr -> mlhs = mrhs .)
    END             reduce using rule 18 (expr -> mlhs = mrhs .)
    ELSIF           reduce using rule 18 (expr -> mlhs = mrhs .)
    ELSE            reduce using rule 18 (expr -> mlhs = mrhs .)
    ENSURE          reduce using rule 18 (expr -> mlhs = mrhs .)


state 281

    (141) mrhs -> args .
    (142) mrhs -> args . COMMA
    (143) mrhs -> args . TIMES
    (144) mrhs -> args . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    AND             reduce using rule 141 (mrhs -> args .)
    OR              reduce using rule 141 (mrhs -> args .)
    TERM            reduce using rule 141 (mrhs -> args .)
    $end            reduce using rule 141 (mrhs -> args .)
    THEN            reduce using rule 141 (mrhs -> args .)
    DO              reduce using rule 141 (mrhs -> args .)
    RESCUE          reduce using rule 141 (mrhs -> args .)
    RPAREN          reduce using rule 141 (mrhs -> args .)
    WHEN            reduce using rule 141 (mrhs -> args .)
    RKEY            reduce using rule 141 (mrhs -> args .)
    END             reduce using rule 141 (mrhs -> args .)
    ELSIF           reduce using rule 141 (mrhs -> args .)
    ELSE            reduce using rule 141 (mrhs -> args .)
    ENSURE          reduce using rule 141 (mrhs -> args .)
    COMMA           shift and go to state 397
    TIMES           shift and go to state 398
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

  ! IF              [ reduce using rule 141 (mrhs -> args .) ]
  ! WHILE           [ reduce using rule 141 (mrhs -> args .) ]
  ! UNLESS          [ reduce using rule 141 (mrhs -> args .) ]
  ! UNTIL           [ reduce using rule 141 (mrhs -> args .) ]
  ! NUMBER          [ reduce using rule 141 (mrhs -> args .) ]
  ! LPAREN          [ reduce using rule 141 (mrhs -> args .) ]
  ! LKEY            [ reduce using rule 141 (mrhs -> args .) ]

    arg                            shift and go to state 399
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 282

    (145) mrhs -> TIMES . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 400
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 283

    (92) primary -> RETURN .
    (93) primary -> RETURN . LPAREN RPAREN
    (94) primary -> RETURN . LPAREN call_args RPAREN
    (19) expr -> RETURN . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 92 (primary -> RETURN .)
    COMMA           reduce using rule 92 (primary -> RETURN .)
    RANGE_INCLUSIVE reduce using rule 92 (primary -> RETURN .)
    RANGE_EXCLUSIVE reduce using rule 92 (primary -> RETURN .)
    DIVIDE          reduce using rule 92 (primary -> RETURN .)
    MOD             reduce using rule 92 (primary -> RETURN .)
    POW             reduce using rule 92 (primary -> RETURN .)
    OR_SYMBOL       reduce using rule 92 (primary -> RETURN .)
    BINARY_XOR_OP   reduce using rule 92 (primary -> RETURN .)
    COMBINED_COMPARISON_OP reduce using rule 92 (primary -> RETURN .)
    GREATERTHAN     reduce using rule 92 (primary -> RETURN .)
    GREATERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    LESSERTHAN      reduce using rule 92 (primary -> RETURN .)
    LESSERTHANEQUAL reduce using rule 92 (primary -> RETURN .)
    EQUAL           reduce using rule 92 (primary -> RETURN .)
    CASE_EQUALITY   reduce using rule 92 (primary -> RETURN .)
    NOTEQUAL        reduce using rule 92 (primary -> RETURN .)
    MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 92 (primary -> RETURN .)
    AND             reduce using rule 92 (primary -> RETURN .)
    OR              reduce using rule 92 (primary -> RETURN .)
    HASH_ROCKET     reduce using rule 92 (primary -> RETURN .)
    RPAREN          reduce using rule 92 (primary -> RETURN .)
    TERM            reduce using rule 92 (primary -> RETURN .)
    LPAREN          shift and go to state 155
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! UNARY_OP        [ reduce using rule 92 (primary -> RETURN .) ]
  ! LBRACKET        [ reduce using rule 92 (primary -> RETURN .) ]
  ! PLUS            [ reduce using rule 92 (primary -> RETURN .) ]
  ! MINUS           [ reduce using rule 92 (primary -> RETURN .) ]
  ! TIMES           [ reduce using rule 92 (primary -> RETURN .) ]
  ! BINARY_AND_OP   [ reduce using rule 92 (primary -> RETURN .) ]
  ! IF              [ reduce using rule 92 (primary -> RETURN .) ]
  ! WHILE           [ reduce using rule 92 (primary -> RETURN .) ]
  ! UNLESS          [ reduce using rule 92 (primary -> RETURN .) ]
  ! UNTIL           [ reduce using rule 92 (primary -> RETURN .) ]
  ! NUMBER          [ reduce using rule 92 (primary -> RETURN .) ]
  ! LPAREN          [ reduce using rule 92 (primary -> RETURN .) ]

    call_args                      shift and go to state 154
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 284

    (93) primary -> RETURN LPAREN RPAREN .

    LBRACKET        reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    DOT             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    UNARY_OP        reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    PLUS            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    MINUS           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    TIMES           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    DIVIDE          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    MOD             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    POW             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    BINARY_XOR_OP   reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    BINARY_AND_OP   reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    GREATERTHANEQUAL reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    LESSERTHAN      reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    LESSERTHANEQUAL reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    EQUAL           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    CASE_EQUALITY   reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    AND             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    OR              reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    IF              reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    WHILE           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    UNLESS          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    UNTIL           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    TERM            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    NUMBER          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    LPAREN          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    $end            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    COMMA           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RBRACKET        reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    THEN            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    DO              reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RESCUE          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    HASH_ROCKET     reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RKEY            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RPAREN          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    WHEN            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    LKEY            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    END             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    ELSIF           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    ELSE            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    ENSURE          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    COMPLEMENT_OP   reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    RETURN          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    YIELD           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    CASE            reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    FOR             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    BEGIN           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    CLASS           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    MODULE          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    DEF             reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    SYMBOL          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    STRING          reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)
    SUPER           reduce using rule 93 (primary -> RETURN LPAREN RPAREN .)


state 285

    (94) primary -> RETURN LPAREN call_args . RPAREN

    RPAREN          shift and go to state 401


state 286

    (184) call_args -> TIMES . arg
    (185) call_args -> TIMES . arg COMMA BINARY_AND_OP arg
    (156) mlhs -> TIMES . lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 292
    lhs                            shift and go to state 402
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 287

    (187) call_args -> command .
    (28) call -> command .
    (24) expr -> command .

  ! reduce/reduce conflict for TERM resolved using rule 24 (expr -> command .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (expr -> command .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (expr -> command .)
  ! reduce/reduce conflict for RPAREN resolved using rule 24 (expr -> command .)
    DO              reduce using rule 28 (call -> command .)
    AND             reduce using rule 24 (expr -> command .)
    OR              reduce using rule 24 (expr -> command .)
    IF              reduce using rule 24 (expr -> command .)
    WHILE           reduce using rule 24 (expr -> command .)
    UNLESS          reduce using rule 24 (expr -> command .)
    UNTIL           reduce using rule 24 (expr -> command .)
    TERM            reduce using rule 24 (expr -> command .)
    NUMBER          reduce using rule 24 (expr -> command .)
    LPAREN          reduce using rule 24 (expr -> command .)
    RPAREN          reduce using rule 24 (expr -> command .)

  ! RPAREN          [ reduce using rule 187 (call_args -> command .) ]
  ! TERM            [ reduce using rule 28 (call -> command .) ]
  ! NUMBER          [ reduce using rule 28 (call -> command .) ]
  ! LPAREN          [ reduce using rule 28 (call -> command .) ]


state 288

    (95) primary -> YIELD .
    (96) primary -> YIELD . LPAREN RPAREN
    (97) primary -> YIELD . LPAREN call_args RPAREN
    (20) expr -> YIELD . call_args
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 95 (primary -> YIELD .)
    COMMA           reduce using rule 95 (primary -> YIELD .)
    RANGE_INCLUSIVE reduce using rule 95 (primary -> YIELD .)
    RANGE_EXCLUSIVE reduce using rule 95 (primary -> YIELD .)
    DIVIDE          reduce using rule 95 (primary -> YIELD .)
    MOD             reduce using rule 95 (primary -> YIELD .)
    POW             reduce using rule 95 (primary -> YIELD .)
    OR_SYMBOL       reduce using rule 95 (primary -> YIELD .)
    BINARY_XOR_OP   reduce using rule 95 (primary -> YIELD .)
    COMBINED_COMPARISON_OP reduce using rule 95 (primary -> YIELD .)
    GREATERTHAN     reduce using rule 95 (primary -> YIELD .)
    GREATERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    LESSERTHAN      reduce using rule 95 (primary -> YIELD .)
    LESSERTHANEQUAL reduce using rule 95 (primary -> YIELD .)
    EQUAL           reduce using rule 95 (primary -> YIELD .)
    CASE_EQUALITY   reduce using rule 95 (primary -> YIELD .)
    NOTEQUAL        reduce using rule 95 (primary -> YIELD .)
    MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_LEFT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 95 (primary -> YIELD .)
    AND             reduce using rule 95 (primary -> YIELD .)
    OR              reduce using rule 95 (primary -> YIELD .)
    HASH_ROCKET     reduce using rule 95 (primary -> YIELD .)
    RPAREN          reduce using rule 95 (primary -> YIELD .)
    TERM            reduce using rule 95 (primary -> YIELD .)
    LPAREN          shift and go to state 162
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! UNARY_OP        [ reduce using rule 95 (primary -> YIELD .) ]
  ! LBRACKET        [ reduce using rule 95 (primary -> YIELD .) ]
  ! PLUS            [ reduce using rule 95 (primary -> YIELD .) ]
  ! MINUS           [ reduce using rule 95 (primary -> YIELD .) ]
  ! TIMES           [ reduce using rule 95 (primary -> YIELD .) ]
  ! BINARY_AND_OP   [ reduce using rule 95 (primary -> YIELD .) ]
  ! IF              [ reduce using rule 95 (primary -> YIELD .) ]
  ! WHILE           [ reduce using rule 95 (primary -> YIELD .) ]
  ! UNLESS          [ reduce using rule 95 (primary -> YIELD .) ]
  ! UNTIL           [ reduce using rule 95 (primary -> YIELD .) ]
  ! NUMBER          [ reduce using rule 95 (primary -> YIELD .) ]
  ! LPAREN          [ reduce using rule 95 (primary -> YIELD .) ]

    call_args                      shift and go to state 161
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 289

    (99) primary -> function .
    (100) primary -> function . LKEY compstmt LKEY
    (101) primary -> function . LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> function . LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (27) call -> function .

  ! reduce/reduce conflict for TERM resolved using rule 27 (call -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 27 (call -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 27 (call -> function .)
    DOT             reduce using rule 99 (primary -> function .)
    UNARY_OP        reduce using rule 99 (primary -> function .)
    LBRACKET        reduce using rule 99 (primary -> function .)
    COMMA           reduce using rule 99 (primary -> function .)
    RANGE_INCLUSIVE reduce using rule 99 (primary -> function .)
    RANGE_EXCLUSIVE reduce using rule 99 (primary -> function .)
    PLUS            reduce using rule 99 (primary -> function .)
    MINUS           reduce using rule 99 (primary -> function .)
    TIMES           reduce using rule 99 (primary -> function .)
    DIVIDE          reduce using rule 99 (primary -> function .)
    MOD             reduce using rule 99 (primary -> function .)
    POW             reduce using rule 99 (primary -> function .)
    OR_SYMBOL       reduce using rule 99 (primary -> function .)
    BINARY_XOR_OP   reduce using rule 99 (primary -> function .)
    BINARY_AND_OP   reduce using rule 99 (primary -> function .)
    COMBINED_COMPARISON_OP reduce using rule 99 (primary -> function .)
    GREATERTHAN     reduce using rule 99 (primary -> function .)
    GREATERTHANEQUAL reduce using rule 99 (primary -> function .)
    LESSERTHAN      reduce using rule 99 (primary -> function .)
    LESSERTHANEQUAL reduce using rule 99 (primary -> function .)
    EQUAL           reduce using rule 99 (primary -> function .)
    CASE_EQUALITY   reduce using rule 99 (primary -> function .)
    NOTEQUAL        reduce using rule 99 (primary -> function .)
    MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 99 (primary -> function .)
    BINARY_LEFT_SHIFT_OP reduce using rule 99 (primary -> function .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 99 (primary -> function .)
    AND             reduce using rule 99 (primary -> function .)
    OR              reduce using rule 99 (primary -> function .)
    HASH_ROCKET     reduce using rule 99 (primary -> function .)
    RPAREN          reduce using rule 99 (primary -> function .)
    IF              reduce using rule 99 (primary -> function .)
    WHILE           reduce using rule 99 (primary -> function .)
    UNLESS          reduce using rule 99 (primary -> function .)
    UNTIL           reduce using rule 99 (primary -> function .)
    LKEY            shift and go to state 147
    DO              reduce using rule 27 (call -> function .)
    TERM            reduce using rule 27 (call -> function .)
    NUMBER          reduce using rule 27 (call -> function .)
    LPAREN          reduce using rule 27 (call -> function .)

  ! TERM            [ reduce using rule 99 (primary -> function .) ]
  ! NUMBER          [ reduce using rule 99 (primary -> function .) ]
  ! LPAREN          [ reduce using rule 99 (primary -> function .) ]


state 290

    (173) call_args -> args COMMA . assocs
    (174) call_args -> args COMMA . TIMES arg
    (175) call_args -> args COMMA . BINARY_AND_OP arg
    (176) call_args -> args COMMA . assocs COMMA TIMES arg
    (177) call_args -> args COMMA . assocs COMMA BINARY_AND_OP arg
    (178) call_args -> args COMMA . TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> args COMMA . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (171) assoc -> . arg HASH_ROCKET arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 404
    BINARY_AND_OP   shift and go to state 405
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    assocs                         shift and go to state 403
    arg                            shift and go to state 387
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 291

    (181) call_args -> assocs COMMA . TIMES arg
    (182) call_args -> assocs COMMA . BINARY_AND_OP arg
    (183) call_args -> assocs COMMA . TIMES arg COMMA BINARY_AND_OP arg

    TIMES           shift and go to state 406
    BINARY_AND_OP   shift and go to state 407


state 292

    (184) call_args -> TIMES arg .
    (185) call_args -> TIMES arg . COMMA BINARY_AND_OP arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 184 (call_args -> TIMES arg .)
    WHILE           reduce using rule 184 (call_args -> TIMES arg .)
    UNLESS          reduce using rule 184 (call_args -> TIMES arg .)
    UNTIL           reduce using rule 184 (call_args -> TIMES arg .)
    TERM            reduce using rule 184 (call_args -> TIMES arg .)
    NUMBER          reduce using rule 184 (call_args -> TIMES arg .)
    LPAREN          reduce using rule 184 (call_args -> TIMES arg .)
    $end            reduce using rule 184 (call_args -> TIMES arg .)
    THEN            reduce using rule 184 (call_args -> TIMES arg .)
    DO              reduce using rule 184 (call_args -> TIMES arg .)
    RESCUE          reduce using rule 184 (call_args -> TIMES arg .)
    RPAREN          reduce using rule 184 (call_args -> TIMES arg .)
    WHEN            reduce using rule 184 (call_args -> TIMES arg .)
    RKEY            reduce using rule 184 (call_args -> TIMES arg .)
    LKEY            reduce using rule 184 (call_args -> TIMES arg .)
    END             reduce using rule 184 (call_args -> TIMES arg .)
    ELSIF           reduce using rule 184 (call_args -> TIMES arg .)
    ELSE            reduce using rule 184 (call_args -> TIMES arg .)
    ENSURE          reduce using rule 184 (call_args -> TIMES arg .)
    LBRACKET        reduce using rule 184 (call_args -> TIMES arg .)
    RBRACKET        reduce using rule 184 (call_args -> TIMES arg .)
    COMMA           shift and go to state 408
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 184 (call_args -> TIMES arg .) ]
  ! OR              [ reduce using rule 184 (call_args -> TIMES arg .) ]


state 293

    (186) call_args -> BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    WHILE           reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    UNLESS          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    UNTIL           reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    TERM            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    NUMBER          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    LPAREN          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    $end            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    THEN            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    DO              reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    RESCUE          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    RPAREN          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    WHEN            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    RKEY            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    LKEY            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    END             reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    ELSIF           reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    ELSE            reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    ENSURE          reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 186 (call_args -> BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 186 (call_args -> BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 186 (call_args -> BINARY_AND_OP arg .) ]


state 294

    (96) primary -> YIELD LPAREN RPAREN .

    LBRACKET        reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    DOT             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    UNARY_OP        reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RANGE_INCLUSIVE reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    PLUS            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    MINUS           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    TIMES           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    DIVIDE          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    MOD             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    POW             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    OR_SYMBOL       reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    BINARY_XOR_OP   reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    BINARY_AND_OP   reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    GREATERTHANEQUAL reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    LESSERTHAN      reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    LESSERTHANEQUAL reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    EQUAL           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    CASE_EQUALITY   reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    AND             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    OR              reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    IF              reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    WHILE           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    UNLESS          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    UNTIL           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    TERM            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    NUMBER          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    LPAREN          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    $end            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    COMMA           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RBRACKET        reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    THEN            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    DO              reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RESCUE          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    HASH_ROCKET     reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RKEY            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RPAREN          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    WHEN            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    LKEY            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    END             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    ELSIF           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    ELSE            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    ENSURE          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    NOT_SYMBOL      reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    COMPLEMENT_OP   reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    DEFINED_OP      reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    RETURN          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    YIELD           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    CASE            reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    FOR             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    BEGIN           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    CLASS           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    MODULE          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    DEF             reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    VAR_GLOBAL      reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    VAR_LOCAL       reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    VAR_INSTANCE    reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    VAR_CLASS       reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    SYMBOL          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    STRING          reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)
    SUPER           reduce using rule 96 (primary -> YIELD LPAREN RPAREN .)


state 295

    (97) primary -> YIELD LPAREN call_args . RPAREN

    RPAREN          shift and go to state 409


state 296

    (42) arg -> arg RANGE_INCLUSIVE arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    WHILE           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    UNLESS          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    UNTIL           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    TERM            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    NUMBER          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    LPAREN          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    $end            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    COMMA           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RBRACKET        reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    THEN            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    DO              reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RESCUE          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    HASH_ROCKET     reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RKEY            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RPAREN          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    WHEN            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    LKEY            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    END             reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    ELSIF           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    ELSE            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    ENSURE          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    LBRACKET        reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    NOT_SYMBOL      reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    COMPLEMENT_OP   reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    DEFINED_OP      reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    UNARY_OP        reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RETURN          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    YIELD           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    CASE            reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    FOR             reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    BEGIN           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    CLASS           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    MODULE          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    DEF             reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_GLOBAL      reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_LOCAL       reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_INSTANCE    reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    VAR_CLASS       reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    SYMBOL          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    STRING          reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    IDENTIFIER      reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    SUPER           reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! PLUS            [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MINUS           [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! TIMES           [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! DIVIDE          [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MOD             [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! POW             [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! GREATERTHAN     [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! LESSERTHAN      [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! EQUAL           [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! NOTEQUAL        [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! AND             [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]
  ! OR              [ reduce using rule 42 (arg -> arg RANGE_INCLUSIVE arg .) ]


state 297

    (43) arg -> arg RANGE_EXCLUSIVE arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    WHILE           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNLESS          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNTIL           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    TERM            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    NUMBER          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    LPAREN          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    $end            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    COMMA           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RBRACKET        reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    THEN            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    DO              reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RESCUE          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    HASH_ROCKET     reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RKEY            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RPAREN          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    WHEN            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    LKEY            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    END             reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    ELSIF           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    ELSE            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    ENSURE          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    LBRACKET        reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    NOT_SYMBOL      reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    COMPLEMENT_OP   reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    DEFINED_OP      reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    UNARY_OP        reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RETURN          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    YIELD           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    CASE            reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    FOR             reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    BEGIN           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    CLASS           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    MODULE          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    DEF             reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_GLOBAL      reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_LOCAL       reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_INSTANCE    reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    VAR_CLASS       reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    SYMBOL          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    STRING          reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    IDENTIFIER      reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    SUPER           reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! PLUS            [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MINUS           [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! TIMES           [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! DIVIDE          [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MOD             [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! POW             [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! GREATERTHAN     [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! LESSERTHAN      [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! EQUAL           [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! NOTEQUAL        [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! AND             [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]
  ! OR              [ reduce using rule 43 (arg -> arg RANGE_EXCLUSIVE arg .) ]


state 298

    (44) arg -> arg PLUS arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 44 (arg -> arg PLUS arg .)
    WHILE           reduce using rule 44 (arg -> arg PLUS arg .)
    UNLESS          reduce using rule 44 (arg -> arg PLUS arg .)
    UNTIL           reduce using rule 44 (arg -> arg PLUS arg .)
    TERM            reduce using rule 44 (arg -> arg PLUS arg .)
    NUMBER          reduce using rule 44 (arg -> arg PLUS arg .)
    LPAREN          reduce using rule 44 (arg -> arg PLUS arg .)
    $end            reduce using rule 44 (arg -> arg PLUS arg .)
    COMMA           reduce using rule 44 (arg -> arg PLUS arg .)
    RBRACKET        reduce using rule 44 (arg -> arg PLUS arg .)
    THEN            reduce using rule 44 (arg -> arg PLUS arg .)
    DO              reduce using rule 44 (arg -> arg PLUS arg .)
    RESCUE          reduce using rule 44 (arg -> arg PLUS arg .)
    HASH_ROCKET     reduce using rule 44 (arg -> arg PLUS arg .)
    RKEY            reduce using rule 44 (arg -> arg PLUS arg .)
    RPAREN          reduce using rule 44 (arg -> arg PLUS arg .)
    WHEN            reduce using rule 44 (arg -> arg PLUS arg .)
    LKEY            reduce using rule 44 (arg -> arg PLUS arg .)
    END             reduce using rule 44 (arg -> arg PLUS arg .)
    ELSIF           reduce using rule 44 (arg -> arg PLUS arg .)
    ELSE            reduce using rule 44 (arg -> arg PLUS arg .)
    ENSURE          reduce using rule 44 (arg -> arg PLUS arg .)
    LBRACKET        reduce using rule 44 (arg -> arg PLUS arg .)
    NOT_SYMBOL      reduce using rule 44 (arg -> arg PLUS arg .)
    COMPLEMENT_OP   reduce using rule 44 (arg -> arg PLUS arg .)
    DEFINED_OP      reduce using rule 44 (arg -> arg PLUS arg .)
    UNARY_OP        reduce using rule 44 (arg -> arg PLUS arg .)
    RETURN          reduce using rule 44 (arg -> arg PLUS arg .)
    YIELD           reduce using rule 44 (arg -> arg PLUS arg .)
    CASE            reduce using rule 44 (arg -> arg PLUS arg .)
    FOR             reduce using rule 44 (arg -> arg PLUS arg .)
    BEGIN           reduce using rule 44 (arg -> arg PLUS arg .)
    CLASS           reduce using rule 44 (arg -> arg PLUS arg .)
    MODULE          reduce using rule 44 (arg -> arg PLUS arg .)
    DEF             reduce using rule 44 (arg -> arg PLUS arg .)
    VAR_GLOBAL      reduce using rule 44 (arg -> arg PLUS arg .)
    VAR_LOCAL       reduce using rule 44 (arg -> arg PLUS arg .)
    VAR_INSTANCE    reduce using rule 44 (arg -> arg PLUS arg .)
    VAR_CLASS       reduce using rule 44 (arg -> arg PLUS arg .)
    SYMBOL          reduce using rule 44 (arg -> arg PLUS arg .)
    STRING          reduce using rule 44 (arg -> arg PLUS arg .)
    IDENTIFIER      reduce using rule 44 (arg -> arg PLUS arg .)
    SUPER           reduce using rule 44 (arg -> arg PLUS arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! PLUS            [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! MINUS           [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! TIMES           [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! DIVIDE          [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! MOD             [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! POW             [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! EQUAL           [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! AND             [ reduce using rule 44 (arg -> arg PLUS arg .) ]
  ! OR              [ reduce using rule 44 (arg -> arg PLUS arg .) ]


state 299

    (45) arg -> arg MINUS arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 45 (arg -> arg MINUS arg .)
    WHILE           reduce using rule 45 (arg -> arg MINUS arg .)
    UNLESS          reduce using rule 45 (arg -> arg MINUS arg .)
    UNTIL           reduce using rule 45 (arg -> arg MINUS arg .)
    TERM            reduce using rule 45 (arg -> arg MINUS arg .)
    NUMBER          reduce using rule 45 (arg -> arg MINUS arg .)
    LPAREN          reduce using rule 45 (arg -> arg MINUS arg .)
    $end            reduce using rule 45 (arg -> arg MINUS arg .)
    COMMA           reduce using rule 45 (arg -> arg MINUS arg .)
    RBRACKET        reduce using rule 45 (arg -> arg MINUS arg .)
    THEN            reduce using rule 45 (arg -> arg MINUS arg .)
    DO              reduce using rule 45 (arg -> arg MINUS arg .)
    RESCUE          reduce using rule 45 (arg -> arg MINUS arg .)
    HASH_ROCKET     reduce using rule 45 (arg -> arg MINUS arg .)
    RKEY            reduce using rule 45 (arg -> arg MINUS arg .)
    RPAREN          reduce using rule 45 (arg -> arg MINUS arg .)
    WHEN            reduce using rule 45 (arg -> arg MINUS arg .)
    LKEY            reduce using rule 45 (arg -> arg MINUS arg .)
    END             reduce using rule 45 (arg -> arg MINUS arg .)
    ELSIF           reduce using rule 45 (arg -> arg MINUS arg .)
    ELSE            reduce using rule 45 (arg -> arg MINUS arg .)
    ENSURE          reduce using rule 45 (arg -> arg MINUS arg .)
    LBRACKET        reduce using rule 45 (arg -> arg MINUS arg .)
    NOT_SYMBOL      reduce using rule 45 (arg -> arg MINUS arg .)
    COMPLEMENT_OP   reduce using rule 45 (arg -> arg MINUS arg .)
    DEFINED_OP      reduce using rule 45 (arg -> arg MINUS arg .)
    UNARY_OP        reduce using rule 45 (arg -> arg MINUS arg .)
    RETURN          reduce using rule 45 (arg -> arg MINUS arg .)
    YIELD           reduce using rule 45 (arg -> arg MINUS arg .)
    CASE            reduce using rule 45 (arg -> arg MINUS arg .)
    FOR             reduce using rule 45 (arg -> arg MINUS arg .)
    BEGIN           reduce using rule 45 (arg -> arg MINUS arg .)
    CLASS           reduce using rule 45 (arg -> arg MINUS arg .)
    MODULE          reduce using rule 45 (arg -> arg MINUS arg .)
    DEF             reduce using rule 45 (arg -> arg MINUS arg .)
    VAR_GLOBAL      reduce using rule 45 (arg -> arg MINUS arg .)
    VAR_LOCAL       reduce using rule 45 (arg -> arg MINUS arg .)
    VAR_INSTANCE    reduce using rule 45 (arg -> arg MINUS arg .)
    VAR_CLASS       reduce using rule 45 (arg -> arg MINUS arg .)
    SYMBOL          reduce using rule 45 (arg -> arg MINUS arg .)
    STRING          reduce using rule 45 (arg -> arg MINUS arg .)
    IDENTIFIER      reduce using rule 45 (arg -> arg MINUS arg .)
    SUPER           reduce using rule 45 (arg -> arg MINUS arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! PLUS            [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! MINUS           [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! TIMES           [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! DIVIDE          [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! MOD             [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! POW             [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! OR_SYMBOL       [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! GREATERTHAN     [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! LESSERTHAN      [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! EQUAL           [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! NOTEQUAL        [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! AND             [ reduce using rule 45 (arg -> arg MINUS arg .) ]
  ! OR              [ reduce using rule 45 (arg -> arg MINUS arg .) ]


state 300

    (46) arg -> arg TIMES arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 46 (arg -> arg TIMES arg .)
    WHILE           reduce using rule 46 (arg -> arg TIMES arg .)
    UNLESS          reduce using rule 46 (arg -> arg TIMES arg .)
    UNTIL           reduce using rule 46 (arg -> arg TIMES arg .)
    TERM            reduce using rule 46 (arg -> arg TIMES arg .)
    NUMBER          reduce using rule 46 (arg -> arg TIMES arg .)
    LPAREN          reduce using rule 46 (arg -> arg TIMES arg .)
    $end            reduce using rule 46 (arg -> arg TIMES arg .)
    COMMA           reduce using rule 46 (arg -> arg TIMES arg .)
    RBRACKET        reduce using rule 46 (arg -> arg TIMES arg .)
    THEN            reduce using rule 46 (arg -> arg TIMES arg .)
    DO              reduce using rule 46 (arg -> arg TIMES arg .)
    RESCUE          reduce using rule 46 (arg -> arg TIMES arg .)
    HASH_ROCKET     reduce using rule 46 (arg -> arg TIMES arg .)
    RKEY            reduce using rule 46 (arg -> arg TIMES arg .)
    RPAREN          reduce using rule 46 (arg -> arg TIMES arg .)
    WHEN            reduce using rule 46 (arg -> arg TIMES arg .)
    LKEY            reduce using rule 46 (arg -> arg TIMES arg .)
    END             reduce using rule 46 (arg -> arg TIMES arg .)
    ELSIF           reduce using rule 46 (arg -> arg TIMES arg .)
    ELSE            reduce using rule 46 (arg -> arg TIMES arg .)
    ENSURE          reduce using rule 46 (arg -> arg TIMES arg .)
    LBRACKET        reduce using rule 46 (arg -> arg TIMES arg .)
    NOT_SYMBOL      reduce using rule 46 (arg -> arg TIMES arg .)
    COMPLEMENT_OP   reduce using rule 46 (arg -> arg TIMES arg .)
    DEFINED_OP      reduce using rule 46 (arg -> arg TIMES arg .)
    UNARY_OP        reduce using rule 46 (arg -> arg TIMES arg .)
    RETURN          reduce using rule 46 (arg -> arg TIMES arg .)
    YIELD           reduce using rule 46 (arg -> arg TIMES arg .)
    CASE            reduce using rule 46 (arg -> arg TIMES arg .)
    FOR             reduce using rule 46 (arg -> arg TIMES arg .)
    BEGIN           reduce using rule 46 (arg -> arg TIMES arg .)
    CLASS           reduce using rule 46 (arg -> arg TIMES arg .)
    MODULE          reduce using rule 46 (arg -> arg TIMES arg .)
    DEF             reduce using rule 46 (arg -> arg TIMES arg .)
    VAR_GLOBAL      reduce using rule 46 (arg -> arg TIMES arg .)
    VAR_LOCAL       reduce using rule 46 (arg -> arg TIMES arg .)
    VAR_INSTANCE    reduce using rule 46 (arg -> arg TIMES arg .)
    VAR_CLASS       reduce using rule 46 (arg -> arg TIMES arg .)
    SYMBOL          reduce using rule 46 (arg -> arg TIMES arg .)
    STRING          reduce using rule 46 (arg -> arg TIMES arg .)
    IDENTIFIER      reduce using rule 46 (arg -> arg TIMES arg .)
    SUPER           reduce using rule 46 (arg -> arg TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! PLUS            [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! MINUS           [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! TIMES           [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! DIVIDE          [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! MOD             [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! POW             [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! OR_SYMBOL       [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! GREATERTHAN     [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! LESSERTHAN      [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! EQUAL           [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! NOTEQUAL        [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! AND             [ reduce using rule 46 (arg -> arg TIMES arg .) ]
  ! OR              [ reduce using rule 46 (arg -> arg TIMES arg .) ]


state 301

    (47) arg -> arg DIVIDE arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 47 (arg -> arg DIVIDE arg .)
    WHILE           reduce using rule 47 (arg -> arg DIVIDE arg .)
    UNLESS          reduce using rule 47 (arg -> arg DIVIDE arg .)
    UNTIL           reduce using rule 47 (arg -> arg DIVIDE arg .)
    TERM            reduce using rule 47 (arg -> arg DIVIDE arg .)
    NUMBER          reduce using rule 47 (arg -> arg DIVIDE arg .)
    LPAREN          reduce using rule 47 (arg -> arg DIVIDE arg .)
    $end            reduce using rule 47 (arg -> arg DIVIDE arg .)
    COMMA           reduce using rule 47 (arg -> arg DIVIDE arg .)
    RBRACKET        reduce using rule 47 (arg -> arg DIVIDE arg .)
    THEN            reduce using rule 47 (arg -> arg DIVIDE arg .)
    DO              reduce using rule 47 (arg -> arg DIVIDE arg .)
    RESCUE          reduce using rule 47 (arg -> arg DIVIDE arg .)
    HASH_ROCKET     reduce using rule 47 (arg -> arg DIVIDE arg .)
    RKEY            reduce using rule 47 (arg -> arg DIVIDE arg .)
    RPAREN          reduce using rule 47 (arg -> arg DIVIDE arg .)
    WHEN            reduce using rule 47 (arg -> arg DIVIDE arg .)
    LKEY            reduce using rule 47 (arg -> arg DIVIDE arg .)
    END             reduce using rule 47 (arg -> arg DIVIDE arg .)
    ELSIF           reduce using rule 47 (arg -> arg DIVIDE arg .)
    ELSE            reduce using rule 47 (arg -> arg DIVIDE arg .)
    ENSURE          reduce using rule 47 (arg -> arg DIVIDE arg .)
    LBRACKET        reduce using rule 47 (arg -> arg DIVIDE arg .)
    NOT_SYMBOL      reduce using rule 47 (arg -> arg DIVIDE arg .)
    COMPLEMENT_OP   reduce using rule 47 (arg -> arg DIVIDE arg .)
    DEFINED_OP      reduce using rule 47 (arg -> arg DIVIDE arg .)
    UNARY_OP        reduce using rule 47 (arg -> arg DIVIDE arg .)
    RETURN          reduce using rule 47 (arg -> arg DIVIDE arg .)
    YIELD           reduce using rule 47 (arg -> arg DIVIDE arg .)
    CASE            reduce using rule 47 (arg -> arg DIVIDE arg .)
    FOR             reduce using rule 47 (arg -> arg DIVIDE arg .)
    BEGIN           reduce using rule 47 (arg -> arg DIVIDE arg .)
    CLASS           reduce using rule 47 (arg -> arg DIVIDE arg .)
    MODULE          reduce using rule 47 (arg -> arg DIVIDE arg .)
    DEF             reduce using rule 47 (arg -> arg DIVIDE arg .)
    VAR_GLOBAL      reduce using rule 47 (arg -> arg DIVIDE arg .)
    VAR_LOCAL       reduce using rule 47 (arg -> arg DIVIDE arg .)
    VAR_INSTANCE    reduce using rule 47 (arg -> arg DIVIDE arg .)
    VAR_CLASS       reduce using rule 47 (arg -> arg DIVIDE arg .)
    SYMBOL          reduce using rule 47 (arg -> arg DIVIDE arg .)
    STRING          reduce using rule 47 (arg -> arg DIVIDE arg .)
    IDENTIFIER      reduce using rule 47 (arg -> arg DIVIDE arg .)
    SUPER           reduce using rule 47 (arg -> arg DIVIDE arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! PLUS            [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! MINUS           [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! TIMES           [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! DIVIDE          [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! MOD             [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! POW             [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! OR_SYMBOL       [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! GREATERTHAN     [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! LESSERTHAN      [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! EQUAL           [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! NOTEQUAL        [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! AND             [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]
  ! OR              [ reduce using rule 47 (arg -> arg DIVIDE arg .) ]


state 302

    (48) arg -> arg MOD arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 48 (arg -> arg MOD arg .)
    WHILE           reduce using rule 48 (arg -> arg MOD arg .)
    UNLESS          reduce using rule 48 (arg -> arg MOD arg .)
    UNTIL           reduce using rule 48 (arg -> arg MOD arg .)
    TERM            reduce using rule 48 (arg -> arg MOD arg .)
    NUMBER          reduce using rule 48 (arg -> arg MOD arg .)
    LPAREN          reduce using rule 48 (arg -> arg MOD arg .)
    $end            reduce using rule 48 (arg -> arg MOD arg .)
    COMMA           reduce using rule 48 (arg -> arg MOD arg .)
    RBRACKET        reduce using rule 48 (arg -> arg MOD arg .)
    THEN            reduce using rule 48 (arg -> arg MOD arg .)
    DO              reduce using rule 48 (arg -> arg MOD arg .)
    RESCUE          reduce using rule 48 (arg -> arg MOD arg .)
    HASH_ROCKET     reduce using rule 48 (arg -> arg MOD arg .)
    RKEY            reduce using rule 48 (arg -> arg MOD arg .)
    RPAREN          reduce using rule 48 (arg -> arg MOD arg .)
    WHEN            reduce using rule 48 (arg -> arg MOD arg .)
    LKEY            reduce using rule 48 (arg -> arg MOD arg .)
    END             reduce using rule 48 (arg -> arg MOD arg .)
    ELSIF           reduce using rule 48 (arg -> arg MOD arg .)
    ELSE            reduce using rule 48 (arg -> arg MOD arg .)
    ENSURE          reduce using rule 48 (arg -> arg MOD arg .)
    LBRACKET        reduce using rule 48 (arg -> arg MOD arg .)
    NOT_SYMBOL      reduce using rule 48 (arg -> arg MOD arg .)
    COMPLEMENT_OP   reduce using rule 48 (arg -> arg MOD arg .)
    DEFINED_OP      reduce using rule 48 (arg -> arg MOD arg .)
    UNARY_OP        reduce using rule 48 (arg -> arg MOD arg .)
    RETURN          reduce using rule 48 (arg -> arg MOD arg .)
    YIELD           reduce using rule 48 (arg -> arg MOD arg .)
    CASE            reduce using rule 48 (arg -> arg MOD arg .)
    FOR             reduce using rule 48 (arg -> arg MOD arg .)
    BEGIN           reduce using rule 48 (arg -> arg MOD arg .)
    CLASS           reduce using rule 48 (arg -> arg MOD arg .)
    MODULE          reduce using rule 48 (arg -> arg MOD arg .)
    DEF             reduce using rule 48 (arg -> arg MOD arg .)
    VAR_GLOBAL      reduce using rule 48 (arg -> arg MOD arg .)
    VAR_LOCAL       reduce using rule 48 (arg -> arg MOD arg .)
    VAR_INSTANCE    reduce using rule 48 (arg -> arg MOD arg .)
    VAR_CLASS       reduce using rule 48 (arg -> arg MOD arg .)
    SYMBOL          reduce using rule 48 (arg -> arg MOD arg .)
    STRING          reduce using rule 48 (arg -> arg MOD arg .)
    IDENTIFIER      reduce using rule 48 (arg -> arg MOD arg .)
    SUPER           reduce using rule 48 (arg -> arg MOD arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! PLUS            [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! MINUS           [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! TIMES           [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! DIVIDE          [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! MOD             [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! POW             [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! OR_SYMBOL       [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! GREATERTHAN     [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! LESSERTHAN      [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! EQUAL           [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! NOTEQUAL        [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! AND             [ reduce using rule 48 (arg -> arg MOD arg .) ]
  ! OR              [ reduce using rule 48 (arg -> arg MOD arg .) ]


state 303

    (49) arg -> arg POW arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 49 (arg -> arg POW arg .)
    WHILE           reduce using rule 49 (arg -> arg POW arg .)
    UNLESS          reduce using rule 49 (arg -> arg POW arg .)
    UNTIL           reduce using rule 49 (arg -> arg POW arg .)
    TERM            reduce using rule 49 (arg -> arg POW arg .)
    NUMBER          reduce using rule 49 (arg -> arg POW arg .)
    LPAREN          reduce using rule 49 (arg -> arg POW arg .)
    $end            reduce using rule 49 (arg -> arg POW arg .)
    COMMA           reduce using rule 49 (arg -> arg POW arg .)
    RBRACKET        reduce using rule 49 (arg -> arg POW arg .)
    THEN            reduce using rule 49 (arg -> arg POW arg .)
    DO              reduce using rule 49 (arg -> arg POW arg .)
    RESCUE          reduce using rule 49 (arg -> arg POW arg .)
    HASH_ROCKET     reduce using rule 49 (arg -> arg POW arg .)
    RKEY            reduce using rule 49 (arg -> arg POW arg .)
    RPAREN          reduce using rule 49 (arg -> arg POW arg .)
    WHEN            reduce using rule 49 (arg -> arg POW arg .)
    LKEY            reduce using rule 49 (arg -> arg POW arg .)
    END             reduce using rule 49 (arg -> arg POW arg .)
    ELSIF           reduce using rule 49 (arg -> arg POW arg .)
    ELSE            reduce using rule 49 (arg -> arg POW arg .)
    ENSURE          reduce using rule 49 (arg -> arg POW arg .)
    LBRACKET        reduce using rule 49 (arg -> arg POW arg .)
    NOT_SYMBOL      reduce using rule 49 (arg -> arg POW arg .)
    COMPLEMENT_OP   reduce using rule 49 (arg -> arg POW arg .)
    DEFINED_OP      reduce using rule 49 (arg -> arg POW arg .)
    UNARY_OP        reduce using rule 49 (arg -> arg POW arg .)
    RETURN          reduce using rule 49 (arg -> arg POW arg .)
    YIELD           reduce using rule 49 (arg -> arg POW arg .)
    CASE            reduce using rule 49 (arg -> arg POW arg .)
    FOR             reduce using rule 49 (arg -> arg POW arg .)
    BEGIN           reduce using rule 49 (arg -> arg POW arg .)
    CLASS           reduce using rule 49 (arg -> arg POW arg .)
    MODULE          reduce using rule 49 (arg -> arg POW arg .)
    DEF             reduce using rule 49 (arg -> arg POW arg .)
    VAR_GLOBAL      reduce using rule 49 (arg -> arg POW arg .)
    VAR_LOCAL       reduce using rule 49 (arg -> arg POW arg .)
    VAR_INSTANCE    reduce using rule 49 (arg -> arg POW arg .)
    VAR_CLASS       reduce using rule 49 (arg -> arg POW arg .)
    SYMBOL          reduce using rule 49 (arg -> arg POW arg .)
    STRING          reduce using rule 49 (arg -> arg POW arg .)
    IDENTIFIER      reduce using rule 49 (arg -> arg POW arg .)
    SUPER           reduce using rule 49 (arg -> arg POW arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! PLUS            [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! MINUS           [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! TIMES           [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! DIVIDE          [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! MOD             [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! POW             [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! OR_SYMBOL       [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! GREATERTHAN     [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! LESSERTHAN      [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! EQUAL           [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! NOTEQUAL        [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! AND             [ reduce using rule 49 (arg -> arg POW arg .) ]
  ! OR              [ reduce using rule 49 (arg -> arg POW arg .) ]


state 304

    (52) arg -> arg OR_SYMBOL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    WHILE           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    UNLESS          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    UNTIL           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    TERM            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    NUMBER          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    LPAREN          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    $end            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    COMMA           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RBRACKET        reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    THEN            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    DO              reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RESCUE          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    HASH_ROCKET     reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RKEY            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RPAREN          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    WHEN            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    LKEY            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    END             reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    ELSIF           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    ELSE            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    ENSURE          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    LBRACKET        reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    NOT_SYMBOL      reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    COMPLEMENT_OP   reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    DEFINED_OP      reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    UNARY_OP        reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RETURN          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    YIELD           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    CASE            reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    FOR             reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    BEGIN           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    CLASS           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    MODULE          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    DEF             reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    VAR_GLOBAL      reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    VAR_LOCAL       reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    VAR_INSTANCE    reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    VAR_CLASS       reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    SYMBOL          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    STRING          reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    IDENTIFIER      reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    SUPER           reduce using rule 52 (arg -> arg OR_SYMBOL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! PLUS            [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! MINUS           [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! TIMES           [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! DIVIDE          [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! MOD             [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! POW             [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! GREATERTHAN     [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! LESSERTHAN      [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! EQUAL           [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! NOTEQUAL        [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! AND             [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]
  ! OR              [ reduce using rule 52 (arg -> arg OR_SYMBOL arg .) ]


state 305

    (53) arg -> arg BINARY_XOR_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    WHILE           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    UNLESS          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    UNTIL           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    TERM            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    NUMBER          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    LPAREN          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    $end            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    COMMA           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RBRACKET        reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    THEN            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    DO              reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RESCUE          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    HASH_ROCKET     reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RKEY            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RPAREN          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    WHEN            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    LKEY            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    END             reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    ELSIF           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    ELSE            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    ENSURE          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    LBRACKET        reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    NOT_SYMBOL      reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    COMPLEMENT_OP   reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    DEFINED_OP      reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    UNARY_OP        reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RETURN          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    YIELD           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    CASE            reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    FOR             reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    BEGIN           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    CLASS           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    MODULE          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    DEF             reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    VAR_GLOBAL      reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    VAR_LOCAL       reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    VAR_INSTANCE    reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    VAR_CLASS       reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    SYMBOL          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    STRING          reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    IDENTIFIER      reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    SUPER           reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! PLUS            [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MINUS           [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! TIMES           [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! DIVIDE          [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MOD             [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! POW             [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! EQUAL           [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! AND             [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]
  ! OR              [ reduce using rule 53 (arg -> arg BINARY_XOR_OP arg .) ]


state 306

    (54) arg -> arg BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    WHILE           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    UNLESS          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    UNTIL           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    TERM            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    NUMBER          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    LPAREN          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    $end            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    COMMA           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    THEN            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    DO              reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RESCUE          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    HASH_ROCKET     reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RKEY            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RPAREN          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    WHEN            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    LKEY            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    END             reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    ELSIF           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    ELSE            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    ENSURE          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    NOT_SYMBOL      reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    COMPLEMENT_OP   reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    DEFINED_OP      reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    UNARY_OP        reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RETURN          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    YIELD           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    CASE            reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    FOR             reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    BEGIN           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    CLASS           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    MODULE          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    DEF             reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    VAR_GLOBAL      reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    VAR_LOCAL       reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    VAR_INSTANCE    reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    VAR_CLASS       reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    SYMBOL          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    STRING          reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    IDENTIFIER      reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    SUPER           reduce using rule 54 (arg -> arg BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! PLUS            [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! MINUS           [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! TIMES           [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! DIVIDE          [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! MOD             [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! POW             [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! EQUAL           [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! AND             [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 54 (arg -> arg BINARY_AND_OP arg .) ]


state 307

    (55) arg -> arg COMBINED_COMPARISON_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    WHILE           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNLESS          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNTIL           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    TERM            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    NUMBER          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LPAREN          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    $end            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    COMMA           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RBRACKET        reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    THEN            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DO              reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RESCUE          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    HASH_ROCKET     reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RKEY            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RPAREN          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    WHEN            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LKEY            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    END             reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ELSIF           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ELSE            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    ENSURE          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    LBRACKET        reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    NOT_SYMBOL      reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    COMPLEMENT_OP   reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DEFINED_OP      reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    UNARY_OP        reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RETURN          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    YIELD           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    CASE            reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    FOR             reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    BEGIN           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    CLASS           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    MODULE          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    DEF             reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_GLOBAL      reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_LOCAL       reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_INSTANCE    reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    VAR_CLASS       reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    SYMBOL          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    STRING          reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    IDENTIFIER      reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    SUPER           reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! PLUS            [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MINUS           [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! TIMES           [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! DIVIDE          [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MOD             [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! POW             [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! EQUAL           [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! AND             [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]
  ! OR              [ reduce using rule 55 (arg -> arg COMBINED_COMPARISON_OP arg .) ]


state 308

    (56) arg -> arg GREATERTHAN arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    WHILE           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    UNLESS          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    UNTIL           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    TERM            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    NUMBER          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    LPAREN          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    $end            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    COMMA           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RBRACKET        reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    THEN            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    DO              reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RESCUE          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    HASH_ROCKET     reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RKEY            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RPAREN          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    WHEN            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    LKEY            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    END             reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    ELSIF           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    ELSE            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    ENSURE          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    LBRACKET        reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    NOT_SYMBOL      reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    COMPLEMENT_OP   reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    DEFINED_OP      reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    UNARY_OP        reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RETURN          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    YIELD           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    CASE            reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    FOR             reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    BEGIN           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    CLASS           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    MODULE          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    DEF             reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    VAR_GLOBAL      reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    VAR_LOCAL       reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    VAR_INSTANCE    reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    VAR_CLASS       reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    SYMBOL          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    STRING          reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    IDENTIFIER      reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    SUPER           reduce using rule 56 (arg -> arg GREATERTHAN arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! PLUS            [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! MINUS           [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! TIMES           [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! DIVIDE          [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! MOD             [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! POW             [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! OR_SYMBOL       [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! GREATERTHAN     [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! LESSERTHAN      [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! EQUAL           [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! NOTEQUAL        [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! AND             [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]
  ! OR              [ reduce using rule 56 (arg -> arg GREATERTHAN arg .) ]


state 309

    (57) arg -> arg GREATERTHANEQUAL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    WHILE           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    UNLESS          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    UNTIL           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    TERM            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    NUMBER          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    LPAREN          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    $end            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    COMMA           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RBRACKET        reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    THEN            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    DO              reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RESCUE          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    HASH_ROCKET     reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RKEY            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RPAREN          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    WHEN            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    LKEY            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    END             reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    ELSIF           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    ELSE            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    ENSURE          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    LBRACKET        reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    NOT_SYMBOL      reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    DEFINED_OP      reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    UNARY_OP        reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RETURN          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    YIELD           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    CASE            reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    FOR             reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    BEGIN           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    CLASS           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    MODULE          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    DEF             reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_GLOBAL      reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_LOCAL       reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_INSTANCE    reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    VAR_CLASS       reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    SYMBOL          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    STRING          reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    IDENTIFIER      reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    SUPER           reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! PLUS            [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MINUS           [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! TIMES           [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MOD             [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! POW             [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! AND             [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]
  ! OR              [ reduce using rule 57 (arg -> arg GREATERTHANEQUAL arg .) ]


state 310

    (58) arg -> arg LESSERTHAN arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    WHILE           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    UNLESS          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    UNTIL           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    TERM            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    NUMBER          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    LPAREN          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    $end            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    COMMA           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RBRACKET        reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    THEN            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    DO              reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RESCUE          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    HASH_ROCKET     reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RKEY            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RPAREN          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    WHEN            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    LKEY            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    END             reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    ELSIF           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    ELSE            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    ENSURE          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    LBRACKET        reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    NOT_SYMBOL      reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    COMPLEMENT_OP   reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    DEFINED_OP      reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    UNARY_OP        reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RETURN          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    YIELD           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    CASE            reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    FOR             reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    BEGIN           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    CLASS           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    MODULE          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    DEF             reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    VAR_GLOBAL      reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    VAR_LOCAL       reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    VAR_INSTANCE    reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    VAR_CLASS       reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    SYMBOL          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    STRING          reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    IDENTIFIER      reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    SUPER           reduce using rule 58 (arg -> arg LESSERTHAN arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! PLUS            [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! MINUS           [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! TIMES           [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! DIVIDE          [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! MOD             [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! POW             [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! OR_SYMBOL       [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! GREATERTHAN     [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! LESSERTHAN      [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! EQUAL           [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! NOTEQUAL        [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! AND             [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]
  ! OR              [ reduce using rule 58 (arg -> arg LESSERTHAN arg .) ]


state 311

    (59) arg -> arg LESSERTHANEQUAL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    WHILE           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    UNLESS          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    UNTIL           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    TERM            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    NUMBER          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    LPAREN          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    $end            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    COMMA           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RBRACKET        reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    THEN            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    DO              reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RESCUE          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    HASH_ROCKET     reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RKEY            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RPAREN          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    WHEN            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    LKEY            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    END             reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    ELSIF           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    ELSE            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    ENSURE          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    LBRACKET        reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    NOT_SYMBOL      reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    DEFINED_OP      reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    UNARY_OP        reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RETURN          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    YIELD           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    CASE            reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    FOR             reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    BEGIN           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    CLASS           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    MODULE          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    DEF             reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_GLOBAL      reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_LOCAL       reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_INSTANCE    reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    VAR_CLASS       reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    SYMBOL          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    STRING          reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    IDENTIFIER      reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    SUPER           reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! PLUS            [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MINUS           [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! TIMES           [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MOD             [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! POW             [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! AND             [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]
  ! OR              [ reduce using rule 59 (arg -> arg LESSERTHANEQUAL arg .) ]


state 312

    (60) arg -> arg EQUAL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 60 (arg -> arg EQUAL arg .)
    WHILE           reduce using rule 60 (arg -> arg EQUAL arg .)
    UNLESS          reduce using rule 60 (arg -> arg EQUAL arg .)
    UNTIL           reduce using rule 60 (arg -> arg EQUAL arg .)
    TERM            reduce using rule 60 (arg -> arg EQUAL arg .)
    NUMBER          reduce using rule 60 (arg -> arg EQUAL arg .)
    LPAREN          reduce using rule 60 (arg -> arg EQUAL arg .)
    $end            reduce using rule 60 (arg -> arg EQUAL arg .)
    COMMA           reduce using rule 60 (arg -> arg EQUAL arg .)
    RBRACKET        reduce using rule 60 (arg -> arg EQUAL arg .)
    THEN            reduce using rule 60 (arg -> arg EQUAL arg .)
    DO              reduce using rule 60 (arg -> arg EQUAL arg .)
    RESCUE          reduce using rule 60 (arg -> arg EQUAL arg .)
    HASH_ROCKET     reduce using rule 60 (arg -> arg EQUAL arg .)
    RKEY            reduce using rule 60 (arg -> arg EQUAL arg .)
    RPAREN          reduce using rule 60 (arg -> arg EQUAL arg .)
    WHEN            reduce using rule 60 (arg -> arg EQUAL arg .)
    LKEY            reduce using rule 60 (arg -> arg EQUAL arg .)
    END             reduce using rule 60 (arg -> arg EQUAL arg .)
    ELSIF           reduce using rule 60 (arg -> arg EQUAL arg .)
    ELSE            reduce using rule 60 (arg -> arg EQUAL arg .)
    ENSURE          reduce using rule 60 (arg -> arg EQUAL arg .)
    LBRACKET        reduce using rule 60 (arg -> arg EQUAL arg .)
    NOT_SYMBOL      reduce using rule 60 (arg -> arg EQUAL arg .)
    COMPLEMENT_OP   reduce using rule 60 (arg -> arg EQUAL arg .)
    DEFINED_OP      reduce using rule 60 (arg -> arg EQUAL arg .)
    UNARY_OP        reduce using rule 60 (arg -> arg EQUAL arg .)
    RETURN          reduce using rule 60 (arg -> arg EQUAL arg .)
    YIELD           reduce using rule 60 (arg -> arg EQUAL arg .)
    CASE            reduce using rule 60 (arg -> arg EQUAL arg .)
    FOR             reduce using rule 60 (arg -> arg EQUAL arg .)
    BEGIN           reduce using rule 60 (arg -> arg EQUAL arg .)
    CLASS           reduce using rule 60 (arg -> arg EQUAL arg .)
    MODULE          reduce using rule 60 (arg -> arg EQUAL arg .)
    DEF             reduce using rule 60 (arg -> arg EQUAL arg .)
    VAR_GLOBAL      reduce using rule 60 (arg -> arg EQUAL arg .)
    VAR_LOCAL       reduce using rule 60 (arg -> arg EQUAL arg .)
    VAR_INSTANCE    reduce using rule 60 (arg -> arg EQUAL arg .)
    VAR_CLASS       reduce using rule 60 (arg -> arg EQUAL arg .)
    SYMBOL          reduce using rule 60 (arg -> arg EQUAL arg .)
    STRING          reduce using rule 60 (arg -> arg EQUAL arg .)
    IDENTIFIER      reduce using rule 60 (arg -> arg EQUAL arg .)
    SUPER           reduce using rule 60 (arg -> arg EQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! PLUS            [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! MINUS           [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! TIMES           [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! MOD             [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! POW             [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! EQUAL           [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! AND             [ reduce using rule 60 (arg -> arg EQUAL arg .) ]
  ! OR              [ reduce using rule 60 (arg -> arg EQUAL arg .) ]


state 313

    (61) arg -> arg CASE_EQUALITY arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    WHILE           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    UNLESS          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    UNTIL           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    TERM            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    NUMBER          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    LPAREN          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    $end            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    COMMA           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RBRACKET        reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    THEN            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    DO              reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RESCUE          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    HASH_ROCKET     reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RKEY            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RPAREN          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    WHEN            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    LKEY            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    END             reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    ELSIF           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    ELSE            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    ENSURE          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    LBRACKET        reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    NOT_SYMBOL      reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    COMPLEMENT_OP   reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    DEFINED_OP      reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    UNARY_OP        reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RETURN          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    YIELD           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    CASE            reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    FOR             reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    BEGIN           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    CLASS           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    MODULE          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    DEF             reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    VAR_GLOBAL      reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    VAR_LOCAL       reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    VAR_INSTANCE    reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    VAR_CLASS       reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    SYMBOL          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    STRING          reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    IDENTIFIER      reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    SUPER           reduce using rule 61 (arg -> arg CASE_EQUALITY arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! PLUS            [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! MINUS           [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! TIMES           [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! DIVIDE          [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! MOD             [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! POW             [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! OR_SYMBOL       [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! GREATERTHAN     [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! LESSERTHAN      [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! EQUAL           [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! NOTEQUAL        [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! AND             [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]
  ! OR              [ reduce using rule 61 (arg -> arg CASE_EQUALITY arg .) ]


state 314

    (62) arg -> arg NOTEQUAL arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    WHILE           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    UNLESS          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    UNTIL           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    TERM            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    NUMBER          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    LPAREN          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    $end            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    COMMA           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RBRACKET        reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    THEN            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    DO              reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RESCUE          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    HASH_ROCKET     reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RKEY            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RPAREN          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    WHEN            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    LKEY            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    END             reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    ELSIF           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    ELSE            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    ENSURE          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    LBRACKET        reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    NOT_SYMBOL      reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    COMPLEMENT_OP   reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    DEFINED_OP      reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    UNARY_OP        reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RETURN          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    YIELD           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    CASE            reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    FOR             reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    BEGIN           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    CLASS           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    MODULE          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    DEF             reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    VAR_GLOBAL      reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    VAR_LOCAL       reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    VAR_INSTANCE    reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    VAR_CLASS       reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    SYMBOL          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    STRING          reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    IDENTIFIER      reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    SUPER           reduce using rule 62 (arg -> arg NOTEQUAL arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! PLUS            [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! MINUS           [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! TIMES           [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! DIVIDE          [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! MOD             [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! POW             [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! OR_SYMBOL       [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! GREATERTHAN     [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! LESSERTHAN      [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! EQUAL           [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! NOTEQUAL        [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! AND             [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]
  ! OR              [ reduce using rule 62 (arg -> arg NOTEQUAL arg .) ]


state 315

    (63) arg -> arg MATCHED_STRINGS_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    WHILE           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNLESS          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNTIL           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    TERM            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    NUMBER          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    LPAREN          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    $end            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    COMMA           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RBRACKET        reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    THEN            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    DO              reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RESCUE          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    HASH_ROCKET     reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RKEY            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RPAREN          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    WHEN            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    LKEY            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    END             reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    ELSIF           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    ELSE            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    ENSURE          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    LBRACKET        reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    NOT_SYMBOL      reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    COMPLEMENT_OP   reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    DEFINED_OP      reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    UNARY_OP        reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RETURN          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    YIELD           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    CASE            reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    FOR             reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    BEGIN           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    CLASS           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    MODULE          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    DEF             reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_GLOBAL      reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_LOCAL       reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_INSTANCE    reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    VAR_CLASS       reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    SYMBOL          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    STRING          reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    IDENTIFIER      reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    SUPER           reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! PLUS            [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MINUS           [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! TIMES           [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! DIVIDE          [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MOD             [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! POW             [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! EQUAL           [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! AND             [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]
  ! OR              [ reduce using rule 63 (arg -> arg MATCHED_STRINGS_OP arg .) ]


state 316

    (64) arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    WHILE           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNLESS          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNTIL           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    TERM            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    NUMBER          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LPAREN          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    $end            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    COMMA           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RBRACKET        reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    THEN            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DO              reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RESCUE          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    HASH_ROCKET     reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RKEY            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RPAREN          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    WHEN            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LKEY            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    END             reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ELSIF           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ELSE            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    ENSURE          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    LBRACKET        reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    NOT_SYMBOL      reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    COMPLEMENT_OP   reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DEFINED_OP      reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    UNARY_OP        reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RETURN          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    YIELD           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    CASE            reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    FOR             reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    BEGIN           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    CLASS           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    MODULE          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    DEF             reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_GLOBAL      reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_LOCAL       reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_INSTANCE    reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    VAR_CLASS       reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    SYMBOL          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    STRING          reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    IDENTIFIER      reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    SUPER           reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! PLUS            [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MINUS           [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! TIMES           [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! DIVIDE          [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MOD             [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! POW             [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! EQUAL           [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! AND             [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]
  ! OR              [ reduce using rule 64 (arg -> arg OPPOSITE_MATCHED_STRINGS_OP arg .) ]


state 317

    (67) arg -> arg BINARY_LEFT_SHIFT_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    WHILE           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNLESS          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNTIL           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    TERM            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    NUMBER          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LPAREN          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    $end            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    COMMA           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RBRACKET        reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    THEN            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DO              reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RESCUE          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    HASH_ROCKET     reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RKEY            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RPAREN          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    WHEN            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LKEY            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    END             reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ELSIF           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ELSE            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    ENSURE          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    LBRACKET        reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    NOT_SYMBOL      reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    COMPLEMENT_OP   reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DEFINED_OP      reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    UNARY_OP        reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RETURN          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    YIELD           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    CASE            reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    FOR             reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    BEGIN           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    CLASS           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    MODULE          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    DEF             reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_GLOBAL      reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_LOCAL       reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_INSTANCE    reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    VAR_CLASS       reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    SYMBOL          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    STRING          reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    IDENTIFIER      reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    SUPER           reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! PLUS            [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MINUS           [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! TIMES           [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MOD             [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! POW             [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! EQUAL           [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! AND             [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]
  ! OR              [ reduce using rule 67 (arg -> arg BINARY_LEFT_SHIFT_OP arg .) ]


state 318

    (68) arg -> arg BINARY_RIGHT_SHIFT_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    WHILE           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNLESS          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNTIL           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    TERM            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    NUMBER          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LPAREN          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    $end            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    COMMA           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RBRACKET        reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    THEN            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DO              reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RESCUE          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    HASH_ROCKET     reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RKEY            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RPAREN          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    WHEN            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LKEY            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    END             reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ELSIF           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ELSE            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    ENSURE          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    LBRACKET        reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    NOT_SYMBOL      reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    COMPLEMENT_OP   reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DEFINED_OP      reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    UNARY_OP        reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RETURN          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    YIELD           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    CASE            reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    FOR             reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    BEGIN           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    CLASS           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    MODULE          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    DEF             reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_GLOBAL      reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_LOCAL       reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_INSTANCE    reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    VAR_CLASS       reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    SYMBOL          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    STRING          reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    IDENTIFIER      reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    SUPER           reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! PLUS            [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MINUS           [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! TIMES           [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! DIVIDE          [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MOD             [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! POW             [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OR_SYMBOL       [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! GREATERTHAN     [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! LESSERTHAN      [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! EQUAL           [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! NOTEQUAL        [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! AND             [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]
  ! OR              [ reduce using rule 68 (arg -> arg BINARY_RIGHT_SHIFT_OP arg .) ]


state 319

    (69) arg -> arg AND arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 69 (arg -> arg AND arg .)
    WHILE           reduce using rule 69 (arg -> arg AND arg .)
    UNLESS          reduce using rule 69 (arg -> arg AND arg .)
    UNTIL           reduce using rule 69 (arg -> arg AND arg .)
    TERM            reduce using rule 69 (arg -> arg AND arg .)
    NUMBER          reduce using rule 69 (arg -> arg AND arg .)
    LPAREN          reduce using rule 69 (arg -> arg AND arg .)
    $end            reduce using rule 69 (arg -> arg AND arg .)
    COMMA           reduce using rule 69 (arg -> arg AND arg .)
    RBRACKET        reduce using rule 69 (arg -> arg AND arg .)
    THEN            reduce using rule 69 (arg -> arg AND arg .)
    DO              reduce using rule 69 (arg -> arg AND arg .)
    RESCUE          reduce using rule 69 (arg -> arg AND arg .)
    HASH_ROCKET     reduce using rule 69 (arg -> arg AND arg .)
    RKEY            reduce using rule 69 (arg -> arg AND arg .)
    RPAREN          reduce using rule 69 (arg -> arg AND arg .)
    WHEN            reduce using rule 69 (arg -> arg AND arg .)
    LKEY            reduce using rule 69 (arg -> arg AND arg .)
    END             reduce using rule 69 (arg -> arg AND arg .)
    ELSIF           reduce using rule 69 (arg -> arg AND arg .)
    ELSE            reduce using rule 69 (arg -> arg AND arg .)
    ENSURE          reduce using rule 69 (arg -> arg AND arg .)
    LBRACKET        reduce using rule 69 (arg -> arg AND arg .)
    NOT_SYMBOL      reduce using rule 69 (arg -> arg AND arg .)
    COMPLEMENT_OP   reduce using rule 69 (arg -> arg AND arg .)
    DEFINED_OP      reduce using rule 69 (arg -> arg AND arg .)
    UNARY_OP        reduce using rule 69 (arg -> arg AND arg .)
    RETURN          reduce using rule 69 (arg -> arg AND arg .)
    YIELD           reduce using rule 69 (arg -> arg AND arg .)
    CASE            reduce using rule 69 (arg -> arg AND arg .)
    FOR             reduce using rule 69 (arg -> arg AND arg .)
    BEGIN           reduce using rule 69 (arg -> arg AND arg .)
    CLASS           reduce using rule 69 (arg -> arg AND arg .)
    MODULE          reduce using rule 69 (arg -> arg AND arg .)
    DEF             reduce using rule 69 (arg -> arg AND arg .)
    VAR_GLOBAL      reduce using rule 69 (arg -> arg AND arg .)
    VAR_LOCAL       reduce using rule 69 (arg -> arg AND arg .)
    VAR_INSTANCE    reduce using rule 69 (arg -> arg AND arg .)
    VAR_CLASS       reduce using rule 69 (arg -> arg AND arg .)
    SYMBOL          reduce using rule 69 (arg -> arg AND arg .)
    STRING          reduce using rule 69 (arg -> arg AND arg .)
    IDENTIFIER      reduce using rule 69 (arg -> arg AND arg .)
    SUPER           reduce using rule 69 (arg -> arg AND arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! PLUS            [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! MINUS           [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! TIMES           [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! DIVIDE          [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! MOD             [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! POW             [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! OR_SYMBOL       [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! GREATERTHAN     [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! LESSERTHAN      [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! EQUAL           [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! NOTEQUAL        [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! AND             [ reduce using rule 69 (arg -> arg AND arg .) ]
  ! OR              [ reduce using rule 69 (arg -> arg AND arg .) ]


state 320

    (70) arg -> arg OR arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for OR_SYMBOL resolved as shift
  ! shift/reduce conflict for BINARY_XOR_OP resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for COMBINED_COMPARISON_OP resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for LESSERTHAN resolved as shift
  ! shift/reduce conflict for LESSERTHANEQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for CASE_EQUALITY resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP resolved as shift
  ! shift/reduce conflict for BINARY_LEFT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for BINARY_RIGHT_SHIFT_OP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 70 (arg -> arg OR arg .)
    WHILE           reduce using rule 70 (arg -> arg OR arg .)
    UNLESS          reduce using rule 70 (arg -> arg OR arg .)
    UNTIL           reduce using rule 70 (arg -> arg OR arg .)
    TERM            reduce using rule 70 (arg -> arg OR arg .)
    NUMBER          reduce using rule 70 (arg -> arg OR arg .)
    LPAREN          reduce using rule 70 (arg -> arg OR arg .)
    $end            reduce using rule 70 (arg -> arg OR arg .)
    COMMA           reduce using rule 70 (arg -> arg OR arg .)
    RBRACKET        reduce using rule 70 (arg -> arg OR arg .)
    THEN            reduce using rule 70 (arg -> arg OR arg .)
    DO              reduce using rule 70 (arg -> arg OR arg .)
    RESCUE          reduce using rule 70 (arg -> arg OR arg .)
    HASH_ROCKET     reduce using rule 70 (arg -> arg OR arg .)
    RKEY            reduce using rule 70 (arg -> arg OR arg .)
    RPAREN          reduce using rule 70 (arg -> arg OR arg .)
    WHEN            reduce using rule 70 (arg -> arg OR arg .)
    LKEY            reduce using rule 70 (arg -> arg OR arg .)
    END             reduce using rule 70 (arg -> arg OR arg .)
    ELSIF           reduce using rule 70 (arg -> arg OR arg .)
    ELSE            reduce using rule 70 (arg -> arg OR arg .)
    ENSURE          reduce using rule 70 (arg -> arg OR arg .)
    LBRACKET        reduce using rule 70 (arg -> arg OR arg .)
    NOT_SYMBOL      reduce using rule 70 (arg -> arg OR arg .)
    COMPLEMENT_OP   reduce using rule 70 (arg -> arg OR arg .)
    DEFINED_OP      reduce using rule 70 (arg -> arg OR arg .)
    UNARY_OP        reduce using rule 70 (arg -> arg OR arg .)
    RETURN          reduce using rule 70 (arg -> arg OR arg .)
    YIELD           reduce using rule 70 (arg -> arg OR arg .)
    CASE            reduce using rule 70 (arg -> arg OR arg .)
    FOR             reduce using rule 70 (arg -> arg OR arg .)
    BEGIN           reduce using rule 70 (arg -> arg OR arg .)
    CLASS           reduce using rule 70 (arg -> arg OR arg .)
    MODULE          reduce using rule 70 (arg -> arg OR arg .)
    DEF             reduce using rule 70 (arg -> arg OR arg .)
    VAR_GLOBAL      reduce using rule 70 (arg -> arg OR arg .)
    VAR_LOCAL       reduce using rule 70 (arg -> arg OR arg .)
    VAR_INSTANCE    reduce using rule 70 (arg -> arg OR arg .)
    VAR_CLASS       reduce using rule 70 (arg -> arg OR arg .)
    SYMBOL          reduce using rule 70 (arg -> arg OR arg .)
    STRING          reduce using rule 70 (arg -> arg OR arg .)
    IDENTIFIER      reduce using rule 70 (arg -> arg OR arg .)
    SUPER           reduce using rule 70 (arg -> arg OR arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! RANGE_INCLUSIVE [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! PLUS            [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! MINUS           [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! TIMES           [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! DIVIDE          [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! MOD             [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! POW             [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! OR_SYMBOL       [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! BINARY_XOR_OP   [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! BINARY_AND_OP   [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! COMBINED_COMPARISON_OP [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! GREATERTHAN     [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! GREATERTHANEQUAL [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! LESSERTHAN      [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! LESSERTHANEQUAL [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! EQUAL           [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! CASE_EQUALITY   [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! NOTEQUAL        [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! MATCHED_STRINGS_OP [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! OPPOSITE_MATCHED_STRINGS_OP [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! BINARY_LEFT_SHIFT_OP [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! BINARY_RIGHT_SHIFT_OP [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! AND             [ reduce using rule 70 (arg -> arg OR arg .) ]
  ! OR              [ reduce using rule 70 (arg -> arg OR arg .) ]


state 321

    (33) function -> operation LBRACKET LPAREN . LBRACKET call_args RBRACKET RPAREN RBRACKET
    (77) primary -> LPAREN . compstmt RPAREN
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 410
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    operation                      shift and go to state 28
    compstmt                       shift and go to state 193
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 322

    (77) primary -> LPAREN compstmt RPAREN .

    LBRACKET        reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    DOT             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    UNARY_OP        reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RANGE_INCLUSIVE reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    PLUS            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    MINUS           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    TIMES           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    DIVIDE          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    MOD             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    POW             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    OR_SYMBOL       reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    BINARY_XOR_OP   reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    BINARY_AND_OP   reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    GREATERTHAN     reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    GREATERTHANEQUAL reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    LESSERTHAN      reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    LESSERTHANEQUAL reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    EQUAL           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    CASE_EQUALITY   reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    NOTEQUAL        reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    AND             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    OR              reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    IF              reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    WHILE           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    UNLESS          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    UNTIL           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    TERM            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    NUMBER          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    LPAREN          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    $end            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    COMMA           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RBRACKET        reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    THEN            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    DO              reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RESCUE          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    HASH_ROCKET     reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RKEY            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RPAREN          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    WHEN            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    LKEY            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    END             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    ELSIF           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    ELSE            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    ENSURE          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    NOT_SYMBOL      reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    COMPLEMENT_OP   reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    DEFINED_OP      reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    RETURN          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    YIELD           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    CASE            reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    FOR             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    BEGIN           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    CLASS           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    MODULE          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    DEF             reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    VAR_GLOBAL      reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    VAR_LOCAL       reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    VAR_INSTANCE    reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    VAR_CLASS       reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    SYMBOL          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    STRING          reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    IDENTIFIER      reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)
    SUPER           reduce using rule 77 (primary -> LPAREN compstmt RPAREN .)


state 323

    (159) mlhs_item -> LPAREN mlhs RPAREN .

    COMMA           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    TIMES           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_GLOBAL      reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_LOCAL       reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_INSTANCE    reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    VAR_CLASS       reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    LPAREN          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNARY_OP        reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    LBRACKET        reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    LKEY            reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    RETURN          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    YIELD           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    DEFINED_OP      reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    IF              reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNLESS          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    WHILE           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    UNTIL           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    CASE            reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    FOR             reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    BEGIN           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    CLASS           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    MODULE          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    DEF             reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    NUMBER          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    SYMBOL          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    STRING          reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    IDENTIFIER      reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)
    SUPER           reduce using rule 159 (mlhs_item -> LPAREN mlhs RPAREN .)


state 324

    (38) function -> SUPER LPAREN call_args . RPAREN

    RPAREN          shift and go to state 411


state 325

    (98) primary -> DEFINED_OP LPAREN arg . LPAREN
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg
    (26) expr -> arg .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 412
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190
    IF              reduce using rule 26 (expr -> arg .)
    WHILE           reduce using rule 26 (expr -> arg .)
    UNLESS          reduce using rule 26 (expr -> arg .)
    UNTIL           reduce using rule 26 (expr -> arg .)
    TERM            reduce using rule 26 (expr -> arg .)
    NUMBER          reduce using rule 26 (expr -> arg .)
    RPAREN          reduce using rule 26 (expr -> arg .)

  ! AND             [ reduce using rule 26 (expr -> arg .) ]
  ! OR              [ reduce using rule 26 (expr -> arg .) ]
  ! LPAREN          [ reduce using rule 26 (expr -> arg .) ]


state 326

    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (16) stmt -> lhs . = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (158) mlhs_item -> lhs .
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

    =               shift and go to state 413
    COMMA           reduce using rule 158 (mlhs_item -> lhs .)
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

    op_asgn                        shift and go to state 133

state 327

    (84) primary -> LBRACKET . RBRACKET
    (85) primary -> LBRACKET . args RBRACKET
    (86) primary -> LBRACKET . args COMMA RBRACKET
    (6) stmt -> LBRACKET . block_var RBRACKET
    (7) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 67
    OR_SYMBOL       shift and go to state 68
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    TIMES           shift and go to state 44
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    args                           shift and go to state 69
    block_var                      shift and go to state 66
    arg                            shift and go to state 72
    lhs                            shift and go to state 70
    mlhs                           shift and go to state 71
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 328

    (113) primary -> BEGIN . compstmt rescue END
    (114) primary -> BEGIN . compstmt rescue ELSE compstmt END
    (115) primary -> BEGIN . compstmt rescue ENSURE compstmt END
    (116) primary -> BEGIN . compstmt rescue ELSE compstmt ENSURE compstmt END
    (14) stmt -> BEGIN . LKEY compstmt RKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LKEY            shift and go to state 122
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 123
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 329

    (110) primary -> CASE compstmt when . END
    (111) primary -> CASE compstmt when . ELSE compstmt END
    (126) when -> when . WHEN when_args then compstmt

    END             shift and go to state 414
    ELSE            shift and go to state 415
    WHEN            shift and go to state 416


state 330

    (125) when -> WHEN . when_args then compstmt
    (131) when_args -> . args
    (132) when_args -> . args COMMA TIMES arg
    (133) when_args -> . TIMES arg
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 419
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    when_args                      shift and go to state 417
    args                           shift and go to state 418
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 331

    (112) primary -> FOR block_var IN . expr do compstmt END
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 420
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 332

    (98) primary -> DEFINED_OP LPAREN . arg LPAREN
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 421
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 333

    (117) primary -> CLASS IDENTIFIER compstmt . END

    END             shift and go to state 422


state 334

    (118) primary -> CLASS IDENTIFIER LESSERTHAN . IDENTIFIER compstmt END

    IDENTIFIER      shift and go to state 423


state 335

    (119) primary -> MODULE IDENTIFIER compstmt . END

    END             shift and go to state 424


state 336

    (120) primary -> DEF fname argdecl . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 425
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 337

    (162) argdecl -> LPAREN . arglist RPAREN
    (164) arglist -> . IDENTIFIER
    (165) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (166) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    IDENTIFIER      shift and go to state 339

    arglist                        shift and go to state 426

state 338

    (163) argdecl -> arglist . term
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    term                           shift and go to state 427
    factor                         shift and go to state 57

state 339

    (164) arglist -> IDENTIFIER .
    (165) arglist -> IDENTIFIER . COMMA IDENTIFIER
    (166) arglist -> IDENTIFIER . COMMA & IDENTIFIER

    TERM            reduce using rule 164 (arglist -> IDENTIFIER .)
    NUMBER          reduce using rule 164 (arglist -> IDENTIFIER .)
    LPAREN          reduce using rule 164 (arglist -> IDENTIFIER .)
    RPAREN          reduce using rule 164 (arglist -> IDENTIFIER .)
    COMMA           shift and go to state 428


state 340

    (121) primary -> DEF singleton DOT . fname argdecl compstmt END
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109

    fname                          shift and go to state 429

state 341

    (122) primary -> DEF singleton UNARY_OP . fname argdecl compstmt END
    (192) fname -> . IDENTIFIER
    (193) fname -> . RANGE_INCLUSIVE
    (194) fname -> . OR_SYMBOL
    (195) fname -> . BINARY_XOR_OP
    (196) fname -> . BINARY_AND_OP
    (197) fname -> . COMBINED_COMPARISON_OP
    (198) fname -> . EQUAL
    (199) fname -> . CASE_EQUALITY
    (200) fname -> . MATCHED_STRINGS_OP
    (201) fname -> . GREATERTHAN
    (202) fname -> . GREATERTHANEQUAL
    (203) fname -> . LESSERTHAN
    (204) fname -> . LESSERTHANEQUAL
    (205) fname -> . PLUS
    (206) fname -> . MINUS
    (207) fname -> . TIMES
    (208) fname -> . DIVIDE
    (209) fname -> . MOD
    (210) fname -> . POW
    (211) fname -> . BINARY_LEFT_SHIFT_OP
    (212) fname -> . BINARY_RIGHT_SHIFT_OP
    (213) fname -> . COMPLEMENT_OP
    (214) fname -> . OVERLOAD_PLUS
    (215) fname -> . OVERLOAD_MINUS
    (216) fname -> . LBRACKET RBRACKET
    (217) fname -> . LBRACKET RBRACKET EQUAL_SYMBOL

    IDENTIFIER      shift and go to state 85
    RANGE_INCLUSIVE shift and go to state 86
    OR_SYMBOL       shift and go to state 87
    BINARY_XOR_OP   shift and go to state 88
    BINARY_AND_OP   shift and go to state 89
    COMBINED_COMPARISON_OP shift and go to state 90
    EQUAL           shift and go to state 91
    CASE_EQUALITY   shift and go to state 92
    MATCHED_STRINGS_OP shift and go to state 93
    GREATERTHAN     shift and go to state 94
    GREATERTHANEQUAL shift and go to state 95
    LESSERTHAN      shift and go to state 96
    LESSERTHANEQUAL shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    MOD             shift and go to state 102
    POW             shift and go to state 103
    BINARY_LEFT_SHIFT_OP shift and go to state 104
    BINARY_RIGHT_SHIFT_OP shift and go to state 105
    COMPLEMENT_OP   shift and go to state 106
    OVERLOAD_PLUS   shift and go to state 107
    OVERLOAD_MINUS  shift and go to state 108
    LBRACKET        shift and go to state 109

    fname                          shift and go to state 430

state 342

    (168) singleton -> LPAREN expr . RPAREN
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RPAREN          shift and go to state 431
    AND             shift and go to state 60
    OR              shift and go to state 61


state 343

    (152) mlhs -> mlhs_item COMMA mlhs_item . TIMES
    (153) mlhs -> mlhs_item COMMA mlhs_item . lhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 432
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 433
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 344

    (157) mult_mlhs_item -> COMMA . mlhs_item
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    LPAREN          shift and go to state 117
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    mlhs_item                      shift and go to state 434
    lhs                            shift and go to state 345
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 345

    (158) mlhs_item -> lhs .

    TIMES           reduce using rule 158 (mlhs_item -> lhs .)
    VAR_GLOBAL      reduce using rule 158 (mlhs_item -> lhs .)
    VAR_LOCAL       reduce using rule 158 (mlhs_item -> lhs .)
    VAR_INSTANCE    reduce using rule 158 (mlhs_item -> lhs .)
    VAR_CLASS       reduce using rule 158 (mlhs_item -> lhs .)
    LPAREN          reduce using rule 158 (mlhs_item -> lhs .)
    UNARY_OP        reduce using rule 158 (mlhs_item -> lhs .)
    LBRACKET        reduce using rule 158 (mlhs_item -> lhs .)
    LKEY            reduce using rule 158 (mlhs_item -> lhs .)
    RETURN          reduce using rule 158 (mlhs_item -> lhs .)
    YIELD           reduce using rule 158 (mlhs_item -> lhs .)
    DEFINED_OP      reduce using rule 158 (mlhs_item -> lhs .)
    IF              reduce using rule 158 (mlhs_item -> lhs .)
    UNLESS          reduce using rule 158 (mlhs_item -> lhs .)
    WHILE           reduce using rule 158 (mlhs_item -> lhs .)
    UNTIL           reduce using rule 158 (mlhs_item -> lhs .)
    CASE            reduce using rule 158 (mlhs_item -> lhs .)
    FOR             reduce using rule 158 (mlhs_item -> lhs .)
    BEGIN           reduce using rule 158 (mlhs_item -> lhs .)
    CLASS           reduce using rule 158 (mlhs_item -> lhs .)
    MODULE          reduce using rule 158 (mlhs_item -> lhs .)
    DEF             reduce using rule 158 (mlhs_item -> lhs .)
    NUMBER          reduce using rule 158 (mlhs_item -> lhs .)
    SYMBOL          reduce using rule 158 (mlhs_item -> lhs .)
    STRING          reduce using rule 158 (mlhs_item -> lhs .)
    IDENTIFIER      reduce using rule 158 (mlhs_item -> lhs .)
    SUPER           reduce using rule 158 (mlhs_item -> lhs .)


state 346

    (154) mlhs -> mlhs_item COMMA mult_mlhs_item . TIMES
    (155) mlhs -> mlhs_item COMMA mult_mlhs_item . lhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 435
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 436
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 347

    (4) compstmt -> stmt term expr term .
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

    $end            reduce using rule 4 (compstmt -> stmt term expr term .)
    RESCUE          reduce using rule 4 (compstmt -> stmt term expr term .)
    RPAREN          reduce using rule 4 (compstmt -> stmt term expr term .)
    WHEN            reduce using rule 4 (compstmt -> stmt term expr term .)
    RKEY            reduce using rule 4 (compstmt -> stmt term expr term .)
    LKEY            reduce using rule 4 (compstmt -> stmt term expr term .)
    END             reduce using rule 4 (compstmt -> stmt term expr term .)
    ELSIF           reduce using rule 4 (compstmt -> stmt term expr term .)
    ELSE            reduce using rule 4 (compstmt -> stmt term expr term .)
    ENSURE          reduce using rule 4 (compstmt -> stmt term expr term .)
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219


state 348

    (237) term -> term TIMES factor .

    TIMES           reduce using rule 237 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 237 (term -> term TIMES factor .)
    RETURN          reduce using rule 237 (term -> term TIMES factor .)
    YIELD           reduce using rule 237 (term -> term TIMES factor .)
    NOT             reduce using rule 237 (term -> term TIMES factor .)
    NOT_SYMBOL      reduce using rule 237 (term -> term TIMES factor .)
    SUPER           reduce using rule 237 (term -> term TIMES factor .)
    PLUS            reduce using rule 237 (term -> term TIMES factor .)
    MINUS           reduce using rule 237 (term -> term TIMES factor .)
    COMPLEMENT_OP   reduce using rule 237 (term -> term TIMES factor .)
    DEFINED_OP      reduce using rule 237 (term -> term TIMES factor .)
    LPAREN          reduce using rule 237 (term -> term TIMES factor .)
    IDENTIFIER      reduce using rule 237 (term -> term TIMES factor .)
    UNARY_OP        reduce using rule 237 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 237 (term -> term TIMES factor .)
    LKEY            reduce using rule 237 (term -> term TIMES factor .)
    IF              reduce using rule 237 (term -> term TIMES factor .)
    UNLESS          reduce using rule 237 (term -> term TIMES factor .)
    WHILE           reduce using rule 237 (term -> term TIMES factor .)
    UNTIL           reduce using rule 237 (term -> term TIMES factor .)
    CASE            reduce using rule 237 (term -> term TIMES factor .)
    FOR             reduce using rule 237 (term -> term TIMES factor .)
    BEGIN           reduce using rule 237 (term -> term TIMES factor .)
    CLASS           reduce using rule 237 (term -> term TIMES factor .)
    MODULE          reduce using rule 237 (term -> term TIMES factor .)
    DEF             reduce using rule 237 (term -> term TIMES factor .)
    NUMBER          reduce using rule 237 (term -> term TIMES factor .)
    SYMBOL          reduce using rule 237 (term -> term TIMES factor .)
    STRING          reduce using rule 237 (term -> term TIMES factor .)
    VAR_GLOBAL      reduce using rule 237 (term -> term TIMES factor .)
    VAR_LOCAL       reduce using rule 237 (term -> term TIMES factor .)
    VAR_INSTANCE    reduce using rule 237 (term -> term TIMES factor .)
    VAR_CLASS       reduce using rule 237 (term -> term TIMES factor .)
    $end            reduce using rule 237 (term -> term TIMES factor .)
    RESCUE          reduce using rule 237 (term -> term TIMES factor .)
    RPAREN          reduce using rule 237 (term -> term TIMES factor .)
    WHEN            reduce using rule 237 (term -> term TIMES factor .)
    RKEY            reduce using rule 237 (term -> term TIMES factor .)
    END             reduce using rule 237 (term -> term TIMES factor .)
    ELSIF           reduce using rule 237 (term -> term TIMES factor .)
    ELSE            reduce using rule 237 (term -> term TIMES factor .)
    ENSURE          reduce using rule 237 (term -> term TIMES factor .)
    DO              reduce using rule 237 (term -> term TIMES factor .)
    UNDEF           reduce using rule 237 (term -> term TIMES factor .)
    ALIAS           reduce using rule 237 (term -> term TIMES factor .)


state 349

    (240) factor -> NUMBER .
    (188) literal -> NUMBER .

  ! reduce/reduce conflict for LBRACKET resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNLESS resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for UNTIL resolved using rule 188 (literal -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 188 (literal -> NUMBER .)
    RETURN          reduce using rule 240 (factor -> NUMBER .)
    YIELD           reduce using rule 240 (factor -> NUMBER .)
    NOT             reduce using rule 240 (factor -> NUMBER .)
    NOT_SYMBOL      reduce using rule 240 (factor -> NUMBER .)
    SUPER           reduce using rule 240 (factor -> NUMBER .)
    COMPLEMENT_OP   reduce using rule 240 (factor -> NUMBER .)
    DEFINED_OP      reduce using rule 240 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 240 (factor -> NUMBER .)
    LKEY            reduce using rule 240 (factor -> NUMBER .)
    CASE            reduce using rule 240 (factor -> NUMBER .)
    FOR             reduce using rule 240 (factor -> NUMBER .)
    BEGIN           reduce using rule 240 (factor -> NUMBER .)
    CLASS           reduce using rule 240 (factor -> NUMBER .)
    MODULE          reduce using rule 240 (factor -> NUMBER .)
    DEF             reduce using rule 240 (factor -> NUMBER .)
    SYMBOL          reduce using rule 240 (factor -> NUMBER .)
    STRING          reduce using rule 240 (factor -> NUMBER .)
    VAR_GLOBAL      reduce using rule 240 (factor -> NUMBER .)
    VAR_LOCAL       reduce using rule 240 (factor -> NUMBER .)
    VAR_INSTANCE    reduce using rule 240 (factor -> NUMBER .)
    VAR_CLASS       reduce using rule 240 (factor -> NUMBER .)
    $end            reduce using rule 240 (factor -> NUMBER .)
    RESCUE          reduce using rule 240 (factor -> NUMBER .)
    WHEN            reduce using rule 240 (factor -> NUMBER .)
    RKEY            reduce using rule 240 (factor -> NUMBER .)
    END             reduce using rule 240 (factor -> NUMBER .)
    ELSIF           reduce using rule 240 (factor -> NUMBER .)
    ELSE            reduce using rule 240 (factor -> NUMBER .)
    ENSURE          reduce using rule 240 (factor -> NUMBER .)
    UNDEF           reduce using rule 240 (factor -> NUMBER .)
    ALIAS           reduce using rule 240 (factor -> NUMBER .)
    LBRACKET        reduce using rule 188 (literal -> NUMBER .)
    DOT             reduce using rule 188 (literal -> NUMBER .)
    UNARY_OP        reduce using rule 188 (literal -> NUMBER .)
    COMMA           reduce using rule 188 (literal -> NUMBER .)
    RANGE_INCLUSIVE reduce using rule 188 (literal -> NUMBER .)
    RANGE_EXCLUSIVE reduce using rule 188 (literal -> NUMBER .)
    PLUS            reduce using rule 188 (literal -> NUMBER .)
    MINUS           reduce using rule 188 (literal -> NUMBER .)
    TIMES           reduce using rule 188 (literal -> NUMBER .)
    DIVIDE          reduce using rule 188 (literal -> NUMBER .)
    MOD             reduce using rule 188 (literal -> NUMBER .)
    POW             reduce using rule 188 (literal -> NUMBER .)
    OR_SYMBOL       reduce using rule 188 (literal -> NUMBER .)
    BINARY_XOR_OP   reduce using rule 188 (literal -> NUMBER .)
    BINARY_AND_OP   reduce using rule 188 (literal -> NUMBER .)
    COMBINED_COMPARISON_OP reduce using rule 188 (literal -> NUMBER .)
    GREATERTHAN     reduce using rule 188 (literal -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 188 (literal -> NUMBER .)
    LESSERTHAN      reduce using rule 188 (literal -> NUMBER .)
    LESSERTHANEQUAL reduce using rule 188 (literal -> NUMBER .)
    EQUAL           reduce using rule 188 (literal -> NUMBER .)
    CASE_EQUALITY   reduce using rule 188 (literal -> NUMBER .)
    NOTEQUAL        reduce using rule 188 (literal -> NUMBER .)
    MATCHED_STRINGS_OP reduce using rule 188 (literal -> NUMBER .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 188 (literal -> NUMBER .)
    BINARY_LEFT_SHIFT_OP reduce using rule 188 (literal -> NUMBER .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 188 (literal -> NUMBER .)
    AND             reduce using rule 188 (literal -> NUMBER .)
    OR              reduce using rule 188 (literal -> NUMBER .)
    DO              reduce using rule 188 (literal -> NUMBER .)
    TERM            reduce using rule 188 (literal -> NUMBER .)
    NUMBER          reduce using rule 188 (literal -> NUMBER .)
    LPAREN          reduce using rule 188 (literal -> NUMBER .)
    IF              reduce using rule 188 (literal -> NUMBER .)
    WHILE           reduce using rule 188 (literal -> NUMBER .)
    UNLESS          reduce using rule 188 (literal -> NUMBER .)
    UNTIL           reduce using rule 188 (literal -> NUMBER .)
    RPAREN          reduce using rule 188 (literal -> NUMBER .)

  ! TIMES           [ reduce using rule 240 (factor -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 240 (factor -> NUMBER .) ]
  ! PLUS            [ reduce using rule 240 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 240 (factor -> NUMBER .) ]
  ! LPAREN          [ reduce using rule 240 (factor -> NUMBER .) ]
  ! UNARY_OP        [ reduce using rule 240 (factor -> NUMBER .) ]
  ! LBRACKET        [ reduce using rule 240 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 240 (factor -> NUMBER .) ]
  ! UNLESS          [ reduce using rule 240 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 240 (factor -> NUMBER .) ]
  ! UNTIL           [ reduce using rule 240 (factor -> NUMBER .) ]
  ! NUMBER          [ reduce using rule 240 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 240 (factor -> NUMBER .) ]
  ! DO              [ reduce using rule 240 (factor -> NUMBER .) ]


state 350

    (241) factor -> LPAREN . expression RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (234) expression -> . expression PLUS term
    (235) expression -> . expression MINUS term
    (236) expression -> . term
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    TERM            shift and go to state 56
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    NUMBER          shift and go to state 349
    LPAREN          shift and go to state 437
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expression                     shift and go to state 224
    compstmt                       shift and go to state 193
    term                           shift and go to state 225
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    factor                         shift and go to state 57
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 351

    (238) term -> term DIVIDE factor .

    TIMES           reduce using rule 238 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 238 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 238 (term -> term DIVIDE factor .)
    YIELD           reduce using rule 238 (term -> term DIVIDE factor .)
    NOT             reduce using rule 238 (term -> term DIVIDE factor .)
    NOT_SYMBOL      reduce using rule 238 (term -> term DIVIDE factor .)
    SUPER           reduce using rule 238 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 238 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 238 (term -> term DIVIDE factor .)
    COMPLEMENT_OP   reduce using rule 238 (term -> term DIVIDE factor .)
    DEFINED_OP      reduce using rule 238 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 238 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 238 (term -> term DIVIDE factor .)
    UNARY_OP        reduce using rule 238 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 238 (term -> term DIVIDE factor .)
    LKEY            reduce using rule 238 (term -> term DIVIDE factor .)
    IF              reduce using rule 238 (term -> term DIVIDE factor .)
    UNLESS          reduce using rule 238 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 238 (term -> term DIVIDE factor .)
    UNTIL           reduce using rule 238 (term -> term DIVIDE factor .)
    CASE            reduce using rule 238 (term -> term DIVIDE factor .)
    FOR             reduce using rule 238 (term -> term DIVIDE factor .)
    BEGIN           reduce using rule 238 (term -> term DIVIDE factor .)
    CLASS           reduce using rule 238 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 238 (term -> term DIVIDE factor .)
    DEF             reduce using rule 238 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 238 (term -> term DIVIDE factor .)
    SYMBOL          reduce using rule 238 (term -> term DIVIDE factor .)
    STRING          reduce using rule 238 (term -> term DIVIDE factor .)
    VAR_GLOBAL      reduce using rule 238 (term -> term DIVIDE factor .)
    VAR_LOCAL       reduce using rule 238 (term -> term DIVIDE factor .)
    VAR_INSTANCE    reduce using rule 238 (term -> term DIVIDE factor .)
    VAR_CLASS       reduce using rule 238 (term -> term DIVIDE factor .)
    $end            reduce using rule 238 (term -> term DIVIDE factor .)
    RESCUE          reduce using rule 238 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 238 (term -> term DIVIDE factor .)
    WHEN            reduce using rule 238 (term -> term DIVIDE factor .)
    RKEY            reduce using rule 238 (term -> term DIVIDE factor .)
    END             reduce using rule 238 (term -> term DIVIDE factor .)
    ELSIF           reduce using rule 238 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 238 (term -> term DIVIDE factor .)
    ENSURE          reduce using rule 238 (term -> term DIVIDE factor .)
    DO              reduce using rule 238 (term -> term DIVIDE factor .)
    UNDEF           reduce using rule 238 (term -> term DIVIDE factor .)
    ALIAS           reduce using rule 238 (term -> term DIVIDE factor .)


state 352

    (241) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    YIELD           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    NOT_SYMBOL      reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    SUPER           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    COMPLEMENT_OP   reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    DEFINED_OP      reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    UNARY_OP        reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    LKEY            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    SYMBOL          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    VAR_GLOBAL      reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    VAR_LOCAL       reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    VAR_INSTANCE    reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    VAR_CLASS       reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    RESCUE          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    RKEY            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    ENSURE          reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    UNDEF           reduce using rule 241 (factor -> LPAREN expression RPAREN .)
    ALIAS           reduce using rule 241 (factor -> LPAREN expression RPAREN .)


state 353

    (234) expression -> expression PLUS . term
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    term                           shift and go to state 438
    factor                         shift and go to state 57

state 354

    (235) expression -> expression MINUS . term
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    term                           shift and go to state 439
    factor                         shift and go to state 57

state 355

    (5) stmt -> call do LBRACKET RBRACKET .

    IF              reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    WHILE           reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    UNLESS          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    UNTIL           reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    TERM            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    NUMBER          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    LPAREN          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    $end            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    RESCUE          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    RPAREN          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    WHEN            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    RKEY            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    LKEY            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    END             reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    ELSIF           reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    ELSE            reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)
    ENSURE          reduce using rule 5 (stmt -> call do LBRACKET RBRACKET .)


state 356

    (7) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL . RBRACKET compstmt END

    RBRACKET        shift and go to state 440


state 357

    (86) primary -> LBRACKET args COMMA RBRACKET .

    LBRACKET        reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    DOT             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    UNARY_OP        reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    PLUS            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    MINUS           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    TIMES           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    DIVIDE          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    MOD             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    POW             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    OR_SYMBOL       reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_XOR_OP   reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_AND_OP   reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    GREATERTHAN     reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    GREATERTHANEQUAL reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    LESSERTHAN      reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    LESSERTHANEQUAL reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    EQUAL           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    CASE_EQUALITY   reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    NOTEQUAL        reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    AND             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    OR              reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    IF              reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    WHILE           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    UNLESS          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    UNTIL           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    TERM            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    NUMBER          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    LPAREN          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    $end            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    COMMA           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RBRACKET        reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    THEN            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    DO              reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RESCUE          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    HASH_ROCKET     reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RKEY            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RPAREN          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    WHEN            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    LKEY            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    END             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    ELSIF           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    ELSE            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    ENSURE          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    NOT_SYMBOL      reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    COMPLEMENT_OP   reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    DEFINED_OP      reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    RETURN          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    YIELD           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    CASE            reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    FOR             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    BEGIN           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    CLASS           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    MODULE          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    DEF             reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_GLOBAL      reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_LOCAL       reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_INSTANCE    reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    VAR_CLASS       reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    SYMBOL          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    STRING          reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    IDENTIFIER      reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)
    SUPER           reduce using rule 86 (primary -> LBRACKET args COMMA RBRACKET .)


state 358

    (161) args -> arg COMMA arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 161 (args -> arg COMMA arg .)
    COMMA           reduce using rule 161 (args -> arg COMMA arg .)
    RKEY            reduce using rule 161 (args -> arg COMMA arg .)
    IF              reduce using rule 161 (args -> arg COMMA arg .)
    WHILE           reduce using rule 161 (args -> arg COMMA arg .)
    UNLESS          reduce using rule 161 (args -> arg COMMA arg .)
    UNTIL           reduce using rule 161 (args -> arg COMMA arg .)
    TERM            reduce using rule 161 (args -> arg COMMA arg .)
    NUMBER          reduce using rule 161 (args -> arg COMMA arg .)
    LPAREN          reduce using rule 161 (args -> arg COMMA arg .)
    $end            reduce using rule 161 (args -> arg COMMA arg .)
    THEN            reduce using rule 161 (args -> arg COMMA arg .)
    DO              reduce using rule 161 (args -> arg COMMA arg .)
    RESCUE          reduce using rule 161 (args -> arg COMMA arg .)
    RPAREN          reduce using rule 161 (args -> arg COMMA arg .)
    WHEN            reduce using rule 161 (args -> arg COMMA arg .)
    LKEY            reduce using rule 161 (args -> arg COMMA arg .)
    END             reduce using rule 161 (args -> arg COMMA arg .)
    ELSIF           reduce using rule 161 (args -> arg COMMA arg .)
    ELSE            reduce using rule 161 (args -> arg COMMA arg .)
    ENSURE          reduce using rule 161 (args -> arg COMMA arg .)
    LBRACKET        reduce using rule 161 (args -> arg COMMA arg .)
    NOT_SYMBOL      reduce using rule 161 (args -> arg COMMA arg .)
    COMPLEMENT_OP   reduce using rule 161 (args -> arg COMMA arg .)
    DEFINED_OP      reduce using rule 161 (args -> arg COMMA arg .)
    UNARY_OP        reduce using rule 161 (args -> arg COMMA arg .)
    RETURN          reduce using rule 161 (args -> arg COMMA arg .)
    YIELD           reduce using rule 161 (args -> arg COMMA arg .)
    CASE            reduce using rule 161 (args -> arg COMMA arg .)
    FOR             reduce using rule 161 (args -> arg COMMA arg .)
    BEGIN           reduce using rule 161 (args -> arg COMMA arg .)
    CLASS           reduce using rule 161 (args -> arg COMMA arg .)
    MODULE          reduce using rule 161 (args -> arg COMMA arg .)
    DEF             reduce using rule 161 (args -> arg COMMA arg .)
    VAR_GLOBAL      reduce using rule 161 (args -> arg COMMA arg .)
    VAR_LOCAL       reduce using rule 161 (args -> arg COMMA arg .)
    VAR_INSTANCE    reduce using rule 161 (args -> arg COMMA arg .)
    VAR_CLASS       reduce using rule 161 (args -> arg COMMA arg .)
    SYMBOL          reduce using rule 161 (args -> arg COMMA arg .)
    STRING          reduce using rule 161 (args -> arg COMMA arg .)
    IDENTIFIER      reduce using rule 161 (args -> arg COMMA arg .)
    SUPER           reduce using rule 161 (args -> arg COMMA arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 161 (args -> arg COMMA arg .) ]
  ! OR              [ reduce using rule 161 (args -> arg COMMA arg .) ]
  ! TIMES           [ reduce using rule 161 (args -> arg COMMA arg .) ]
  ! PLUS            [ reduce using rule 161 (args -> arg COMMA arg .) ]
  ! MINUS           [ reduce using rule 161 (args -> arg COMMA arg .) ]


state 359

    (34) function -> primary DOT operation . LPAREN call_args RPAREN
    (36) function -> primary DOT operation .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 441
    LKEY            reduce using rule 36 (function -> primary DOT operation .)
    LBRACKET        reduce using rule 36 (function -> primary DOT operation .)
    DOT             reduce using rule 36 (function -> primary DOT operation .)
    UNARY_OP        reduce using rule 36 (function -> primary DOT operation .)
    COMMA           reduce using rule 36 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    PLUS            reduce using rule 36 (function -> primary DOT operation .)
    MINUS           reduce using rule 36 (function -> primary DOT operation .)
    TIMES           reduce using rule 36 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 36 (function -> primary DOT operation .)
    MOD             reduce using rule 36 (function -> primary DOT operation .)
    POW             reduce using rule 36 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 36 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 36 (function -> primary DOT operation .)
    BINARY_AND_OP   reduce using rule 36 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    EQUAL           reduce using rule 36 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 36 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 36 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    AND             reduce using rule 36 (function -> primary DOT operation .)
    OR              reduce using rule 36 (function -> primary DOT operation .)
    RBRACKET        reduce using rule 36 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 36 (function -> primary DOT operation .)
    RKEY            reduce using rule 36 (function -> primary DOT operation .)
    IF              reduce using rule 36 (function -> primary DOT operation .)
    WHILE           reduce using rule 36 (function -> primary DOT operation .)
    UNLESS          reduce using rule 36 (function -> primary DOT operation .)
    UNTIL           reduce using rule 36 (function -> primary DOT operation .)
    TERM            reduce using rule 36 (function -> primary DOT operation .)
    NUMBER          reduce using rule 36 (function -> primary DOT operation .)
    $end            reduce using rule 36 (function -> primary DOT operation .)
    RESCUE          reduce using rule 36 (function -> primary DOT operation .)
    RPAREN          reduce using rule 36 (function -> primary DOT operation .)
    WHEN            reduce using rule 36 (function -> primary DOT operation .)
    END             reduce using rule 36 (function -> primary DOT operation .)
    ELSIF           reduce using rule 36 (function -> primary DOT operation .)
    ELSE            reduce using rule 36 (function -> primary DOT operation .)
    ENSURE          reduce using rule 36 (function -> primary DOT operation .)
    THEN            reduce using rule 36 (function -> primary DOT operation .)
    DO              reduce using rule 36 (function -> primary DOT operation .)
    NOT_SYMBOL      reduce using rule 36 (function -> primary DOT operation .)
    COMPLEMENT_OP   reduce using rule 36 (function -> primary DOT operation .)
    DEFINED_OP      reduce using rule 36 (function -> primary DOT operation .)
    RETURN          reduce using rule 36 (function -> primary DOT operation .)
    YIELD           reduce using rule 36 (function -> primary DOT operation .)
    CASE            reduce using rule 36 (function -> primary DOT operation .)
    FOR             reduce using rule 36 (function -> primary DOT operation .)
    BEGIN           reduce using rule 36 (function -> primary DOT operation .)
    CLASS           reduce using rule 36 (function -> primary DOT operation .)
    MODULE          reduce using rule 36 (function -> primary DOT operation .)
    DEF             reduce using rule 36 (function -> primary DOT operation .)
    VAR_GLOBAL      reduce using rule 36 (function -> primary DOT operation .)
    VAR_LOCAL       reduce using rule 36 (function -> primary DOT operation .)
    VAR_INSTANCE    reduce using rule 36 (function -> primary DOT operation .)
    VAR_CLASS       reduce using rule 36 (function -> primary DOT operation .)
    SYMBOL          reduce using rule 36 (function -> primary DOT operation .)
    STRING          reduce using rule 36 (function -> primary DOT operation .)
    IDENTIFIER      reduce using rule 36 (function -> primary DOT operation .)
    SUPER           reduce using rule 36 (function -> primary DOT operation .)

  ! LPAREN          [ reduce using rule 36 (function -> primary DOT operation .) ]


state 360

    (35) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP operation .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 442
    LKEY            reduce using rule 37 (function -> primary UNARY_OP operation .)
    LBRACKET        reduce using rule 37 (function -> primary UNARY_OP operation .)
    DOT             reduce using rule 37 (function -> primary UNARY_OP operation .)
    UNARY_OP        reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    PLUS            reduce using rule 37 (function -> primary UNARY_OP operation .)
    MINUS           reduce using rule 37 (function -> primary UNARY_OP operation .)
    TIMES           reduce using rule 37 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 37 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_AND_OP   reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 37 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 37 (function -> primary UNARY_OP operation .)
    RBRACKET        reduce using rule 37 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 37 (function -> primary UNARY_OP operation .)
    IF              reduce using rule 37 (function -> primary UNARY_OP operation .)
    WHILE           reduce using rule 37 (function -> primary UNARY_OP operation .)
    UNLESS          reduce using rule 37 (function -> primary UNARY_OP operation .)
    UNTIL           reduce using rule 37 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 37 (function -> primary UNARY_OP operation .)
    NUMBER          reduce using rule 37 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 37 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 37 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 37 (function -> primary UNARY_OP operation .)
    END             reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 37 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    THEN            reduce using rule 37 (function -> primary UNARY_OP operation .)
    DO              reduce using rule 37 (function -> primary UNARY_OP operation .)
    NOT_SYMBOL      reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMPLEMENT_OP   reduce using rule 37 (function -> primary UNARY_OP operation .)
    DEFINED_OP      reduce using rule 37 (function -> primary UNARY_OP operation .)
    RETURN          reduce using rule 37 (function -> primary UNARY_OP operation .)
    YIELD           reduce using rule 37 (function -> primary UNARY_OP operation .)
    CASE            reduce using rule 37 (function -> primary UNARY_OP operation .)
    FOR             reduce using rule 37 (function -> primary UNARY_OP operation .)
    BEGIN           reduce using rule 37 (function -> primary UNARY_OP operation .)
    CLASS           reduce using rule 37 (function -> primary UNARY_OP operation .)
    MODULE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    DEF             reduce using rule 37 (function -> primary UNARY_OP operation .)
    VAR_GLOBAL      reduce using rule 37 (function -> primary UNARY_OP operation .)
    VAR_LOCAL       reduce using rule 37 (function -> primary UNARY_OP operation .)
    VAR_INSTANCE    reduce using rule 37 (function -> primary UNARY_OP operation .)
    VAR_CLASS       reduce using rule 37 (function -> primary UNARY_OP operation .)
    SYMBOL          reduce using rule 37 (function -> primary UNARY_OP operation .)
    STRING          reduce using rule 37 (function -> primary UNARY_OP operation .)
    IDENTIFIER      reduce using rule 37 (function -> primary UNARY_OP operation .)
    SUPER           reduce using rule 37 (function -> primary UNARY_OP operation .)

  ! LPAREN          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]


state 361

    (33) function -> operation LBRACKET LPAREN . LBRACKET call_args RBRACKET RPAREN RBRACKET

    LBRACKET        shift and go to state 443


state 362

    (15) stmt -> END LKEY compstmt RKEY .

    IF              reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    WHILE           reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    UNLESS          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    UNTIL           reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    TERM            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    NUMBER          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    LPAREN          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    $end            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    RESCUE          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    RPAREN          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    WHEN            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    RKEY            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    LKEY            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    END             reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    ELSIF           reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    ELSE            reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)
    ENSURE          reduce using rule 15 (stmt -> END LKEY compstmt RKEY .)


state 363

    (217) fname -> LBRACKET RBRACKET EQUAL_SYMBOL .

    IF              reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    WHILE           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    UNLESS          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    UNTIL           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    TERM            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    NUMBER          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LPAREN          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    $end            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RESCUE          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RPAREN          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    WHEN            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RKEY            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LKEY            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    END             reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ELSIF           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ELSE            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    ENSURE          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    IDENTIFIER      reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    RANGE_INCLUSIVE reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OR_SYMBOL       reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_XOR_OP   reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_AND_OP   reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    COMBINED_COMPARISON_OP reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    EQUAL           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    CASE_EQUALITY   reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MATCHED_STRINGS_OP reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    GREATERTHAN     reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    GREATERTHANEQUAL reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LESSERTHAN      reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LESSERTHANEQUAL reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    PLUS            reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MINUS           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    TIMES           reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    DIVIDE          reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    MOD             reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    POW             reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_LEFT_SHIFT_OP reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    COMPLEMENT_OP   reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OVERLOAD_PLUS   reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    OVERLOAD_MINUS  reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)
    LBRACKET        reduce using rule 217 (fname -> LBRACKET RBRACKET EQUAL_SYMBOL .)


state 364

    (103) primary -> IF expr then compstmt . END
    (104) primary -> IF expr then compstmt . elsif END
    (105) primary -> IF expr then compstmt . elsif ELSE compstmt END
    (123) elsif -> . ELSIF expr then compstmt
    (124) elsif -> . ELSIF expr then compstmt elsif

    END             shift and go to state 444
    ELSIF           shift and go to state 446

    elsif                          shift and go to state 445

state 365

    (136) then -> TERM THEN .

    LBRACKET        reduce using rule 136 (then -> TERM THEN .)
    UNDEF           reduce using rule 136 (then -> TERM THEN .)
    ALIAS           reduce using rule 136 (then -> TERM THEN .)
    BEGIN           reduce using rule 136 (then -> TERM THEN .)
    END             reduce using rule 136 (then -> TERM THEN .)
    RETURN          reduce using rule 136 (then -> TERM THEN .)
    YIELD           reduce using rule 136 (then -> TERM THEN .)
    NOT             reduce using rule 136 (then -> TERM THEN .)
    NOT_SYMBOL      reduce using rule 136 (then -> TERM THEN .)
    SUPER           reduce using rule 136 (then -> TERM THEN .)
    VAR_GLOBAL      reduce using rule 136 (then -> TERM THEN .)
    VAR_LOCAL       reduce using rule 136 (then -> TERM THEN .)
    VAR_INSTANCE    reduce using rule 136 (then -> TERM THEN .)
    VAR_CLASS       reduce using rule 136 (then -> TERM THEN .)
    LPAREN          reduce using rule 136 (then -> TERM THEN .)
    UNARY_OP        reduce using rule 136 (then -> TERM THEN .)
    LKEY            reduce using rule 136 (then -> TERM THEN .)
    DEFINED_OP      reduce using rule 136 (then -> TERM THEN .)
    IF              reduce using rule 136 (then -> TERM THEN .)
    UNLESS          reduce using rule 136 (then -> TERM THEN .)
    WHILE           reduce using rule 136 (then -> TERM THEN .)
    UNTIL           reduce using rule 136 (then -> TERM THEN .)
    CASE            reduce using rule 136 (then -> TERM THEN .)
    FOR             reduce using rule 136 (then -> TERM THEN .)
    CLASS           reduce using rule 136 (then -> TERM THEN .)
    MODULE          reduce using rule 136 (then -> TERM THEN .)
    DEF             reduce using rule 136 (then -> TERM THEN .)
    TIMES           reduce using rule 136 (then -> TERM THEN .)
    PLUS            reduce using rule 136 (then -> TERM THEN .)
    MINUS           reduce using rule 136 (then -> TERM THEN .)
    COMPLEMENT_OP   reduce using rule 136 (then -> TERM THEN .)
    IDENTIFIER      reduce using rule 136 (then -> TERM THEN .)
    NUMBER          reduce using rule 136 (then -> TERM THEN .)
    SYMBOL          reduce using rule 136 (then -> TERM THEN .)
    STRING          reduce using rule 136 (then -> TERM THEN .)


state 366

    (30) command -> primary DOT operation . call_args
    (34) function -> primary DOT operation . LPAREN call_args RPAREN
    (36) function -> primary DOT operation .
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 393
    DOT             reduce using rule 36 (function -> primary DOT operation .)
    RANGE_INCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    RANGE_EXCLUSIVE reduce using rule 36 (function -> primary DOT operation .)
    DIVIDE          reduce using rule 36 (function -> primary DOT operation .)
    MOD             reduce using rule 36 (function -> primary DOT operation .)
    POW             reduce using rule 36 (function -> primary DOT operation .)
    OR_SYMBOL       reduce using rule 36 (function -> primary DOT operation .)
    BINARY_XOR_OP   reduce using rule 36 (function -> primary DOT operation .)
    COMBINED_COMPARISON_OP reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHAN     reduce using rule 36 (function -> primary DOT operation .)
    GREATERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHAN      reduce using rule 36 (function -> primary DOT operation .)
    LESSERTHANEQUAL reduce using rule 36 (function -> primary DOT operation .)
    EQUAL           reduce using rule 36 (function -> primary DOT operation .)
    CASE_EQUALITY   reduce using rule 36 (function -> primary DOT operation .)
    NOTEQUAL        reduce using rule 36 (function -> primary DOT operation .)
    MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 36 (function -> primary DOT operation .)
    AND             reduce using rule 36 (function -> primary DOT operation .)
    OR              reduce using rule 36 (function -> primary DOT operation .)
    TERM            reduce using rule 36 (function -> primary DOT operation .)
    THEN            reduce using rule 36 (function -> primary DOT operation .)
    DO              reduce using rule 36 (function -> primary DOT operation .)
    COMMA           reduce using rule 36 (function -> primary DOT operation .)
    HASH_ROCKET     reduce using rule 36 (function -> primary DOT operation .)
    $end            reduce using rule 36 (function -> primary DOT operation .)
    RESCUE          reduce using rule 36 (function -> primary DOT operation .)
    RPAREN          reduce using rule 36 (function -> primary DOT operation .)
    WHEN            reduce using rule 36 (function -> primary DOT operation .)
    RKEY            reduce using rule 36 (function -> primary DOT operation .)
    END             reduce using rule 36 (function -> primary DOT operation .)
    ELSIF           reduce using rule 36 (function -> primary DOT operation .)
    ELSE            reduce using rule 36 (function -> primary DOT operation .)
    ENSURE          reduce using rule 36 (function -> primary DOT operation .)
    RBRACKET        reduce using rule 36 (function -> primary DOT operation .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNARY_OP        [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! LBRACKET        [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! PLUS            [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! MINUS           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! TIMES           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! NUMBER          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! LPAREN          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! IF              [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! WHILE           [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNLESS          [ reduce using rule 36 (function -> primary DOT operation .) ]
  ! UNTIL           [ reduce using rule 36 (function -> primary DOT operation .) ]

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 394
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 367

    (31) command -> primary UNARY_OP operation . call_args
    (35) function -> primary UNARY_OP operation . LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP operation .
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BINARY_AND_OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for UNARY_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LKEY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    LPAREN          shift and go to state 395
    DOT             reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_INCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    RANGE_EXCLUSIVE reduce using rule 37 (function -> primary UNARY_OP operation .)
    DIVIDE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    MOD             reduce using rule 37 (function -> primary UNARY_OP operation .)
    POW             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR_SYMBOL       reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_XOR_OP   reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMBINED_COMPARISON_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHAN     reduce using rule 37 (function -> primary UNARY_OP operation .)
    GREATERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHAN      reduce using rule 37 (function -> primary UNARY_OP operation .)
    LESSERTHANEQUAL reduce using rule 37 (function -> primary UNARY_OP operation .)
    EQUAL           reduce using rule 37 (function -> primary UNARY_OP operation .)
    CASE_EQUALITY   reduce using rule 37 (function -> primary UNARY_OP operation .)
    NOTEQUAL        reduce using rule 37 (function -> primary UNARY_OP operation .)
    MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_LEFT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 37 (function -> primary UNARY_OP operation .)
    AND             reduce using rule 37 (function -> primary UNARY_OP operation .)
    OR              reduce using rule 37 (function -> primary UNARY_OP operation .)
    TERM            reduce using rule 37 (function -> primary UNARY_OP operation .)
    THEN            reduce using rule 37 (function -> primary UNARY_OP operation .)
    DO              reduce using rule 37 (function -> primary UNARY_OP operation .)
    COMMA           reduce using rule 37 (function -> primary UNARY_OP operation .)
    HASH_ROCKET     reduce using rule 37 (function -> primary UNARY_OP operation .)
    $end            reduce using rule 37 (function -> primary UNARY_OP operation .)
    RESCUE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    RPAREN          reduce using rule 37 (function -> primary UNARY_OP operation .)
    WHEN            reduce using rule 37 (function -> primary UNARY_OP operation .)
    RKEY            reduce using rule 37 (function -> primary UNARY_OP operation .)
    END             reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSIF           reduce using rule 37 (function -> primary UNARY_OP operation .)
    ELSE            reduce using rule 37 (function -> primary UNARY_OP operation .)
    ENSURE          reduce using rule 37 (function -> primary UNARY_OP operation .)
    RBRACKET        reduce using rule 37 (function -> primary UNARY_OP operation .)
    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

  ! LKEY            [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNARY_OP        [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! LBRACKET        [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! PLUS            [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! MINUS           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! TIMES           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! BINARY_AND_OP   [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! NUMBER          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! LPAREN          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! IF              [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! WHILE           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNLESS          [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]
  ! UNTIL           [ reduce using rule 37 (function -> primary UNARY_OP operation .) ]

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 396
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 368

    (82) primary -> primary LBRACKET RBRACKET .
    (147) lhs -> primary LBRACKET RBRACKET .

  ! reduce/reduce conflict for COMMA resolved using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DOT             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNARY_OP        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    PLUS            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MINUS           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    TIMES           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MOD             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    POW             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OR_SYMBOL       reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_XOR_OP   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_AND_OP   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    GREATERTHANEQUAL reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHAN      reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LESSERTHANEQUAL reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    EQUAL           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    CASE_EQUALITY   reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    AND             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    OR              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    TERM            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    THEN            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    DO              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    NUMBER          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LPAREN          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    COMMA           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    HASH_ROCKET     reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    IF              reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    WHILE           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNLESS          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    UNTIL           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    $end            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RESCUE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RPAREN          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    WHEN            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RKEY            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    LKEY            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    END             reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ELSIF           reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ELSE            reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    ENSURE          reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 82 (primary -> primary LBRACKET RBRACKET .)
    =               reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    PLUS_EQUAL      reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    MINUS_EQUAL     reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    TIMES_EQUAL     reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    MOD_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    POW_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    XOR_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    AND_EQUAL       reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)
    OR_EQUAL        reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .)

  ! COMMA           [ reduce using rule 147 (lhs -> primary LBRACKET RBRACKET .) ]


state 369

    (83) primary -> primary LBRACKET args . RBRACKET
    (148) lhs -> primary LBRACKET args . RBRACKET

    RBRACKET        shift and go to state 447


state 370

    (80) primary -> primary UNARY_OP . IDENTIFIER
    (35) function -> primary UNARY_OP . operation LPAREN call_args RPAREN
    (37) function -> primary UNARY_OP . operation
    (31) command -> primary UNARY_OP . operation call_args
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    IDENTIFIER      shift and go to state 279

    operation                      shift and go to state 278

state 371

    (108) primary -> WHILE expr do compstmt . END

    END             shift and go to state 448


state 372

    (106) primary -> UNLESS expr then compstmt . END
    (107) primary -> UNLESS expr then compstmt . ELSE compstmt END

    END             shift and go to state 449
    ELSE            shift and go to state 450


state 373

    (109) primary -> UNTIL expr do compstmt . END

    END             shift and go to state 451


state 374

    (14) stmt -> BEGIN LKEY compstmt RKEY .

    IF              reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    WHILE           reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    UNLESS          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    UNTIL           reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    TERM            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    NUMBER          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    LPAREN          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    $end            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    RESCUE          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    RPAREN          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    WHEN            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    RKEY            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    LKEY            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    END             reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    ELSIF           reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    ELSE            reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)
    ENSURE          reduce using rule 14 (stmt -> BEGIN LKEY compstmt RKEY .)


state 375

    (72) arg -> primary .
    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args
    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    COMMA           reduce using rule 72 (arg -> primary .)
    HASH_ROCKET     reduce using rule 72 (arg -> primary .)
    RKEY            reduce using rule 72 (arg -> primary .)
    IF              reduce using rule 72 (arg -> primary .)
    WHILE           reduce using rule 72 (arg -> primary .)
    UNLESS          reduce using rule 72 (arg -> primary .)
    UNTIL           reduce using rule 72 (arg -> primary .)
    TERM            reduce using rule 72 (arg -> primary .)
    NUMBER          reduce using rule 72 (arg -> primary .)
    LPAREN          reduce using rule 72 (arg -> primary .)
    RPAREN          reduce using rule 72 (arg -> primary .)
    DOT             shift and go to state 249
    UNARY_OP        shift and go to state 250
    LBRACKET        shift and go to state 148


state 376

    (113) primary -> BEGIN compstmt rescue END .

    LBRACKET        reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    DOT             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    UNARY_OP        reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RANGE_INCLUSIVE reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RANGE_EXCLUSIVE reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    PLUS            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    MINUS           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    TIMES           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    DIVIDE          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    MOD             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    POW             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    OR_SYMBOL       reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    BINARY_XOR_OP   reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    BINARY_AND_OP   reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    COMBINED_COMPARISON_OP reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    GREATERTHAN     reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    GREATERTHANEQUAL reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    LESSERTHAN      reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    LESSERTHANEQUAL reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    EQUAL           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    CASE_EQUALITY   reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    NOTEQUAL        reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    MATCHED_STRINGS_OP reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    AND             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    OR              reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    IF              reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    WHILE           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    UNLESS          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    UNTIL           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    TERM            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    NUMBER          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    LPAREN          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    $end            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    COMMA           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RBRACKET        reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    THEN            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    DO              reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RESCUE          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    HASH_ROCKET     reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RKEY            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RPAREN          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    WHEN            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    LKEY            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    END             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    ELSIF           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    ELSE            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    ENSURE          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    NOT_SYMBOL      reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    COMPLEMENT_OP   reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    DEFINED_OP      reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    RETURN          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    YIELD           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    CASE            reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    FOR             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    BEGIN           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    CLASS           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    MODULE          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    DEF             reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    VAR_GLOBAL      reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    VAR_LOCAL       reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    VAR_INSTANCE    reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    VAR_CLASS       reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    SYMBOL          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    STRING          reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    IDENTIFIER      reduce using rule 113 (primary -> BEGIN compstmt rescue END .)
    SUPER           reduce using rule 113 (primary -> BEGIN compstmt rescue END .)


state 377

    (114) primary -> BEGIN compstmt rescue ELSE . compstmt END
    (116) primary -> BEGIN compstmt rescue ELSE . compstmt ENSURE compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 452
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 378

    (115) primary -> BEGIN compstmt rescue ENSURE . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 453
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 379

    (129) rescue -> rescue RESCUE . args do compstmt
    (130) rescue -> rescue RESCUE . do compstmt
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    DO              shift and go to state 64
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    TERM            shift and go to state 56
    LPAREN          shift and go to state 382
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 349
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    args                           shift and go to state 454
    do                             shift and go to state 455
    arg                            shift and go to state 72
    term                           shift and go to state 63
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    factor                         shift and go to state 57
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 380

    (127) rescue -> RESCUE args . do compstmt
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 456
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 381

    (128) rescue -> RESCUE do . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 457
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 382

    (77) primary -> LPAREN . compstmt RPAREN
    (241) factor -> LPAREN . expression RPAREN
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (234) expression -> . expression PLUS term
    (235) expression -> . expression MINUS term
    (236) expression -> . term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    TERM            shift and go to state 56
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    NUMBER          shift and go to state 349
    LPAREN          shift and go to state 437
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 193
    expression                     shift and go to state 224
    stmt                           shift and go to state 3
    term                           shift and go to state 225
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    factor                         shift and go to state 57
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 383

    (90) primary -> LKEY args COMMA RKEY .

    LBRACKET        reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    DOT             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    UNARY_OP        reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RANGE_INCLUSIVE reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RANGE_EXCLUSIVE reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    PLUS            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    MINUS           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    TIMES           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    DIVIDE          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    MOD             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    POW             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    OR_SYMBOL       reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    BINARY_XOR_OP   reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    BINARY_AND_OP   reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    GREATERTHAN     reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    GREATERTHANEQUAL reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    LESSERTHAN      reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    LESSERTHANEQUAL reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    EQUAL           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    CASE_EQUALITY   reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    NOTEQUAL        reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    MATCHED_STRINGS_OP reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    AND             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    OR              reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    IF              reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    WHILE           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    UNLESS          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    UNTIL           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    TERM            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    NUMBER          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    LPAREN          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    $end            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    COMMA           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RBRACKET        reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    THEN            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    DO              reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RESCUE          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    HASH_ROCKET     reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RKEY            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RPAREN          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    WHEN            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    LKEY            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    END             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    ELSIF           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    ELSE            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    ENSURE          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    NOT_SYMBOL      reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    COMPLEMENT_OP   reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    DEFINED_OP      reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    RETURN          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    YIELD           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    CASE            reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    FOR             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    BEGIN           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    CLASS           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    MODULE          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    DEF             reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    VAR_GLOBAL      reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    VAR_LOCAL       reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    VAR_INSTANCE    reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    VAR_CLASS       reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    SYMBOL          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    STRING          reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    IDENTIFIER      reduce using rule 90 (primary -> LKEY args COMMA RKEY .)
    SUPER           reduce using rule 90 (primary -> LKEY args COMMA RKEY .)


state 384

    (91) primary -> LKEY assocs COMMA RKEY .

    LBRACKET        reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    DOT             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    UNARY_OP        reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RANGE_INCLUSIVE reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RANGE_EXCLUSIVE reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    PLUS            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    MINUS           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    TIMES           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    DIVIDE          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    MOD             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    POW             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    OR_SYMBOL       reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_XOR_OP   reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_AND_OP   reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    COMBINED_COMPARISON_OP reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    GREATERTHAN     reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    GREATERTHANEQUAL reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    LESSERTHAN      reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    LESSERTHANEQUAL reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    EQUAL           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    CASE_EQUALITY   reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    NOTEQUAL        reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    MATCHED_STRINGS_OP reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    AND             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    OR              reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    IF              reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    WHILE           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    UNLESS          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    UNTIL           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    TERM            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    NUMBER          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    LPAREN          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    $end            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    COMMA           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RBRACKET        reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    THEN            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    DO              reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RESCUE          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    HASH_ROCKET     reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RKEY            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RPAREN          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    WHEN            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    LKEY            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    END             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    ELSIF           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    ELSE            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    ENSURE          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    NOT_SYMBOL      reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    COMPLEMENT_OP   reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    DEFINED_OP      reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    RETURN          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    YIELD           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    CASE            reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    FOR             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    BEGIN           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    CLASS           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    MODULE          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    DEF             reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    VAR_GLOBAL      reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    VAR_LOCAL       reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    VAR_INSTANCE    reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    VAR_CLASS       reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    SYMBOL          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    STRING          reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    IDENTIFIER      reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)
    SUPER           reduce using rule 91 (primary -> LKEY assocs COMMA RKEY .)


state 385

    (171) assoc -> arg HASH_ROCKET arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    RKEY            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    IF              reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    WHILE           reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    UNLESS          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    UNTIL           reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    TERM            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    NUMBER          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    LPAREN          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    $end            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    THEN            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    DO              reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    RESCUE          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    RPAREN          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    WHEN            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    LKEY            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    END             reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    ELSIF           reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    ELSE            reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    ENSURE          reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    LBRACKET        reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    RBRACKET        reduce using rule 171 (assoc -> arg HASH_ROCKET arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 171 (assoc -> arg HASH_ROCKET arg .) ]
  ! OR              [ reduce using rule 171 (assoc -> arg HASH_ROCKET arg .) ]


state 386

    (170) assocs -> assoc COMMA assoc .

    RKEY            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    COMMA           reduce using rule 170 (assocs -> assoc COMMA assoc .)
    AND             reduce using rule 170 (assocs -> assoc COMMA assoc .)
    OR              reduce using rule 170 (assocs -> assoc COMMA assoc .)
    IF              reduce using rule 170 (assocs -> assoc COMMA assoc .)
    WHILE           reduce using rule 170 (assocs -> assoc COMMA assoc .)
    UNLESS          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    UNTIL           reduce using rule 170 (assocs -> assoc COMMA assoc .)
    TERM            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    NUMBER          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    LPAREN          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    $end            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    THEN            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    DO              reduce using rule 170 (assocs -> assoc COMMA assoc .)
    RESCUE          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    RPAREN          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    WHEN            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    LKEY            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    END             reduce using rule 170 (assocs -> assoc COMMA assoc .)
    ELSIF           reduce using rule 170 (assocs -> assoc COMMA assoc .)
    ELSE            reduce using rule 170 (assocs -> assoc COMMA assoc .)
    ENSURE          reduce using rule 170 (assocs -> assoc COMMA assoc .)
    LBRACKET        reduce using rule 170 (assocs -> assoc COMMA assoc .)
    RBRACKET        reduce using rule 170 (assocs -> assoc COMMA assoc .)


state 387

    (171) assoc -> arg . HASH_ROCKET arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

    HASH_ROCKET     shift and go to state 267
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190


state 388

    (16) stmt -> lhs = command LBRACKET . do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 458
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 389

    (100) primary -> function LKEY compstmt LKEY .

    LBRACKET        reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    DOT             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    UNARY_OP        reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    PLUS            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    MINUS           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    TIMES           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    DIVIDE          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    MOD             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    POW             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    OR_SYMBOL       reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    GREATERTHAN     reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    LESSERTHAN      reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    EQUAL           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    NOTEQUAL        reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    AND             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    OR              reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    IF              reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    WHILE           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    UNLESS          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    UNTIL           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    TERM            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    NUMBER          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    LPAREN          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    $end            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    COMMA           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RBRACKET        reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    THEN            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    DO              reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RESCUE          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    HASH_ROCKET     reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RKEY            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RPAREN          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    WHEN            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    LKEY            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    END             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    ELSIF           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    ELSE            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    ENSURE          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    DEFINED_OP      reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    RETURN          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    YIELD           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    CASE            reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    FOR             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    BEGIN           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    CLASS           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    MODULE          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    DEF             reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    VAR_LOCAL       reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    VAR_CLASS       reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    SYMBOL          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    STRING          reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    IDENTIFIER      reduce using rule 100 (primary -> function LKEY compstmt LKEY .)
    SUPER           reduce using rule 100 (primary -> function LKEY compstmt LKEY .)


state 390

    (101) primary -> function LKEY OR_SYMBOL OR_SYMBOL . compstmt LKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    function                       shift and go to state 18
    compstmt                       shift and go to state 459
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 391

    (102) primary -> function LKEY OR_SYMBOL block_var . OR_SYMBOL compstmt LKEY

    OR_SYMBOL       shift and go to state 460


state 392

    (148) lhs -> primary LBRACKET args RBRACKET .
    (83) primary -> primary LBRACKET args RBRACKET .

  ! reduce/reduce conflict for LBRACKET resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNARY_OP resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for TIMES resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNLESS resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for UNTIL resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for LKEY resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for DEFINED_OP resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for YIELD resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for BEGIN resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for CLASS resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for MODULE resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_GLOBAL resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_LOCAL resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_INSTANCE resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for VAR_CLASS resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for SYMBOL resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for STRING resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
  ! reduce/reduce conflict for SUPER resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    =               reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    PLUS_EQUAL      reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    MINUS_EQUAL     reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    TIMES_EQUAL     reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    MOD_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    POW_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    XOR_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    AND_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    OR_EQUAL        reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    IN              reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    LBRACKET        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DOT             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    PLUS            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MINUS           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    TIMES           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MOD             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    POW             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    AND             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OR              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    IF              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    WHILE           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    TERM            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    $end            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    COMMA           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RKEY            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    WHEN            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LKEY            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    END             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ELSE            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    THEN            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DO              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    NOT_SYMBOL      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    COMPLEMENT_OP   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DEFINED_OP      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RETURN          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    YIELD           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    CASE            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    FOR             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BEGIN           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    CLASS           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MODULE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DEF             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    VAR_GLOBAL      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    VAR_LOCAL       reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    VAR_INSTANCE    reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    VAR_CLASS       reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    SYMBOL          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    STRING          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    IDENTIFIER      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    SUPER           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)

  ! COMMA           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RPAREN          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! OR_SYMBOL       [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! TIMES           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_GLOBAL      [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_LOCAL       [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_INSTANCE    [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! VAR_CLASS       [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LPAREN          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNARY_OP        [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! LKEY            [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! RETURN          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! YIELD           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! DEFINED_OP      [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! IF              [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNLESS          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! WHILE           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! UNTIL           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! CASE            [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! FOR             [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! BEGIN           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! CLASS           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! MODULE          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! DEF             [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! NUMBER          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! SYMBOL          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! STRING          [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! IDENTIFIER      [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]
  ! SUPER           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]


state 393

    (34) function -> primary DOT operation LPAREN . call_args RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NOT             shift and go to state 25
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 461
    compstmt                       shift and go to state 193
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 258
    command                        shift and go to state 287
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 128
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 289
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 394

    (30) command -> primary DOT operation call_args .

    DO              reduce using rule 30 (command -> primary DOT operation call_args .)
    TERM            reduce using rule 30 (command -> primary DOT operation call_args .)
    NUMBER          reduce using rule 30 (command -> primary DOT operation call_args .)
    LPAREN          reduce using rule 30 (command -> primary DOT operation call_args .)
    AND             reduce using rule 30 (command -> primary DOT operation call_args .)
    OR              reduce using rule 30 (command -> primary DOT operation call_args .)
    IF              reduce using rule 30 (command -> primary DOT operation call_args .)
    WHILE           reduce using rule 30 (command -> primary DOT operation call_args .)
    UNLESS          reduce using rule 30 (command -> primary DOT operation call_args .)
    UNTIL           reduce using rule 30 (command -> primary DOT operation call_args .)
    $end            reduce using rule 30 (command -> primary DOT operation call_args .)
    THEN            reduce using rule 30 (command -> primary DOT operation call_args .)
    RESCUE          reduce using rule 30 (command -> primary DOT operation call_args .)
    RPAREN          reduce using rule 30 (command -> primary DOT operation call_args .)
    WHEN            reduce using rule 30 (command -> primary DOT operation call_args .)
    RKEY            reduce using rule 30 (command -> primary DOT operation call_args .)
    LKEY            reduce using rule 30 (command -> primary DOT operation call_args .)
    END             reduce using rule 30 (command -> primary DOT operation call_args .)
    ELSIF           reduce using rule 30 (command -> primary DOT operation call_args .)
    ELSE            reduce using rule 30 (command -> primary DOT operation call_args .)
    ENSURE          reduce using rule 30 (command -> primary DOT operation call_args .)
    LBRACKET        reduce using rule 30 (command -> primary DOT operation call_args .)
    RBRACKET        reduce using rule 30 (command -> primary DOT operation call_args .)


state 395

    (35) function -> primary UNARY_OP operation LPAREN . call_args RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 259
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    RETURN          shift and go to state 283
    YIELD           shift and go to state 288
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NOT             shift and go to state 25
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 462
    compstmt                       shift and go to state 193
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 258
    command                        shift and go to state 287
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assoc                          shift and go to state 128
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 289
    mlhs                           shift and go to state 22
    mlhs_item                      shift and go to state 43

state 396

    (31) command -> primary UNARY_OP operation call_args .

    DO              reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    TERM            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    NUMBER          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    LPAREN          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    AND             reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    OR              reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    IF              reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    WHILE           reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    UNLESS          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    UNTIL           reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    $end            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    THEN            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    RESCUE          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    RPAREN          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    WHEN            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    RKEY            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    LKEY            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    END             reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    ELSIF           reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    ELSE            reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    ENSURE          reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    LBRACKET        reduce using rule 31 (command -> primary UNARY_OP operation call_args .)
    RBRACKET        reduce using rule 31 (command -> primary UNARY_OP operation call_args .)


state 397

    (142) mrhs -> args COMMA .

    AND             reduce using rule 142 (mrhs -> args COMMA .)
    OR              reduce using rule 142 (mrhs -> args COMMA .)
    IF              reduce using rule 142 (mrhs -> args COMMA .)
    WHILE           reduce using rule 142 (mrhs -> args COMMA .)
    UNLESS          reduce using rule 142 (mrhs -> args COMMA .)
    UNTIL           reduce using rule 142 (mrhs -> args COMMA .)
    TERM            reduce using rule 142 (mrhs -> args COMMA .)
    NUMBER          reduce using rule 142 (mrhs -> args COMMA .)
    LPAREN          reduce using rule 142 (mrhs -> args COMMA .)
    $end            reduce using rule 142 (mrhs -> args COMMA .)
    THEN            reduce using rule 142 (mrhs -> args COMMA .)
    DO              reduce using rule 142 (mrhs -> args COMMA .)
    RESCUE          reduce using rule 142 (mrhs -> args COMMA .)
    RPAREN          reduce using rule 142 (mrhs -> args COMMA .)
    WHEN            reduce using rule 142 (mrhs -> args COMMA .)
    RKEY            reduce using rule 142 (mrhs -> args COMMA .)
    LKEY            reduce using rule 142 (mrhs -> args COMMA .)
    END             reduce using rule 142 (mrhs -> args COMMA .)
    ELSIF           reduce using rule 142 (mrhs -> args COMMA .)
    ELSE            reduce using rule 142 (mrhs -> args COMMA .)
    ENSURE          reduce using rule 142 (mrhs -> args COMMA .)


state 398

    (143) mrhs -> args TIMES .

    AND             reduce using rule 143 (mrhs -> args TIMES .)
    OR              reduce using rule 143 (mrhs -> args TIMES .)
    IF              reduce using rule 143 (mrhs -> args TIMES .)
    WHILE           reduce using rule 143 (mrhs -> args TIMES .)
    UNLESS          reduce using rule 143 (mrhs -> args TIMES .)
    UNTIL           reduce using rule 143 (mrhs -> args TIMES .)
    TERM            reduce using rule 143 (mrhs -> args TIMES .)
    NUMBER          reduce using rule 143 (mrhs -> args TIMES .)
    LPAREN          reduce using rule 143 (mrhs -> args TIMES .)
    $end            reduce using rule 143 (mrhs -> args TIMES .)
    THEN            reduce using rule 143 (mrhs -> args TIMES .)
    DO              reduce using rule 143 (mrhs -> args TIMES .)
    RESCUE          reduce using rule 143 (mrhs -> args TIMES .)
    RPAREN          reduce using rule 143 (mrhs -> args TIMES .)
    WHEN            reduce using rule 143 (mrhs -> args TIMES .)
    RKEY            reduce using rule 143 (mrhs -> args TIMES .)
    LKEY            reduce using rule 143 (mrhs -> args TIMES .)
    END             reduce using rule 143 (mrhs -> args TIMES .)
    ELSIF           reduce using rule 143 (mrhs -> args TIMES .)
    ELSE            reduce using rule 143 (mrhs -> args TIMES .)
    ENSURE          reduce using rule 143 (mrhs -> args TIMES .)


state 399

    (144) mrhs -> args arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 144 (mrhs -> args arg .)
    WHILE           reduce using rule 144 (mrhs -> args arg .)
    UNLESS          reduce using rule 144 (mrhs -> args arg .)
    UNTIL           reduce using rule 144 (mrhs -> args arg .)
    TERM            reduce using rule 144 (mrhs -> args arg .)
    NUMBER          reduce using rule 144 (mrhs -> args arg .)
    LPAREN          reduce using rule 144 (mrhs -> args arg .)
    $end            reduce using rule 144 (mrhs -> args arg .)
    THEN            reduce using rule 144 (mrhs -> args arg .)
    DO              reduce using rule 144 (mrhs -> args arg .)
    RESCUE          reduce using rule 144 (mrhs -> args arg .)
    RPAREN          reduce using rule 144 (mrhs -> args arg .)
    WHEN            reduce using rule 144 (mrhs -> args arg .)
    RKEY            reduce using rule 144 (mrhs -> args arg .)
    LKEY            reduce using rule 144 (mrhs -> args arg .)
    END             reduce using rule 144 (mrhs -> args arg .)
    ELSIF           reduce using rule 144 (mrhs -> args arg .)
    ELSE            reduce using rule 144 (mrhs -> args arg .)
    ENSURE          reduce using rule 144 (mrhs -> args arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 144 (mrhs -> args arg .) ]
  ! OR              [ reduce using rule 144 (mrhs -> args arg .) ]


state 400

    (145) mrhs -> TIMES arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 145 (mrhs -> TIMES arg .)
    WHILE           reduce using rule 145 (mrhs -> TIMES arg .)
    UNLESS          reduce using rule 145 (mrhs -> TIMES arg .)
    UNTIL           reduce using rule 145 (mrhs -> TIMES arg .)
    TERM            reduce using rule 145 (mrhs -> TIMES arg .)
    NUMBER          reduce using rule 145 (mrhs -> TIMES arg .)
    LPAREN          reduce using rule 145 (mrhs -> TIMES arg .)
    $end            reduce using rule 145 (mrhs -> TIMES arg .)
    THEN            reduce using rule 145 (mrhs -> TIMES arg .)
    DO              reduce using rule 145 (mrhs -> TIMES arg .)
    RESCUE          reduce using rule 145 (mrhs -> TIMES arg .)
    RPAREN          reduce using rule 145 (mrhs -> TIMES arg .)
    WHEN            reduce using rule 145 (mrhs -> TIMES arg .)
    RKEY            reduce using rule 145 (mrhs -> TIMES arg .)
    LKEY            reduce using rule 145 (mrhs -> TIMES arg .)
    END             reduce using rule 145 (mrhs -> TIMES arg .)
    ELSIF           reduce using rule 145 (mrhs -> TIMES arg .)
    ELSE            reduce using rule 145 (mrhs -> TIMES arg .)
    ENSURE          reduce using rule 145 (mrhs -> TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 145 (mrhs -> TIMES arg .) ]
  ! OR              [ reduce using rule 145 (mrhs -> TIMES arg .) ]


state 401

    (94) primary -> RETURN LPAREN call_args RPAREN .

    LBRACKET        reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    DOT             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    PLUS            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    MINUS           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    TIMES           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    MOD             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    POW             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    AND             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    OR              reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    IF              reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    WHILE           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    TERM            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    $end            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    COMMA           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    THEN            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    DO              reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RKEY            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    WHEN            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    LKEY            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    END             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    ELSE            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    RETURN          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    YIELD           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    CASE            reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    FOR             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    CLASS           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    MODULE          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    DEF             reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    STRING          reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)
    SUPER           reduce using rule 94 (primary -> RETURN LPAREN call_args RPAREN .)


state 402

    (156) mlhs -> TIMES lhs .
    (40) arg -> lhs . = arg
    (41) arg -> lhs . op_asgn arg
    (221) op_asgn -> . PLUS_EQUAL
    (222) op_asgn -> . MINUS_EQUAL
    (223) op_asgn -> . TIMES_EQUAL
    (224) op_asgn -> . DIVIDE_EQUAL
    (225) op_asgn -> . MOD_EQUAL
    (226) op_asgn -> . POW_EQUAL
    (227) op_asgn -> . SINGLE_AND_EQUAL
    (228) op_asgn -> . SINGLE_OR_EQUAL
    (229) op_asgn -> . XOR_EQUAL
    (230) op_asgn -> . BINARY_LEFT_EQUAL
    (231) op_asgn -> . BINARY_RIGHT_EQUAL
    (232) op_asgn -> . AND_EQUAL
    (233) op_asgn -> . OR_EQUAL

  ! shift/reduce conflict for = resolved as shift
    RBRACKET        reduce using rule 156 (mlhs -> TIMES lhs .)
    =               shift and go to state 235
    PLUS_EQUAL      shift and go to state 134
    MINUS_EQUAL     shift and go to state 135
    TIMES_EQUAL     shift and go to state 136
    DIVIDE_EQUAL    shift and go to state 137
    MOD_EQUAL       shift and go to state 138
    POW_EQUAL       shift and go to state 139
    SINGLE_AND_EQUAL shift and go to state 140
    SINGLE_OR_EQUAL shift and go to state 141
    XOR_EQUAL       shift and go to state 142
    BINARY_LEFT_EQUAL shift and go to state 143
    BINARY_RIGHT_EQUAL shift and go to state 144
    AND_EQUAL       shift and go to state 145
    OR_EQUAL        shift and go to state 146

  ! =               [ reduce using rule 156 (mlhs -> TIMES lhs .) ]

    op_asgn                        shift and go to state 133

state 403

    (173) call_args -> args COMMA assocs .
    (176) call_args -> args COMMA assocs . COMMA TIMES arg
    (177) call_args -> args COMMA assocs . COMMA BINARY_AND_OP arg
    (179) call_args -> args COMMA assocs . COMMA TIMES arg COMMA BINARY_AND_OP arg

    AND             reduce using rule 173 (call_args -> args COMMA assocs .)
    OR              reduce using rule 173 (call_args -> args COMMA assocs .)
    IF              reduce using rule 173 (call_args -> args COMMA assocs .)
    WHILE           reduce using rule 173 (call_args -> args COMMA assocs .)
    UNLESS          reduce using rule 173 (call_args -> args COMMA assocs .)
    UNTIL           reduce using rule 173 (call_args -> args COMMA assocs .)
    TERM            reduce using rule 173 (call_args -> args COMMA assocs .)
    NUMBER          reduce using rule 173 (call_args -> args COMMA assocs .)
    LPAREN          reduce using rule 173 (call_args -> args COMMA assocs .)
    $end            reduce using rule 173 (call_args -> args COMMA assocs .)
    THEN            reduce using rule 173 (call_args -> args COMMA assocs .)
    DO              reduce using rule 173 (call_args -> args COMMA assocs .)
    RESCUE          reduce using rule 173 (call_args -> args COMMA assocs .)
    RPAREN          reduce using rule 173 (call_args -> args COMMA assocs .)
    WHEN            reduce using rule 173 (call_args -> args COMMA assocs .)
    RKEY            reduce using rule 173 (call_args -> args COMMA assocs .)
    LKEY            reduce using rule 173 (call_args -> args COMMA assocs .)
    END             reduce using rule 173 (call_args -> args COMMA assocs .)
    ELSIF           reduce using rule 173 (call_args -> args COMMA assocs .)
    ELSE            reduce using rule 173 (call_args -> args COMMA assocs .)
    ENSURE          reduce using rule 173 (call_args -> args COMMA assocs .)
    LBRACKET        reduce using rule 173 (call_args -> args COMMA assocs .)
    RBRACKET        reduce using rule 173 (call_args -> args COMMA assocs .)
    COMMA           shift and go to state 463


state 404

    (174) call_args -> args COMMA TIMES . arg
    (178) call_args -> args COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 464
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 405

    (175) call_args -> args COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 465
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 406

    (181) call_args -> assocs COMMA TIMES . arg
    (183) call_args -> assocs COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 466
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 407

    (182) call_args -> assocs COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 467
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 408

    (185) call_args -> TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 468


state 409

    (97) primary -> YIELD LPAREN call_args RPAREN .

    LBRACKET        reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    DOT             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    PLUS            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    MINUS           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    TIMES           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    MOD             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    POW             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    AND             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    OR              reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    IF              reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    WHILE           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    TERM            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    $end            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    COMMA           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    THEN            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    DO              reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RKEY            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    WHEN            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    LKEY            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    END             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    ELSE            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    RETURN          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    YIELD           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    CASE            reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    FOR             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    CLASS           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    MODULE          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    DEF             reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    STRING          reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)
    SUPER           reduce using rule 97 (primary -> YIELD LPAREN call_args RPAREN .)


state 410

    (33) function -> operation LBRACKET LPAREN LBRACKET . call_args RBRACKET RPAREN RBRACKET
    (6) stmt -> LBRACKET . block_var RBRACKET
    (7) stmt -> LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (84) primary -> LBRACKET . RBRACKET
    (85) primary -> LBRACKET . args RBRACKET
    (86) primary -> LBRACKET . args COMMA RBRACKET
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    OR_SYMBOL       shift and go to state 68
    RBRACKET        shift and go to state 67
    TIMES           shift and go to state 286
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    operation                      shift and go to state 114
    call_args                      shift and go to state 469
    block_var                      shift and go to state 66
    args                           shift and go to state 470
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    lhs                            shift and go to state 70
    mlhs                           shift and go to state 71
    assoc                          shift and go to state 128
    primary                        shift and go to state 471
    variable                       shift and go to state 19
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79

state 411

    (38) function -> SUPER LPAREN call_args RPAREN .

    LKEY            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    DO              reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    TERM            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    DOT             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    PLUS            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    MINUS           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    TIMES           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    MOD             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    POW             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    AND             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    OR              reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    IF              reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    WHILE           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    $end            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    COMMA           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    THEN            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RKEY            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    WHEN            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    END             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    ELSE            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    RETURN          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    YIELD           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    CASE            reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    FOR             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    CLASS           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    MODULE          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    DEF             reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    STRING          reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)
    SUPER           reduce using rule 38 (function -> SUPER LPAREN call_args RPAREN .)


state 412

    (98) primary -> DEFINED_OP LPAREN arg LPAREN .

    LBRACKET        reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DOT             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNARY_OP        reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RANGE_INCLUSIVE reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RANGE_EXCLUSIVE reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    PLUS            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MINUS           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    TIMES           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DIVIDE          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MOD             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    POW             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OR_SYMBOL       reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_XOR_OP   reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_AND_OP   reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    GREATERTHAN     reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    GREATERTHANEQUAL reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LESSERTHAN      reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LESSERTHANEQUAL reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    EQUAL           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CASE_EQUALITY   reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NOTEQUAL        reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MATCHED_STRINGS_OP reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    AND             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    OR              reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    IF              reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    WHILE           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNLESS          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    UNTIL           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    TERM            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NUMBER          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LPAREN          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    $end            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMMA           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RBRACKET        reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    THEN            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DO              reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RESCUE          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    HASH_ROCKET     reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RKEY            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RPAREN          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    WHEN            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    LKEY            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    END             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ELSIF           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ELSE            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    ENSURE          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    NOT_SYMBOL      reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    COMPLEMENT_OP   reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DEFINED_OP      reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    RETURN          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    YIELD           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CASE            reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    FOR             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    BEGIN           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    CLASS           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    MODULE          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    DEF             reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_GLOBAL      reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_LOCAL       reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_INSTANCE    reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    VAR_CLASS       reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    SYMBOL          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    STRING          reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    IDENTIFIER      reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)
    SUPER           reduce using rule 98 (primary -> DEFINED_OP LPAREN arg LPAREN .)


state 413

    (40) arg -> lhs = . arg
    (16) stmt -> lhs = . command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    SUPER           shift and go to state 116
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    IDENTIFIER      shift and go to state 21
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    lhs                            shift and go to state 129
    arg                            shift and go to state 270
    command                        shift and go to state 269
    primary                        shift and go to state 375
    operation                      shift and go to state 114
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79

state 414

    (110) primary -> CASE compstmt when END .

    LBRACKET        reduce using rule 110 (primary -> CASE compstmt when END .)
    DOT             reduce using rule 110 (primary -> CASE compstmt when END .)
    UNARY_OP        reduce using rule 110 (primary -> CASE compstmt when END .)
    RANGE_INCLUSIVE reduce using rule 110 (primary -> CASE compstmt when END .)
    RANGE_EXCLUSIVE reduce using rule 110 (primary -> CASE compstmt when END .)
    PLUS            reduce using rule 110 (primary -> CASE compstmt when END .)
    MINUS           reduce using rule 110 (primary -> CASE compstmt when END .)
    TIMES           reduce using rule 110 (primary -> CASE compstmt when END .)
    DIVIDE          reduce using rule 110 (primary -> CASE compstmt when END .)
    MOD             reduce using rule 110 (primary -> CASE compstmt when END .)
    POW             reduce using rule 110 (primary -> CASE compstmt when END .)
    OR_SYMBOL       reduce using rule 110 (primary -> CASE compstmt when END .)
    BINARY_XOR_OP   reduce using rule 110 (primary -> CASE compstmt when END .)
    BINARY_AND_OP   reduce using rule 110 (primary -> CASE compstmt when END .)
    COMBINED_COMPARISON_OP reduce using rule 110 (primary -> CASE compstmt when END .)
    GREATERTHAN     reduce using rule 110 (primary -> CASE compstmt when END .)
    GREATERTHANEQUAL reduce using rule 110 (primary -> CASE compstmt when END .)
    LESSERTHAN      reduce using rule 110 (primary -> CASE compstmt when END .)
    LESSERTHANEQUAL reduce using rule 110 (primary -> CASE compstmt when END .)
    EQUAL           reduce using rule 110 (primary -> CASE compstmt when END .)
    CASE_EQUALITY   reduce using rule 110 (primary -> CASE compstmt when END .)
    NOTEQUAL        reduce using rule 110 (primary -> CASE compstmt when END .)
    MATCHED_STRINGS_OP reduce using rule 110 (primary -> CASE compstmt when END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 110 (primary -> CASE compstmt when END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 110 (primary -> CASE compstmt when END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 110 (primary -> CASE compstmt when END .)
    AND             reduce using rule 110 (primary -> CASE compstmt when END .)
    OR              reduce using rule 110 (primary -> CASE compstmt when END .)
    IF              reduce using rule 110 (primary -> CASE compstmt when END .)
    WHILE           reduce using rule 110 (primary -> CASE compstmt when END .)
    UNLESS          reduce using rule 110 (primary -> CASE compstmt when END .)
    UNTIL           reduce using rule 110 (primary -> CASE compstmt when END .)
    TERM            reduce using rule 110 (primary -> CASE compstmt when END .)
    NUMBER          reduce using rule 110 (primary -> CASE compstmt when END .)
    LPAREN          reduce using rule 110 (primary -> CASE compstmt when END .)
    $end            reduce using rule 110 (primary -> CASE compstmt when END .)
    COMMA           reduce using rule 110 (primary -> CASE compstmt when END .)
    RBRACKET        reduce using rule 110 (primary -> CASE compstmt when END .)
    THEN            reduce using rule 110 (primary -> CASE compstmt when END .)
    DO              reduce using rule 110 (primary -> CASE compstmt when END .)
    RESCUE          reduce using rule 110 (primary -> CASE compstmt when END .)
    HASH_ROCKET     reduce using rule 110 (primary -> CASE compstmt when END .)
    RKEY            reduce using rule 110 (primary -> CASE compstmt when END .)
    RPAREN          reduce using rule 110 (primary -> CASE compstmt when END .)
    WHEN            reduce using rule 110 (primary -> CASE compstmt when END .)
    LKEY            reduce using rule 110 (primary -> CASE compstmt when END .)
    END             reduce using rule 110 (primary -> CASE compstmt when END .)
    ELSIF           reduce using rule 110 (primary -> CASE compstmt when END .)
    ELSE            reduce using rule 110 (primary -> CASE compstmt when END .)
    ENSURE          reduce using rule 110 (primary -> CASE compstmt when END .)
    NOT_SYMBOL      reduce using rule 110 (primary -> CASE compstmt when END .)
    COMPLEMENT_OP   reduce using rule 110 (primary -> CASE compstmt when END .)
    DEFINED_OP      reduce using rule 110 (primary -> CASE compstmt when END .)
    RETURN          reduce using rule 110 (primary -> CASE compstmt when END .)
    YIELD           reduce using rule 110 (primary -> CASE compstmt when END .)
    CASE            reduce using rule 110 (primary -> CASE compstmt when END .)
    FOR             reduce using rule 110 (primary -> CASE compstmt when END .)
    BEGIN           reduce using rule 110 (primary -> CASE compstmt when END .)
    CLASS           reduce using rule 110 (primary -> CASE compstmt when END .)
    MODULE          reduce using rule 110 (primary -> CASE compstmt when END .)
    DEF             reduce using rule 110 (primary -> CASE compstmt when END .)
    VAR_GLOBAL      reduce using rule 110 (primary -> CASE compstmt when END .)
    VAR_LOCAL       reduce using rule 110 (primary -> CASE compstmt when END .)
    VAR_INSTANCE    reduce using rule 110 (primary -> CASE compstmt when END .)
    VAR_CLASS       reduce using rule 110 (primary -> CASE compstmt when END .)
    SYMBOL          reduce using rule 110 (primary -> CASE compstmt when END .)
    STRING          reduce using rule 110 (primary -> CASE compstmt when END .)
    IDENTIFIER      reduce using rule 110 (primary -> CASE compstmt when END .)
    SUPER           reduce using rule 110 (primary -> CASE compstmt when END .)


state 415

    (111) primary -> CASE compstmt when ELSE . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 472
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 416

    (126) when -> when WHEN . when_args then compstmt
    (131) when_args -> . args
    (132) when_args -> . args COMMA TIMES arg
    (133) when_args -> . TIMES arg
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 419
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    when_args                      shift and go to state 473
    args                           shift and go to state 418
    arg                            shift and go to state 72
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 417

    (125) when -> WHEN when_args . then compstmt
    (134) then -> . TERM
    (135) then -> . THEN
    (136) then -> . TERM THEN

    TERM            shift and go to state 247
    THEN            shift and go to state 248

    then                           shift and go to state 474

state 418

    (131) when_args -> args .
    (132) when_args -> args . COMMA TIMES arg

    TERM            reduce using rule 131 (when_args -> args .)
    THEN            reduce using rule 131 (when_args -> args .)
    COMMA           shift and go to state 475


state 419

    (133) when_args -> TIMES . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 476
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 420

    (112) primary -> FOR block_var IN expr . do compstmt END
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 60
    OR              shift and go to state 61
    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 477
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 421

    (98) primary -> DEFINED_OP LPAREN arg . LPAREN
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

    LPAREN          shift and go to state 412
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190


state 422

    (117) primary -> CLASS IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    DOT             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    PLUS            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    MINUS           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    TIMES           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    MOD             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    POW             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    AND             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    OR              reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    IF              reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    WHILE           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    TERM            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    $end            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    COMMA           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    THEN            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    DO              reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RKEY            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    WHEN            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    LKEY            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    END             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    ELSE            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    RETURN          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    YIELD           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    CASE            reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    FOR             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    CLASS           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    MODULE          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    DEF             reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    STRING          reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)
    SUPER           reduce using rule 117 (primary -> CLASS IDENTIFIER compstmt END .)


state 423

    (118) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 478
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 424

    (119) primary -> MODULE IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    DOT             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    PLUS            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    MINUS           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    TIMES           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    MOD             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    POW             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    AND             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    OR              reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    IF              reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    WHILE           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    TERM            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    $end            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    COMMA           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    THEN            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    DO              reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RKEY            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    WHEN            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    LKEY            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    END             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    ELSE            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    RETURN          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    YIELD           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    CASE            reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    FOR             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    CLASS           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    MODULE          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    DEF             reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    STRING          reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)
    SUPER           reduce using rule 119 (primary -> MODULE IDENTIFIER compstmt END .)


state 425

    (120) primary -> DEF fname argdecl compstmt . END

    END             shift and go to state 479


state 426

    (162) argdecl -> LPAREN arglist . RPAREN

    RPAREN          shift and go to state 480


state 427

    (163) argdecl -> arglist term .
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
    LBRACKET        reduce using rule 163 (argdecl -> arglist term .)
    UNDEF           reduce using rule 163 (argdecl -> arglist term .)
    ALIAS           reduce using rule 163 (argdecl -> arglist term .)
    BEGIN           reduce using rule 163 (argdecl -> arglist term .)
    END             reduce using rule 163 (argdecl -> arglist term .)
    RETURN          reduce using rule 163 (argdecl -> arglist term .)
    YIELD           reduce using rule 163 (argdecl -> arglist term .)
    NOT             reduce using rule 163 (argdecl -> arglist term .)
    NOT_SYMBOL      reduce using rule 163 (argdecl -> arglist term .)
    SUPER           reduce using rule 163 (argdecl -> arglist term .)
    VAR_GLOBAL      reduce using rule 163 (argdecl -> arglist term .)
    VAR_LOCAL       reduce using rule 163 (argdecl -> arglist term .)
    VAR_INSTANCE    reduce using rule 163 (argdecl -> arglist term .)
    VAR_CLASS       reduce using rule 163 (argdecl -> arglist term .)
    LPAREN          reduce using rule 163 (argdecl -> arglist term .)
    UNARY_OP        reduce using rule 163 (argdecl -> arglist term .)
    LKEY            reduce using rule 163 (argdecl -> arglist term .)
    DEFINED_OP      reduce using rule 163 (argdecl -> arglist term .)
    IF              reduce using rule 163 (argdecl -> arglist term .)
    UNLESS          reduce using rule 163 (argdecl -> arglist term .)
    WHILE           reduce using rule 163 (argdecl -> arglist term .)
    UNTIL           reduce using rule 163 (argdecl -> arglist term .)
    CASE            reduce using rule 163 (argdecl -> arglist term .)
    FOR             reduce using rule 163 (argdecl -> arglist term .)
    CLASS           reduce using rule 163 (argdecl -> arglist term .)
    MODULE          reduce using rule 163 (argdecl -> arglist term .)
    DEF             reduce using rule 163 (argdecl -> arglist term .)
    PLUS            reduce using rule 163 (argdecl -> arglist term .)
    MINUS           reduce using rule 163 (argdecl -> arglist term .)
    COMPLEMENT_OP   reduce using rule 163 (argdecl -> arglist term .)
    IDENTIFIER      reduce using rule 163 (argdecl -> arglist term .)
    NUMBER          reduce using rule 163 (argdecl -> arglist term .)
    SYMBOL          reduce using rule 163 (argdecl -> arglist term .)
    STRING          reduce using rule 163 (argdecl -> arglist term .)
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219

  ! TIMES           [ reduce using rule 163 (argdecl -> arglist term .) ]


state 428

    (165) arglist -> IDENTIFIER COMMA . IDENTIFIER
    (166) arglist -> IDENTIFIER COMMA . & IDENTIFIER

    IDENTIFIER      shift and go to state 481
    &               shift and go to state 482


state 429

    (121) primary -> DEF singleton DOT fname . argdecl compstmt END
    (162) argdecl -> . LPAREN arglist RPAREN
    (163) argdecl -> . arglist term
    (164) arglist -> . IDENTIFIER
    (165) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (166) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 337
    IDENTIFIER      shift and go to state 339

    argdecl                        shift and go to state 483
    arglist                        shift and go to state 338

state 430

    (122) primary -> DEF singleton UNARY_OP fname . argdecl compstmt END
    (162) argdecl -> . LPAREN arglist RPAREN
    (163) argdecl -> . arglist term
    (164) arglist -> . IDENTIFIER
    (165) arglist -> . IDENTIFIER COMMA IDENTIFIER
    (166) arglist -> . IDENTIFIER COMMA & IDENTIFIER

    LPAREN          shift and go to state 337
    IDENTIFIER      shift and go to state 339

    argdecl                        shift and go to state 484
    arglist                        shift and go to state 338

state 431

    (168) singleton -> LPAREN expr RPAREN .

    DOT             reduce using rule 168 (singleton -> LPAREN expr RPAREN .)
    UNARY_OP        reduce using rule 168 (singleton -> LPAREN expr RPAREN .)


state 432

    (152) mlhs -> mlhs_item COMMA mlhs_item TIMES .

    =               reduce using rule 152 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    RBRACKET        reduce using rule 152 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    RPAREN          reduce using rule 152 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    IN              reduce using rule 152 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)
    OR_SYMBOL       reduce using rule 152 (mlhs -> mlhs_item COMMA mlhs_item TIMES .)


state 433

    (153) mlhs -> mlhs_item COMMA mlhs_item lhs .

    =               reduce using rule 153 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    RBRACKET        reduce using rule 153 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    RPAREN          reduce using rule 153 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    IN              reduce using rule 153 (mlhs -> mlhs_item COMMA mlhs_item lhs .)
    OR_SYMBOL       reduce using rule 153 (mlhs -> mlhs_item COMMA mlhs_item lhs .)


state 434

    (157) mult_mlhs_item -> COMMA mlhs_item .

    TIMES           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_GLOBAL      reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_LOCAL       reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_INSTANCE    reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    VAR_CLASS       reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    LPAREN          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    UNARY_OP        reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    LBRACKET        reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    LKEY            reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    RETURN          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    YIELD           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    DEFINED_OP      reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    IF              reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    UNLESS          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    WHILE           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    UNTIL           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    CASE            reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    FOR             reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    BEGIN           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    CLASS           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    MODULE          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    DEF             reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    NUMBER          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    SYMBOL          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    STRING          reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    IDENTIFIER      reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)
    SUPER           reduce using rule 157 (mult_mlhs_item -> COMMA mlhs_item .)


state 435

    (154) mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .

    =               reduce using rule 154 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    RBRACKET        reduce using rule 154 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    RPAREN          reduce using rule 154 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    IN              reduce using rule 154 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)
    OR_SYMBOL       reduce using rule 154 (mlhs -> mlhs_item COMMA mult_mlhs_item TIMES .)


state 436

    (155) mlhs -> mlhs_item COMMA mult_mlhs_item lhs .

    =               reduce using rule 155 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    RBRACKET        reduce using rule 155 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    RPAREN          reduce using rule 155 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    IN              reduce using rule 155 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)
    OR_SYMBOL       reduce using rule 155 (mlhs -> mlhs_item COMMA mult_mlhs_item lhs .)


state 437

    (241) factor -> LPAREN . expression RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (159) mlhs_item -> LPAREN . mlhs RPAREN
    (234) expression -> . expression PLUS term
    (235) expression -> . expression MINUS term
    (236) expression -> . term
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER

    TIMES           shift and go to state 44
    TERM            shift and go to state 56
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    LPAREN          shift and go to state 485
    NUMBER          shift and go to state 349
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expression                     shift and go to state 224
    compstmt                       shift and go to state 193
    mlhs                           shift and go to state 194
    term                           shift and go to state 225
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 195
    factor                         shift and go to state 57
    call                           shift and go to state 5
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36

state 438

    (234) expression -> expression PLUS term .
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

    RPAREN          reduce using rule 234 (expression -> expression PLUS term .)
    PLUS            reduce using rule 234 (expression -> expression PLUS term .)
    MINUS           reduce using rule 234 (expression -> expression PLUS term .)
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219


state 439

    (235) expression -> expression MINUS term .
    (237) term -> term . TIMES factor
    (238) term -> term . DIVIDE factor

    RPAREN          reduce using rule 235 (expression -> expression MINUS term .)
    PLUS            reduce using rule 235 (expression -> expression MINUS term .)
    MINUS           reduce using rule 235 (expression -> expression MINUS term .)
    TIMES           shift and go to state 230
    DIVIDE          shift and go to state 219


state 440

    (7) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 486
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 441

    (34) function -> primary DOT operation LPAREN . call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 461
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 442

    (35) function -> primary UNARY_OP operation LPAREN . call_args RPAREN
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    primary                        shift and go to state 115
    operation                      shift and go to state 114
    call_args                      shift and go to state 462
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 443

    (33) function -> operation LBRACKET LPAREN LBRACKET . call_args RBRACKET RPAREN RBRACKET
    (172) call_args -> . args
    (173) call_args -> . args COMMA assocs
    (174) call_args -> . args COMMA TIMES arg
    (175) call_args -> . args COMMA BINARY_AND_OP arg
    (176) call_args -> . args COMMA assocs COMMA TIMES arg
    (177) call_args -> . args COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> . args COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> . args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (180) call_args -> . assocs
    (181) call_args -> . assocs COMMA TIMES arg
    (182) call_args -> . assocs COMMA BINARY_AND_OP arg
    (183) call_args -> . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (184) call_args -> . TIMES arg
    (185) call_args -> . TIMES arg COMMA BINARY_AND_OP arg
    (186) call_args -> . BINARY_AND_OP arg
    (187) call_args -> . command
    (160) args -> . arg
    (161) args -> . arg COMMA arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (171) assoc -> . arg HASH_ROCKET arg
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    TIMES           shift and go to state 158
    BINARY_AND_OP   shift and go to state 159
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    IDENTIFIER      shift and go to state 21
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    operation                      shift and go to state 114
    call_args                      shift and go to state 469
    args                           shift and go to state 156
    assocs                         shift and go to state 157
    arg                            shift and go to state 127
    command                        shift and go to state 160
    assoc                          shift and go to state 128
    primary                        shift and go to state 115
    lhs                            shift and go to state 129
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 444

    (103) primary -> IF expr then compstmt END .

    LBRACKET        reduce using rule 103 (primary -> IF expr then compstmt END .)
    DOT             reduce using rule 103 (primary -> IF expr then compstmt END .)
    UNARY_OP        reduce using rule 103 (primary -> IF expr then compstmt END .)
    RANGE_INCLUSIVE reduce using rule 103 (primary -> IF expr then compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 103 (primary -> IF expr then compstmt END .)
    PLUS            reduce using rule 103 (primary -> IF expr then compstmt END .)
    MINUS           reduce using rule 103 (primary -> IF expr then compstmt END .)
    TIMES           reduce using rule 103 (primary -> IF expr then compstmt END .)
    DIVIDE          reduce using rule 103 (primary -> IF expr then compstmt END .)
    MOD             reduce using rule 103 (primary -> IF expr then compstmt END .)
    POW             reduce using rule 103 (primary -> IF expr then compstmt END .)
    OR_SYMBOL       reduce using rule 103 (primary -> IF expr then compstmt END .)
    BINARY_XOR_OP   reduce using rule 103 (primary -> IF expr then compstmt END .)
    BINARY_AND_OP   reduce using rule 103 (primary -> IF expr then compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 103 (primary -> IF expr then compstmt END .)
    GREATERTHAN     reduce using rule 103 (primary -> IF expr then compstmt END .)
    GREATERTHANEQUAL reduce using rule 103 (primary -> IF expr then compstmt END .)
    LESSERTHAN      reduce using rule 103 (primary -> IF expr then compstmt END .)
    LESSERTHANEQUAL reduce using rule 103 (primary -> IF expr then compstmt END .)
    EQUAL           reduce using rule 103 (primary -> IF expr then compstmt END .)
    CASE_EQUALITY   reduce using rule 103 (primary -> IF expr then compstmt END .)
    NOTEQUAL        reduce using rule 103 (primary -> IF expr then compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 103 (primary -> IF expr then compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 103 (primary -> IF expr then compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 103 (primary -> IF expr then compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 103 (primary -> IF expr then compstmt END .)
    AND             reduce using rule 103 (primary -> IF expr then compstmt END .)
    OR              reduce using rule 103 (primary -> IF expr then compstmt END .)
    IF              reduce using rule 103 (primary -> IF expr then compstmt END .)
    WHILE           reduce using rule 103 (primary -> IF expr then compstmt END .)
    UNLESS          reduce using rule 103 (primary -> IF expr then compstmt END .)
    UNTIL           reduce using rule 103 (primary -> IF expr then compstmt END .)
    TERM            reduce using rule 103 (primary -> IF expr then compstmt END .)
    NUMBER          reduce using rule 103 (primary -> IF expr then compstmt END .)
    LPAREN          reduce using rule 103 (primary -> IF expr then compstmt END .)
    $end            reduce using rule 103 (primary -> IF expr then compstmt END .)
    COMMA           reduce using rule 103 (primary -> IF expr then compstmt END .)
    RBRACKET        reduce using rule 103 (primary -> IF expr then compstmt END .)
    THEN            reduce using rule 103 (primary -> IF expr then compstmt END .)
    DO              reduce using rule 103 (primary -> IF expr then compstmt END .)
    RESCUE          reduce using rule 103 (primary -> IF expr then compstmt END .)
    HASH_ROCKET     reduce using rule 103 (primary -> IF expr then compstmt END .)
    RKEY            reduce using rule 103 (primary -> IF expr then compstmt END .)
    RPAREN          reduce using rule 103 (primary -> IF expr then compstmt END .)
    WHEN            reduce using rule 103 (primary -> IF expr then compstmt END .)
    LKEY            reduce using rule 103 (primary -> IF expr then compstmt END .)
    END             reduce using rule 103 (primary -> IF expr then compstmt END .)
    ELSIF           reduce using rule 103 (primary -> IF expr then compstmt END .)
    ELSE            reduce using rule 103 (primary -> IF expr then compstmt END .)
    ENSURE          reduce using rule 103 (primary -> IF expr then compstmt END .)
    NOT_SYMBOL      reduce using rule 103 (primary -> IF expr then compstmt END .)
    COMPLEMENT_OP   reduce using rule 103 (primary -> IF expr then compstmt END .)
    DEFINED_OP      reduce using rule 103 (primary -> IF expr then compstmt END .)
    RETURN          reduce using rule 103 (primary -> IF expr then compstmt END .)
    YIELD           reduce using rule 103 (primary -> IF expr then compstmt END .)
    CASE            reduce using rule 103 (primary -> IF expr then compstmt END .)
    FOR             reduce using rule 103 (primary -> IF expr then compstmt END .)
    BEGIN           reduce using rule 103 (primary -> IF expr then compstmt END .)
    CLASS           reduce using rule 103 (primary -> IF expr then compstmt END .)
    MODULE          reduce using rule 103 (primary -> IF expr then compstmt END .)
    DEF             reduce using rule 103 (primary -> IF expr then compstmt END .)
    VAR_GLOBAL      reduce using rule 103 (primary -> IF expr then compstmt END .)
    VAR_LOCAL       reduce using rule 103 (primary -> IF expr then compstmt END .)
    VAR_INSTANCE    reduce using rule 103 (primary -> IF expr then compstmt END .)
    VAR_CLASS       reduce using rule 103 (primary -> IF expr then compstmt END .)
    SYMBOL          reduce using rule 103 (primary -> IF expr then compstmt END .)
    STRING          reduce using rule 103 (primary -> IF expr then compstmt END .)
    IDENTIFIER      reduce using rule 103 (primary -> IF expr then compstmt END .)
    SUPER           reduce using rule 103 (primary -> IF expr then compstmt END .)


state 445

    (104) primary -> IF expr then compstmt elsif . END
    (105) primary -> IF expr then compstmt elsif . ELSE compstmt END

    END             shift and go to state 487
    ELSE            shift and go to state 488


state 446

    (123) elsif -> ELSIF . expr then compstmt
    (124) elsif -> ELSIF . expr then compstmt elsif
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER

    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    TIMES           shift and go to state 44
    SUPER           shift and go to state 116
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35

    expr                           shift and go to state 489
    mlhs                           shift and go to state 22
    command                        shift and go to state 112
    arg                            shift and go to state 27
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 113
    operation                      shift and go to state 114
    primary                        shift and go to state 115
    literal                        shift and go to state 36
    variable                       shift and go to state 118
    function                       shift and go to state 79

state 447

    (83) primary -> primary LBRACKET args RBRACKET .
    (148) lhs -> primary LBRACKET args RBRACKET .

  ! reduce/reduce conflict for COMMA resolved using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DOT             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNARY_OP        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LBRACKET        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    PLUS            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MINUS           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    TIMES           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DIVIDE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MOD             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    POW             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OR_SYMBOL       reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_XOR_OP   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_AND_OP   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHAN     reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    GREATERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHAN      reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LESSERTHANEQUAL reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    EQUAL           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    CASE_EQUALITY   reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    NOTEQUAL        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    AND             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    OR              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    TERM            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    THEN            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    DO              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    NUMBER          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LPAREN          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    COMMA           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    HASH_ROCKET     reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    IF              reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    WHILE           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNLESS          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    UNTIL           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    $end            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RESCUE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RPAREN          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    WHEN            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RKEY            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    LKEY            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    END             reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ELSIF           reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ELSE            reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    ENSURE          reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    RBRACKET        reduce using rule 83 (primary -> primary LBRACKET args RBRACKET .)
    =               reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    PLUS_EQUAL      reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    MINUS_EQUAL     reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    TIMES_EQUAL     reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    DIVIDE_EQUAL    reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    MOD_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    POW_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_AND_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    SINGLE_OR_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    XOR_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_LEFT_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    BINARY_RIGHT_EQUAL reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    AND_EQUAL       reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)
    OR_EQUAL        reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .)

  ! COMMA           [ reduce using rule 148 (lhs -> primary LBRACKET args RBRACKET .) ]


state 448

    (108) primary -> WHILE expr do compstmt END .

    LBRACKET        reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    DOT             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    UNARY_OP        reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    PLUS            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    MINUS           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    TIMES           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    DIVIDE          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    MOD             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    POW             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    OR_SYMBOL       reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    GREATERTHAN     reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    LESSERTHAN      reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    EQUAL           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    NOTEQUAL        reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    AND             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    OR              reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    IF              reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    WHILE           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    UNLESS          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    UNTIL           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    TERM            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    NUMBER          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    LPAREN          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    $end            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    COMMA           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RBRACKET        reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    THEN            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    DO              reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RESCUE          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    HASH_ROCKET     reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RKEY            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RPAREN          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    WHEN            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    LKEY            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    END             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    ELSIF           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    ELSE            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    ENSURE          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    DEFINED_OP      reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    RETURN          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    YIELD           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    CASE            reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    FOR             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    BEGIN           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    CLASS           reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    MODULE          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    DEF             reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    VAR_LOCAL       reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    VAR_CLASS       reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    SYMBOL          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    STRING          reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    IDENTIFIER      reduce using rule 108 (primary -> WHILE expr do compstmt END .)
    SUPER           reduce using rule 108 (primary -> WHILE expr do compstmt END .)


state 449

    (106) primary -> UNLESS expr then compstmt END .

    LBRACKET        reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    DOT             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    UNARY_OP        reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RANGE_INCLUSIVE reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    PLUS            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    MINUS           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    TIMES           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    DIVIDE          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    MOD             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    POW             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    OR_SYMBOL       reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    BINARY_XOR_OP   reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    BINARY_AND_OP   reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    GREATERTHAN     reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    GREATERTHANEQUAL reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    LESSERTHAN      reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    LESSERTHANEQUAL reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    EQUAL           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    CASE_EQUALITY   reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    NOTEQUAL        reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    AND             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    OR              reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    IF              reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    WHILE           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    UNLESS          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    UNTIL           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    TERM            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    NUMBER          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    LPAREN          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    $end            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    COMMA           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RBRACKET        reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    THEN            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    DO              reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RESCUE          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    HASH_ROCKET     reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RKEY            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RPAREN          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    WHEN            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    LKEY            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    END             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    ELSIF           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    ELSE            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    ENSURE          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    NOT_SYMBOL      reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    COMPLEMENT_OP   reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    DEFINED_OP      reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    RETURN          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    YIELD           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    CASE            reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    FOR             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    BEGIN           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    CLASS           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    MODULE          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    DEF             reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    VAR_GLOBAL      reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    VAR_LOCAL       reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    VAR_INSTANCE    reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    VAR_CLASS       reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    SYMBOL          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    STRING          reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    IDENTIFIER      reduce using rule 106 (primary -> UNLESS expr then compstmt END .)
    SUPER           reduce using rule 106 (primary -> UNLESS expr then compstmt END .)


state 450

    (107) primary -> UNLESS expr then compstmt ELSE . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 490
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 451

    (109) primary -> UNTIL expr do compstmt END .

    LBRACKET        reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    DOT             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    UNARY_OP        reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    PLUS            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    MINUS           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    TIMES           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    DIVIDE          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    MOD             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    POW             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    OR_SYMBOL       reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    GREATERTHAN     reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    LESSERTHAN      reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    EQUAL           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    NOTEQUAL        reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    AND             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    OR              reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    IF              reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    WHILE           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    UNLESS          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    UNTIL           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    TERM            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    NUMBER          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    LPAREN          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    $end            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    COMMA           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RBRACKET        reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    THEN            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    DO              reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RESCUE          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    HASH_ROCKET     reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RKEY            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RPAREN          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    WHEN            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    LKEY            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    END             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    ELSIF           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    ELSE            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    ENSURE          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    DEFINED_OP      reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    RETURN          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    YIELD           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    CASE            reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    FOR             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    BEGIN           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    CLASS           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    MODULE          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    DEF             reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    VAR_LOCAL       reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    VAR_CLASS       reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    SYMBOL          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    STRING          reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    IDENTIFIER      reduce using rule 109 (primary -> UNTIL expr do compstmt END .)
    SUPER           reduce using rule 109 (primary -> UNTIL expr do compstmt END .)


state 452

    (114) primary -> BEGIN compstmt rescue ELSE compstmt . END
    (116) primary -> BEGIN compstmt rescue ELSE compstmt . ENSURE compstmt END

    END             shift and go to state 491
    ENSURE          shift and go to state 492


state 453

    (115) primary -> BEGIN compstmt rescue ENSURE compstmt . END

    END             shift and go to state 493


state 454

    (129) rescue -> rescue RESCUE args . do compstmt
    (137) do -> . term
    (138) do -> . DO
    (139) do -> . term DO
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN

    DO              shift and go to state 64
    TERM            shift and go to state 56
    NUMBER          shift and go to state 58
    LPAREN          shift and go to state 59

    do                             shift and go to state 494
    term                           shift and go to state 63
    factor                         shift and go to state 57

state 455

    (130) rescue -> rescue RESCUE do . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 495
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 456

    (127) rescue -> RESCUE args do . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 496
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 457

    (128) rescue -> RESCUE do compstmt .

    END             reduce using rule 128 (rescue -> RESCUE do compstmt .)
    ELSE            reduce using rule 128 (rescue -> RESCUE do compstmt .)
    ENSURE          reduce using rule 128 (rescue -> RESCUE do compstmt .)
    RESCUE          reduce using rule 128 (rescue -> RESCUE do compstmt .)


state 458

    (16) stmt -> lhs = command LBRACKET do . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    LBRACKET        shift and go to state 497


state 459

    (101) primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt . LKEY

    LKEY            shift and go to state 498


state 460

    (102) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL . compstmt LKEY
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    function                       shift and go to state 18
    compstmt                       shift and go to state 499
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 461

    (34) function -> primary DOT operation LPAREN call_args . RPAREN

    RPAREN          shift and go to state 500


state 462

    (35) function -> primary UNARY_OP operation LPAREN call_args . RPAREN

    RPAREN          shift and go to state 501


state 463

    (176) call_args -> args COMMA assocs COMMA . TIMES arg
    (177) call_args -> args COMMA assocs COMMA . BINARY_AND_OP arg
    (179) call_args -> args COMMA assocs COMMA . TIMES arg COMMA BINARY_AND_OP arg

    TIMES           shift and go to state 502
    BINARY_AND_OP   shift and go to state 503


state 464

    (174) call_args -> args COMMA TIMES arg .
    (178) call_args -> args COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    WHILE           reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    UNLESS          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    UNTIL           reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    TERM            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    NUMBER          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    LPAREN          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    $end            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    THEN            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    DO              reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    RESCUE          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    RPAREN          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    WHEN            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    RKEY            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    LKEY            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    END             reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    ELSIF           reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    ELSE            reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    ENSURE          reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    LBRACKET        reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    RBRACKET        reduce using rule 174 (call_args -> args COMMA TIMES arg .)
    COMMA           shift and go to state 504
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 174 (call_args -> args COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 174 (call_args -> args COMMA TIMES arg .) ]


state 465

    (175) call_args -> args COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    END             reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 175 (call_args -> args COMMA BINARY_AND_OP arg .) ]


state 466

    (181) call_args -> assocs COMMA TIMES arg .
    (183) call_args -> assocs COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    WHILE           reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    UNLESS          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    UNTIL           reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    TERM            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    NUMBER          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    LPAREN          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    $end            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    THEN            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    DO              reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    RESCUE          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    RPAREN          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    WHEN            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    RKEY            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    LKEY            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    END             reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    ELSIF           reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    ELSE            reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    ENSURE          reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    LBRACKET        reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    RBRACKET        reduce using rule 181 (call_args -> assocs COMMA TIMES arg .)
    COMMA           shift and go to state 505
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 181 (call_args -> assocs COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 181 (call_args -> assocs COMMA TIMES arg .) ]


state 467

    (182) call_args -> assocs COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    END             reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 182 (call_args -> assocs COMMA BINARY_AND_OP arg .) ]


state 468

    (185) call_args -> TIMES arg COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 506
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 469

    (33) function -> operation LBRACKET LPAREN LBRACKET call_args . RBRACKET RPAREN RBRACKET

    RBRACKET        shift and go to state 507


state 470

    (85) primary -> LBRACKET args . RBRACKET
    (86) primary -> LBRACKET args . COMMA RBRACKET
    (172) call_args -> args .
    (173) call_args -> args . COMMA assocs
    (174) call_args -> args . COMMA TIMES arg
    (175) call_args -> args . COMMA BINARY_AND_OP arg
    (176) call_args -> args . COMMA assocs COMMA TIMES arg
    (177) call_args -> args . COMMA assocs COMMA BINARY_AND_OP arg
    (178) call_args -> args . COMMA TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> args . COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 233
    COMMA           shift and go to state 508

  ! RBRACKET        [ reduce using rule 172 (call_args -> args .) ]


state 471

    (30) command -> primary . DOT operation call_args
    (31) command -> primary . UNARY_OP operation call_args
    (147) lhs -> primary . LBRACKET RBRACKET
    (148) lhs -> primary . LBRACKET args RBRACKET
    (149) lhs -> primary . DOT IDENTIFIER
    (72) arg -> primary .
    (80) primary -> primary . UNARY_OP IDENTIFIER
    (82) primary -> primary . LBRACKET RBRACKET
    (83) primary -> primary . LBRACKET args RBRACKET
    (34) function -> primary . DOT operation LPAREN call_args RPAREN
    (35) function -> primary . UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> primary . DOT operation
    (37) function -> primary . UNARY_OP operation

    DOT             shift and go to state 249
    UNARY_OP        shift and go to state 250
    LBRACKET        shift and go to state 148
    COMMA           reduce using rule 72 (arg -> primary .)
    RANGE_INCLUSIVE reduce using rule 72 (arg -> primary .)
    RANGE_EXCLUSIVE reduce using rule 72 (arg -> primary .)
    PLUS            reduce using rule 72 (arg -> primary .)
    MINUS           reduce using rule 72 (arg -> primary .)
    TIMES           reduce using rule 72 (arg -> primary .)
    DIVIDE          reduce using rule 72 (arg -> primary .)
    MOD             reduce using rule 72 (arg -> primary .)
    POW             reduce using rule 72 (arg -> primary .)
    OR_SYMBOL       reduce using rule 72 (arg -> primary .)
    BINARY_XOR_OP   reduce using rule 72 (arg -> primary .)
    BINARY_AND_OP   reduce using rule 72 (arg -> primary .)
    COMBINED_COMPARISON_OP reduce using rule 72 (arg -> primary .)
    GREATERTHAN     reduce using rule 72 (arg -> primary .)
    GREATERTHANEQUAL reduce using rule 72 (arg -> primary .)
    LESSERTHAN      reduce using rule 72 (arg -> primary .)
    LESSERTHANEQUAL reduce using rule 72 (arg -> primary .)
    EQUAL           reduce using rule 72 (arg -> primary .)
    CASE_EQUALITY   reduce using rule 72 (arg -> primary .)
    NOTEQUAL        reduce using rule 72 (arg -> primary .)
    MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 72 (arg -> primary .)
    BINARY_LEFT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 72 (arg -> primary .)
    AND             reduce using rule 72 (arg -> primary .)
    OR              reduce using rule 72 (arg -> primary .)
    HASH_ROCKET     reduce using rule 72 (arg -> primary .)
    RBRACKET        reduce using rule 72 (arg -> primary .)


state 472

    (111) primary -> CASE compstmt when ELSE compstmt . END

    END             shift and go to state 509


state 473

    (126) when -> when WHEN when_args . then compstmt
    (134) then -> . TERM
    (135) then -> . THEN
    (136) then -> . TERM THEN

    TERM            shift and go to state 247
    THEN            shift and go to state 248

    then                           shift and go to state 510

state 474

    (125) when -> WHEN when_args then . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 511
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 475

    (132) when_args -> args COMMA . TIMES arg

    TIMES           shift and go to state 512


state 476

    (133) when_args -> TIMES arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

    TERM            reduce using rule 133 (when_args -> TIMES arg .)
    THEN            reduce using rule 133 (when_args -> TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190


state 477

    (112) primary -> FOR block_var IN expr do . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 513
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 478

    (118) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt . END

    END             shift and go to state 514


state 479

    (120) primary -> DEF fname argdecl compstmt END .

    LBRACKET        reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    DOT             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    PLUS            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    MINUS           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    TIMES           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    DIVIDE          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    MOD             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    POW             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    EQUAL           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    AND             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    OR              reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    IF              reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    WHILE           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    UNLESS          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    UNTIL           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    TERM            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    NUMBER          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    LPAREN          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    $end            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    COMMA           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RBRACKET        reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    THEN            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    DO              reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RESCUE          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RKEY            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RPAREN          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    WHEN            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    LKEY            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    END             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    ELSIF           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    ELSE            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    ENSURE          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    RETURN          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    YIELD           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    CASE            reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    FOR             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    BEGIN           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    CLASS           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    MODULE          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    DEF             reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    SYMBOL          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    STRING          reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)
    SUPER           reduce using rule 120 (primary -> DEF fname argdecl compstmt END .)


state 480

    (162) argdecl -> LPAREN arglist RPAREN .

    LBRACKET        reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    UNDEF           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    ALIAS           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    BEGIN           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    END             reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    RETURN          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    YIELD           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    NOT             reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    NOT_SYMBOL      reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    SUPER           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    VAR_GLOBAL      reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    VAR_LOCAL       reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    VAR_INSTANCE    reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    VAR_CLASS       reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    LPAREN          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    UNARY_OP        reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    LKEY            reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    DEFINED_OP      reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    IF              reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    UNLESS          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    WHILE           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    UNTIL           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    CASE            reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    FOR             reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    CLASS           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    MODULE          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    DEF             reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    TIMES           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    PLUS            reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    MINUS           reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    COMPLEMENT_OP   reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    IDENTIFIER      reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    NUMBER          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    SYMBOL          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)
    STRING          reduce using rule 162 (argdecl -> LPAREN arglist RPAREN .)


state 481

    (165) arglist -> IDENTIFIER COMMA IDENTIFIER .

    TERM            reduce using rule 165 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    NUMBER          reduce using rule 165 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    LPAREN          reduce using rule 165 (arglist -> IDENTIFIER COMMA IDENTIFIER .)
    RPAREN          reduce using rule 165 (arglist -> IDENTIFIER COMMA IDENTIFIER .)


state 482

    (166) arglist -> IDENTIFIER COMMA & . IDENTIFIER

    IDENTIFIER      shift and go to state 515


state 483

    (121) primary -> DEF singleton DOT fname argdecl . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 516
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 484

    (122) primary -> DEF singleton UNARY_OP fname argdecl . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 517
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 485

    (159) mlhs_item -> LPAREN . mlhs RPAREN
    (241) factor -> LPAREN . expression RPAREN
    (77) primary -> LPAREN . compstmt RPAREN
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (234) expression -> . expression PLUS term
    (235) expression -> . expression MINUS term
    (236) expression -> . term
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (140) term -> . TERM
    (237) term -> . term TIMES factor
    (238) term -> . term DIVIDE factor
    (239) term -> . factor
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (240) factor -> . NUMBER
    (241) factor -> . LPAREN expression RPAREN
    (27) call -> . function
    (28) call -> . command
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 44
    LPAREN          shift and go to state 485
    TERM            shift and go to state 56
    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    NUMBER          shift and go to state 349
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    SUPER           shift and go to state 31
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74

    mlhs                           shift and go to state 194
    expression                     shift and go to state 224
    compstmt                       shift and go to state 193
    mlhs_item                      shift and go to state 43
    lhs                            shift and go to state 252
    term                           shift and go to state 225
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    factor                         shift and go to state 57
    call                           shift and go to state 5
    command                        shift and go to state 17
    variable                       shift and go to state 19
    primary                        shift and go to state 253
    function                       shift and go to state 18
    arg                            shift and go to state 27
    literal                        shift and go to state 36
    operation                      shift and go to state 28

state 486

    (7) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt . END

    END             shift and go to state 518


state 487

    (104) primary -> IF expr then compstmt elsif END .

    LBRACKET        reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    DOT             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    UNARY_OP        reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RANGE_INCLUSIVE reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RANGE_EXCLUSIVE reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    PLUS            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    MINUS           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    TIMES           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    DIVIDE          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    MOD             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    POW             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    OR_SYMBOL       reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    BINARY_XOR_OP   reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    BINARY_AND_OP   reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    COMBINED_COMPARISON_OP reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    GREATERTHAN     reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    GREATERTHANEQUAL reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    LESSERTHAN      reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    LESSERTHANEQUAL reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    EQUAL           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    CASE_EQUALITY   reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    NOTEQUAL        reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    MATCHED_STRINGS_OP reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    AND             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    OR              reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    IF              reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    WHILE           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    UNLESS          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    UNTIL           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    TERM            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    NUMBER          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    LPAREN          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    $end            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    COMMA           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RBRACKET        reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    THEN            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    DO              reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RESCUE          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    HASH_ROCKET     reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RKEY            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RPAREN          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    WHEN            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    LKEY            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    END             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    ELSIF           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    ELSE            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    ENSURE          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    NOT_SYMBOL      reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    COMPLEMENT_OP   reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    DEFINED_OP      reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    RETURN          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    YIELD           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    CASE            reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    FOR             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    BEGIN           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    CLASS           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    MODULE          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    DEF             reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    VAR_GLOBAL      reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    VAR_LOCAL       reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    VAR_INSTANCE    reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    VAR_CLASS       reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    SYMBOL          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    STRING          reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    IDENTIFIER      reduce using rule 104 (primary -> IF expr then compstmt elsif END .)
    SUPER           reduce using rule 104 (primary -> IF expr then compstmt elsif END .)


state 488

    (105) primary -> IF expr then compstmt elsif ELSE . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 519
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 489

    (123) elsif -> ELSIF expr . then compstmt
    (124) elsif -> ELSIF expr . then compstmt elsif
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (134) then -> . TERM
    (135) then -> . THEN
    (136) then -> . TERM THEN

    AND             shift and go to state 60
    OR              shift and go to state 61
    TERM            shift and go to state 247
    THEN            shift and go to state 248

    then                           shift and go to state 520

state 490

    (107) primary -> UNLESS expr then compstmt ELSE compstmt . END

    END             shift and go to state 521


state 491

    (114) primary -> BEGIN compstmt rescue ELSE compstmt END .

    LBRACKET        reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DOT             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNARY_OP        reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    PLUS            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MINUS           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    TIMES           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DIVIDE          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MOD             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    POW             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    GREATERTHAN     reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LESSERTHAN      reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    EQUAL           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NOTEQUAL        reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    AND             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    OR              reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    IF              reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    WHILE           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNLESS          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    UNTIL           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    TERM            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NUMBER          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LPAREN          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    $end            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMMA           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RBRACKET        reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    THEN            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DO              reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RESCUE          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RKEY            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RPAREN          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    WHEN            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    LKEY            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    END             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ELSIF           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ELSE            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    ENSURE          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DEFINED_OP      reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    RETURN          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    YIELD           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CASE            reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    FOR             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    BEGIN           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    CLASS           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    MODULE          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    DEF             reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    VAR_CLASS       reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    SYMBOL          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    STRING          reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    IDENTIFIER      reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)
    SUPER           reduce using rule 114 (primary -> BEGIN compstmt rescue ELSE compstmt END .)


state 492

    (116) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE . compstmt END
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 522
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 493

    (115) primary -> BEGIN compstmt rescue ENSURE compstmt END .

    LBRACKET        reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DOT             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNARY_OP        reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    PLUS            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MINUS           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    TIMES           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DIVIDE          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MOD             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    POW             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OR_SYMBOL       reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_XOR_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_AND_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    GREATERTHAN     reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    GREATERTHANEQUAL reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LESSERTHAN      reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LESSERTHANEQUAL reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    EQUAL           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CASE_EQUALITY   reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NOTEQUAL        reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    AND             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    OR              reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    IF              reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    WHILE           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNLESS          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    UNTIL           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    TERM            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NUMBER          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LPAREN          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    $end            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMMA           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RBRACKET        reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    THEN            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DO              reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RESCUE          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    HASH_ROCKET     reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RKEY            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RPAREN          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    WHEN            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    LKEY            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    END             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ELSIF           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ELSE            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    ENSURE          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    NOT_SYMBOL      reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    COMPLEMENT_OP   reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DEFINED_OP      reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    RETURN          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    YIELD           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CASE            reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    FOR             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    BEGIN           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    CLASS           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    MODULE          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    DEF             reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_GLOBAL      reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_LOCAL       reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_INSTANCE    reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    VAR_CLASS       reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    SYMBOL          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    STRING          reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    IDENTIFIER      reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)
    SUPER           reduce using rule 115 (primary -> BEGIN compstmt rescue ENSURE compstmt END .)


state 494

    (129) rescue -> rescue RESCUE args do . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 523
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 495

    (130) rescue -> rescue RESCUE do compstmt .

    END             reduce using rule 130 (rescue -> rescue RESCUE do compstmt .)
    ELSE            reduce using rule 130 (rescue -> rescue RESCUE do compstmt .)
    ENSURE          reduce using rule 130 (rescue -> rescue RESCUE do compstmt .)
    RESCUE          reduce using rule 130 (rescue -> rescue RESCUE do compstmt .)


state 496

    (127) rescue -> RESCUE args do compstmt .

    END             reduce using rule 127 (rescue -> RESCUE args do compstmt .)
    ELSE            reduce using rule 127 (rescue -> RESCUE args do compstmt .)
    ENSURE          reduce using rule 127 (rescue -> RESCUE args do compstmt .)
    RESCUE          reduce using rule 127 (rescue -> RESCUE args do compstmt .)


state 497

    (16) stmt -> lhs = command LBRACKET do LBRACKET . OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET

    OR_SYMBOL       shift and go to state 524


state 498

    (101) primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .

    LBRACKET        reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DOT             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNARY_OP        reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    PLUS            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MINUS           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    TIMES           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DIVIDE          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MOD             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    POW             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OR_SYMBOL       reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    GREATERTHAN     reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LESSERTHAN      reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    EQUAL           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NOTEQUAL        reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    AND             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    OR              reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    IF              reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    WHILE           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNLESS          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    UNTIL           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    TERM            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NUMBER          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LPAREN          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    $end            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMMA           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RBRACKET        reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    THEN            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DO              reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RESCUE          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    HASH_ROCKET     reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RKEY            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RPAREN          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    WHEN            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    LKEY            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    END             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ELSIF           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ELSE            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    ENSURE          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DEFINED_OP      reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    RETURN          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    YIELD           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CASE            reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    FOR             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    BEGIN           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    CLASS           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    MODULE          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    DEF             reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_LOCAL       reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    VAR_CLASS       reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    SYMBOL          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    STRING          reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    IDENTIFIER      reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)
    SUPER           reduce using rule 101 (primary -> function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY .)


state 499

    (102) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt . LKEY

    LKEY            shift and go to state 525


state 500

    (34) function -> primary DOT operation LPAREN call_args RPAREN .

    LKEY            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DO              reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    TERM            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DOT             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    PLUS            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MINUS           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    TIMES           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MOD             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    POW             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    AND             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    OR              reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    IF              reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    WHILE           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    $end            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMMA           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    THEN            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RKEY            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    WHEN            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    END             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ELSE            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    RETURN          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    YIELD           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CASE            reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    FOR             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    CLASS           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    MODULE          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    DEF             reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    STRING          reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)
    SUPER           reduce using rule 34 (function -> primary DOT operation LPAREN call_args RPAREN .)


state 501

    (35) function -> primary UNARY_OP operation LPAREN call_args RPAREN .

    LKEY            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DO              reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    TERM            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NUMBER          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DOT             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNARY_OP        reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RANGE_INCLUSIVE reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    PLUS            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MINUS           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    TIMES           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MOD             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    POW             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OR_SYMBOL       reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_XOR_OP   reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_AND_OP   reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMBINED_COMPARISON_OP reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    GREATERTHAN     reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    GREATERTHANEQUAL reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LESSERTHAN      reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    LESSERTHANEQUAL reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CASE_EQUALITY   reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MATCHED_STRINGS_OP reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_LEFT_SHIFT_OP reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    AND             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    OR              reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    IF              reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    WHILE           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNLESS          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    UNTIL           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    $end            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMMA           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    THEN            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RESCUE          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    HASH_ROCKET     reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RKEY            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    WHEN            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    END             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ELSIF           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ELSE            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    ENSURE          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    NOT_SYMBOL      reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    COMPLEMENT_OP   reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DEFINED_OP      reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    RETURN          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    YIELD           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CASE            reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    FOR             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    BEGIN           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    CLASS           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    MODULE          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    DEF             reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_GLOBAL      reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_LOCAL       reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_INSTANCE    reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    VAR_CLASS       reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    SYMBOL          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    STRING          reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)
    SUPER           reduce using rule 35 (function -> primary UNARY_OP operation LPAREN call_args RPAREN .)


state 502

    (176) call_args -> args COMMA assocs COMMA TIMES . arg
    (179) call_args -> args COMMA assocs COMMA TIMES . arg COMMA BINARY_AND_OP arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 526
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 503

    (177) call_args -> args COMMA assocs COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 527
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 504

    (178) call_args -> args COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 528


state 505

    (183) call_args -> assocs COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 529


state 506

    (185) call_args -> TIMES arg COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 185 (call_args -> TIMES arg COMMA BINARY_AND_OP arg .) ]


state 507

    (33) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET . RPAREN RBRACKET

    RPAREN          shift and go to state 530


state 508

    (86) primary -> LBRACKET args COMMA . RBRACKET
    (173) call_args -> args COMMA . assocs
    (174) call_args -> args COMMA . TIMES arg
    (175) call_args -> args COMMA . BINARY_AND_OP arg
    (176) call_args -> args COMMA . assocs COMMA TIMES arg
    (177) call_args -> args COMMA . assocs COMMA BINARY_AND_OP arg
    (178) call_args -> args COMMA . TIMES arg COMMA BINARY_AND_OP arg
    (179) call_args -> args COMMA . assocs COMMA TIMES arg COMMA BINARY_AND_OP arg
    (169) assocs -> . assoc
    (170) assocs -> . assoc COMMA assoc
    (171) assoc -> . arg HASH_ROCKET arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    RBRACKET        shift and go to state 357
    TIMES           shift and go to state 404
    BINARY_AND_OP   shift and go to state 405
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    assocs                         shift and go to state 403
    arg                            shift and go to state 387
    assoc                          shift and go to state 128
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 509

    (111) primary -> CASE compstmt when ELSE compstmt END .

    LBRACKET        reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    DOT             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    UNARY_OP        reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    PLUS            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    MINUS           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    TIMES           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    DIVIDE          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    MOD             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    POW             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    GREATERTHAN     reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    LESSERTHAN      reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    EQUAL           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    NOTEQUAL        reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    AND             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    OR              reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    IF              reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    WHILE           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    UNLESS          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    UNTIL           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    TERM            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    NUMBER          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    LPAREN          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    $end            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    COMMA           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RBRACKET        reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    THEN            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    DO              reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RESCUE          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RKEY            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RPAREN          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    WHEN            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    LKEY            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    END             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    ELSIF           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    ELSE            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    ENSURE          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    DEFINED_OP      reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    RETURN          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    YIELD           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    CASE            reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    FOR             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    BEGIN           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    CLASS           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    MODULE          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    DEF             reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    VAR_CLASS       reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    SYMBOL          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    STRING          reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    IDENTIFIER      reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)
    SUPER           reduce using rule 111 (primary -> CASE compstmt when ELSE compstmt END .)


state 510

    (126) when -> when WHEN when_args then . compstmt
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    compstmt                       shift and go to state 531
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 511

    (125) when -> WHEN when_args then compstmt .

    END             reduce using rule 125 (when -> WHEN when_args then compstmt .)
    ELSE            reduce using rule 125 (when -> WHEN when_args then compstmt .)
    WHEN            reduce using rule 125 (when -> WHEN when_args then compstmt .)


state 512

    (132) when_args -> args COMMA TIMES . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 532
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 513

    (112) primary -> FOR block_var IN expr do compstmt . END

    END             shift and go to state 533


state 514

    (118) primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .

    LBRACKET        reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DOT             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNARY_OP        reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RANGE_INCLUSIVE reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    PLUS            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MINUS           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    TIMES           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DIVIDE          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MOD             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    POW             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OR_SYMBOL       reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_XOR_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_AND_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    GREATERTHAN     reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    GREATERTHANEQUAL reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LESSERTHAN      reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LESSERTHANEQUAL reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    EQUAL           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CASE_EQUALITY   reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NOTEQUAL        reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    AND             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    OR              reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    IF              reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    WHILE           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNLESS          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    UNTIL           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    TERM            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NUMBER          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LPAREN          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    $end            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMMA           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RBRACKET        reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    THEN            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DO              reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RESCUE          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    HASH_ROCKET     reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RKEY            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RPAREN          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    WHEN            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    LKEY            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    END             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ELSIF           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ELSE            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    ENSURE          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    NOT_SYMBOL      reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    COMPLEMENT_OP   reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DEFINED_OP      reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    RETURN          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    YIELD           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CASE            reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    FOR             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    BEGIN           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    CLASS           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    MODULE          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    DEF             reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_GLOBAL      reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_LOCAL       reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_INSTANCE    reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    VAR_CLASS       reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    SYMBOL          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    STRING          reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    IDENTIFIER      reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)
    SUPER           reduce using rule 118 (primary -> CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END .)


state 515

    (166) arglist -> IDENTIFIER COMMA & IDENTIFIER .

    TERM            reduce using rule 166 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    NUMBER          reduce using rule 166 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    LPAREN          reduce using rule 166 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)
    RPAREN          reduce using rule 166 (arglist -> IDENTIFIER COMMA & IDENTIFIER .)


state 516

    (121) primary -> DEF singleton DOT fname argdecl compstmt . END

    END             shift and go to state 534


state 517

    (122) primary -> DEF singleton UNARY_OP fname argdecl compstmt . END

    END             shift and go to state 535


state 518

    (7) stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .

    IF              reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    WHILE           reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    UNLESS          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    UNTIL           reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    TERM            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    NUMBER          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LPAREN          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    $end            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RESCUE          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RPAREN          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    WHEN            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    RKEY            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    LKEY            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    END             reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ELSIF           reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ELSE            reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)
    ENSURE          reduce using rule 7 (stmt -> LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END .)


state 519

    (105) primary -> IF expr then compstmt elsif ELSE compstmt . END

    END             shift and go to state 536


state 520

    (123) elsif -> ELSIF expr then . compstmt
    (124) elsif -> ELSIF expr then . compstmt elsif
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    expr                           shift and go to state 4
    compstmt                       shift and go to state 537
    stmt                           shift and go to state 3
    call                           shift and go to state 5
    lhs                            shift and go to state 16
    command                        shift and go to state 17
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 521

    (107) primary -> UNLESS expr then compstmt ELSE compstmt END .

    LBRACKET        reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DOT             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNARY_OP        reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    PLUS            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MINUS           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    TIMES           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DIVIDE          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MOD             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    POW             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    GREATERTHAN     reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LESSERTHAN      reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    EQUAL           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NOTEQUAL        reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    AND             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    OR              reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    IF              reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    WHILE           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNLESS          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    UNTIL           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    TERM            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NUMBER          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LPAREN          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    $end            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMMA           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RBRACKET        reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    THEN            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DO              reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RESCUE          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RKEY            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RPAREN          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    WHEN            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    LKEY            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    END             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ELSIF           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ELSE            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    ENSURE          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DEFINED_OP      reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    RETURN          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    YIELD           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CASE            reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    FOR             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    BEGIN           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    CLASS           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    MODULE          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    DEF             reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    VAR_CLASS       reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    SYMBOL          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    STRING          reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    IDENTIFIER      reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)
    SUPER           reduce using rule 107 (primary -> UNLESS expr then compstmt ELSE compstmt END .)


state 522

    (116) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt . END

    END             shift and go to state 538


state 523

    (129) rescue -> rescue RESCUE args do compstmt .

    END             reduce using rule 129 (rescue -> rescue RESCUE args do compstmt .)
    ELSE            reduce using rule 129 (rescue -> rescue RESCUE args do compstmt .)
    ENSURE          reduce using rule 129 (rescue -> rescue RESCUE args do compstmt .)
    RESCUE          reduce using rule 129 (rescue -> rescue RESCUE args do compstmt .)


state 524

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL . block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (150) block_var -> . lhs
    (151) block_var -> . mlhs
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    TIMES           shift and go to state 44
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    DEFINED_OP      shift and go to state 205
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    lhs                            shift and go to state 203
    block_var                      shift and go to state 539
    mlhs                           shift and go to state 71
    variable                       shift and go to state 19
    primary                        shift and go to state 204
    mlhs_item                      shift and go to state 43
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 525

    (102) primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .

    LBRACKET        reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DOT             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNARY_OP        reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RANGE_INCLUSIVE reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RANGE_EXCLUSIVE reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    PLUS            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MINUS           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    TIMES           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DIVIDE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MOD             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    POW             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OR_SYMBOL       reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_XOR_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_AND_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMBINED_COMPARISON_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    GREATERTHAN     reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    GREATERTHANEQUAL reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LESSERTHAN      reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LESSERTHANEQUAL reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    EQUAL           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CASE_EQUALITY   reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NOTEQUAL        reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MATCHED_STRINGS_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_LEFT_SHIFT_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    AND             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    OR              reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    IF              reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    WHILE           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNLESS          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    UNTIL           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    TERM            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NUMBER          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LPAREN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    $end            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMMA           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RBRACKET        reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    THEN            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DO              reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RESCUE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    HASH_ROCKET     reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RKEY            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RPAREN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    WHEN            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    LKEY            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    END             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ELSIF           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ELSE            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    ENSURE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    NOT_SYMBOL      reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    COMPLEMENT_OP   reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DEFINED_OP      reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    RETURN          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    YIELD           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CASE            reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    FOR             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    BEGIN           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    CLASS           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    MODULE          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    DEF             reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_GLOBAL      reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_LOCAL       reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_INSTANCE    reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    VAR_CLASS       reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    SYMBOL          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    STRING          reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    IDENTIFIER      reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)
    SUPER           reduce using rule 102 (primary -> function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY .)


state 526

    (176) call_args -> args COMMA assocs COMMA TIMES arg .
    (179) call_args -> args COMMA assocs COMMA TIMES arg . COMMA BINARY_AND_OP arg
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    WHILE           reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    UNLESS          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    UNTIL           reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    TERM            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    NUMBER          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    LPAREN          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    $end            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    THEN            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    DO              reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RESCUE          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RPAREN          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    WHEN            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RKEY            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    LKEY            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    END             reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ELSIF           reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ELSE            reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    ENSURE          reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    LBRACKET        reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    RBRACKET        reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .)
    COMMA           shift and go to state 540
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .) ]
  ! OR              [ reduce using rule 176 (call_args -> args COMMA assocs COMMA TIMES arg .) ]


state 527

    (177) call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    END             reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 177 (call_args -> args COMMA assocs COMMA BINARY_AND_OP arg .) ]


state 528

    (178) call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 541
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 529

    (183) call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 542
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 530

    (33) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN . RBRACKET

    RBRACKET        shift and go to state 543


state 531

    (126) when -> when WHEN when_args then compstmt .

    END             reduce using rule 126 (when -> when WHEN when_args then compstmt .)
    ELSE            reduce using rule 126 (when -> when WHEN when_args then compstmt .)
    WHEN            reduce using rule 126 (when -> when WHEN when_args then compstmt .)


state 532

    (132) when_args -> args COMMA TIMES arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

    TERM            reduce using rule 132 (when_args -> args COMMA TIMES arg .)
    THEN            reduce using rule 132 (when_args -> args COMMA TIMES arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190


state 533

    (112) primary -> FOR block_var IN expr do compstmt END .

    LBRACKET        reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    DOT             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    UNARY_OP        reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RANGE_INCLUSIVE reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    PLUS            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    MINUS           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    TIMES           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    DIVIDE          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    MOD             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    POW             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    OR_SYMBOL       reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_XOR_OP   reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_AND_OP   reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    GREATERTHAN     reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    GREATERTHANEQUAL reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    LESSERTHAN      reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    LESSERTHANEQUAL reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    EQUAL           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    CASE_EQUALITY   reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    NOTEQUAL        reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    AND             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    OR              reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    IF              reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    WHILE           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    UNLESS          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    UNTIL           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    TERM            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    NUMBER          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    LPAREN          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    $end            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    COMMA           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RBRACKET        reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    THEN            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    DO              reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RESCUE          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    HASH_ROCKET     reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RKEY            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RPAREN          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    WHEN            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    LKEY            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    END             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    ELSIF           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    ELSE            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    ENSURE          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    NOT_SYMBOL      reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    COMPLEMENT_OP   reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    DEFINED_OP      reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    RETURN          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    YIELD           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    CASE            reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    FOR             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    BEGIN           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    CLASS           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    MODULE          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    DEF             reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_GLOBAL      reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_LOCAL       reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_INSTANCE    reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    VAR_CLASS       reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    SYMBOL          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    STRING          reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    IDENTIFIER      reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)
    SUPER           reduce using rule 112 (primary -> FOR block_var IN expr do compstmt END .)


state 534

    (121) primary -> DEF singleton DOT fname argdecl compstmt END .

    LBRACKET        reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DOT             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    PLUS            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MINUS           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    TIMES           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DIVIDE          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MOD             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    POW             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    EQUAL           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    AND             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    OR              reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    IF              reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    WHILE           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNLESS          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    UNTIL           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    TERM            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NUMBER          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LPAREN          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    $end            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMMA           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RBRACKET        reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    THEN            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DO              reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RESCUE          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RKEY            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RPAREN          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    WHEN            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    LKEY            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    END             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ELSIF           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ELSE            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    ENSURE          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    RETURN          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    YIELD           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CASE            reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    FOR             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    BEGIN           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    CLASS           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    MODULE          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    DEF             reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    SYMBOL          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    STRING          reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)
    SUPER           reduce using rule 121 (primary -> DEF singleton DOT fname argdecl compstmt END .)


state 535

    (122) primary -> DEF singleton UNARY_OP fname argdecl compstmt END .

    LBRACKET        reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DOT             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNARY_OP        reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RANGE_INCLUSIVE reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    PLUS            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MINUS           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    TIMES           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DIVIDE          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MOD             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    POW             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OR_SYMBOL       reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_XOR_OP   reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_AND_OP   reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    GREATERTHAN     reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    GREATERTHANEQUAL reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LESSERTHAN      reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LESSERTHANEQUAL reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    EQUAL           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CASE_EQUALITY   reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NOTEQUAL        reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    AND             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    OR              reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    IF              reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    WHILE           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNLESS          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    UNTIL           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    TERM            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NUMBER          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LPAREN          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    $end            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMMA           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RBRACKET        reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    THEN            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DO              reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RESCUE          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    HASH_ROCKET     reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RKEY            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RPAREN          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    WHEN            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    LKEY            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    END             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ELSIF           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ELSE            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    ENSURE          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    NOT_SYMBOL      reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    COMPLEMENT_OP   reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DEFINED_OP      reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    RETURN          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    YIELD           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CASE            reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    FOR             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    BEGIN           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    CLASS           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    MODULE          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    DEF             reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_GLOBAL      reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_LOCAL       reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_INSTANCE    reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    VAR_CLASS       reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    SYMBOL          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    STRING          reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    IDENTIFIER      reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)
    SUPER           reduce using rule 122 (primary -> DEF singleton UNARY_OP fname argdecl compstmt END .)


state 536

    (105) primary -> IF expr then compstmt elsif ELSE compstmt END .

    LBRACKET        reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DOT             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNARY_OP        reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    PLUS            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MINUS           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    TIMES           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DIVIDE          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MOD             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    POW             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OR_SYMBOL       reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_XOR_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_AND_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    GREATERTHAN     reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    GREATERTHANEQUAL reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LESSERTHAN      reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LESSERTHANEQUAL reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    EQUAL           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CASE_EQUALITY   reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NOTEQUAL        reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    AND             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    OR              reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    IF              reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    WHILE           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNLESS          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    UNTIL           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    TERM            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NUMBER          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LPAREN          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    $end            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMMA           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RBRACKET        reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    THEN            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DO              reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RESCUE          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    HASH_ROCKET     reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RKEY            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RPAREN          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    WHEN            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    LKEY            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    END             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ELSIF           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ELSE            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    ENSURE          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    NOT_SYMBOL      reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    COMPLEMENT_OP   reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DEFINED_OP      reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    RETURN          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    YIELD           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CASE            reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    FOR             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    BEGIN           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    CLASS           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    MODULE          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    DEF             reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_GLOBAL      reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_LOCAL       reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_INSTANCE    reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    VAR_CLASS       reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    SYMBOL          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    STRING          reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    IDENTIFIER      reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)
    SUPER           reduce using rule 105 (primary -> IF expr then compstmt elsif ELSE compstmt END .)


state 537

    (123) elsif -> ELSIF expr then compstmt .
    (124) elsif -> ELSIF expr then compstmt . elsif
    (123) elsif -> . ELSIF expr then compstmt
    (124) elsif -> . ELSIF expr then compstmt elsif

    END             reduce using rule 123 (elsif -> ELSIF expr then compstmt .)
    ELSE            reduce using rule 123 (elsif -> ELSIF expr then compstmt .)
    ELSIF           shift and go to state 446

    elsif                          shift and go to state 544

state 538

    (116) primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .

    LBRACKET        reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DOT             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNARY_OP        reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RANGE_INCLUSIVE reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RANGE_EXCLUSIVE reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    PLUS            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MINUS           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    TIMES           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DIVIDE          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MOD             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    POW             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OR_SYMBOL       reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_XOR_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_AND_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMBINED_COMPARISON_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    GREATERTHAN     reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    GREATERTHANEQUAL reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LESSERTHAN      reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LESSERTHANEQUAL reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    EQUAL           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CASE_EQUALITY   reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NOTEQUAL        reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MATCHED_STRINGS_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_LEFT_SHIFT_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    AND             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    OR              reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    IF              reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    WHILE           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNLESS          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    UNTIL           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    TERM            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NUMBER          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LPAREN          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    $end            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMMA           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RBRACKET        reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    THEN            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DO              reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RESCUE          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    HASH_ROCKET     reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RKEY            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RPAREN          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    WHEN            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    LKEY            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    END             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ELSIF           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ELSE            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    ENSURE          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    NOT_SYMBOL      reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    COMPLEMENT_OP   reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DEFINED_OP      reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    RETURN          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    YIELD           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CASE            reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    FOR             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    BEGIN           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    CLASS           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    MODULE          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    DEF             reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_GLOBAL      reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_LOCAL       reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_INSTANCE    reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    VAR_CLASS       reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    SYMBOL          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    STRING          reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    IDENTIFIER      reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)
    SUPER           reduce using rule 116 (primary -> BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END .)


state 539

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var . OR_SYMBOL RBRACKET compstmt END RBRACKET

    OR_SYMBOL       shift and go to state 545


state 540

    (179) call_args -> args COMMA assocs COMMA TIMES arg COMMA . BINARY_AND_OP arg

    BINARY_AND_OP   shift and go to state 546


state 541

    (178) call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 178 (call_args -> args COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 542

    (183) call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 183 (call_args -> assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 543

    (33) function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .

    LKEY            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DO              reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    TERM            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NUMBER          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LPAREN          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LBRACKET        reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DOT             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNARY_OP        reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    PLUS            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MINUS           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    TIMES           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DIVIDE          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MOD             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    POW             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OR_SYMBOL       reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_XOR_OP   reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_AND_OP   reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMBINED_COMPARISON_OP reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    GREATERTHAN     reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    GREATERTHANEQUAL reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LESSERTHAN      reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    LESSERTHANEQUAL reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    EQUAL           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CASE_EQUALITY   reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NOTEQUAL        reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MATCHED_STRINGS_OP reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OPPOSITE_MATCHED_STRINGS_OP reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_LEFT_SHIFT_OP reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BINARY_RIGHT_SHIFT_OP reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    AND             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    OR              reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    IF              reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    WHILE           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNLESS          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    UNTIL           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    $end            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMMA           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RBRACKET        reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    THEN            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RESCUE          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    HASH_ROCKET     reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RKEY            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RPAREN          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    WHEN            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    END             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ELSIF           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ELSE            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    ENSURE          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    NOT_SYMBOL      reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    COMPLEMENT_OP   reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DEFINED_OP      reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    RETURN          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    YIELD           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CASE            reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    FOR             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    BEGIN           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    CLASS           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    MODULE          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    DEF             reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_GLOBAL      reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_LOCAL       reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_INSTANCE    reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    VAR_CLASS       reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    SYMBOL          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    STRING          reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    IDENTIFIER      reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)
    SUPER           reduce using rule 33 (function -> operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET .)


state 544

    (124) elsif -> ELSIF expr then compstmt elsif .

    END             reduce using rule 124 (elsif -> ELSIF expr then compstmt elsif .)
    ELSE            reduce using rule 124 (elsif -> ELSIF expr then compstmt elsif .)


state 545

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL . RBRACKET compstmt END RBRACKET

    RBRACKET        shift and go to state 547


state 546

    (179) call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP . arg
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    NOT_SYMBOL      shift and go to state 75
    COMPLEMENT_OP   shift and go to state 47
    DEFINED_OP      shift and go to state 76
    LPAREN          shift and go to state 131
    UNARY_OP        shift and go to state 30
    LBRACKET        shift and go to state 65
    LKEY            shift and go to state 15
    RETURN          shift and go to state 77
    YIELD           shift and go to state 78
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    BEGIN           shift and go to state 80
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50
    IDENTIFIER      shift and go to state 74
    SUPER           shift and go to state 82

    arg                            shift and go to state 548
    lhs                            shift and go to state 129
    primary                        shift and go to state 130
    variable                       shift and go to state 19
    literal                        shift and go to state 36
    function                       shift and go to state 79
    operation                      shift and go to state 81

state 547

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET . compstmt END RBRACKET
    (2) compstmt -> . stmt
    (3) compstmt -> . stmt term
    (4) compstmt -> . stmt term expr term
    (5) stmt -> . call do LBRACKET RBRACKET
    (6) stmt -> . LBRACKET block_var RBRACKET
    (7) stmt -> . LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END
    (8) stmt -> . UNDEF fname
    (9) stmt -> . ALIAS fname fname
    (10) stmt -> . stmt IF expr
    (11) stmt -> . stmt WHILE expr
    (12) stmt -> . stmt UNLESS expr
    (13) stmt -> . stmt UNTIL expr
    (14) stmt -> . BEGIN LKEY compstmt RKEY
    (15) stmt -> . END LKEY compstmt RKEY
    (16) stmt -> . lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET
    (17) stmt -> . expr
    (27) call -> . function
    (28) call -> . command
    (146) lhs -> . variable
    (147) lhs -> . primary LBRACKET RBRACKET
    (148) lhs -> . primary LBRACKET args RBRACKET
    (149) lhs -> . primary DOT IDENTIFIER
    (18) expr -> . mlhs = mrhs
    (19) expr -> . RETURN call_args
    (20) expr -> . YIELD call_args
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . command
    (25) expr -> . NOT_SYMBOL command
    (26) expr -> . arg
    (33) function -> . operation LBRACKET LPAREN LBRACKET call_args RBRACKET RPAREN RBRACKET
    (34) function -> . primary DOT operation LPAREN call_args RPAREN
    (35) function -> . primary UNARY_OP operation LPAREN call_args RPAREN
    (36) function -> . primary DOT operation
    (37) function -> . primary UNARY_OP operation
    (38) function -> . SUPER LPAREN call_args RPAREN
    (39) function -> . SUPER
    (29) command -> . operation call_args
    (30) command -> . primary DOT operation call_args
    (31) command -> . primary UNARY_OP operation call_args
    (32) command -> . SUPER call_args
    (73) variable -> . VAR_GLOBAL
    (74) variable -> . VAR_LOCAL
    (75) variable -> . VAR_INSTANCE
    (76) variable -> . VAR_CLASS
    (77) primary -> . LPAREN compstmt RPAREN
    (78) primary -> . literal
    (79) primary -> . variable
    (80) primary -> . primary UNARY_OP IDENTIFIER
    (81) primary -> . UNARY_OP IDENTIFIER
    (82) primary -> . primary LBRACKET RBRACKET
    (83) primary -> . primary LBRACKET args RBRACKET
    (84) primary -> . LBRACKET RBRACKET
    (85) primary -> . LBRACKET args RBRACKET
    (86) primary -> . LBRACKET args COMMA RBRACKET
    (87) primary -> . LKEY RKEY
    (88) primary -> . LKEY args RKEY
    (89) primary -> . LKEY assocs RKEY
    (90) primary -> . LKEY args COMMA RKEY
    (91) primary -> . LKEY assocs COMMA RKEY
    (92) primary -> . RETURN
    (93) primary -> . RETURN LPAREN RPAREN
    (94) primary -> . RETURN LPAREN call_args RPAREN
    (95) primary -> . YIELD
    (96) primary -> . YIELD LPAREN RPAREN
    (97) primary -> . YIELD LPAREN call_args RPAREN
    (98) primary -> . DEFINED_OP LPAREN arg LPAREN
    (99) primary -> . function
    (100) primary -> . function LKEY compstmt LKEY
    (101) primary -> . function LKEY OR_SYMBOL OR_SYMBOL compstmt LKEY
    (102) primary -> . function LKEY OR_SYMBOL block_var OR_SYMBOL compstmt LKEY
    (103) primary -> . IF expr then compstmt END
    (104) primary -> . IF expr then compstmt elsif END
    (105) primary -> . IF expr then compstmt elsif ELSE compstmt END
    (106) primary -> . UNLESS expr then compstmt END
    (107) primary -> . UNLESS expr then compstmt ELSE compstmt END
    (108) primary -> . WHILE expr do compstmt END
    (109) primary -> . UNTIL expr do compstmt END
    (110) primary -> . CASE compstmt when END
    (111) primary -> . CASE compstmt when ELSE compstmt END
    (112) primary -> . FOR block_var IN expr do compstmt END
    (113) primary -> . BEGIN compstmt rescue END
    (114) primary -> . BEGIN compstmt rescue ELSE compstmt END
    (115) primary -> . BEGIN compstmt rescue ENSURE compstmt END
    (116) primary -> . BEGIN compstmt rescue ELSE compstmt ENSURE compstmt END
    (117) primary -> . CLASS IDENTIFIER compstmt END
    (118) primary -> . CLASS IDENTIFIER LESSERTHAN IDENTIFIER compstmt END
    (119) primary -> . MODULE IDENTIFIER compstmt END
    (120) primary -> . DEF fname argdecl compstmt END
    (121) primary -> . DEF singleton DOT fname argdecl compstmt END
    (122) primary -> . DEF singleton UNARY_OP fname argdecl compstmt END
    (152) mlhs -> . mlhs_item COMMA mlhs_item TIMES
    (153) mlhs -> . mlhs_item COMMA mlhs_item lhs
    (154) mlhs -> . mlhs_item COMMA mult_mlhs_item TIMES
    (155) mlhs -> . mlhs_item COMMA mult_mlhs_item lhs
    (156) mlhs -> . TIMES lhs
    (40) arg -> . lhs = arg
    (41) arg -> . lhs op_asgn arg
    (42) arg -> . arg RANGE_INCLUSIVE arg
    (43) arg -> . arg RANGE_EXCLUSIVE arg
    (44) arg -> . arg PLUS arg
    (45) arg -> . arg MINUS arg
    (46) arg -> . arg TIMES arg
    (47) arg -> . arg DIVIDE arg
    (48) arg -> . arg MOD arg
    (49) arg -> . arg POW arg
    (50) arg -> . PLUS arg
    (51) arg -> . MINUS arg
    (52) arg -> . arg OR_SYMBOL arg
    (53) arg -> . arg BINARY_XOR_OP arg
    (54) arg -> . arg BINARY_AND_OP arg
    (55) arg -> . arg COMBINED_COMPARISON_OP arg
    (56) arg -> . arg GREATERTHAN arg
    (57) arg -> . arg GREATERTHANEQUAL arg
    (58) arg -> . arg LESSERTHAN arg
    (59) arg -> . arg LESSERTHANEQUAL arg
    (60) arg -> . arg EQUAL arg
    (61) arg -> . arg CASE_EQUALITY arg
    (62) arg -> . arg NOTEQUAL arg
    (63) arg -> . arg MATCHED_STRINGS_OP arg
    (64) arg -> . arg OPPOSITE_MATCHED_STRINGS_OP arg
    (65) arg -> . NOT_SYMBOL arg
    (66) arg -> . COMPLEMENT_OP arg
    (67) arg -> . arg BINARY_LEFT_SHIFT_OP arg
    (68) arg -> . arg BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> . arg AND arg
    (70) arg -> . arg OR arg
    (71) arg -> . DEFINED_OP arg
    (72) arg -> . primary
    (218) operation -> . IDENTIFIER
    (219) operation -> . IDENTIFIER NOT_SYMBOL
    (220) operation -> . IDENTIFIER OPTIONAL_SYMBOL
    (188) literal -> . NUMBER
    (189) literal -> . SYMBOL
    (190) literal -> . STRING
    (191) literal -> . IDENTIFIER
    (158) mlhs_item -> . lhs
    (159) mlhs_item -> . LPAREN mlhs RPAREN

    LBRACKET        shift and go to state 6
    UNDEF           shift and go to state 8
    ALIAS           shift and go to state 9
    BEGIN           shift and go to state 14
    END             shift and go to state 7
    RETURN          shift and go to state 23
    YIELD           shift and go to state 24
    NOT             shift and go to state 25
    NOT_SYMBOL      shift and go to state 26
    SUPER           shift and go to state 31
    VAR_GLOBAL      shift and go to state 32
    VAR_LOCAL       shift and go to state 33
    VAR_INSTANCE    shift and go to state 34
    VAR_CLASS       shift and go to state 35
    LPAREN          shift and go to state 29
    UNARY_OP        shift and go to state 30
    LKEY            shift and go to state 15
    DEFINED_OP      shift and go to state 37
    IF              shift and go to state 10
    UNLESS          shift and go to state 12
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 13
    CASE            shift and go to state 38
    FOR             shift and go to state 39
    CLASS           shift and go to state 40
    MODULE          shift and go to state 41
    DEF             shift and go to state 42
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    COMPLEMENT_OP   shift and go to state 47
    IDENTIFIER      shift and go to state 21
    NUMBER          shift and go to state 48
    SYMBOL          shift and go to state 49
    STRING          shift and go to state 50

    lhs                            shift and go to state 16
    command                        shift and go to state 17
    compstmt                       shift and go to state 549
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    call                           shift and go to state 5
    function                       shift and go to state 18
    variable                       shift and go to state 19
    primary                        shift and go to state 20
    mlhs                           shift and go to state 22
    arg                            shift and go to state 27
    operation                      shift and go to state 28
    literal                        shift and go to state 36
    mlhs_item                      shift and go to state 43

state 548

    (179) call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .
    (42) arg -> arg . RANGE_INCLUSIVE arg
    (43) arg -> arg . RANGE_EXCLUSIVE arg
    (44) arg -> arg . PLUS arg
    (45) arg -> arg . MINUS arg
    (46) arg -> arg . TIMES arg
    (47) arg -> arg . DIVIDE arg
    (48) arg -> arg . MOD arg
    (49) arg -> arg . POW arg
    (52) arg -> arg . OR_SYMBOL arg
    (53) arg -> arg . BINARY_XOR_OP arg
    (54) arg -> arg . BINARY_AND_OP arg
    (55) arg -> arg . COMBINED_COMPARISON_OP arg
    (56) arg -> arg . GREATERTHAN arg
    (57) arg -> arg . GREATERTHANEQUAL arg
    (58) arg -> arg . LESSERTHAN arg
    (59) arg -> arg . LESSERTHANEQUAL arg
    (60) arg -> arg . EQUAL arg
    (61) arg -> arg . CASE_EQUALITY arg
    (62) arg -> arg . NOTEQUAL arg
    (63) arg -> arg . MATCHED_STRINGS_OP arg
    (64) arg -> arg . OPPOSITE_MATCHED_STRINGS_OP arg
    (67) arg -> arg . BINARY_LEFT_SHIFT_OP arg
    (68) arg -> arg . BINARY_RIGHT_SHIFT_OP arg
    (69) arg -> arg . AND arg
    (70) arg -> arg . OR arg

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHILE           reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNLESS          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    UNTIL           reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    TERM            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    NUMBER          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LPAREN          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    $end            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    THEN            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    DO              reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RESCUE          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RPAREN          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    WHEN            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RKEY            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LKEY            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    END             reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSIF           reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ELSE            reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    ENSURE          reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    LBRACKET        reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RBRACKET        reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .)
    RANGE_INCLUSIVE shift and go to state 166
    RANGE_EXCLUSIVE shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    POW             shift and go to state 173
    OR_SYMBOL       shift and go to state 174
    BINARY_XOR_OP   shift and go to state 175
    BINARY_AND_OP   shift and go to state 176
    COMBINED_COMPARISON_OP shift and go to state 177
    GREATERTHAN     shift and go to state 178
    GREATERTHANEQUAL shift and go to state 179
    LESSERTHAN      shift and go to state 180
    LESSERTHANEQUAL shift and go to state 181
    EQUAL           shift and go to state 182
    CASE_EQUALITY   shift and go to state 183
    NOTEQUAL        shift and go to state 184
    MATCHED_STRINGS_OP shift and go to state 185
    OPPOSITE_MATCHED_STRINGS_OP shift and go to state 186
    BINARY_LEFT_SHIFT_OP shift and go to state 187
    BINARY_RIGHT_SHIFT_OP shift and go to state 188
    AND             shift and go to state 189
    OR              shift and go to state 190

  ! AND             [ reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]
  ! OR              [ reduce using rule 179 (call_args -> args COMMA assocs COMMA TIMES arg COMMA BINARY_AND_OP arg .) ]


state 549

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt . END RBRACKET

    END             shift and go to state 550


state 550

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END . RBRACKET

    RBRACKET        shift and go to state 551


state 551

    (16) stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .

    IF              reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    WHILE           reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    UNLESS          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    UNTIL           reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    TERM            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    NUMBER          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LPAREN          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    $end            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RESCUE          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RPAREN          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    WHEN            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    RKEY            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    LKEY            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    END             reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ELSIF           reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ELSE            reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)
    ENSURE          reduce using rule 16 (stmt -> lhs = command LBRACKET do LBRACKET OR_SYMBOL block_var OR_SYMBOL RBRACKET compstmt END RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LKEY in state 18 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 21 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 23 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 23 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 23 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 23 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 23 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 24 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 24 resolved as shift
WARNING: shift/reduce conflict for AND in state 27 resolved as shift
WARNING: shift/reduce conflict for OR in state 27 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 31 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 31 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 31 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 31 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 51 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 78 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 116 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 116 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 165 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for MOD in state 165 resolved as shift
WARNING: shift/reduce conflict for POW in state 165 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 165 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 165 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 200 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 200 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 200 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 200 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 200 resolved as shift
WARNING: shift/reduce conflict for MOD in state 200 resolved as shift
WARNING: shift/reduce conflict for POW in state 200 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 200 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 200 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 200 resolved as shift
WARNING: shift/reduce conflict for AND in state 200 resolved as shift
WARNING: shift/reduce conflict for OR in state 200 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 214 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 214 resolved as shift
WARNING: shift/reduce conflict for MOD in state 214 resolved as shift
WARNING: shift/reduce conflict for POW in state 214 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 214 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 214 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 214 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 214 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 214 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 214 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 214 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 214 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 214 resolved as shift
WARNING: shift/reduce conflict for AND in state 214 resolved as shift
WARNING: shift/reduce conflict for OR in state 214 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 215 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 215 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 215 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 215 resolved as shift
WARNING: shift/reduce conflict for MOD in state 215 resolved as shift
WARNING: shift/reduce conflict for POW in state 215 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 215 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 215 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 215 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 215 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 215 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 215 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 215 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 215 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 215 resolved as shift
WARNING: shift/reduce conflict for AND in state 215 resolved as shift
WARNING: shift/reduce conflict for OR in state 215 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 216 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 216 resolved as shift
WARNING: shift/reduce conflict for MOD in state 216 resolved as shift
WARNING: shift/reduce conflict for POW in state 216 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 216 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 216 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 216 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 216 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 216 resolved as shift
WARNING: shift/reduce conflict for AND in state 216 resolved as shift
WARNING: shift/reduce conflict for OR in state 216 resolved as shift
WARNING: shift/reduce conflict for AND in state 226 resolved as shift
WARNING: shift/reduce conflict for OR in state 226 resolved as shift
WARNING: shift/reduce conflict for AND in state 227 resolved as shift
WARNING: shift/reduce conflict for OR in state 227 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 258 resolved as shift
WARNING: shift/reduce conflict for AND in state 258 resolved as shift
WARNING: shift/reduce conflict for OR in state 258 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 270 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 270 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 270 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 270 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 270 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 270 resolved as shift
WARNING: shift/reduce conflict for MOD in state 270 resolved as shift
WARNING: shift/reduce conflict for POW in state 270 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 270 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 270 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 270 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 270 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 270 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 270 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 270 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 270 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 270 resolved as shift
WARNING: shift/reduce conflict for AND in state 270 resolved as shift
WARNING: shift/reduce conflict for OR in state 270 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 271 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 271 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 271 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 271 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 271 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 271 resolved as shift
WARNING: shift/reduce conflict for MOD in state 271 resolved as shift
WARNING: shift/reduce conflict for POW in state 271 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 271 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 271 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 271 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 271 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 271 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 271 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 271 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 271 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 271 resolved as shift
WARNING: shift/reduce conflict for AND in state 271 resolved as shift
WARNING: shift/reduce conflict for OR in state 271 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 276 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 277 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 277 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 277 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 277 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 277 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 277 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 277 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 277 resolved as shift
WARNING: shift/reduce conflict for IF in state 277 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 277 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 277 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 277 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 277 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 278 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 278 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 278 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 278 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 278 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 278 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 278 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 278 resolved as shift
WARNING: shift/reduce conflict for IF in state 278 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 278 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 278 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 278 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 278 resolved as shift
WARNING: shift/reduce conflict for NOT_SYMBOL in state 279 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 281 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 281 resolved as shift
WARNING: shift/reduce conflict for IF in state 281 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 281 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 281 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 281 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 281 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 283 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 283 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 283 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 283 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 283 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 283 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 283 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 283 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 288 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 288 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 288 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 288 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 288 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 288 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 288 resolved as shift
WARNING: shift/reduce conflict for IF in state 288 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 288 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 288 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 288 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 288 resolved as shift
WARNING: shift/reduce conflict for AND in state 292 resolved as shift
WARNING: shift/reduce conflict for OR in state 292 resolved as shift
WARNING: shift/reduce conflict for AND in state 293 resolved as shift
WARNING: shift/reduce conflict for OR in state 293 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 296 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 296 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 296 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 296 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 296 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 296 resolved as shift
WARNING: shift/reduce conflict for MOD in state 296 resolved as shift
WARNING: shift/reduce conflict for POW in state 296 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 296 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 296 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 296 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 296 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 296 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 296 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 296 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 296 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for AND in state 296 resolved as shift
WARNING: shift/reduce conflict for OR in state 296 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 297 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 297 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 297 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 297 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 297 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 297 resolved as shift
WARNING: shift/reduce conflict for MOD in state 297 resolved as shift
WARNING: shift/reduce conflict for POW in state 297 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 297 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 297 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 297 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 297 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 297 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 297 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 297 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 297 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 297 resolved as shift
WARNING: shift/reduce conflict for AND in state 297 resolved as shift
WARNING: shift/reduce conflict for OR in state 297 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 298 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 298 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 298 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 298 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 298 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 298 resolved as shift
WARNING: shift/reduce conflict for MOD in state 298 resolved as shift
WARNING: shift/reduce conflict for POW in state 298 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 298 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 298 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 298 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 298 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 298 resolved as shift
WARNING: shift/reduce conflict for AND in state 298 resolved as shift
WARNING: shift/reduce conflict for OR in state 298 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 299 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 299 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 299 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 299 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 299 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 299 resolved as shift
WARNING: shift/reduce conflict for MOD in state 299 resolved as shift
WARNING: shift/reduce conflict for POW in state 299 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 299 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 299 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 299 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 299 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 299 resolved as shift
WARNING: shift/reduce conflict for AND in state 299 resolved as shift
WARNING: shift/reduce conflict for OR in state 299 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 300 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 300 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 300 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 300 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 300 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 300 resolved as shift
WARNING: shift/reduce conflict for MOD in state 300 resolved as shift
WARNING: shift/reduce conflict for POW in state 300 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 300 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 300 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 300 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 300 resolved as shift
WARNING: shift/reduce conflict for AND in state 300 resolved as shift
WARNING: shift/reduce conflict for OR in state 300 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 301 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 301 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 301 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 301 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 301 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 301 resolved as shift
WARNING: shift/reduce conflict for MOD in state 301 resolved as shift
WARNING: shift/reduce conflict for POW in state 301 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 301 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 301 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 301 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 301 resolved as shift
WARNING: shift/reduce conflict for AND in state 301 resolved as shift
WARNING: shift/reduce conflict for OR in state 301 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 302 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 302 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 302 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 302 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 302 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 302 resolved as shift
WARNING: shift/reduce conflict for MOD in state 302 resolved as shift
WARNING: shift/reduce conflict for POW in state 302 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 302 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 302 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 302 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 302 resolved as shift
WARNING: shift/reduce conflict for AND in state 302 resolved as shift
WARNING: shift/reduce conflict for OR in state 302 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 303 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 303 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 303 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 303 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 303 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 303 resolved as shift
WARNING: shift/reduce conflict for MOD in state 303 resolved as shift
WARNING: shift/reduce conflict for POW in state 303 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 303 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 303 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 303 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 303 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 303 resolved as shift
WARNING: shift/reduce conflict for AND in state 303 resolved as shift
WARNING: shift/reduce conflict for OR in state 303 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 304 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 304 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 304 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 304 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 304 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 304 resolved as shift
WARNING: shift/reduce conflict for MOD in state 304 resolved as shift
WARNING: shift/reduce conflict for POW in state 304 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 304 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 304 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 304 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 304 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 304 resolved as shift
WARNING: shift/reduce conflict for AND in state 304 resolved as shift
WARNING: shift/reduce conflict for OR in state 304 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 305 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 305 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 305 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 305 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 305 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 305 resolved as shift
WARNING: shift/reduce conflict for MOD in state 305 resolved as shift
WARNING: shift/reduce conflict for POW in state 305 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 305 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 305 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 305 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 305 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 305 resolved as shift
WARNING: shift/reduce conflict for AND in state 305 resolved as shift
WARNING: shift/reduce conflict for OR in state 305 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 306 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 306 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 306 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 306 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 306 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 306 resolved as shift
WARNING: shift/reduce conflict for MOD in state 306 resolved as shift
WARNING: shift/reduce conflict for POW in state 306 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 306 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 306 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 306 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 306 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 306 resolved as shift
WARNING: shift/reduce conflict for AND in state 306 resolved as shift
WARNING: shift/reduce conflict for OR in state 306 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 307 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 307 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 307 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 307 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 307 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 307 resolved as shift
WARNING: shift/reduce conflict for MOD in state 307 resolved as shift
WARNING: shift/reduce conflict for POW in state 307 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 307 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 307 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 307 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 307 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 307 resolved as shift
WARNING: shift/reduce conflict for AND in state 307 resolved as shift
WARNING: shift/reduce conflict for OR in state 307 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 308 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 308 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 308 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 308 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 308 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 308 resolved as shift
WARNING: shift/reduce conflict for MOD in state 308 resolved as shift
WARNING: shift/reduce conflict for POW in state 308 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 308 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 308 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 308 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 308 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 308 resolved as shift
WARNING: shift/reduce conflict for AND in state 308 resolved as shift
WARNING: shift/reduce conflict for OR in state 308 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 309 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 309 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 309 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 309 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 309 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 309 resolved as shift
WARNING: shift/reduce conflict for MOD in state 309 resolved as shift
WARNING: shift/reduce conflict for POW in state 309 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 309 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 309 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 309 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 309 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for AND in state 309 resolved as shift
WARNING: shift/reduce conflict for OR in state 309 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 310 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 310 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 310 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 310 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 310 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 310 resolved as shift
WARNING: shift/reduce conflict for MOD in state 310 resolved as shift
WARNING: shift/reduce conflict for POW in state 310 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 310 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 310 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 310 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 310 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for AND in state 310 resolved as shift
WARNING: shift/reduce conflict for OR in state 310 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 311 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 311 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 311 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 311 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 311 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 311 resolved as shift
WARNING: shift/reduce conflict for MOD in state 311 resolved as shift
WARNING: shift/reduce conflict for POW in state 311 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 311 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 311 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 311 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 311 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 311 resolved as shift
WARNING: shift/reduce conflict for AND in state 311 resolved as shift
WARNING: shift/reduce conflict for OR in state 311 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 312 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 312 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 312 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 312 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 312 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 312 resolved as shift
WARNING: shift/reduce conflict for MOD in state 312 resolved as shift
WARNING: shift/reduce conflict for POW in state 312 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 312 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 312 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 312 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 312 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 312 resolved as shift
WARNING: shift/reduce conflict for AND in state 312 resolved as shift
WARNING: shift/reduce conflict for OR in state 312 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 313 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 313 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 313 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 313 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 313 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 313 resolved as shift
WARNING: shift/reduce conflict for MOD in state 313 resolved as shift
WARNING: shift/reduce conflict for POW in state 313 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 313 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 313 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 313 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 313 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 313 resolved as shift
WARNING: shift/reduce conflict for AND in state 313 resolved as shift
WARNING: shift/reduce conflict for OR in state 313 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 314 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 314 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 314 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 314 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 314 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 314 resolved as shift
WARNING: shift/reduce conflict for MOD in state 314 resolved as shift
WARNING: shift/reduce conflict for POW in state 314 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 314 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 314 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 314 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 314 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 314 resolved as shift
WARNING: shift/reduce conflict for AND in state 314 resolved as shift
WARNING: shift/reduce conflict for OR in state 314 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 315 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 315 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 315 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 315 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 315 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 315 resolved as shift
WARNING: shift/reduce conflict for MOD in state 315 resolved as shift
WARNING: shift/reduce conflict for POW in state 315 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 315 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 315 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 315 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 315 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 315 resolved as shift
WARNING: shift/reduce conflict for AND in state 315 resolved as shift
WARNING: shift/reduce conflict for OR in state 315 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 316 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 316 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 316 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 316 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 316 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 316 resolved as shift
WARNING: shift/reduce conflict for MOD in state 316 resolved as shift
WARNING: shift/reduce conflict for POW in state 316 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 316 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 316 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 316 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 316 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 316 resolved as shift
WARNING: shift/reduce conflict for AND in state 316 resolved as shift
WARNING: shift/reduce conflict for OR in state 316 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 317 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 317 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 317 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 317 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 317 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 317 resolved as shift
WARNING: shift/reduce conflict for MOD in state 317 resolved as shift
WARNING: shift/reduce conflict for POW in state 317 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 317 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 317 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 317 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 317 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 317 resolved as shift
WARNING: shift/reduce conflict for AND in state 317 resolved as shift
WARNING: shift/reduce conflict for OR in state 317 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 318 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 318 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 318 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 318 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 318 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 318 resolved as shift
WARNING: shift/reduce conflict for MOD in state 318 resolved as shift
WARNING: shift/reduce conflict for POW in state 318 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 318 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 318 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 318 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 318 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 318 resolved as shift
WARNING: shift/reduce conflict for AND in state 318 resolved as shift
WARNING: shift/reduce conflict for OR in state 318 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 319 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 319 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 319 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 319 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 319 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 319 resolved as shift
WARNING: shift/reduce conflict for MOD in state 319 resolved as shift
WARNING: shift/reduce conflict for POW in state 319 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 319 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 319 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 319 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 319 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 319 resolved as shift
WARNING: shift/reduce conflict for AND in state 319 resolved as shift
WARNING: shift/reduce conflict for OR in state 319 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 320 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 320 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 320 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 320 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 320 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 320 resolved as shift
WARNING: shift/reduce conflict for MOD in state 320 resolved as shift
WARNING: shift/reduce conflict for POW in state 320 resolved as shift
WARNING: shift/reduce conflict for OR_SYMBOL in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_XOR_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for COMBINED_COMPARISON_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 320 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for LESSERTHAN in state 320 resolved as shift
WARNING: shift/reduce conflict for LESSERTHANEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for CASE_EQUALITY in state 320 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 320 resolved as shift
WARNING: shift/reduce conflict for MATCHED_STRINGS_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for OPPOSITE_MATCHED_STRINGS_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_LEFT_SHIFT_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for BINARY_RIGHT_SHIFT_OP in state 320 resolved as shift
WARNING: shift/reduce conflict for AND in state 320 resolved as shift
WARNING: shift/reduce conflict for OR in state 320 resolved as shift
WARNING: shift/reduce conflict for AND in state 325 resolved as shift
WARNING: shift/reduce conflict for OR in state 325 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 325 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 358 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 358 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 358 resolved as shift
WARNING: shift/reduce conflict for AND in state 358 resolved as shift
WARNING: shift/reduce conflict for OR in state 358 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 359 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 360 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 366 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 366 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 366 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 366 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 366 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 366 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 366 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 366 resolved as shift
WARNING: shift/reduce conflict for IF in state 366 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 366 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 366 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 366 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 366 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 367 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 367 resolved as shift
WARNING: shift/reduce conflict for BINARY_AND_OP in state 367 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 367 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 367 resolved as shift
WARNING: shift/reduce conflict for UNARY_OP in state 367 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 367 resolved as shift
WARNING: shift/reduce conflict for LKEY in state 367 resolved as shift
WARNING: shift/reduce conflict for IF in state 367 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 367 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 367 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 367 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 367 resolved as shift
WARNING: shift/reduce conflict for AND in state 385 resolved as shift
WARNING: shift/reduce conflict for OR in state 385 resolved as shift
WARNING: shift/reduce conflict for AND in state 399 resolved as shift
WARNING: shift/reduce conflict for OR in state 399 resolved as shift
WARNING: shift/reduce conflict for AND in state 400 resolved as shift
WARNING: shift/reduce conflict for OR in state 400 resolved as shift
WARNING: shift/reduce conflict for = in state 402 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 427 resolved as shift
WARNING: shift/reduce conflict for AND in state 464 resolved as shift
WARNING: shift/reduce conflict for OR in state 464 resolved as shift
WARNING: shift/reduce conflict for AND in state 465 resolved as shift
WARNING: shift/reduce conflict for OR in state 465 resolved as shift
WARNING: shift/reduce conflict for AND in state 466 resolved as shift
WARNING: shift/reduce conflict for OR in state 466 resolved as shift
WARNING: shift/reduce conflict for AND in state 467 resolved as shift
WARNING: shift/reduce conflict for OR in state 467 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 470 resolved as shift
WARNING: shift/reduce conflict for AND in state 506 resolved as shift
WARNING: shift/reduce conflict for OR in state 506 resolved as shift
WARNING: shift/reduce conflict for AND in state 526 resolved as shift
WARNING: shift/reduce conflict for OR in state 526 resolved as shift
WARNING: shift/reduce conflict for AND in state 527 resolved as shift
WARNING: shift/reduce conflict for OR in state 527 resolved as shift
WARNING: shift/reduce conflict for AND in state 541 resolved as shift
WARNING: shift/reduce conflict for OR in state 541 resolved as shift
WARNING: shift/reduce conflict for AND in state 542 resolved as shift
WARNING: shift/reduce conflict for OR in state 542 resolved as shift
WARNING: shift/reduce conflict for AND in state 548 resolved as shift
WARNING: shift/reduce conflict for OR in state 548 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (expr -> command)
WARNING: rejected rule (call -> command) in state 17
WARNING: reduce/reduce conflict in state 18 resolved using rule (call -> function)
WARNING: rejected rule (primary -> function) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (primary -> variable)
WARNING: rejected rule (lhs -> variable) in state 19
WARNING: reduce/reduce conflict in state 21 resolved using rule (literal -> IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 21
WARNING: reduce/reduce conflict in state 74 resolved using rule (literal -> IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 74
WARNING: reduce/reduce conflict in state 118 resolved using rule (primary -> variable)
WARNING: rejected rule (lhs -> variable) in state 118
WARNING: reduce/reduce conflict in state 258 resolved using rule (expr -> arg)
WARNING: rejected rule (args -> arg) in state 258
WARNING: reduce/reduce conflict in state 274 resolved using rule (primary -> primary LBRACKET RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET RBRACKET) in state 274
WARNING: reduce/reduce conflict in state 276 resolved using rule (lhs -> primary DOT IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 276
WARNING: reduce/reduce conflict in state 279 resolved using rule (primary -> primary UNARY_OP IDENTIFIER)
WARNING: rejected rule (operation -> IDENTIFIER) in state 279
WARNING: reduce/reduce conflict in state 287 resolved using rule (expr -> command)
WARNING: rejected rule (call -> command) in state 287
WARNING: reduce/reduce conflict in state 287 resolved using rule (expr -> command)
WARNING: rejected rule (call_args -> command) in state 287
WARNING: reduce/reduce conflict in state 289 resolved using rule (call -> function)
WARNING: rejected rule (primary -> function) in state 289
WARNING: reduce/reduce conflict in state 349 resolved using rule (literal -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 349
WARNING: reduce/reduce conflict in state 368 resolved using rule (primary -> primary LBRACKET RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET RBRACKET) in state 368
WARNING: reduce/reduce conflict in state 392 resolved using rule (primary -> primary LBRACKET args RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET args RBRACKET) in state 392
WARNING: reduce/reduce conflict in state 447 resolved using rule (primary -> primary LBRACKET args RBRACKET)
WARNING: rejected rule (lhs -> primary LBRACKET args RBRACKET) in state 447
